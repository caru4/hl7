// Code generated by "hl7fetch -pkgdir h280 -root ./genjson -version 2.8"; DO NOT EDIT.

package h280

import "time"

// Authorization Information
//
// This data type specifies the identifier or code for an insurance authorization instance and its associated detail.
//
// Note: Replaces the CM data type used in sections 6.5.6.14 IN1-14, as of v2.5.
type AUI struct {
	HL7                 HL7Name `hl7:",name=AUI,len=0,type=d"`
	AuthorizationNumber ST      `hl7:"1,display=Identifier assigned to the authorization."`
	Date                DT      `hl7:"2,format=YMD,display=Date of authorization."`
	Source              ST      `hl7:"3,display=Source of authorization."`
}

// Charge Code And Date
//
// Specifies whether a charge action is based on an invocation event or is time-based.
//
// Note: Replaces the CM data type used in section 4.5.2.1 BLG-1, as of v2.5.
type CCD struct {
	HL7             HL7Name `hl7:",name=CCD,len=0,type=d"`
	InvocationEvent ID      `hl7:"1,required,len=1,table=0100,display=Specifies the code for the event precipitating/triggering the charge activity. Refer to HL7 Table 0100 - Invocation event for valid values."`
	DateTime        DTM     `hl7:"2,format=YMDHM,display=The second component is used to express the exact time to charge for the ordered service; it is used only when the CCD.1 value is T. When used- it is expressed as a DTM data type."`
}

// Coded With No Exceptions
//
// Specifies a coded element and its associated detail. The CNE data type is used when a required or mandatory coded field is
// needed. The specified HL7 table or imported or externally defined coding system must be used and may not be extended with
// local values. Text may not replace the code. A CNE field must have an HL7 defined or external table associated with it.  A CNE
// field may be context sensitive such that a choice of explicit coding systems might be designated. This allows for realm
// and other types of specificity. Every effort will be made to enumerate the valid coding system(s) to be specified in the
// 3rd component, however, the standards body realizes that this is impossible to fully enumerate.
//
// Note:	The presence of two sets of equivalent codes in this data type is semantically different from a repetition of a CNE-type
// field. With repetition, several distinct codes (with distinct meanings) may be transmitted.
//
// Example 1: The drug must be coded and must be taken from the specified coding system. The coding system is an external coding
// system. Example is derived from FT1-26.
// |0006-0106-58^Prinivil 10mg oral tablet^NDC|
//
// Example 2: Consent mode must be coded and must be taken from the specified coding system. The coding system is an HL7 code
// table. Example is taken from CON-10.
// |V^Verbal^HL70497^^^^2.8|
//
// As of v2.7 a third tuple, formerly known as triplet, has been added  to the CNE data type. Additionally, 3 new components were
// added to each tuple such that each tuple now has a total of 7 components. The Original Text component applies to the CNE as
// a whole.
type CNE struct {
	HL7                                  HL7Name `hl7:",name=CNE,len=0,type=d"`
	Identifier                           ST      `hl7:"1,required,display=The first component contains the sequence of characters (the code) that uniquely identifies the item being referenced by the CNE.2. Different coding schemes will have different elements here.  Usage Note: The identifier is required and must be a valid code."`
	Text                                 ST      `hl7:"2,display=The second component contains the descriptive or textual name of the identifier- e.g.- myocardial infarction or X-ray impression. This is the corresponding text assigned by the coding system to the identifier.  Usage Note: Text description of code is optional but its use should be encouraged since it makes messages easier to review for accuracy- especially during interface testing and debugging."`
	NameOfCodingSystem                   ID      `hl7:"3,len=12,table=0396,display=The third component contains the code for the name of the coding system from which the value in CNE.1 is obtained. Refer to HL7 Table 0396 - Coding Systems in Chapter 2C- Code Tables- for valid values. Each coding system is assigned a unique identifier.  As of v2.7 this component is required when CNE.1 is populated and CNE.14 is not populated. Both CNE.3 and CNE.14 may be populated. Receivers should not identify a code based on its position within the tuples (Identifier- Alternate Identifier- or Second Alternate Identifier) or position within a repeating field. Instead- the receiver should always examine the codingSystem as specified in CNE.3 and/or CNE.14 the Coding System component or the Coding System OID for the tuple.The combination of the identifier and name of coding system represent a unique concept for a data item.  Some organizations that publish code sets author more than one. The coding system- then- to be unique- is a concatenation of the name of the coding authority organization and the name of its code set or table. When an HL7 table is used for a CNE data type- the name of coding system component is defined as HL7nnnn where nnnn is the HL7 table number. Similarly- ISO tables will be named ISOnnnn- where nnnn is the ISO table number.  Usage Note: The following statement is retained for backward compatibility as of v2.7. Best practice would recommend that this component always be populated. However- if the field narrative explicitly states 'Refer to HL7 Table nnnn for valid values‚Äù- and- if the sending and receiving systems are HL7 compliant- the coding system would be known from the standard.  This would be similar to a field with an ID data type- except that there is a second triplet in which to express an alternate code."`
	AlternateIdentifier                  ST      `hl7:"4,display=A sequence of characters that uniquely identifies an alternate code. Analogous to CNE.1 Identifier.   Usage Notes: The Alternate Identifier is used to represent the local or user seen code as described. If present- it obeys the same rules of use and interpretation as described for component 1. If both are present- the identifiers in component 4 and component 1 should have exactly the same meaning- i.e.- they should be exact synonyms."`
	AlternateText                        ST      `hl7:"5,display=The descriptive or textual name of the alternate identifier. Analogous to CNE.2 Text.   Usage Notes: If present- CNE.5 obeys the same rules of use and interpretation as described for CNE.2. "`
	NameOfAlternateCodingSystem          ID      `hl7:"6,len=12,table=0396,display=Identifies the coding scheme being used in the alternate identifier component.  Analogous to  CNE.3 Name of Coding System.  Refer to HL7 Table 0396 - Coding Systems in Chapter 2C- Code Tables- for valid values.  As of v2.7 this component is required when CNE.4 is populated and CNE.17 is not populated. Both CNE.6 and CNE.17 may be populated. Receivers should not identify a code based on its position within the tuples (Identifier- Alternate Identifier- or Second Alternate Identifier) or position within a repeating field. Instead- the receiver should always examine the codingSystem as specified in CNE.6 and/or CNE.17- the 'Coding System' component or the 'Coding System OID'- for the tuple.  Usage Notes: If present- CNE.6 obeys the same rules of use and interpretation as described for CNE.3."`
	CodingSystemVersionID                ST      `hl7:"7,conditional,display=The version ID for the coding system identified by CNE.3. It belongs conceptually to components 1-3 and appears here only for reasons of backward compatibility.  Usage Note: If the coding system is any system other than an 'HL7 coding system-' version ID must be valued with an actual version ID. If the coding system is 'HL7 coding system-' version ID may have an actual value or it may be absent. If version ID is absent- it will be interpreted to have the same value as the HL7 version number in the message header. Text description of code is optional but its use should be encouraged since it makes messages easier to review for accuracy- especially during interface testing and debugging."`
	AlternateCodingSystemVersionID       ST      `hl7:"8,display=The version ID for the coding system identified by CNE.6.  It belongs conceptually to the group of Alternate components (see note 2.A.1) and appears here only for reasons of backward compatibility. Analogous to CNE.7 Coding System Version ID.  Usage Notes: If present- CNE.8 obeys the same rules of use and interpretation as described for CNE.7."`
	OriginalText                         ST      `hl7:"9,display=The text as seen and/or selected by the user who entered the data. Original text can be used in a structured user interface to capture what the user saw as a representation of the code on the data input screen- or in a situation where the user dictates or directly enters text- it is the text entered or uttered by the user. In a situation where the code is assigned sometime after the text was entered- original text is the text or phrase used as the basis for assigning the code."`
	SecondAlternateIdentifier            ST      `hl7:"10,display=A sequence of characters that uniquely identifies a second alternate code. Analogous to CN-1 Identifier."`
	SecondAlternateText                  ST      `hl7:"11,display=The descriptive or textual name of the Second Alternate Identifier. Analogous to CNE.2 Text."`
	NameOfSecondAlternateCodingSystem    ID      `hl7:"12,len=12,table=0396,display=Identifies the coding scheme being used in the Second Alternate Identifier component. Analogous to CNE.3 Name of Coding System.  Refer to HL7 Table 0396 - Coding Systems in Chapter 2C- Code Tables- for valid values.  As of v2.7 this component is required when CNE.10 is populated and CNE.20 is not populated. Both CNE.12 and CNE.20 may be populated. Receivers should not identify a code based on its position within the tuples (Identifier- Alternate Identifier- or Second Alternate Identifier) or position within a repeating field. Instead- the receiver should always examine the codingSystem as specified in CNE.12 and/or CNE.20- the 'Coding System' component or the 'Coding System OID'- for the tuple."`
	SecondAlternateCodingSystemVersionID ST      `hl7:"13,conditional,display=This component carries the version for the coding system identified by components 10-12. Analogous to CNE.7 Coding System Version ID."`
	CodingSystemOid                      ST      `hl7:"14,conditional,display=This component contains the ISO Object Identifier (OID) for the coding system or value set named in CNE.3. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined code systems the OID registered in the HL7 OID registry SHALL be used.   This component is required when CNE.1 is populated and CNE.3 is not populated. Both CNE.3 and CNE.14 may be populated."`
	ValueSetOid                          ST      `hl7:"15,display=This component contains the ISO Object Identifier (OID) to allow identification of the value set from which the value in CNE.1 is obtained. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined value sets- the OID registered in the HL7 OID registry SHALL be used.   A value set may or need not be present irrespective of other fields. Note that if a code is provided- the meaning of the code must come from the definition of the code in the code system. The meaning of the code SHALL NOT depend on the value set.  Applications SHALL NOT be required to interpret the code in light of the valueSet- and they SHALL NOT reject an instance because of the presence or absence of any or a particular value set/ value set version ID."`
	ValueSetVersionID                    DTM     `hl7:"16,conditional,format=YMDHM,display=This component carries the version for the value set identified by CNE.15. The version is a date. The date is the date/time that the value set being used was published.  Value set version ID is required if CNE.15 is populated."`
	AlternateCodingSystemOid             ST      `hl7:"17,conditional,display=This component contains the ISO Object Identifier (OID) for the coding system or value set named in CNE.6. Analogous to CNE.14 OID for Coding System.  The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined code systems the OID registered in the HL7 OID registry SHALL be used.   This component is required when CNE.4 is populated and CNE.6 is not populated. Both CNE.6 and CNE.17 may be populated."`
	AlternateValueSetOid                 ST      `hl7:"18,display=This component contains the ISO Object Identifier (OID) to allow identification of the value set from which the value in CNE.4 is obtained. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined value sets- the OID registered in the HL7 OID registry SHALL be used.   A value set may or need not be present irrespective of other fields. Note that if a code is provided- the meaning of the code must come from the definition of the code in the code system. The meaning of the code SHALL NOT depend on the value set.  Applications SHALL NOT be required to interpret the code in light of the valueSet- and they SHALL NOT reject an instance because of the presence or absence of any or a particular value set/ value set version ID."`
	AlternateValueSetVersionID           DTM     `hl7:"19,conditional,format=YMDHM,display=This component carries the version for the value set identified by CNE.18. The version is a date. The date is the date/time that the value set being used was published.  Value set version ID is required if CNE.18 is populated."`
	SecondAlternateCodingSystemOid       ST      `hl7:"20,conditional,display=This component contains the ISO Object Identifier (OID) from which the value in CNE.12 is obtained. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined numbers- the OID registered in the HL7 OID registry should be used.   This component is required when CNE.4 is populated and neither CNE.6 nor CNE.18 is populated. In short either the CNE.6 or the CNE.14 or CNE.17 must be populated when CNE.4 is populated."`
	SecondAlternateValueSetOid           ST      `hl7:"21,display=This component contains the ISO Object Identifier (OID) to allow identification of the value set from which the value in CNE.10 is obtained. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined value sets- the OID registered in the HL7 OID registry SHALL be used.   A value set may or need not be present irrespective of other fields. Note that if a code is provided- the meaning of the code must come from the definition of the code in the code system. The meaning of the code SHALL NOT depend on the value set.  Applications SHALL NOT be required to interpret the code in light of the valueSet- and they SHALL NOT reject an instance because of the presence or absence of any or a particular value set/ value set version ID."`
	SecondAlternateValueSetVersionID     DTM     `hl7:"22,conditional,format=YMDHM,display=This component carries the version for the value set identified by CNE.21. The version is a date. The date is the date/time that the value set being used was published.  Value set version ID is required if CNE.21 is populated."`
}

// Composite Id Number And Name Simplified
//
// Specifies a person using both an identifier and the person‚Äôs name. Retained for backward compatibility only as of v2.6.
//
// Note: Restores the original data type CN as was initially implementable in the CM used in sections 4.5.3.32 and 7.4.1.32
// - (OBR-32), 4.5.3.33 and 7.4.1.33 - ( OBR-33), 4.5.3.34 and 7.4.1.34 - ( OBR-34), 4.5.3.35 and 7.4.1.35 - (OBR-35). Components
// 7 and 8, however, have been promoted to data type IS to be consistent with current practice without violating backward compatibility.
//
// Retained for backward compatibility only in version 2.6. Fields associated with this data type have been replaced by the
// ROL segment
type CNN struct {
	HL7                                         HL7Name `hl7:",name=CNN,len=0,type=d"`
	IDNumber                                    ST      `hl7:"1,display=Coded ID according to a user-defined table. If the first component is present- either CNN.8 or CNN.9- or both CNN.10 and CNN.11- must be valued."`
	FamilyName                                  ST      `hl7:"2,display=This component contains the person's family name in a string format."`
	GivenName                                   ST      `hl7:"3,display=Used to specify a first name"`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,display=Second And Further Given Names Or Initials Thereof"`
	Suffix                                      ST      `hl7:"5,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"7,table=0360,display=Used to specify an educational degree (e.g.- MD). Refer to User-defined Table 0360 ‚Äì Degree/license/certificate in Chapter 2C- Code Tables- for suggested values."`
	SourceTable                                 IS      `hl7:"8,conditional,table=0297,display=Refer to User-defined Table 0297 - CN ID source in Chapter 2C- Code Tables- for suggested values. Used to delineate the first component. If component 1 is valued- either CNN.8 or CNN.9- or both CNN.10 and CNN.11- must be valued."`
	AssigningAuthorityNamespaceID               IS      `hl7:"9,conditional,table=0363,display=See section- 2.A.14.4- 'Assigning Authority (HD)' for definition. Refer to User-defined Table 0363 ‚Äì Assigning Authority in Chapter 2C- Code Tables- for suggested values. Assigning Authority is normally expressed as an HD data type- but has been flattened to 3 components here (CNN.9- CNN.10 and CNN.11) in this data type so that it may be fully expressed. Also note that if additional components are added to the HD data type in the future- adjustment will need to be made accordingly to this data type.  If component 1 is valued- either CNN.8 or CNN.9- or both CNN.10 and CNN.11- must be valued."`
	AssigningAuthorityUniversalID               ST      `hl7:"10,conditional,display=If CNN.11 is valued- this component must be valued. If component 1 is valued- either CNN.8 or CNN.9- or both CNN.10 and CNN.11- must be valued."`
	AssigningAuthorityUniversalIDType           ID      `hl7:"11,conditional,len=6,table=0301,display=If CNN.10 is valued- this component must be valued. If component 1 is valued- either CNN.8 or CNN.9- or both CNN.10 and CNN.11- must be valued."`
}

// Composite Price
//
// Note: This data type is often used to define a repeating field within a given segment.
//
// Example:
// |100.00&USD^UP^0^9^min^P~50.00&USD^UP^10^59^min^P~10.00&USD^UP^60^999^P~50.00&USD^AP~200.00&USD^PF~80.00&USD^DC|
type CP struct {
	HL7        HL7Name `hl7:",name=CP,len=0,type=d"`
	Price      MO      `hl7:"1,required,display=The only required component; usually containing a decimal point. Note that each component of the MO data type (Section 2.A.41- 'MO - money') is a subcomponent here."`
	PriceType  ID      `hl7:"2,len=2,table=0205,display=A coded value- data type ID.  Refer to HL7 Table 0205 ‚Äì Price Type in Chapter 2C- Code Tables- for valid values."`
	FromValue  NM      `hl7:"3,display=The number specifying the lower limit or boundary of the range. This component- together with the CP.4 component- specifies the 'price range'. The range can be defined as either time or quantity. For example- the range can indicate that the first 10 minutes of the procedure has one price. Another repetition of the data type can use the range to specify that the following 10 to 60 minutes of the procedure is charged at another price per; a final repetition can specify that the final 60 to N minutes of the procedure at a third price.  Note that- if the CP.2 Price Type component is TP- both CP.3 and CP.4 may be null."`
	ToValue    NM      `hl7:"4,display=The number specifying the high limit or boundary of the range."`
	RangeUnits *CWE    `hl7:"5,conditional,display=This component describes the units associated with the range- e.g.- seconds- minutes- hours- days- quantity (i.e.- count).  As of v2.7 the Externally-defined Unified Code for Units of Measure (UCUM) case sensitive code is the required code for units of measure.  Refer to the externally-defined table 'Unified Code for Units of Measure' (UCUM) [http://aurora.rg.iupui.edu/UCUM] for valid values. Local codes may be transmitted in addition to UCUM codes.   This component is required if CP.3 From Value and/or CP.4 To Value are present."`
	RangeType  ID      `hl7:"6,len=1,table=0298,display=Refer to HL7 Table 0298 - CP Range Type for valid values."`
}

// Composite Quantity With Units
//
// Note: CQ cannot be legally expressed when embedded within another data type. Its use is constrained to a segment field.
//
// Examples:
// kilograms is an ISO unit
// |123.7^kg|
//
// weight in pounds is a customary US unit defined within ANSI+.
// |150^lb&&ANSI+|
type CQ struct {
	HL7      HL7Name `hl7:",name=CQ,len=0,type=d"`
	Quantity NM      `hl7:"1,display=This component specifies the numeric quantity or amount of an entity."`
	Units    *CWE    `hl7:"2,display=This component species the units in which the quantity is expressed.  As of v2.7 the externally-defined Unified Code for Units of Measure (UCUM) case sensitive code is the required code for units of measure. Refer to the external table 'Unified Code for Units of Measure' (UCUM) [http://aurora.rg.iupui.edu/UCUM] for valid values. Local codes may be transmitted in addition to UCUM codes."`
}

// Coded With Exceptions
//
// Specifies a coded element and its associated detail. The CWE data type is used when 1) more than one table may be applicable
// or 2) the specified HL7 or externally defined table may be extended with local values or 3) when text is in place, the code
// may be omitted.
//
// The presence of two sets of equivalent codes in this data type is semantically different from a repetition of a CWE-type
// field. With repetition, several distinct codes (with distinct meanings) may be transmitted.
//
// Usage Notes:  The CWE data type should be used for coded fields with one or more of the following characteristics:
// - The identifier code (CWE.1) component is optional
// - The set of allowable values from which the identifier code is drawn may be extended on a site-specific basis
// - An exception identifier code may be encountered; that is, a code that is not defined in the value set (either model or site-extended).
//
// This is in contrast to the CNE data type, which requires a code from a non-extendable value set be sent in the identifier code
// component (CNE.1) in all cases (except, of course, if the entire field is empty and defined as optional at the segment level).
//
// As of v2.7 a third tuple, formerly known as triplet, has been added  to the CWE data type. Additionally, 3 new components were
// added to each tuple such that each tuple now has a total of 7 components. The Original Text component applies to the CWE as
// a whole.
type CWE struct {
	HL7                                  HL7Name `hl7:",name=CWE,len=0,type=d"`
	Identifier                           ST      `hl7:"1,display=The first component contains the sequence of characters (the code) that uniquely identifies the item being referenced by the CWE.2. Different coding schemes will have different elements here.  In the context of ‚ÄúData Missing‚Äù- described above in the Usage Note- refer to HL7 Table 0353 ‚Äì CWE Statuses for valid values."`
	Text                                 ST      `hl7:"2,display=The second component contains the descriptive or textual name of the identifier- e.g.- 'myocardial infarction' or 'X-ray impression'."`
	NameOfCodingSystem                   ID      `hl7:"3,conditional,len=12,table=0396,display=The third component contains the code for the name of the coding system from which the value in CWE.1 is obtained. Each coding system is assigned a unique identifier. As of v2.7 this component is required when CWE.1 is populated and CWE.14 is not populated. Both CWE.3 and CWE.14 may be populated. Receivers should not identify a code based on its position within the tuples (Identifier- Alternate Identifier- or Second Alternate Identifier) or position within a repeating field. Instead- the receiver should always examine the codingSystem as specified in CWE.3 and/or CWE.14- the 'Coding System' component or the 'Coding System OID' for the tuple.  Refer to HL7 Table 0396 ‚Äì Coding System in Chapter 2C- section 'Coding System Table' for valid values.   Refer to section 2.A.8.3- 'Name of Coding System (ID)' for a discussion of coding system conventions."`
	AlternateIdentifier                  ST      `hl7:"4,display=A sequence of characters that uniquely identifies an alternate code. Analogous to CWE.1- Identifier.   Usage Notes: The Alternate Identifier is used to represent the local or user seen code as described. If present- it obeys the same rules of use and interpretation as described for component 1. If both are present- the identifiers in component 4 and component 1 should have exactly the same meaning- i.e.- they should be exact synonyms."`
	AlternateText                        ST      `hl7:"5,display=The descriptive or textual name of the alternate identifier. Analogous to CWE.2 - Text.  See usage note in section introduction."`
	NameOfAlternateCodingSystem          ID      `hl7:"6,conditional,len=12,table=0396,display=Identifies the coding scheme being used in the alternate identifier component. Analogous to CWE.3 - Name of Coding System. See usage note in section introduction.  As of v2.7 this component is required when CWE.4 is populated and CWE.17 is not populated. Both CWE.6 and CWE.17 may be populated. Receivers should not identify a code based on its position within the tuples (Identifier- Alternate Identifier- or Second Alternate Identifier) or position within a repeating field. Instead- the receiver should always examine the coding System as specified in CWE.6 and/or CWE.17- the 'Coding System' component or the 'Coding System OID'- for the tuple."`
	CodingSystemVersionID                ST      `hl7:"7,conditional,display=This component carries the version for the coding system identified by components 1-3. If CWE.3 is populated with a value other than HL7nnnn or is of table type user-defined- version ID must be valued with an actual version ID.  If CWE.3 is populated with a value of HL7nnnn and nnnn is of table type HL7- version ID may have an actual value or it may be absent. If version ID is absent- it will be interpreted to have the same value as the HL7 version number in the message header. "`
	AlternateCodingSystemVersionID       ST      `hl7:"8,display=This component carries the version for the coding system identified by components 4-6. Analogous To CWE.7 - Coding System Version ID."`
	OriginalText                         ST      `hl7:"9,display=The text as seen and/or selected by the user who entered the data. Original text can be used in a structured user interface to capture what the user saw as a representation of the code on the data input screen- or in a situation where the user dictates or directly enters text- it is the text entered or uttered by the user. In a situation where the code is assigned sometime after the text was entered- original text is the text or phrase used as the basis for assigning the code."`
	SecondAlternateIdentifier            ST      `hl7:"10,display=A sequence of characters that uniquely identifies a second alternate code. Analogous to CWE.1- Identifier. "`
	SecondAlternateText                  ST      `hl7:"11,display=The descriptive or textual name of the alternate identifier. Analogous to CWE.2 - Text. See usage note in section introduction"`
	NameOfSecondAlternateCodingSystem    ID      `hl7:"12,conditional,len=12,table=0396,display=Identifies the coding scheme being used in the alternate identifier component. Analogous to CWE.3 Name of Coding System. See usage note in section introduction.  As of v2.7 this component is required when CWE.10 is populated and CWE.20 is not populated. Both CWE.6 and CWE.17 may be populated. Receivers should not identify a code based on its position within the tuples (Identifier- Alternate Identifier- or Second Alternate Identifier) or position within a repeating field. Instead- the receiver should always examine the coding System as specified in CWE.12 and/or CWE.20- the 'Coding System' component or the 'Coding System OID'- for the tuple."`
	SecondAlternateCodingSystemVersionID ST      `hl7:"13,display=This component carries the version for the coding system identified by components 10-12. Analogous to CWE.7 - Coding System Version ID."`
	CodingSystemOid                      ST      `hl7:"14,conditional,display=This component contains the ISO Object Identifier (OID) for the coding system or value set named in CWE.3. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined code systems the OID registered in the HL7 OID registry SHALL be used.   This component is required when CWE.1 is populated and CWE.3 is not populated. Both CWE.3 and CWE.14 may be populated."`
	ValueSetOid                          ST      `hl7:"15,display=This component contains the ISO Object Identifier (OID) to allow identification of the value set from which the value in CWE.1 is obtained. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined value sets- the OID registered in the HL7 OID registry SHALL be used.   A value set may or need not be present irrespective of other fields. Note that if a code is provided- the meaning of the code must come from the definition of the code in the code system. The meaning of the code SHALL NOT depend on the value set.  Applications SHALL NOT be required to interpret the code in light of the valueSet- and they SHALL NOT reject an instance because of the presence or absence of any or a particular value set/ value set version ID."`
	ValueSetVersionID                    DTM     `hl7:"16,conditional,format=YMDHM,display=This component carries the version for the value set identified by CWE.15. The version is a date. The date is the date/time that the value set being used was published.  Value set version ID is required if CWE.15 is populated."`
	AlternateCodingSystemOid             ST      `hl7:"17,conditional,display=This component contains the ISO Object Identifier (OID) for the coding system or value set named in CWE.6. Analogous to CWE.14 Coding System OID.   The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined code systems the OID registered in the HL7 OID registry SHALL be used.   This component is required when CWE.4 is populated and CWE.6 is not populated. Both CWE.6 and CWE.17 may be populated."`
	AlternateValueSetOid                 ST      `hl7:"18,display=This component contains the ISO Object Identifier (OID) to allow identification of the value set from which the value in CWE.4 is obtained. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined value sets- the OID registered in the HL7 OID registry SHALL be used.   A value set may or need not be present irrespective of other fields. Note that if a code is provided- the meaning of the code must come from the definition of the code in the code system. The meaning of the code SHALL NOT depend on the value set.  Applications SHALL NOT be required to interpret the code in light of the valueSet- and they SHALL NOT reject an instance because of the presence or absence of any or a particular value set/ value set version ID."`
	AlternateValueSetVersionID           DTM     `hl7:"19,conditional,format=YMDHM,display=This component carries the version for the value set identified by CWE.18. The version is a date. The date is the date/time that the value set being used was published.  Value set version ID is required if CWE.18 is populated."`
	SecondAlternateCodingSystemOid       ST      `hl7:"20,conditional,display=This component contains the ISO Object Identifier (OID) for the coding system or value set named in CWE.12. Analogous to CWE.14 - Coding System OID.   The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined code systems the OID registered in the HL7 OID registry SHALL be used.   This component is required when CWE.10 is populated and CWE.12 is not populated. Both CWE.12 and CWE.20 may be populated."`
	SecondAlternateValueSetOid           ST      `hl7:"21,display=This component contains the ISO Object Identifier (OID) to allow identification of the value set from which the value in CWE.10 is obtained. The value for this component is 2.16.840.1.113883.12.#### where  '####' is to be replaced by the HL7 table number in the case of an HL7 defined or user defined table. For externally defined value sets- the OID registered in the HL7 OID registry SHALL be used.   A value set may or need not be present irrespective of other fields. Note that if a code is provided- the meaning of the code must come from the definition of the code in the code system. The meaning of the code SHALL NOT depend on the value set.  Applications SHALL NOT be required to interpret the code in light of the valueSet- and they SHALL NOT reject an instance because of the presence or absence of any or a particular value set/ value set version ID."`
	SecondAlternateValueSetVersionID     DTM     `hl7:"22,conditional,format=YMDHM,display=This component carries the version for the value set identified by CWE.21. The version is a date. The date is the date/time that the value set being used was published.  Value set version ID is required if CWE.21 is populated."`
}

// Extended Composite Id With Check Digit
//
// This data type is used for specifying an identifier with its associated administrative detail.
//
// Note: The check digit and check digit scheme are null if ID is alphanumeric.
//
// Example:
// |1234567^4^M11^ADT01^MR^University Hospital|
type CX struct {
	HL7                         HL7Name `hl7:",name=CX,len=0,type=d"`
	IDNumber                    ST      `hl7:"1,required,display=The value of the identifier itself."`
	IdentifierCheckDigit        ST      `hl7:"2,display=A digit- or digits- exclusive of the identifier in CX.1- calculated by applying an algorithm to all or some of the digits in the number- which may be used to test validity of the non-check-digit identifier."`
	CheckDigitScheme            ID      `hl7:"3,len=3,table=0061,display=Contains the code identifying the check digit scheme employed.  Refer to HL7 Table 0061 - Check Digit Scheme for valid values.  Note: The check digit and code identifying check digit scheme are null if ID is alphanumeric."`
	AssigningAuthority          *HD     `hl7:"4,conditional,table=0363,display=The assigning authority is a unique name of the system (or organization or agency or department) that creates the data. As of v2.7- CX.4 Assigning Authority is required if neither CX.9 nor CX.10 are populated. Best practice is to always send an OID in the Assigning Authority component  Refer to User-defined Table 0363 - Assigning Authority for suggested values.  The reader is referred to the CX.9 and the CX.10 if there is a need to transmit values with semantic meaning for an assigning jurisdiction or assigning department or agency in addition to- or instead of- an assigning authority. However- all 3 components may be valued. If- in so doing- it is discovered that the values in CX.9 and/or CX.10 conflict with CX.4- the user would look to the Message Profile or other implementation agreement for a statement as to which takes precedence.  Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment.  By site agreement- implementers may continue to use User-defined Table 0300 ‚Äì Namespace ID for the first sub-component."`
	IdentifierTypeCode          ID      `hl7:"5,required,len=5,table=0203,display=A code corresponding to the type of identifier. As of v2.7- CX.5 Identifier Type Code is required. Refer to HL7 Table 0203 ‚Äì Identifier Type for suggested values."`
	AssigningFacility           *HD     `hl7:"6,display=The place or location identifier where the identifier was first assigned to the patient. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems.  Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component)- may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment."`
	EffectiveDate               DT      `hl7:"7,format=YMD,display=The first date- if known- on which the identifier is valid and active."`
	ExpirationDate              DT      `hl7:"8,format=YMD,display=The last date- if known- on which the identifier is valid and active."`
	AssigningJurisdiction       *CWE    `hl7:"9,conditional,display=The geo-political body that assigned the identifier in component 1. As of v2.7- Assigning Jurisdiction is required if neither CX.4 nor CX.10 are populated.   - Refer to HL7 Table 0399 ‚Äì Country Code for valid values if the administrative unit under whose jurisdiction the identifier was issued is a country.  - Refer to User-Defined Table 0347 ‚Äì State/Province for suggested values if the administrative unit under whose jurisdiction the identifier was issued is a state or province. This table is country specific. In the US- postal codes may be used.  - Refer to User-defined Table ‚Äì0289 County/Parish for suggested values if the administrative unit under whose jurisdiction the identifier was issued is a county or parish.  The reader is referred to the CX.4 if there is a need to transmit this information as an OID."`
	AssigningAgencyOrDepartment *CWE    `hl7:"10,conditional,display=The agency or department that assigned the identifier in component 1. As of v2.7- Assigning Agency or Department is required if neither CX.4 nor CX.9 are populated.  Refer to User-defined Table 0530 ‚Äì Organizations- agency- department for suggested values if the administrative unit under whose jurisdiction the identifier was issued is an organization- agency or department. This is populated with site-specific assigning authorities. It also should contain national or international codes when CX.5 Identifier Type Code may be assigned by more than one authority within a governmental or organizational unit. For example- a federal government may have 2 departments that assign a military identifier- its Veterans Affairs department and its Department of Defense. It is not recommended to include values for entities such as Social Security Administration (SSA)- Immigration and Naturalization Service (INS)- Center for Medicare and Medicaid Services (CMS) because they are included in the identifier type table. In these cases the name of the country plus the identifier type yields the correct interpretation of the identifier in component 1. Likewise- entries like department of motor vehicles (DMV) and licensing boards are not recommended for inclusion because the combination of state and identifier type yields the correct interpretation of the identifier in component 1. This approach is not to be confused with the detailed information provided in the Chapter 15 segments that have provision for specifying the precise granting body and issuing body information needed in personnel management messages.  Example 1: <Identifier> plus <Visa> yields a unique identifier.  Example 2: <identifier> plus <state> plus <DLN> yields a unique driver‚Äôs license number.  Example 3: <identifier> plus <country> plus <INS> yields a unique immigration number.  The reader is referred to the CX.4- if there is a need to transmit this information as an OID."`
	SecurityCheck               ST      `hl7:"11,display=This component is used to communicate a version code that may be assigned to the value given in CX.1 ID."`
	SecurityCheckScheme         ID      `hl7:"12,len=3,table=0904,display=This component is used to transmit information intended to validate the veracity of the supplied identifier or the presenter of the identifier. For example- this component may be used to ensure that the presenter of a credit card is an authorized user of that card.  Refer to HL7 Table 0904 - Security Check Scheme for valid values."`
}

// Daily Deductible Information
//
// This data type specifies the detail information for the daily deductible.
//
// Note: Replaces the CM data type used in section 6.5.7.30 IN2-30, as of v 2.5.
type DDI struct {
	HL7            HL7Name `hl7:",name=DDI,len=0,type=d"`
	DelayDays      NM      `hl7:"1,display=The number of days after which the daily deductible begins."`
	MonetaryAmount MO      `hl7:"2,required,display=The monetary amount of the deductible."`
	NumberOfDays   NM      `hl7:"3,display=The number of days to apply the deductible. If this component is not populated- it means that the number of days is indefinite."`
}

// Date And Institution Name
//
// Specifies the date and institution information where a staff member became active or inactive.
//
// Note: Replaces the CM data type used in sections 15.4.6.12 STF-12 and 15.4.6.14 STF-13, as of v 2.5.
type DIN struct {
	HL7             HL7Name `hl7:",name=DIN,len=0,type=d"`
	Date            DTM     `hl7:"1,required,format=YMDHM,display=Specifies the date when a staff member became active or inactive."`
	InstitutionName CWE     `hl7:"2,required,table=0531,display=Specifies the institution where a staff member is or was active. Refer to User-Defined Table 0531 - Institution for suggested values."`
}

// Discharge To Location And Date
//
// Specifies the healthcare facility to which the patient was discharged and the date.
//
// Note: Replaces the CM data type used in section 3.4.3.37 PV1-37, as of v 2.5.
type DLD struct {
	HL7                 HL7Name `hl7:",name=DLD,len=0,type=d"`
	DischargeToLocation CWE     `hl7:"1,required,table=0113,display=This component specifies the healthcare facility to which the patient was discharged. Refer to User-defined Table 0113 - Discharged to Location for suggested values."`
	EffectiveDate       DTM     `hl7:"2,format=YMDHM,display=Specifies the date on which the patient was discharged to a healthcare facility."`
}

// Driver's License Number
//
// This field contains the driver‚Äôs license information. For state or province refer to official postal codes for that country;
// for country refer to ISO 3166 for codes.
type DLN struct {
	HL7                         HL7Name `hl7:",name=DLN,len=0,type=d"`
	LicenseNumber               ST      `hl7:"1,required,display=This field contains the driver‚Äôs license number."`
	IssuingStateProvinceCountry *CWE    `hl7:"2,table=0333,display=Issuing authority for driver‚Äôs license. For state or province- refer to official postal codes for that country; for country- refer to ISO 3166 for codes. The ISO 3166 table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code. User-defined Table 0333 - Driver‚Äôs License Issuing Authority is used as the HL7 identifier for the user-defined table of values for this component"`
	ExpirationDate              DT      `hl7:"3,format=YMD,display=Expiration date (DT) for driver‚Äôs license."`
}

// Delta
//
// Describes the information that controls delta check warnings.
//
// Note: Replaces the CM data type used in section 8.8.4.9 ‚Äì OM2-9, as of v 2.5.
type DLT struct {
	HL7               HL7Name `hl7:",name=DLT,len=0,type=d"`
	NormalRange       *NR     `hl7:"1,display=Specifies the normal interval of the reference data."`
	NumericThreshold  NM      `hl7:"2,display=The numeric threshold of the change that is detected.   For example the threshold may be set to 10."`
	ChangeComputation ID      `hl7:"3,table=0523,display=Specifies if the change is computed as a percent change or as an absolute change. Refer to HL7 Table 0523 - Computation Type for valid values."`
	DaysRetained      NM      `hl7:"4,display=The length of time in days that the value is retained for computing delta checks."`
}

// Date/time Range
//
// Note: DR cannot be legally expressed when embedded within another data type. Its use is constrained to a segment field.
type DR struct {
	HL7                HL7Name `hl7:",name=DR,len=0,type=d"`
	RangeStartDateTime DTM     `hl7:"1,format=YMDHM,display=The first component contains the earliest date/time (time stamp) in the specified range."`
	RangeEndDateTime   DTM     `hl7:"2,format=YMDHM,display=The second component contains the latest date/time in the specified range. Note that the DTM (time stamp) data type allows the specification of precision."`
}

// Date
//
// # Specifies the century and year with optional precision to month and day
//
// The number of digits populated specifies the precision using the format specification YYYY[MM[DD]]
//
// Examples:
// |19880704|
// |199503|
//
// The DT data type does not follow the normal truncation pattern, and the truncation character is never valid in the DT data
// type. Instead, the truncation behavior is based on the semantics of dates.
//
// Unless specified in the context where the DT type  is used, the DT type may not be truncated. When a DT is truncated, the truncated
// form SHALL still be a valid DT type. Systems should always be able to persist full dates. Refer to Chapter 2, section 2.5.5.2
// "Truncation Pattern" for further information.
//
// Note: Prior to v2.3, this data type was specified in the format YYYYMMDD. As of v2.3, month and days are no longer required.
// By site-specific agreement, YYYYMMDD may be used where backward compatibility must be maintained.
type DT = time.Time

// Date/time
//
// Specifies a point in time using a 24-hour clock notation.
//
// The number of characters populated (excluding the time zone specification) specifies the precision.
//
// Format: YYYY[MM[DD[HH[MM[SS[.S[S[S[S]]]]]]]]][+/-ZZZZ].
//
// The time zone (+/-ZZZZ) is represented as +/-HHMM offset from Coordinated Universal Time (UTC) (formerly Greenwich Mean
// Time (GMT)), where +0000 or -0000 both represent UTC (without offset). The specific data representations used in the HL7
// encoding rules are compatible with ISO 8824-1987(E).
// Note that if the time zone is not included, the time zone defaults to that of the local time zone of the sender. Also note that
// a DTM valued field with the HHMM part set to "0000" represents midnight of the night extending from the previous day to the
// day given by the YYYYMMDD part.
//
// The HL7 Standard strongly recommends that all systems routinely send the time zone offset but does not require it. All HL7
// systems are required to accept the time zone offset, but its implementation is application specific. For many applications
// the time of interest is the local time of the sender. For example, an application in the Eastern Standard Time zone receiving
// notification of an admission that takes place at 11:00 PM in San Francisco on December 11 would prefer to treat the admission
// as having occurred on December 11 rather than advancing the date to December 12.
//
// Note: The time zone [+/-ZZZZ], when used, is restricted to legally-defined time zones and is represented in HHMM format.
//
// One exception to this rule would be a clinical system that processed patient data collected in a clinic and a nearby hospital
// that happens to be in a different time zone. Such applications may choose to convert the data to a common representation.
// Similar concerns apply to the transitions to and from daylight saving time. HL7 supports such requirements by requiring
// that the time zone information be present when the information is sent. It does not, however, specify which of the treatments
// discussed here will be applied by the receiving system.
//
// The DTM data type does not follow the normal truncation pattern, and the truncation character is never valid in the DTM data
// type. Instead, the truncation behavior is based on the semantics of dates and times.
//
// Unless otherwise specified in the context where the DTM type is used, the DTM type may be truncated to a day. When a DTM is truncated,
// the truncated form SHALL still be a valid DTM type. Systems should always be able to persist full date / time information
// including the timezone. Refer to Chapter 2, section 2.5.5.2 "Truncation Pattern" for further information.
type DTM = time.Time

// Day Type And Number
//
// This data type specifies the type and number of days for which a certification is valid.
//
// Note: Replaces the CM data type used in section 6.5.8.11 IN3-11, as of v2.5.
type DTN struct {
	HL7          HL7Name `hl7:",name=DTN,len=0,type=d"`
	DayType      CWE     `hl7:"1,required,table=0149,display=Specifies whether the days are denied- pending- or approved.  Refer to User-defined Table 0149 - Day Type for suggested values"`
	NumberOfDays NM      `hl7:"2,required,display=Specifies the number of days for which the certification is valid."`
}

// Encapsulated Data
//
// This data type transmits encapsulated data from a source system to a destination system. It contains the identity of the
// source system, the type of data, the encoding method of the data, and the data itself. This data type is similar to the RP (reference
// pointer) data type of Section 2.A.65, "RP - reference pointer," except that instead of pointing to the data on another system,
// it contains the data which is to be sent to that system.
type ED struct {
	HL7               HL7Name `hl7:",name=ED,len=0,type=d"`
	SourceApplication *HD     `hl7:"1,display=A unique name that identifies the system which was the source of the data. Identical format and restrictions as in reference pointer (see Section 2.A.65.2- 'Application ID (HD)')."`
	TypeOfData        ID      `hl7:"2,required,len=11,table=0834,display=Identical to ‚Äútype of data‚Äù component in the reference pointer (RP) data type. See Section 2.A.65.3- 'Type of Data (ID)'.  Refer to Imported Table 0834 ‚Äì MIME Types for valid values."`
	DataSubtype       ID      `hl7:"3,table=0291,display=Identical to ‚Äúsubtype‚Äù component in the reference pointer (RP) data type. See Section 2.A.65.4- 'Subtype (ID)'.  Refer to External Table 0291 - Subtype of Referenced Data for valid values."`
	Encoding          ID      `hl7:"4,required,len=6,table=0299,display=The type of encoding used to represent successive octets of binary data as displayable ASCII characters. Refer to HL7 Table 0299 - Encoding for valid values."`
	Data              TX      `hl7:"5,required,display=Displayable ASCII characters which constitute the data to be sent from source application to destination application. The characters are limited to the legal characters of the ST data type- as defined in Section 2.A.75- 'ST - string data-' and- if encoded binary- are encoded according to the method of Section 2.A.24.2- 'Type of Data (ID)'.  If the encoding component (see Section 2.A.24.4- 'Encoding (ID)') : 'A' (none)- then the data component must be scanned before transmission for HL7 delimiter characters- and any found must be escaped by using the HL7 escape sequences defined in Section 2.7 ‚Äì 'Use of escape sequences in text fields.' On the receiving application- the data field must be de-escaped after being parsed.  If the encoding component ED.4 does not equal 'A'- then- after encoding- the (encoded) data must be scanned for HL7 delimiter characters- and any found must be escaped by using the HL7 escape sequences. Only then can the component be added to the HL7 segment/message. On the receiving application- the data field must be de-escaped after being parsed out of the message before being decoded. This can be expressed as 'encode'- 'escape'- 'parse'- 'de-escape' or 'decode'."`
}

// Entity Identifier
//
// The entity identifier defines a given entity within a specified series of identifiers.
//
// The EI is appropriate for, but not limited to, machine or software generated identifiers. The generated identifier goes
// in the first component. The remaining components, 2 through 4, are known as the assigning authority; they identify the
// machine/system responsible for generating the identifier in component 1.
//
// The specified series, the assigning authority, is defined by components 2 through 4. The assigning authority is of the
// hierarchic designator (HD) data type, but it is defined as three separate components in the EI data type, rather than as
// a single component as would normally be the case. This is in order to maintain backward compatibility with the EI‚Äôs use as
// a component in several existing data fields. Otherwise, the components 2 through 4 are as defined in Section 2.A.33, "HD
// - hierarchic designator". Hierarchic designators (HD) are unique across a given HL7 implementation.
type EI struct {
	HL7              HL7Name `hl7:",name=EI,len=0,type=d"`
	EntityIdentifier ST      `hl7:"1,display=The first component- <entity identifier>- is usually defined to be unique within the series of identifiers created by the <assigning authority>- defined by a hierarchic designator- represented by components 2 through 4. See Section 2.A.33- 'HD - hierarchic designator'."`
	NamespaceID      IS      `hl7:"2,table=0363,display=See Section 2.A.33.1- 'Namespace ID (IS)' for definition. The component intentionally remains associated with the IS data type in v 2.7.  The assigning authority is a unique identifier of the system (or organization or agency or department) that creates the data. Refer to User-defined Table 0363 ‚Äì Assigning Authority for suggested values.  Note: When the HD is used as a part of another data type- in this case as part of the EI data type- this table may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment.   By site agreement- implementers may continue to use User-defined Table 0300 ‚Äì Namespace ID for the first component"`
	UniversalID      ST      `hl7:"3,conditional,display=See Section 2.A.33.2- 'Universal ID (ST)' for definition."`
	UniversalIDType  ID      `hl7:"4,conditional,len=6,table=0301,display=Refer to HL7 Table 0301 - Universal ID Type for valid values. See Section 2.A.33.3- 'Universal ID Type (ID)-' for definition."`
}

// Entity Identifier Pair
//
// Specifies an identifier assigned to an entity by either the placer or the filler system. If both components are populated
// the identifiers must refer to the same entity.
//
// Note: Replaces the CM data type used in sections 4.5.1.8 - ORC-8, 4.5.3.29 ‚Äì OBR-29, 7.3.1.29 ‚Äì OBR-29, as of v 2.5.
type EIP struct {
	HL7                      HL7Name `hl7:",name=EIP,len=0,type=d"`
	PlacerAssignedIdentifier *EI     `hl7:"1,display=Specifies an identifier assigned to an entity by the placer system. "`
	FillerAssignedIdentifier *EI     `hl7:"2,display=Specifies an identifier assigned to an entity by the filler system. "`
}

// Error Location
//
// This data type identifies the segment and its constituent where an error has occurred.
type ERL struct {
	HL7                HL7Name `hl7:",name=ERL,len=0,type=d"`
	SegmentID          ST      `hl7:"1,required,len=3,display=Specifies the 3-letter name for the segment."`
	SegmentSequence    NM      `hl7:"2,required,display=Identifies the segment occurrence within the message."`
	FieldPosition      NM      `hl7:"3,display=Identifies the number of the field within the segment. The first field is assigned a number of 1. Field number should not be specified when referring to the entire segment."`
	FieldRepetition    NM      `hl7:"4,display=Identifies the repetition number of the field. The first repetition is counted as 1. If a Field Position is specified- but Field Repetition is not- Field Repetition should be assumed to be 1. If Field Position is not specified- Field Repetition should not be specified."`
	ComponentNumber    NM      `hl7:"5,display=Identifies the number of the component within the field. The first component is assigned a number of 1. Component number should not be specified when referring to the entire field."`
	SubComponentNumber NM      `hl7:"6,display=Identifies the number of the sub-component within the component. The first sub-component is assigned a number of 1. Sub-component number should not be specified when referring to the entire component."`
}

// Financial Class
type FC struct {
	HL7                HL7Name `hl7:",name=FC,len=0,type=d"`
	FinancialClassCode CWE     `hl7:"1,required,table=0064,display=This component contains the financial class assigned to a person. User-defined Table 0064 - Financial Class is used as the HL7 identifier for the user-defined table of values for this component. "`
	EffectiveDate      DTM     `hl7:"2,format=YMDHM,display=This component contains the effective date/time of the person‚Äôs assignment to the financial class specified in the first component."`
}

// Family Name
//
// This data type allows full specification of the surname of a person. Where appropriate, it differentiates the person's
// own surname from that of the person's partner or spouse, in cases where the person's name may contain elements from either
// name. It also permits messages to distinguish the surname prefix (such as "van" or "de") from the surname root.
//
// Note: Appears ONLY in the PPN, XCN and XPN.
type FN = string

// Formatted Text Data
//
// This data type is derived from the TX data type by allowing the addition of embedded formatting instructions. These instructions
// are limited to those that are intrinsic and independent of the circumstances under which the field is being used. The actual
// instructions and their representation are described in section 2.7.6, ‚ÄúUsage and Examples of Formatted Text‚Äù. The FT
// field is of arbitrary length (up to 64k) and may contain formatting commands enclosed in escape characters.
//
// Example:
// |\.sp\(skip one vertical line)|
//
// For additional examples of formatting commands see Section 2.7, "Use of Escape Sequences in Text Fields".
//
// To include alternative character sets, use the appropriate escape sequence. See Chapter 2, "Control", section 2.15.9.18,
// "Character set" and section 2.14.9.20, "Alternate character set handling scheme".
//
// This specification applies no limit to the length of the FT data type, either here where the data type is defined, or elsewhere
// where the data type is used. While there is no intrinsic reason to limit the length of this data type for semantic or syntactical
// reasons, it is expected that some sort of limitation will be imposed for technical reasons in implementations. HL7 recommends
// that implementation length limits are published in implementation profiles. The contents of an FT field may be truncated,
// but the truncation pattern does not apply.
type FT = string

// General Timing Specification
//
// The General Timing Specification data type is used to communicate complex inter-related information Timing information.
// The value of such a field follows the formatting rules for a ST field. The string data will be structured according to the
// rules set forth in the "Version 3 Data Types Part II Unabridged Specification" for the General Timing Specification (GTS)
// data type.
//
// There is no technical limit to the length of a GTS expression ‚Äì the expression may be as long as logically required. The conformance
// length of 199 caters for all the common expressions. GTS expressions are not to be truncated.
type GTS = string

// Hierarchic Designator
//
// The basic definition of the HD is that it identifies an (administrative or system or application or other) entity that has
// responsibility for managing or assigning a defined set of instance identifiers (such as placer or filler number, patient
// identifiers, provider identifiers, etc.). This entity could be a particular health care application such as a registration
// system that assigns patient identifiers, a governmental entity such as a licensing authority that assigns professional
// identifiers or drivers‚Äô license numbers, or a facility where such identifiers are assigned.
//
// The HD is designed to be a more powerful and more general replacement for the application identifier of HL7 versions 2.1
// and 2.2. It adds two additional components, the <universal ID> and the <universal ID type> to the former application ID
// (which is renamed more generically to be the namespace ID).
//
// In the case where an HD identifies an entity that assigns/creates instance identifiers such as a particular patient registration
// system, it defines an "assigning authority". In the case where an HD identifies a location where instance identifiers
// are given out (although they may be created by another entity at another location) such as a particular "department of motor
// vehicles office location," it defines an "assigning facility". These two different uses of the HD appear in many of the
// extended data types.
//
// The "assigning authority" defined by the HD is similar in its role to the coding system (and version) part of the coded element
// data types: both identify a set of more discrete instance identifiers. The difference is that the set of HD-defined discrete
// instances contain identifiers of "real-world" things such as patient or clinical orders, while the coded element-defined
// set of discrete instances contains concept identifiers (codes).
//
// The HD is designed to be used either as a local identifier (with only the <namespace ID> valued) or a publicly-assigned identifier,
// a UID (<universal ID> and <universal ID type> both valued). Syntactically, the HD is a group of two identifiers: a local
// identifier defined by the first component and a universal identifier defined by the second and third components. HDs that
// have defined third components (defined UID types) must have a second component that is unique within the series of IDs defined
// by that component.
//
// Note: The HD is used in fields that in earlier versions of HL7 used the IS data type. Thus, a single component HD (only the first
// component valued) will look like a simple IS data type for older systems expecting a single component in the place of the
// HD data type.
//
// If the first component for the HD data type is present, the second and third components are optional. If the third component
// is present, then the second must also be present (although in this case the first is optional). The second and third components
// must either both be valued (both non-null), or both be not valued (both null).
// This means that if all three components of the HD are valued, the entity identified by the first component is the same as the
// entity identified by components two and three taken together. However, implementers may choose, by site agreement, to
// specify that if all three components of the HD are valued, the first component defines a member in the set defined by the second
// and third components.
//
// Examples:
// Example 1: ISO example with only the 2nd and 3rd components valued:
// |^2.16.840.1.113883.19^ISO|
// The syntax of the second component is defined by the ISO standard for object identifiers, not by HL7 (for which the second
// component is of the ST data type). Thus the periods (".") in the second component are part of the ISO syntax, and are legal
// by the definition of the HL7 ST data type.
//
// Example 2: A UUID example
// |^478A0114-EBF0-7701-A023-6841FF05731A^UUID|
//
// Example 3: A DNS example
// |^falcon.iupui.edu^DNS|
type HD struct {
	HL7             HL7Name `hl7:",name=HD,len=0,type=d"`
	NamespaceID     IS      `hl7:"1,table=0300,display=The local coded item for the entity. The component intentionally remains associated with the IS data type in v 2.7.  User-defined Table 0300 - Namespace ID is used as the HL7 identifier for the user-defined table of values for this component.   Note: When the HD is used in a given segment (either as a field or as a component of another data type) this table may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment."`
	UniversalID     ST      `hl7:"2,conditional,display=The HD‚Äôs second component- <universal ID> (UID)- is a string formatted according to the scheme defined by the third component- <universal ID type> (UID type). The UID is intended to be unique over time within the UID type. It is rigorously defined. Each UID must belong to one of the specifically enumerated schemes for constructing UIDs (defined by the UID type). The UID (second component) must follow the syntactic rules of the particular universal identifier scheme (defined by the third component). Note that these syntactic rules are not defined within HL7 but are defined by the rules of the particular universal identifier scheme (defined by the third component)."`
	UniversalIDType ID      `hl7:"3,conditional,len=6,table=0301,display=The third component governs the interpretation of the second component of the HD. If the third component is a known UID refer to HL7 Table 0301 - Universal ID type for valid values- then the second component is a universal ID of that type."`
}

// Insurance Certification Definition
//
// This data type specifies whether insurance certification is required for particular patient types, and the time window
// for obtaining the certification.
//
// Note: Replaces the CM data type used in section 6.5.8.20 IN3-20, as of v2.5.
type ICD struct {
	HL7                           HL7Name `hl7:",name=ICD,len=0,type=d"`
	CertificationPatientType      *CWE    `hl7:"1,table=0150,display=Specifies the category or type of patient for which this certification is requested. Refer to User-defined Table 0150 - Certification patient type for suggested values."`
	CertificationRequired         ID      `hl7:"2,required,len=1,table=0136,display=Specifies whether or not a certification is required. Refer to HL7 Table 0136 - Yes/no Indicator for valid values."`
	DateTimeCertificationRequired DTM     `hl7:"3,format=YMDHM,display=The date/time by which the certification must be obtained. "`
}

// Coded Value For Hl7 Defined Tables
//
// The value of such a field follows the formatting rules for an ST field except that it is drawn from a table of legal values.
// There shall be an HL7 table number associated with ID data types. An example of an ID field is OBR-25 Result Status. This data
// type should be used only for HL7 tables (see Chapter 2C, section 2.C.1.2, "HL7 Tables"). The reverse is not true, since in
// some circumstances it is more appropriate to use the CNE or CWE data type for HL7 tables.
//
// The minimum and maximum lengths are specified in the context in which the ID data type is used. The longest HL7 defined legal
// value is 15 characters, but there are a few circumstances where the legal values are taken from code systems defined by other
// bodies (such as IANA mime types). In these cases, a different conformance length may be specified where the ID data type
// is used. It is never acceptable to truncate an ID value.
type ID = string

// Coded Value For User-defined Tables
//
// As of v2.7, the only approved use of the IS data type is in the HD.1, EI.2 and PL.6 plus a limited number of fields where a determination
// could not readily be made as to whether the item is an identifier or an actual coded item. Additionally, in accordance with
// chapter 2 rules, any field or data type component marked as "Retained for backward compatibility" will retain any IS data
// type.
//
// The value of such a field follows the formatting rules for a ST field except that it is drawn from a site-defined (or user-defined)
// table of legal values. There shall be an HL7 table number associated with IS data types. An example of an IS field is the Event
// reason code defined in Chapter 3, "Patient Administration", section 3.4.1.4, "Event reason code". This data type should
// be used only for user-defined tables (see Chapter 2C, "Code Tables", section 2.C.1.1, "User-defined Tables"). The reverse
// is not true, since in some circumstances, it is more appropriate to use the CWE data type for user-defined tables.
//
// It is never acceptable to truncate an IS value.
type IS = string

// Job Code/class
//
// Example 1: Codified job (where 1 represents the code for Administrator and F represents full time)
// |1^F^Administrator|
//
// Example 2: Uncodified job (where job codes are not codified and PT represents part time)
// |^PT^Analyst|.
type JCC struct {
	HL7                HL7Name `hl7:",name=JCC,len=0,type=d"`
	JobCode            *CWE    `hl7:"1,table=0327,display=This component contains the person‚Äôs job code. User-defined Table 0327 - Job Code is used as the HL7 identifier for the user-defined table of values for this component."`
	JobClass           *CWE    `hl7:"2,table=0328,display=This component contains the person‚Äôs employee classification. Refer to User-defined Table 0328 - Employee Classification for suggested values."`
	JobDescriptionText TX      `hl7:"3,display=This component contains the text of the job description. This will accommodate systems where job descriptions are not codified."`
}

// Money
//
// This data type specifies an amount of money and the denomination in which it is expressed.
type MO struct {
	HL7          HL7Name `hl7:",name=MO,len=0,type=d"`
	Quantity     NM      `hl7:"1,display=The first component is a quantity."`
	Denomination ID      `hl7:"2,len=3,table=0913,display=The second component is the denomination in which the quantity is expressed. The values for the denomination component are the three-character codes specified in ISO-4217. See Externally-defined Table 0913 ‚Äì Monetary Denomination Code.  If the denomination is not specified- 'MSH-17-country code'- in Chapter 2- section 2.14.9.17- is used to determine the default.   Example- where USD is the ISO 4217 code for the U.S. American dollar.  |99.50^USD|"`
}

// Money And Code
//
// Transmits monetary information and the associated charge code for services performed.
//
// Note: Replaces the CM data type used in sections 4.5.3.23 OBR-23 and 7.4.1.23- OBR-23 as of v 2.5.
type MOC struct {
	HL7            HL7Name `hl7:",name=MOC,len=0,type=d"`
	MonetaryAmount *MO     `hl7:"1,display=The amount and denomination of money associated with the charge code."`
	ChargeCode     *CWE    `hl7:"2,display=The code identifying the charge to the ordering entity for the services performed."`
}

// Money Or Percentage
//
// This data type specifies an amount that may be either currency or a percentage. It is a variation on the MO data type that is
// limited to currency.
//
// Note: Replaces the CM data type used in section 6.5.8.5 IN3-5, as of v 2.5. This data type is restricted to this field.
//
// Example: USD is the ISO 4217 code for the U.S. American dollar.
// |AT^99.50^USD|
type MOP struct {
	HL7                        HL7Name `hl7:",name=MOP,len=0,type=d"`
	MoneyOrPercentageIndicator ID      `hl7:"1,required,table=0148,display=Specifies whether the amount is currency or a percentage.  Refer to HL7 Table 0148 ‚Äì Money or Percentage Indicator for valid values."`
	MoneyOrPercentageQuantity  NM      `hl7:"2,required,display=Specifies the currency or percentage quantity."`
	MonetaryDenomination       ID      `hl7:"3,len=3,table=0913,display=the denomination in which the quantity is expressed where the amount is currency. The values for the denomination component are the three-character codes specified in ISO-4217. See Externally-defined Table 0913 ‚Äì Monetary Denomination Code.  If the denomination is not specified- the context of the message or MSH-17 Country Code- in Chapter 2- section 2.14.9.17- is used to determine the default."`
}

// Message Type
//
// This field contains the message type, trigger event, and the message structure ID for the message.
//
// Note: Replaces the CM data type used in 2.16.9.9 MSH-9 as of v 2.5.
type MSG struct {
	HL7              HL7Name `hl7:",name=MSG,len=0,type=d"`
	MessageCode      ID      `hl7:"1,required,len=3,table=0076,display=Specifies the message type code. Refer to HL7 Table 0076‚Äì Message Type for valid values.  This table contains values such as ACK- ADT- ORM- ORU etc."`
	TriggerEvent     ID      `hl7:"2,required,len=3,table=0003,display=Specifies the trigger event code. Refer to HL7 Table 0003‚Äì Event Type for valid values.   This table contains values like A01- O01- R01 etc"`
	MessageStructure ID      `hl7:"3,required,len=7,table=0354,display=Specifies the abstract message structure code. Refer to HL7 Table 0354 ‚Äì Message Structure for valid values."`
}

func (d MSG) MessageStructureID() []string {
	if len(d.MessageStructure) > 0 {
		return []string{d.MessageStructure}
	}
	if len(d.TriggerEvent) == 0 {
		return []string{d.MessageCode}
	}
	return []string{d.MessageCode + "_" + d.TriggerEvent, d.MessageCode}
}

// Numeric Array
//
// This data type is used to represent a series (array) of numeric values. A field of this type may contain a one-dimensional
// array (vector or row) of numbers. Also, by allowing the field to repeat, a two-dimensional array (table) of numbers may
// be transmitted using this format, with each row of the table represented as one repetition of the field. Arrays that have
// one or more values not present may be transmitted using this data type. "Not present" values are represented as two adjacent
// component delimiters. If the absent values occur at the end of a row, the trailing component delimiters may be omitted.
// If an entire row of a table has no values, no component delimiters are necessary (in this case, there will be two adjacent
// repetition delimiters).
//
// Example 1: vector of 8 numbers
// |125^34^-22^-234^569^442^-212^6|
//
// Example 2: 3 x 3 array of numbers
// |1.2^-3.5^5.2~2.0^3.1^-6.2~3.5^7.8^-1.3|
//
// Example 3: 5 x 4 array of numbers with the values in positions (1,1), (2,2), (2,3), (3,3), (3,4), (4,1), (4,2), (4,3), and
// (4,4) not present
// |^2^3^4~5^^^8~9^10~~17^18^19^20|
type NA struct {
	HL7    HL7Name `hl7:",name=NA,len=0,type=d"`
	Value1 NM      `hl7:"1,display=Value1"`
	Value2 NM      `hl7:"2,display=Value2"`
	Value3 NM      `hl7:"3,display=Value3"`
	Value4 NM      `hl7:"4,display=Value4"`
}

// Name With Date And Location
//
// Specifies the name of the person performing a service, when the person performed the service and where the person performed
// the service. Retained for backward compatibility as of v2.6.
//
// Note: Replaces the CM data type used in sections 4.5.3.32 and 7.4.1.32-( OBR-32), 4.5.3.33 and 7.4.1.33  - ( OBR-33) 4.5.3.34
// and 7.4.1.34 - ( OBR-34) 4.5.3.35 and 7.4.1.35 - ( OBR-35) as of v 2.5.
//
// Retained for backward compatibility only in v2.6. Fields associated with this data type have been replaced by the ROL segment.
type NDL struct {
	HL7                 HL7Name `hl7:",name=NDL,len=0,type=d"`
	Name                *CNN    `hl7:"1,display=This component specifies the name of the person performing a service. "`
	StartDateTime       DTM     `hl7:"2,format=YMDHM,display=This component specifies the starting date and time for when the person is performing the service."`
	EndDateTime         DTM     `hl7:"3,format=YMDHM,display=This component specifies the ending date and time for when the person is performing the service. "`
	PointOfCare         IS      `hl7:"4,table=0302,display=This component specifies the code for the point where patient care is administered. It is conditional on NDL.9 ‚Äì Patient Location Type (e.g.- nursing unit or department or clinic). After floor- it is the most general patient location designation. Refer to User-defined Table 0302 - Point of care for suggested values."`
	Room                IS      `hl7:"5,table=0303,display=Patient room. After point of care- it is the most general location designation. Refer to User-defined Table 0303 - Room for suggested values."`
	Bed                 IS      `hl7:"6,table=0304,display=This component specifies the code for the patient's bed. After room- it is the most general location designation. Refer to User-defined Table 0304 - Bed for suggested values."`
	Facility            *HD     `hl7:"7,display=This component is subject to site interpretation but generally describes the highest level physical designation of an institution- medical center or enterprise. It is the most general location designation. "`
	LocationStatus      IS      `hl7:"8,table=0306,display=This component specifies the code for the status or availability of the location. For example- it may convey bed status. Refer to User-defined Table 0306 - Location Status for suggested values."`
	PatientLocationType IS      `hl7:"9,table=0305,display=Location type is the categorization of the location defined by facility- building- floor- point of care- room or bed. Although not a required field- when used- it may be the only populated field. Usually includes values such as nursing unit- department- clinic- SNF- physician‚Äôs office. Refer to User-defined Table 0305 - Person Location Type for suggested values."`
	Building            IS      `hl7:"10,table=0307,display=This component specifies the code for the building where the person is located. After facility- it is the most general location designation. Refer to User-defined Table 0307 - Building for suggested values."`
	Floor               IS      `hl7:"11,table=0308,display=This component specifies the code for the floor where the person is located. After building- it is the most general location designation. Refer to User-defined Table 0308 - Floor for suggested values."`
}

// Numeric
//
// A number represented as a series of ASCII numeric characters consisting of an optional leading sign (+ or -), the digits
// and an optional decimal point. In the absence of a sign, the number is assumed to be positive. If there is no decimal point
// the number is assumed to be an integer.
//
// Values of this data type shall contain at least one digit to the left of the decimal point. This means that 0.1 is a valid representation,
// while .1 is not. Leading zeros, or trailing zeros after a decimal point, are not significant. For example, the following
// two values with different representations, "01.20" and "1.2," are identical. Except for the optional leading sign (+
// or -) and the optional decimal point (.), no non-numeric ASCII characters are allowed. Thus, the value <12 should be encoded
// as a structured numeric (SN) (preferred) or as a string (ST) (allowed, but not preferred) data type.
//
// The NM data type does not follow the normal truncation pattern, and the truncation character is never valid in the NM data
// type. Instead, the truncation behavior is based on the semantics of numbers.
//
// Values of type NM may always have leading zeros truncated. Note that HL7 recommends that leading zeros not be used. Unless
// NM is used to represent a monetary amount, implementations may truncate trailing zeros after the decimal point up to the
// first non-zero digit or the decimal point, which ever comes first. Any digits to the left of the decimal point may never be
// truncated (other than leading zeros).
//
// Example: 1.0200 may be truncated to 1.02, but not to 1.0.
type NM = string

// Numeric Range
//
// Specifies the interval between the lowest and the highest values in a series of data. In the case where a numeric range is
// unbounded on one side, the component of the unbounded side is null. Whether the end points are included in the range is defined
// in the usage note for the field.
//
// Note: Replaces the CM data type used in sections 8.8.4.6.1‚Äì OM2-6.1, 8.8.4.6.3‚Äì OM2-6.3and 8.8.4.6.4‚Äì OM2-6.4, as of
// v 2.5.
type NR struct {
	HL7       HL7Name `hl7:",name=NR,len=0,type=d"`
	LowValue  NM      `hl7:"1,display=The number specifying the lower limit or boundary of the range."`
	HighValue NM      `hl7:"2,display=The number specifying the high limit or boundary of the range."`
}

// Occurrence Code And Date
//
// The code and associated date defining a significant event relating to a bill that may affect payer processing.
//
// Note: Replaces the CM data type used in sections 6.5.10.10 UB1-16 and 6.5.11.7 UB2-7, as of v 2.5.
//
// This data type carries data defined by CMS or other regulatory agencies. It corresponds to UB82 Fields 28 32 and UB92 fields
// 32a, 32b, 33a, 33b, 34a, 34b, 35a, and 35b. Refer to a UB specification for additional information.
//
// Use Case: A Medicare beneficiary was confined in hospital from January 1, 1992 to January 10, 1992, however, his Medicare
// Part A benefits were exhausted as of January 8, 1992, and he was not entitled to Part B benefits. Therefore, Form Locator
// 32 should contain code 23 and the date 010892.
//
// Example:
// |23&Benefits Exhausted&NUBC^19920108|
type OCD struct {
	HL7            HL7Name `hl7:",name=OCD,len=0,type=d"`
	OccurrenceCode CNE     `hl7:"1,required,table=0350,display=The NUBC code for the event or occurrence relating to a bill that may affect payer processing.  Refer to HL7-defined Table 0350 ‚Äì Occurrence Code for valid values.  Values for this component need to come from National Uniform Billing Committee (NUBC). No extensions are allowed."`
	OccurrenceDate DT      `hl7:"2,required,format=YMD,display=The date the event- relating to a bill that may affect payer processing- occurred."`
}

// Occurrence Span Code And Date
//
// A code and the related dates that identify an event that relates to the payment of the claim. For example, Prior Stay Dates
// which is the from/through dates given by the patient of any hospital stay that ended within 60 days of this hospital or SNF
// admission.
//
// Note: Replaces the CM data type used in section 6.5.11.8 UB2-8, as of v 2.5.
//
// Use case: The patient was admitted for minor surgery (1/6/03) and discharged the following day (1/7/03). Complications
// ensured and the patient was readmitted the following day (1/8/03). When the claim for 1/8/03 is filed, the prior stay dates
// (1/6/03-1/7/03) must be reported (per the Health Plan) using Occurrence Span Code and Dates 71 - Prior Stay Date.
//
// Example:
// |71&Prior Stay Date&NUBC^20030106^20030107|
type OSP struct {
	HL7                     HL7Name `hl7:",name=OSP,len=0,type=d"`
	OccurrenceSpanCode      CNE     `hl7:"1,required,table=0351,display=The NUBC code itself that identifies an event that relates to the payment of a claim.  Refer to HL7 Table 0351 ‚Äì Occurrence Span for valid values. Values for this component need to come from National Uniform Billing Committee (NUBC). No extensions are allowed."`
	OccurrenceSpanStartDate DT      `hl7:"2,conditional,format=YMD,display=The date an event started that relates to the payment of a claim."`
	OccurrenceSpanStopDate  DT      `hl7:"3,conditional,format=YMD,display=The date an event ended that relates to the payment of a claim."`
}

// Practitioner Institutional Privileges
//
// This data type specifies the institutional privileges with associated detail granted to a provider.
//
// Note: Replaces the CM data type used in 15.4.5.7 PRA-7 as of v 2.5.
type PIP struct {
	HL7            HL7Name `hl7:",name=PIP,len=0,type=d"`
	Privilege      CWE     `hl7:"1,required,table=0525,display=Specifies the institutional privilege itself. Refer to User-defined Table 0525 ‚Äì Privilege for suggested values."`
	PrivilegeClass *CWE    `hl7:"2,table=0526,display=Specifies the class category of institutional privilege. Refer to User-defined Table 0526 ‚Äì Privilege Class for suggested values."`
	ExpirationDate DT      `hl7:"3,format=YMD,display=Specifies the date the institutional privilege is/was no longer valid."`
	ActivationDate DT      `hl7:"4,format=YMD,display=Specifies the date the institutional privilege became/becomes valid."`
	Facility       *EI     `hl7:"5,display=Specifies the facility in which the institutional privilege is/was valid."`
}

// Person Location
//
// This data type is used to specify a patient location within a healthcare institution. Which components are valued depends
// on the needs of the site. For example for a patient treated at home, only the person location type is valued. It is most commonly
// used for specifying patient locations, but may refer to other types of locations within a healthcare setting.
//
// Note: This data type contains several location identifiers that should be thought of in the following order from the most
// general to the most specific: facility, building, floor, point of care, room, bed.
// Additional data about any location defined by these components can be added in the following components: person location
// type, location description and location status.
//
// Example: Nursing Unit
// A nursing unit at Community Hospital: 4 East, room 136, bed B
// 4E^136^B^CommunityHospital^^N^^^
//
// Example: Clinic
// A clinic at University Hospitals: Internal Medicine Clinic located in the Briones building, 3rd floor.
// InternalMedicine^^^UniversityHospitals^^C^Briones^3^
//
// Example: Home
// The patient was treated at his home.
// ^^^^^H^^^
type PL struct {
	HL7                             HL7Name `hl7:",name=PL,len=0,type=d"`
	PointOfCare                     *HD     `hl7:"1,conditional,table=0302,display=This component specifies the code for the point where patient care is administered. It is conditional on PL.6 Person Location Type (e.g.- nursing unit or department or clinic). After floor- it is the most general patient location designation. Refer to User-defined Table 0302 - Point of Care for suggested values."`
	Room                            *HD     `hl7:"2,table=0303,display=This component specifies the code for the patient's room. After point of care- it is the most general person location designation. Refer to User-defined Table 0303 - Room for suggested values."`
	Bed                             *HD     `hl7:"3,table=0304,display=This component specifies the code for the patient's bed. After room- it is the most general person location designation. Refer to User-defined Table 0304 - Bed for suggested values."`
	Facility                        *HD     `hl7:"4,display=This component is subject to site interpretation but generally describes the highest level physical designation of an institution- medical center or enterprise. It is the most general person location designation.   Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be redefined (given a different user-defined table number and name) by the technical committee responsible for that segment."`
	LocationStatus                  IS      `hl7:"5,table=0306,display=This component specifies the code for the status or availability of the location. For example- it may convey bed status. Refer to User-defined Table 0306 - Location Status for suggested values."`
	PersonLocationType              IS      `hl7:"6,table=0305,display=Person location type is the categorization of the person‚Äôs location defined by facility- building- floor- point of care- room or bed. Although not a required field- when used- it may be the only populated field. It usually includes values such as nursing unit- department- clinic- SNF- physician‚Äôs office. Refer to User-defined Table 0305 - Person location type for suggested values."`
	Building                        *HD     `hl7:"7,table=0307,display=This component specifies the code for the building where the person is located. After facility- it is the most general person location designation. Refer to User-defined Table 0307 - Building for suggested values."`
	Floor                           *HD     `hl7:"8,table=0308,display=This component specifies the code for the floor where the person is located. After building- it is the most general person location designation. Refer to User-defined Table 0308 - Floor for suggested values."`
	LocationDescription             ST      `hl7:"9,display=This component describes the location in free text."`
	ComprehensiveLocationIdentifier *EI     `hl7:"10,display=The unique identifier that represents the physical location as a whole without regard for the individual components. This accommodates sites that may have a different method of defining physical units or who may code at a less granular level. For example- point of care- room- and bed may be 1 indivisible code."`
	AssigningAuthorityForLocation   *HD     `hl7:"11,table=0363,display=The entity that creates the data for the individual physical location components. If populated- it should be the authority for all components populated. Refer to User-defined Table 0363 ‚Äì Assigning Authority for suggested values for the first sub-component of the HD component- <namespace ID>.  This component makes it possible for codes to be differentiated when the field in which this data type is used repeats.  Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment.  By site agreement- implementors may continue to use User-defined Table 0300 ‚Äì Namespace ID for the first sub-component."`
}

// Practitioner License Or Other Id Number
//
// This data type specifies a practitioner‚Äôs license number, or other ID number such as UPIN, Medicare and Medicaid number,
// and associated detail.
//
// Note: Replaces the CM data type used in 15.4.5.6 PRA-6, 11.6.3.7 PRD-7 and 11.6.4.7 CTD-7 as of v 2.5.
type PLN struct {
	HL7                             HL7Name `hl7:",name=PLN,len=0,type=d"`
	IDNumber                        ST      `hl7:"1,required,display=Specifies the license number or other ID number such as UPIN- Medicare and Medicaid number."`
	TypeOfIDNumber                  CWE     `hl7:"2,required,table=0338,display=Specifies the type of number.  Refer to User-defined Table 0338 ‚Äì Practitioner ID Number Type for suggested values."`
	StateOtherQualifyingInformation ST      `hl7:"3,display=Specifies the state or province in which the license or ID is valid- if relevant- or other qualifying information. It is recommended that state qualifications use the abbreviations from the postal service of the country."`
	ExpirationDate                  DT      `hl7:"4,format=YMD,display=Specifies the date when the license or ID is no longer valid."`
}

// Performing Person Time Stamp
//
// This data type is the equivalent of an XCN data type joined with a DTM data type. However, the XCN data type has been flattened
// to allow legal expression of its embedded complex data types HD, CWE and CWE.
type PPN struct {
	HL7                                         HL7Name `hl7:",name=PPN,len=0,type=d"`
	PersonIdentifier                            ST      `hl7:"1,display=This component carries the Person Identifier itself. PPN.1- in conjunction with PPN.9- uniquely identifies the entity/person."`
	FamilyName                                  FN      `hl7:"2,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. "`
	GivenName                                   ST      `hl7:"3,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"5,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      ST      `hl7:"7,display=Attention: The PPN.7 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v2.7 See PPN.22 - Professional Suffix."`
	SourceTable                                 CWE     `hl7:"8,table=0297,display=Attention: Retained for backwards compatibility only as of v2.7. The reader is referred to PPN.9 instead.  User-defined Table 0297 - CN ID Source is used as the HL7 identifier for the user-defined table of values for this component. Used to delineate the first component."`
	AssigningAuthority                          *HD     `hl7:"9,conditional,table=0363,display=The assigning authority is a unique identifier of the system (or organization or agency of department) that creates the data. It is a HD data type. User-defined Table 0363 ‚Äì Assigning Authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component- <namespace ID>. Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment.  By site agreement- implementors may continue to use User-defined Table 0300 ‚Äì Namespace ID for the first sub-component.  Attention: As of v 2.7- the Assigning Authority is conditional. It is required if PPN.1 is populated and neither PPN.23 nor PPN.24 are populated. All 3 components may be populated. No assumptions can be safely made based on position or sequence. Best practice is to send an OID in this component when populated.  The reader is referred to the PPN.23 and the PPN.24 if there is a need to transmit values with semantic meaning for an assigning jurisdiction or assigning department or agency in addition to- or instead of- an assigning authority. However- all 3 components may be valued. If- in so doing- it is discovered that the values in PPN.23 and/or PPN.24 conflict with PPN.9- the user would look to the Message Profile or other implementation agreement for a statement as to which takes precedence."`
	NameTypeCode                                ID      `hl7:"10,len=5,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name Type for valid values (see Section 2.A.89- ‚ÄúXPN - extended person name‚Äù)."`
	IdentifierCheckDigit                        ST      `hl7:"11,display=A digit- or digits- exclusive of the identifier in CX.1- calculated by applying an algorithm to all or some of the digits in the number- which may be used to test validity of the non-check-digit identifier."`
	CheckDigitScheme                            ID      `hl7:"12,conditional,len=3,table=0061,display=Contains the code identifying the check digit scheme employed.  Refer to HL7 Table 0061 - Check Digit Scheme for valid values."`
	IdentifierTypeCode                          ID      `hl7:"13,len=5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the 'Assigning authority' component. Refer to HL7 Table 0203 - Identifier Type for suggested values."`
	AssigningFacility                           *HD     `hl7:"14,display=The place or location identifier where the identifier was first assigned to the patient. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems.  Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment."`
	DateTimeActionPerformed                     DTM     `hl7:"15,format=YMDHM,display=This component describes when the activity was performed.  Note: If this field is not null- both the performing person and the time stamp must be valued."`
	NameRepresentationCode                      ID      `hl7:"16,len=1,table=0465,display=Different name/address types and representations of the same name/address should be described by repeating of this field- with different values of the Name/Address Type and/or Name/Address Representation component.  Note: This new component remains in ‚Äúalphabetic‚Äù representation with each repetition of the field using these data types. That is- even though the name may be represented in an ideographic character set- this component will remain represented in an alphabetic character set.  In general this component provides an indication of the representation provided by the data item. It does not necessarily specify the character sets used. Thus- even though the representation might provide an indication of what to expect- the sender is still free to encode the contents using whatever character set is desired. This component provides only hints for the receiver- so it can make choices regarding what it has been sent and what it is capable of displaying."`
	NameContext                                 *CWE    `hl7:"17,table=0448,display=This component is used to designate the context in which a name is used. The main use case is in Australian healthcare: indigenous patients who prefer to use different names when attending different healthcare institutions. Another use case occurs in the US where health practitioners can be licensed under slightly different names and the reporting of the correct name is vital for administrative purposes. Refer to chapter 3- section 3.4.2.6 for more detailed information on how to use this table. Refer to User-defined Table 0448 ‚Äì Name Context for suggested values."`
	NameValidityRange                           ST      `hl7:"18,display=Attention: The PPN.18 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v 2.7. Refer to PPN.20 Effective Date and PPN.21 Expiration Date."`
	NameAssemblyOrder                           ID      `hl7:"19,len=1,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 Table 0444 ‚Äì Name Assembly Order for valid values."`
	EffectiveDate                               DTM     `hl7:"20,format=YMDHM,display=The first date- if known- on which the person name is valid and active."`
	ExpirationDate                              DTM     `hl7:"21,format=YMDHM,display=The last date- if known- on which the person name is valid and active."`
	ProfessionalSuffix                          ST      `hl7:"22,display=Used to specify an abbreviation- or a string of abbreviations- denoting qualifications that support the person‚Äôs profession- (e.g.- licenses- certificates- degrees- affiliations with professional societies- etc.). The Professional Suffix normally follows the Family Name when the Person Name is used for display purposes. Please note that this component is an unformatted string and is used for display purposes only. Detailed information regarding the contents of Professional Suffix is obtained using appropriate segments in Chapter 15- 'Personnel Management'."`
	AssigningJurisdiction                       *CWE    `hl7:"23,display=The geo-political body that assigned the identifier in component 1."`
	AssigningAgencyOrDepartment                 *CWE    `hl7:"24,display=The agency or department that assigned the identifier in component 1."`
	SecurityCheck                               ST      `hl7:"25,display=This component is used to communicate a version code that may be assigned to the value given in PPN.1 - Person Identifier."`
	SecurityCheckScheme                         ID      `hl7:"26,len=3,table=0904,display=This component is used to transmit information intended to validate the veracity of the supplied identifier or the presenter of the identifier. For example- this component may be used to ensure that the presenter of a credit card is an authorized user of that card.  Refer to HL7 Table 0904 - Security Check Scheme for valid values."`
}

// Parent Result Link
//
// Uniquely identifies the parent result‚Äôs OBX segment related to the current order, together with the information in OBR-29
// - Parent.
//
// Usage Note: This data type is applied only to OBR-26 - Parent Result where it serves to make information available for other
// types of linkages (e.g., toxicology). This important information, together with the information in OBR-29 - Parent,
// uniquely identifies the parent result‚Äôs OBX segment related to this order. The value of this OBX segment in the parent result
// is the organism or chemical species about which this battery reports. For example, if the current battery is an antimicrobial
// susceptibility, the parent results identified OBX contains a result that identifies the organism on which the susceptibility
// was run. This indirect linkage is preferred because the name of the organism in the parent result may undergo several preliminary
// values prior to finalization.
//
// We emphasize that this field does not take the entire result field from the parent. It is meant only for the text name of the
// organism or chemical subspecies identified. This field is included only to provide a method for linking back to the parent
// result for those systems that could not generate unambiguous Observation IDs and sub-IDs.
// This field is present only when the parent result is identified by OBR-29 - Parent and the parent spawns child orders for
// each of many results. See Chapter 7, "Observations", for more details about this linkage.
//
// Note: Replaces the CM data type used in sections 4.5.3.26 - OBR-26 and 7.4.1.26 - OBR-26 as of v 2.5.
type PRL struct {
	HL7                              HL7Name `hl7:",name=PRL,len=0,type=d"`
	ParentObservationIdentifier      CWE     `hl7:"1,required,display=Contains the unique identifier of the parent observation as defined in the OBX-3 of the parent result. The value is the same as the OBX-3 of the parent."`
	ParentObservationSubIdentifier   ST      `hl7:"2,display=Contains the sub-ID of the parent result as defined in the OBX-4 of the parent result. The value is the same as the OBX-4 of the parent."`
	ParentObservationValueDescriptor TX      `hl7:"3,display=Contains a descriptor of the parent observation value as specified in the OBX-5 of the parent result.  As an example- the third component may be used to record the name of the microorganism identified by the parent result directly. The organism in this case should be identified exactly as it is in the parent culture."`
}

// Processing Type
//
// This data type indicates whether to process a message as defined in HL7 Application (level 7) Processing rules.
type PT struct {
	HL7            HL7Name `hl7:",name=PT,len=0,type=d"`
	ProcessingID   ID      `hl7:"1,required,len=1,table=0103,display=A value that defines whether the message is part of a production- training- or debugging system. Refer to HL7 Table 0103 - Processing ID for valid values."`
	ProcessingMode ID      `hl7:"2,len=1,table=0207,display=A value that defines whether the message is part of an archival process or an initial load. Refer to HL7 Table 0207 - Processing Mode for valid values."`
}

// Policy Type And Amount
//
// This data type specifies the policy type and amount covered by the insurance.
//
// Note: Replaces the CM data type used in section 6.5.7.29 IN2-29, as of v 2.5.
type PTA struct {
	HL7                       HL7Name `hl7:",name=PTA,len=0,type=d"`
	PolicyType                CWE     `hl7:"1,required,table=0147,display=Specifies the policy type.  Refer to User-defined Table 0147 - Policy Type for suggested values."`
	AmountClass               *CWE    `hl7:"2,table=0193,display=Specifies the amount quantity class.  Refer to User-defined Table 0193 - Amount Class for suggested values."`
	MoneyOrPercentageQuantity ST      `hl7:"3,display=Attention: The PTA.3 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v 2.7. Refer to PTA.4 instead."`
	MoneyOrPercentage         MOP     `hl7:"4,required,display=Specifies an amount that may be either currency or a percentage."`
}

// Row Column Definition
//
// This specifies the format of a column in terms of a segment field name, a data type, and a maximum length.
//
// Example: This defines a column containing the value of the "last name" component of PID-5, expressed as a ST data type with
// a maximum width of 20.
// |@PID.5.1^ST^20|
type RCD struct {
	HL7                HL7Name `hl7:",name=RCD,len=0,type=d"`
	SegmentFieldName   ST      `hl7:"1,len=12,display=The HL7 segment field name- which identifies the field occupying the column  Naming conventions: Segment field names are designated by the ‚Äú@‚Äù symbol concatenated with the HL7 segment ID followed by the sequence number for the field separated by a period. See sections 2.5.2- 'Segments and segment groups' and 2.5.3.1- 'Position (sequence within the segment)' for a definition of segment ID and sequence number. If the field is divided into components- the designation may be suffixed with '.nn'- to identify a particular component (a suffix of ‚Äú.3‚Äù indicates the third component of the field); otherwise- the whole field is assumed. If the field is further divided into subcomponents- the designation is suffixed with ‚Äú.nn.mm'- which identifies the component and subcomponent requested by relative position.  Site-specific segment field names may be used. In this case- the site-specific segment ID (if the field is not being added to an existing HL7 segment) and the sequence number must be defined so that they do not conflict with existing HL7 segment IDs and field sequence numbers. Values for this field are defined in the function-specific chapters of this specification.  Note: If the ‚Äú@‚Äù is being used as one of the delimiter characters defined in MSH-2-encoding characters- it must be ‚Äúescaped.‚Äù  See Section 2.7.1- 'Formatting Codes'."`
	Hl7DataType        ID      `hl7:"2,len=3,table=0440,display=The two or three character HL7 data type. Refer to HL7 Table 0440 ‚Äì Data Types for valid values."`
	MaximumColumnWidth NM      `hl7:"3,len=5,display=The maximum width of the column- as dictated by the responding system. This may vary from the HL7-defined maximum field length."`
}

// Reference Range
//
// Describes a reference range and its supporting detail.
//
// Note: Replaces the CM data type used in sections 8.8.4.6 - OM2-6, 8.8.4.7 - OM2-7 and 8.8.4.8 - OM2-8 as of v 2.5.
//
// Examples:
// - A range that applies unconditionally, such as albumin, is transmitted as: |3.0&5.5|
// - A normal range that depends on sex, such as Hgb, is transmitted as: |13.5&18^M~12.0 & 16^F|
// - A normal range that depends on age, sex, and race (a concocted example) is: |10&13^M^0&2^^^B11&13.5^M^2&20^^^B~12&14.5^M^20&70^^^B~13&16.0^M^70&^^^B|
//
// When no value is specified for a particular component, the range given applies to all categories of that component. For
// example, when nothing is specified for race/species, the range should be taken as the human range without regard to race.
// If no age range is specified, the normal range given is assumed to apply to all ages.
type RFR struct {
	HL7                 HL7Name `hl7:",name=RFR,len=0,type=d"`
	NumericRange        NR      `hl7:"1,required,display=This component specifies the numeric interval of the reference data. Range is taken to be inclusive (i.e.- the range includes the end points). Units are context sensitive and are defined in the usage note for the field where this data type is used."`
	AdministrativeSex   *CWE    `hl7:"2,table=0001,display=This component specifies which gender for which the reference range is valid. Refer to User-defined Table 0001 ‚Äì Administrative Sex in Chapter 2C- section 3.4.2.8- 'Administrative Sex' for suggested values."`
	AgeRange            *NR     `hl7:"3,display=This component specifies the age range for which the reference range is valid. Ages of less than one year should be specified as a fraction (e.g.- 1 month : 0.0830- 1 week : 0.01920- 1 day : 0.0027300). However- for most purposes involving infants- the gestational age (measured in weeks) is preferred. The lower end of the range is not indicated; the upper end is- assuring that series of ranges do not overlap."`
	GestationalAgeRange *NR     `hl7:"4,display=This component specifies the gestational age range for which the reference range is valid. Gestational age is relevant only when the reference range is influenced by the stage of pregnancy. The gestational age is measured in weeks from conception. For example- |1&4| implies that the normals apply to gestational ages from 1 week to 4 weeks inclusive. The lower end of the range is not included; the upper end is- assuring that series of age ranges do not overlap."`
	Species             ST      `hl7:"5,display=This component specifies the species for which the reference range is valid. Species is assumed to be human unless otherwise stated. Example values are rabbit- mouse- and rat."`
	RaceSubspecies      ST      `hl7:"6,display=This component specifies the race or subspecies for which the reference range is valid. In the case of humans (the default species)- the race is specified when race influences the reference range. When normal ranges for animals are being described- this component can be used to describe subspecies or special breeds of animals."`
	Conditions          TX      `hl7:"7,display=This component specifies any arbitrary condition for which the reference range is valid. This may include such conditions as phase of menstrual cycle or dose of a particular drug. It is provided as a way to communicate the normal ranges for special conditions. It does not allow automatic checking of these text conditions."`
}

// Repeat Interval
//
// Contains the interval between repeated services.
//
// Note: The reader is referred to the RPT ‚Äì Repeat pattern data type, which provides a more rigorous framework for defining
// repeating time intervals.
type RI struct {
	HL7                  HL7Name `hl7:",name=RI,len=0,type=d"`
	RepeatPattern        *CWE    `hl7:"1,table=0335,display=The repeating frequency with which the treatment is to be administered. It is similar to the frequency and SIG code tables used in order entry systems.  Refer to User-defined Table 0335 - Repeat Pattern for suggested values.  The first component may repeat- with repeat values separated by a space. The repeats are interpreted as connected by logical ANDs.  Example:  - Twice per day- every other day: BID QOD  - Three times per day- Monday Wednesday and Friday: TID QJ135   Because of this syntax- repeat values should never contain blanks."`
	ExplicitTimeInterval ST      `hl7:"2,display=This component explicitly lists the actual times referenced by the code in the first component- in the following format: HHMM-HHMM-HHMM-.... This second component will be used to clarify the first component in cases where the actual times vary within an institution. If the time of the order spans more than a single day- this new component is only practical if the same times of administration occur for each day of the order. If the actual start time of the order (as given by the fourth component of the quantity/timing field) is after the first explicit time- the first administration is taken to be the first explicit time after the start time. In the case where the patient moves to a location having a different set of explicit times- the existing order may be updated with a new quantity/timing field showing the changed explicit times.  Example: 2nd component of quantity/timing field: |QID^0230-0830-1430-2030|"`
}

// Room Coverage
//
// This data type specifies insurance coverage detail for a room.
//
// Note: Replaces the CM data type used in section 6.5.7.28 IN2-28, as of v 2.5.
type RMC struct {
	HL7               HL7Name `hl7:",name=RMC,len=0,type=d"`
	RoomType          CWE     `hl7:"1,required,table=0145,display=Specifies the room type.  Refer to User-defined Table 0145 - Room Type for suggested values."`
	AmountType        *CWE    `hl7:"2,table=0146,display=Specifies amount quantity type.  Refer to User-defined Table 0146 ‚Äì Amount Type for suggested values."`
	CoverageAmount    ST      `hl7:"3,display=Attention: The PTA.3 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v2.7.  Refer to 2.A.64.4- 'Money or Percentage'."`
	MoneyOrPercentage MOP     `hl7:"4,required,display=specifies an amount that may be either currency or a percentage."`
}

// Repeat Pattern
//
// The repeat pattern data type should be used where it is necessary to define the frequency at which an event is to take place.
// This data type provides a way to define repeat pattern codes "on the fly". The repeat pattern code is equivalent to the TQ
// data type, component 2, sub-component 1 (repeat pattern). The additional components define the meaning of the repeat
// pattern code. Components 2 - 10 are used to define relatively simple repeat patterns. Component 11 is provided to define
// complex repeat patterns. This data type forms a bridge between the 2.x Repeat Pattern concept from Quantity/Timing, and
// the Version 3.0 GTS General Timing Specification. Component 1 is the 2.x concept of repeat pattern. Components 2-7 are
// derived from the version 3.0 data type PIVL. Components 8-10 are derived from the version 3.0 EIVL data type. If a repeat
// pattern cannot be defined using components 2-10, then component 11, General Timing Specification is provided. This allows
// the full literal form of the version 3.0 GTS to be specified.
//
// When using the RPT, if an application doesn't recognize the code in component 1, then it may attempt to determine the appropriate
// frequency using the remaining components. If the application does recognize the code in component 1, the application
// is not required to determine the frequency from the remaining components.
// Use Case: The use case supporting this proposal is the need to define repeat patterns on the fly while placing an order. The
// TQ data type did not have the capability to define the meaning of a repeat pattern on the fly. To get around this problem, vendors
// have implemented a variety of solutions to solve this issue. One way was to add Z-components to the TQ data type to transmit
// information about the repeat pattern. Another solution was to attempt to parse the repeat pattern code in an attempt to
// decipher what the code meant.
//
// Examples:
// |Q1H&Every 1 Hour&HL7xxx^^^^1^h|
// |Q2J2&Every second Tuesday&HL7xxx^DW^2^^2^wk|
// |BID&Twice a day at institution specified times&HL7xxx^^^^12^h^Y|
// |QAM&Every morning at the institution specified time&HL7xxx^HD^00^11^1^d^Y|
// |QHS&Every day before the hours of sleep&HL7xxx^^^^1^d^^AHS|
// |ACM&Before Breakfast&HL7xxx^^^^^^^ACM|
type RPT struct {
	HL7                        HL7Name `hl7:",name=RPT,len=0,type=d"`
	RepeatPatternCode          CWE     `hl7:"1,required,table=0335,display=A code representing the repeat pattern defined by the other components of this data type. Refer to User-defined Table 0335 ‚Äì Repeat Pattern for suggested values."`
	CalendarAlignment          ID      `hl7:"2,len=2,table=0527,display=Specifies an alignment of the repetition to a calendar (e.g.- to distinguish every 30 days from ‚Äúthe 5th of every month‚Äù). Refer to HL7 Table 0527 - Calendar Alignment for valid values."`
	PhaseRangeBeginValue       NM      `hl7:"3,display=Used for Calendar aligned repeat patterns to determine the amount of time from the beginning of particular RPT.2 - Calendar Alignment to the beginning of the phase. If Calendar Alignment is DW (days of week)- then this would be the offset from the beginning of the week.   If Phase Range Begin Value is populated- but Phase Range End Value is not populated- then this component defines when the period (RPT.5- 6) begins. If both Phase Range Begin Value and Phase Range End Value are populated- then this component defines the earliest point in time at which the period (RPT.5- 6) will begin.  The units of measure for this component are derived from the Calendar Alignment value in RPT.2. See HL7 Table 0527 - Calendar Alignment for the units of measure associated with a particular calendar alignment."`
	PhaseRangeEndValue         NM      `hl7:"4,display=Used for Calendar aligned repeat patterns to determine the amount of time from the beginning of particular RPT.2 - Calendar Alignment to the end of the phase.   If Phase Range End Value is populated- but Phase Range Begin Value is not populated- then this component defines when the timing period (RPT.5- 6) begins.  If both Phase Range Begin Value and Phase Range End Value are populated- then this component defines the latest point in time at which the period (RPT.5- 6) will begin.  The units of measure for this component are derived from the Calendar Alignment value in RPT.2. See HL7 Table 0527 - Calendar Alignment for the units of measure associated with a particular calendar alignment."`
	PeriodQuantity             NM      `hl7:"5,display=A time duration specifying the frequency at which the periodic interval repeats. RPT.6 - Period Units defines the units of time for this component."`
	PeriodUnits                *CWE    `hl7:"6,conditional,display=Defines the units used for RPT.5 - Period Quantity. Constrained to units of time.  Best practice is to use UCUM. Refer to External table the Unified Code for Units of Measure (UCUM) [http://aurora.rg.iupui.edu/UCUM] for valid values.   Condition Rule: This component is required if RPT.5 - Period Quantity is populated."`
	InstitutionSpecifiedTime   ID      `hl7:"7,len=1,table=0136,display=A code that indicates whether the exact timing is up to the party executing the schedule (e.g.- to distinguish ‚Äúevery 8 hours‚Äù from ‚Äú3 times a day‚Äù).  Refer to HL7 Table 0136 - Yes/No Indicator for valid values.   - Y - exact timing up to party executing schedule.   - N - exact timing as specified."`
	Event                      ID      `hl7:"8,len=3,table=0528,display=A code for a common (periodical) activity of daily living. Refer to HL7 Table 0528 - Event-Related Period for valid values."`
	EventOffsetQuantity        NM      `hl7:"9,display=An interval that marks the offsets for the beginning- width and end of the event-related periodic interval measured from the time each such event actually occurred. A positive numeric value indicates the amount of time after the event in RPT.8. A negative numeric value indicates the amount of time prior to the event in RPT.8. RPT.10 - Event Offset Units defines the units of time for this component.  Usage Note: This component should not be valued unless there is a value in RPT-8 (Event)."`
	EventOffsetUnits           *CWE    `hl7:"10,conditional,display=Defines the units used for RPT-9 (Event Offset Quantity). Constrained to units of time. The codes for unit of measure are specified in the Unified Code for Units of Measure (UCUM) [http://aurora.rg.iupui.edu/UCUM].  Condition Rule: This component is required if RPT.9 - Event Offset Quantity is populated."`
	GeneralTimingSpecification GTS     `hl7:"11,display=The General Timing Specification as defined by the Version 3 Data Types document."`
}

// Street Address
//
// This data type specifies an entity's street address and associated detail.
//
// Note: Appears ONLY in the XAD data type
type SAD struct {
	HL7                    HL7Name `hl7:",name=SAD,len=0,type=d"`
	StreetOrMailingAddress ST      `hl7:"1,display=This component specifies the street or mailing address of a person or institution. When referencing an institution- this first component is used to specify the institution name. When used in connection with a person- this component specifies the first line of the address."`
	StreetName             ST      `hl7:"2,display=Street Name"`
	DwellingNumber         ST      `hl7:"3,display=Dwelling Number"`
}

// Scheduling Class Value Pair
//
// This data type is used to communicate parameters and preferences to the filler application regarding the selection of
// an appropriate time slot, resource, location, or filler override criterion for an appointment.
//
// For use only with the scheduling chapter.
type SCV struct {
	HL7            HL7Name `hl7:",name=SCV,len=0,type=d"`
	ParameterClass *CWE    `hl7:"1,table=0294,display=The first component of this field is a code identifying the parameter or preference being passed to the filler application. Refer to User-defined Table 0294 - Time Selection Criteria Parameter Class Codes for suggested values."`
	ParameterValue ST      `hl7:"2,display=The second component is the actual data value for that parameter.   For example- if a filler application allows preference parameters to be passed to specify a preferred start time- a preferred end time- and preferred days of the week for the appointment- it may define the following parameter class codes and valid data sets."`
}

// Sequence Id
//
// A non-negative integer in the form of a NM field. The uses of this data type are defined in the chapters defining the segments
// and messages in which it appears.
//
// This allows for a number between 0 and 9999 to be specified.
type SI = string

// Structured Numeric
//
// The structured numeric data type is used to unambiguously express numeric clinical results along with qualifications.
// This enables receiving systems to store the components separately, and facilitates the use of numeric database queries.
// The corresponding sets of values indicated with the <comparator> and <separator/suffix> components are intended to
// be the authoritative and complete set of values. If additional values are needed for the <comparator> and <separator/suffix>
// components, they should be submitted to HL7 for inclusion in the Standard.
//
// If <num1> and <num2> are both non-null, then the separator/suffix must be non-null. If the separator is "-", the data range
// is inclusive; e.g., <num1> - <num2> defines a range of numbers x, such that: <num1> <=x<= <num2>.
type SN struct {
	HL7             HL7Name `hl7:",name=SN,len=0,type=d"`
	Comparator      ST      `hl7:"1,len=2,display=Defined as greater than- less than- greater than or equal- less than or equal- equal- and not equal- respectively (:  '>' or '<' or '>:' or '<:' or ':' or '<>'.  If this component is not valued- it defaults to equal (':')."`
	Num1            NM      `hl7:"2,display=A number."`
	SeparatorSuffix ST      `hl7:"3,len=1,display='-' or '+' or '/' or '.' or ':'  Examples: |>^100|  (greater than 100) |^100^-^200|  (equal to range of 100 through 200) |^1^:^228|  (ratio of 1 to 128- e.g.- the results of a serological test) |^2^+|  (categorical response- e.g.- occult blood positivity)"`
	Num2            NM      `hl7:"4,display=A number or null depending on the measurement."`
}

// String Of Telephone Number Digits
//
// A string whose characters are limited to "+" and/or the decimal digits 0  through 9.  As a string, leading zeros are always
// considered significant.
//
// Used only in the XTN data type as of v2.7.
//
// Minimum Length: 1
// Maximum Length: Not specified for the type. May be specified in the context of use
//
// SNM is used for telephone numbers, so it is never appropriate to truncate values of type SNM.
type SNM = string

// Specialty Description
//
// This data type specifies the practitioner‚Äôs specialty and related information.
//
// Note: Replaces the CM data type used in 15.4.5.5 PRA-5 as of v 2.5.
type SPD struct {
	HL7                 HL7Name `hl7:",name=SPD,len=0,type=d"`
	SpecialtyName       ST      `hl7:"1,required,display=Identifies the provider‚Äôs specialty."`
	GoverningBoard      ST      `hl7:"2,display=Identifies the governing body providing for the specialty."`
	EligibleOrCertified ID      `hl7:"3,len=1,table=0337,display=Specifies the certification status. Refer to HL7 Table 0337 ‚Äì Certification Status for valid values."`
	DateOfCertification DT      `hl7:"4,format=YMD,display=Specifies when certification occurred."`
}

// Sort Order
//
// Specifies those parameters by which the response will be sorted and by what method.
//
// Example: In a tabular response query, where the return data is known by column name, the SRT might look like:
// |LastName^A~FirstName^A|
//
// Example: In a segment response query, where the return data is known by segment and offset, the SRT field would use segment
// field name notation:
// |PID.3.1^A~PID.3.2|
type SRT struct {
	HL7         HL7Name `hl7:",name=SRT,len=0,type=d"`
	SortByField ST      `hl7:"1,required,len=12,display=Identifies the field by which the response will be sorted. In a tabular response- this will be the column name to sort by. In the Segment Pattern and the Display Response- this will be the segment field name to sort by. See QIP in Section 2.A.59.1- 'Segment Field Name (ST)' for segment field name definition.  See Chapter 5- 'Query'- for a complete discussion of queries and their responses."`
	Sequencing  ID      `hl7:"2,len=2,table=0397,display=Identifies how the field or parameter will be sorted; and- if sorted- whether the sort will be case sensitive (the default) or not. Refer to HL7 Table 0397 ‚Äì Sequencing  for valid values"`
}

// String Data
//
// The String data type is used for text data when the appearance of text does not bear meaning. This is true for formalized text,
// symbols and formal expressions, and all kinds of names intended for machine processing (e.g., sorting, querying, indexing,
// etc.).
//
// String data is left justified (i.e., no leading blank space) with trailing blanks optional. Any displayable (printable)
// ACSII characters (hexadecimal values between 20 and 7E, inclusive, or ASCII decimal values between 32 and 126), except
// the defined escape characters and defined delimiter characters.
//
// Example 1: A textual ST field:
// |almost any data at all|
//
// Example 2:  URL encoded in an ST component:
// ^http://www.pacs.poupon.edu/wado.jsp^
//
// Example 3:  ISO OID encoded in an ST subcomponent:
// &2.16.840.1.113883.1.1&
//
// To include any HL7 delimiter character (except the segment terminator) within a string data field, use the appropriate
// HL7 escape sequence (see Section 2.7.1, "Formatting Codes‚Äù).
//
// Minimum Length: Not specified for the type. May be specified in the context of use. Defaults to 1
// Maximum Length: Not specified for the type. May be specified in the context of use
//
// ST has no inbuilt semantics ‚Äì these are assigned where the ST is used. In each case where ST is used, minimum, maximum, and
// conformance lengths may be specified.  Unless specified in the context of use, values of type ST may not be truncated.
//
// Usage note: The ST data type is intended for short strings (e.g., less than 1000 characters). For longer strings the TX or
// FT data types should be used (see Sections 2.A.79, ‚ÄúTX - text data‚Äù or 2.A.31, ‚ÄúFT - formatted text data‚Äù).
//
// Alternate character set note: ST - string data may also be used to express other character sets. See Section 2.15.9.18,
// "Character set," and Section 2.15.9.20, "Alternate character set handling" for details.
type ST = string

// Time
//
// Specifies the hour of the day with optional minutes, seconds, fraction of second using a 24-hour clock notation and time
// zone.
//
// As of v 2.3, the number of characters populated (excluding the time zone specification) specifies the precision.
//
// Format: HH[MM[SS[.S[S[S[S]]]]]][+/-ZZZZ]
//
// The fractional seconds could be sent by a transmitter who requires greater precision than whole seconds. Fractional representations
// of minutes, hours or other higher-order units of time are not permitted.
//
// Note: The time zone [+/-ZZZZ], when used, is restricted to legally-defined time zones and is represented in HHMM format.
//
// The time zone of the sender may be sent optionally as an offset from the coordinated universal time (previously known as
// Greenwich Mean Time). Where the time zone is not present in a particular TM field but is included as part of the date/time
// field in the MSH segment, the MSH value will be used as the default time zone. Otherwise, the time is understood to refer to
// the local time of the sender.
//
// Prior to v 2.3, this data type was specified in the format HHMM[SS[.SSSS]][+/-ZZZZ]. As of v 2.3 minutes are no longer required.
// By site-specific agreement, HHMM[SS[.SSSS]][+/-ZZZZ] may be used where backward compatibility must be maintained.This
// corresponds a minimum length of 4.
//
// The TM data type does not follow the normal truncation pattern, and the truncation character is never valid in the TM data
// type. Instead, the truncation behavior is based on the semantics of times.
//
// Unless otherwise specified in the context where the DTM type is used, the DTM type may be truncated to a particular minute.
// When a TM is truncated, the truncated form SHALL still be a valid TM type. Refer to Chapter 2, section 2.5.5.2, "Truncation
// Pattern", for further information.
type TM = time.Time

// Text Data
//
// String data meant for user display (on a terminal or printer). Such data would not necessarily be left justified since leading
// spaces may contribute greatly to the clarity of the presentation to the user. Because this type of data is intended for display,
// it may contain certain escape character sequences designed to control the display. Escape sequence formatting is defined
// in Section 2.7, "Use of escape sequences in text fields". Leading spaces should be included. Trailing spaces should be
// removed.
//
// Example:
// |  leading spaces are allowed.|
//
// Since TX data is intended for display purposes, the repeat delimiter, when used with a TX data field, implies a series of
// repeating lines to be displayed on a printer or terminal. Therefore, the repeat delimiters are regarded as paragraph terminators
// or hard carriage returns (e.g., they would display as though a CR/LF were inserted in the text (DOS type system) or as though
// a LF were inserted into the text (UNIX style system)).
//
// A receiving system would word wrap the text between repeat delimiters in order to fit it into an arbitrarily sized display
// window but start any line beginning with a repeat delimiter on a new line.
//
// To include alternative character sets, use the appropriate escape sequence. See Chapter 2, section 2.14.9.18, "MSH-18
// - Character Set" and section 2.14.9.20, "MSH-20 - Alternate Character Set Handling Scheme".
//
// This specification applies no limit to the length of the TX data type, either here where the data type is defined, or elsewhere
// where the data type is used. While there is no intrinsic reason to limit the length of this data type for semantic or syntactical
// reasons, it is expected that some sort of limitation will be imposed for technical reasons in implementations. HL7 recommends
// that implementation length limits be published in implementation profiles.
type TX = string

// Ub Value Code And Amount
//
// A code structure to relate amounts or values to identified data elements necessary to process this claim as qualified by
// the payer organization.
//
// This data type is used to convey information defined by CMS or other regulatory agencies. It corresponds to UB fields 46A,
// 47A, 48A, 49A, 46B, 47B, 48B, and 49B and UB92 fields 39a, 39b, 39c, 39d, 40a, 40b, 40c, 40d, 41a, 41b, 41c, and 41d.
//
// Note: Replaces the CM data type used in sections 6.5.10.10 UB1-10 and 6.5.11.6 UB2-6, as of v 2.5.
//
// The most common semi-private room rate is used in instances where the patient is placed in a private room at their request
// but their insurance only covers a semi-private room rate, which can be calculated using the 01-most common semi-private
// room rate.
//
// Example:
// |01&most common semi private rate&NUBC^750&USD|
type UVC struct {
	HL7                            HL7Name `hl7:",name=UVC,len=0,type=d"`
	ValueCode                      CWE     `hl7:"1,required,table=0153,display=Specifies the National Uniform Billing Committee (NUBC) code itself.  Refer to External Table 0153 ‚Äì Value Code for valid values. In the United States- values for this component need to come from National Uniform Billing Committee (NUBC); no extensions are allowed.    Other realms should determine the precise set appropriate for their realm."`
	ValueAmount                    *MO     `hl7:"2,display=Specifies the numeric amount when needed to pair with the value when it is monetary."`
	NonMonetaryValueAmountQuantity NM      `hl7:"3,display=Specifies the numeric amount when needed to pair with the value when it is non-monetary. "`
	NonMonetaryValueAmountUnits    *CWE    `hl7:"4,display=This component species the units in which the  non-monetary quantity is expressed. Refer to the Unified Code for Units of Measure (UCUM) for valid values [http://aurora.rg.iupui.edu/UCUM]."`
}

// Varies
type VARIES any

// Visiting Hours
//
// This data type contains the hours when a patient location is open for visiting. Refer to HL7 Table 0267 - Days of the Week for
// valid values for the first two components.
type VH struct {
	HL7            HL7Name `hl7:",name=VH,len=0,type=d"`
	StartDayRange  ID      `hl7:"1,len=3,table=0267,display=Starting day of visiting hours range. See HL7 Table 0267 - Days of the Week for valid values."`
	EndDayRange    ID      `hl7:"2,len=3,table=0267,display=Ending day of visiting hours range. Starting day of visiting hours range. See HL7 Table 0267 - Days of the Week for valid values."`
	StartHourRange TM      `hl7:"3,format=HM,display=Starting hour on starting day of visiting hours range. See first component- 2.A.81.1- 'Start Day Range (ID)'."`
	EndHourRange   TM      `hl7:"4,format=HM,display=Ending hour on ending day of visiting hours range.  See second component- 2.A.81.2- 'End Day Range (ID)'."`
}

// Version Identifier
type VID struct {
	HL7                      HL7Name `hl7:",name=VID,len=0,type=d"`
	VersionID                ID      `hl7:"1,required,len=5,table=0104,display=Used to identify the HL7 version. Refer to HL7 Table 0104 - Version ID in Chapter 2C for valid values."`
	InternationalizationCode *CWE    `hl7:"2,table=0399,display=Used to identify the international affiliate country code. The values to be used are those of ISO 3166 -1:1977. The ISO 3166 table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code.  Refer to HL7 Table 0399 - Country Code in Chapter 2C for the 3-character codes as defined by ISO 3166 table."`
	InternationalVersionID   *CWE    `hl7:"3,display=This field component identifies international affiliate‚Äôs version; it is especially important when the international affiliate has more than a single local version associated with a single US version."`
}

// Extended Address
//
// This data type specifies the address of a person, place or organization plus associated information.
//
// Note: Replaces the AD data type as of v2.3.
//
// Example of usage for US:
// |1000 Hospital Lane^Ste. 123^Ann Arbor ^MI^99999^USA^B^^WA^|
// This would be formatted for postal purposes as
// 1000 Hospital Lane
// Ste. 123
// Ann Arbor MI 99999
//
// Example of usage for Australia:
// |14th Floor^1000 Hospital Lane^Sidney^QLD^9999|
//
// This would be formatted for postal purposes using the same rules as for the American example as
// 14th Floor
// 1000 Hospital Lane
// Sidney QLD 9999
//
// International note: Countries typically have a standard method of formatting addresses. This data type does not specify
// the formatting usages, only the components of a postal address.
type XAD struct {
	HL7                        HL7Name `hl7:",name=XAD,len=0,type=d"`
	StreetAddress              *SAD    `hl7:"1,table=Street,display=This component contains the house number- apartment number- street name- street direction- P.O. Box number- and similar address information. "`
	OtherDesignation           ST      `hl7:"2,display=This component contains the second line of address. In US usage- it qualifies address. Examples: Suite 555 or Fourth Floor. When referencing an institution- this component specifies the street address."`
	City                       ST      `hl7:"3,table=City,display=This component specifies the city- or district or place where the addressee is located depending upon the national convention for formatting addresses for postal usage."`
	StateOrProvince            ST      `hl7:"4,table=State,display=This component specifies the state or province where the addressee is located. State or province should be represented by the official postal service codes for that country."`
	ZipOrPostalCode            ST      `hl7:"5,table=ZipCode,display=This component specifies the zip or postal code where the addressee is located. Zip or postal codes should be represented by the official codes for that country. In the US- the zip code takes the form 99999[-9999]- while the Canadian postal code takes the form A9A9A9- and the Australian Postcode takes the form 9999."`
	Country                    ID      `hl7:"6,len=3,table=0399,display=This component specifies the country where the addressee is located.  HL7 specifies that the 3-character (alphabetic) form of ISO 3166 be used for the country code. Refer to HL7 Table 0399 ‚Äì Country Code for valid values."`
	AddressType                ID      `hl7:"7,conditional,len=3,table=0190,display=This component specifies the kind or type of address. Refer to HL7 Table 0190 - Address Type for valid values.  XAD.7 is required if there are multiple occurrences of XAD in a field."`
	OtherGeographicDesignation ST      `hl7:"8,display=This component specifies any other geographic designation. It includes county- bioregion- SMSA- etc."`
	CountyParishCode           *CWE    `hl7:"9,table=0289,display=A code that represents the county in which the specified address resides. User-defined Table 0289 - County/parish is used as the HL7 identifier for the user-defined table of values for this component. When this component is used to represent the county (or parish)- component 8 <other geographic designation> should not duplicate it (i.e.- the use of <other geographic designation> to represent the county is allowed only for the purpose of backward compatibility- and should be discouraged in this and future versions of HL7).  Allowable values: codes defined by government."`
	CensusTract                *CWE    `hl7:"10,table=0288,display=A code that represents the census tract in which the specified address resides. User-defined Table 0288 - Census Tract is used as the HL7 identifier for the user-defined table of values for this component.  Allowable Values: codes defined by government."`
	AddressRepresentationCode  ID      `hl7:"11,len=1,table=0465,display=Different <name/address types> and representations of the same name/address should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component.  Note: Also note that this new component remains in 'alphabetic' representation with each repetition of the fields using these data types. I.e. even though the address may be represented in an ideographic character set- this component will remain represented in an alphabetic character set. Refer to HL7 Table 0465 ‚Äì Name/address Representation for valid values.  In general this component provides an indication of the representation provided by the data item. It does not necessarily specify the character sets used. Thus- even though the representation might provide an indication of what to expect- the sender is still free to encode the contents using whatever character set is desired. This component provides only hints for the receiver- so it can make choices regarding what it has been sent and what it is capable of displaying."`
	AddressValidityRange       ST      `hl7:"12,display=Attention: The XAD.12 component was retained for backward compatibility as of v2.5 and the detail was withdrawn and removed from the standard as of v2.7. Refer to 2.A.86.13- 'Effective Date (DTM)' and 2.A.86.14- 'Expiration Date (DTM)' components."`
	EffectiveDate              DTM     `hl7:"13,format=YMDHM,display=The first date- if known- on which the address is valid and active for the ‚Äòowning‚Äô entity."`
	ExpirationDate             DTM     `hl7:"14,format=YMDHM,display=The last date- if known- on which the address is valid and active for the ‚Äòowning‚Äô entity."`
	ExpirationReason           *CWE    `hl7:"15,table=0616,display=This identifies why this address was marked as 'ended'.   Refer to User-defined Table 0616 ‚Äì Address Expiration Reason for valid values."`
	TemporaryIndicator         ID      `hl7:"16,len=1,table=0136,display=If 'Y' this indicates that the address is considered temporary.  Refer to HL7 Table 0136 ‚Äì Yes/No Indicator."`
	BadAddressIndicator        ID      `hl7:"17,len=1,table=0136,display=If 'Y'- this indicates that it is not possible to contact the 'owning' entity at this address. Refer to HL7 Table 0136 ‚Äì Yes/No Indicator."`
	AddressUsage               ID      `hl7:"18,len=1,table=0617,display=This indicates how the address is intended to be used.  Refer to User-defined Table 0617 ‚Äì Address Usage for valid values."`
	Addressee                  ST      `hl7:"19,display=Identifies the name of the person or organization that should appear as part of the address. This is also known as the 'Care of' or 'C/O' line."`
	Comment                    ST      `hl7:"20,display=Descriptive information about the use of the address.  Example: 'Do not ring bell.'"`
	PreferenceOrder            NM      `hl7:"21,display=For an entity having multiple addresses- indicates which is the 'most preferred' (lowest number) to 'least preferred' (highest number).  If the preference order is unique across all usages for a given type- then it indicates the preference across all usages- (e.g.- first try my home address- then my business address). Otherwise- the preference order is assumed to only apply within a specific usage.  Preference order numbers need not be sequential (i.e.- four addresses with the priority orders of 10- 1- 5 and 15 are legitimate). The preference order numbers must be non-negative."`
	ProtectionCode             *CWE    `hl7:"22,table=0618,display=Identifies that an address needs to be treated with special care or sensitivity.  The specific set of codes and appropriate handling of such addresses will vary by jurisdiction and is subject to site-specific negotiation. For example- a provider address marked as 'unlisted' might not be printed in an internal address listing.  Refer to User-defined Table 0618 ‚Äì Protection Code for valid values."`
	AddressIdentifier          *EI     `hl7:"23,display=A unique identifier for the address.  This component allows an address to be uniquely identified- and enables the linking of a single address to multiple people and contexts. For example- each member of a family living at the same location would share the same address- having the same identifier. A correction to the address of one family member could be automatically propagated to other members of the family."`
}

// Extended Composite Id Number And Name For Persons
//
// Note: Replaces CN data type as of v 2.3.
//
// This data type is used extensively appearing in the PV1, ORC, RXO, RXE, OBR and SCH segments, as well as others, where there
// is a need to specify the ID number and name of a person.
//
// Example without assigning authority and assigning facility:
// |1234567^Everyman^Adam^A^III^DR^PHD^ADT01^^L^4^M11^MR|
//
// Examples with assigning authority and assigning facility:
//
// Dr. Harold Hippocrates‚Äô provider ID was assigned by the Provider Master and was first issued at Good Health Hospital within
// the Community Health and Hospitals System. Since IS table values (first component of the HD) were not used for assigning
// authority and assigning facility, components 2 and 3 of the HD data type are populated and demoted to sub-components as
// follows:
// 12188^Hippocrates^Harold^H^IV^Dr^MD^^&Provider Master.Community Health and Hospitals&L^L^9^M10^DN^&Good Health
// Hospital.Community Health and Hospitals&L^A
//
// Ludwig van Beethoven's medical record number was assigned by the Master Patient Index and was first issued at Fairview
// Hospital within the University Hospitals System.
// 10535^van Beethoven&van^Ludwig^A^III^Dr^PHD^^&MPI.Community Health and Hospitals&L^L^3^M10^MR^& Good Health
// Hospital.Community Health and Hospitals&L^A
type XCN struct {
	HL7                                         HL7Name `hl7:",name=XCN,len=0,type=d"`
	PersonIdentifier                            ST      `hl7:"1,conditional,display=This component carries the Person Identifier itself. XCN.1- in conjunction with XCN.9 uniquely identifies the entity/person.   XCN.1 is required if XCN.2 is not populated. Both may be populated. "`
	FamilyName                                  FN      `hl7:"2,conditional,table=FirstName,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.A.30- 'FN - family name'.  XCN.2 is required if XCN.1 is not populated. Both may be populated."`
	GivenName                                   ST      `hl7:"3,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"5,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      ST      `hl7:"7,display=Attention: The XCN-7 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v27.. Refer to XCN.21 Professional Suffix."`
	SourceTable                                 CWE     `hl7:"8,table=0297,display=Attention: Retained for backwards compatibility only as of v 2.7. The reader is referred to XCN.9 instead.  User-defined Table 0297 ‚Äì CN ID source is used as the HL7 identifier for the user-defined table of values for this component. Used to delineate the first component."`
	AssigningAuthority                          *HD     `hl7:"9,conditional,table=0363,display=The assigning authority is a unique identifier of the system (or organization or agency of department) that creates the data. User-defined Table 0363 ‚Äì Assigning Authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component- <namespace ID>.  As of v 2.7- the Assigning Authority is conditional. It is required if XCN.1 is populated and neither XCN.22 nor XCN.23 are populated. All 3 components may be populated. No assumptions can be safely made based on position or sequence. Best practice is to send an OID in this component when populated.  The reader is referred to XCN.22 and XCN.23 if there is a need to transmit values with semantic meaning for an assigning jurisdiction or assigning department or agency in addition to- or instead of- an assigning authority. However- all 3 components may be valued.  If- in so doing- it is discovered that the values in XCN.22 and/or XCN.23 conflict with XCN.9- the user would look to the Message Profile or other implementation agreement for a statement as to which takes precedence.  Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment. By site agreement- implementors may continue to use User-defined Table 0300 ‚Äì Namespace ID for the first sub-component."`
	NameTypeCode                                ID      `hl7:"10,conditional,len=5,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name Type for valid values. See Section 2.A.89.7- 'Name Type Code (ID)'.  As of v 2.7- XCN.10 is conditional. It is required if XCN.2 is populated."`
	IdentifierCheckDigit                        ST      `hl7:"11,len=4,display=This component contains the digit- or digits- exclusive of the identifier in XCN.1- calculated by applying an algorithm to all or some of the digits in the number- which may be used to test validity of the non-check-digit identifier."`
	CheckDigitScheme                            ID      `hl7:"12,conditional,len=3,table=0061,display=Contains the code identifying the check digit scheme employed.  Refer to HL7 Table 0061 - Check Digit Scheme for valid values."`
	IdentifierTypeCode                          ID      `hl7:"13,conditional,len=5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the <assigning authority> component. Refer to HL7 Table 0203 - Identifier Type for suggested values.  As of v 2.7- XCN.13 is conditional. It is required if XCN.1 is populated."`
	AssigningFacility                           *HD     `hl7:"14,display=The place or location identifier where the identifier was first assigned to the person. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems.  Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment."`
	NameRepresentationCode                      ID      `hl7:"15,len=1,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component.  Note: This new component remains in ‚Äúalphabetic‚Äù representation with each repetition of the field using these data types. I.e.- even though the name may be represented in an ideographic character set- this component will remain represented in an alphabetic character set. Refer to HL7 Table 0465 ‚Äì Name/address Representation for valid values.  In general this component provides an indication of the representation provided by the data item. It does not necessarily specify the character sets used. Thus- even though the representation might provide an indication of what to expect- the sender is still free to encode the contents using whatever character set is desired. This component provides only hints for the receiver- so it can make choices regarding what it has been sent and what it is capable of displaying."`
	NameContext                                 *CWE    `hl7:"16,table=0448,display=This component is used to designate the context in which a name is used. The main use case is in Australian healthcare for indigenous patients who prefer to use different names when attending different healthcare institutions. Another use case occurs in the US where health practitioners can be licensed under slightly different names and the reporting of the correct name is vital for administrative purposes. Refer to User-defined Table 0448 ‚Äì Name Context for suggested values."`
	NameValidityRange                           ST      `hl7:"17,display=Attention: The XCN.17 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v 2.7. Refer to XCN.19 Effective Date and XCN.20 Expiration Date instead.  This component contains the start and end date/times that define the period during which this name was valid."`
	NameAssemblyOrder                           ID      `hl7:"18,len=1,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 Table 0444 - Name Assembly Order for valid values."`
	EffectiveDate                               DTM     `hl7:"19,format=YMDHM,display=The first date- if known- on which the person name is valid and active."`
	ExpirationDate                              DTM     `hl7:"20,format=YMDHM,display=The last date- if known- on which the person name is valid and active."`
	ProfessionalSuffix                          ST      `hl7:"21,display=Used to specify an abbreviation- or a string of abbreviations denoting qualifications that support the person‚Äôs profession- (e.g.- licenses- certificates- degrees- affiliations with professional societies- etc.). The Professional Suffix normally follows the Family Name when the Person Name is used for display purposes. Please note that this component is an unformatted string and is used for display purposes only. Detailed information regarding the contents of Professional Suffix is obtained using appropriate segments in Chapter 15- 'Personnel Management'."`
	AssigningJurisdiction                       *CWE    `hl7:"22,conditional,display=The geo-political body that assigned the identifier in XCN.1.   As of v 2.7- the Assigning Jurisdiction is conditional. It is required if XCN.1 is populated and neither XCN.9 nor XCN.23 are populated. All 3 components may be populated. The reader is referred to XCN.9 if there is a need to transmit this information as an OID."`
	AssigningAgencyOrDepartment                 *CWE    `hl7:"23,conditional,display=The agency or department that assigned the identifier in XCN.1.  As of v 2.7- the Assigning Jurisdiction is conditional. It is required if XCN.1 is populated and neither XCN.9 nor XCN.22 are populated. All 3 components may be populated. The reader is referred to XCN.9 if there is a need to transmit this information as an OID."`
	SecurityCheck                               ST      `hl7:"24,display=This component is used to communicate a version code that may be assigned to the value given in XCN.1 Person Identifier."`
	SecurityCheckScheme                         ID      `hl7:"25,len=3,table=0904,display=This component is used to transmit information intended to validate the veracity of the supplied identifier or the presenter of the identifier. For example- this component may be used to ensure that the presenter of a credit card is an authorized user of that card.  Refer to HL7 Table 0904 - Security Check Scheme for valid values"`
}

// Extended Composite Name And Identification Number For Organizations
//
// This data type is used in fields (e.g., PV2-23, NK1-13, PD1-3, OBR-44) to specify the name and ID number of an organization.
//
// Example 1:
// The ID for Good Health Hospital was assigned by the Community Health and Hospitals enterprise‚Äôs Hospital Master and was
// first issued at the Central Offices.
// Good Health Hospital^L^716^9^M10^&Hospital Master.Community Health and Hospitals&L^XX^&Central Offices.Community
// Health and Hospitals&L^A
//
// Example 2:
// Good Health Hospital has another ID that was issued by CMS. Assigning Authority, CMS, values only the first HD component,
// an IS data type and assigning facility is not relevant. This information might be transmitted accordingly:
// Good Health Hospital^L^4544^3^M10^CMS^XX^^A
type XON struct {
	HL7                      HL7Name `hl7:",name=XON,len=0,type=d"`
	OrganizationName         ST      `hl7:"1,display=The name of the specified organization."`
	OrganizationNameTypeCode *CWE    `hl7:"2,table=0204,display=A code that represents the type of name i.e.- legal name- display name. Refer to User-defined Table 0204 - Organizational Name Type for suggested values."`
	IDNumber                 ST      `hl7:"3,display=Attention: The XON.3 component was deprecated as of v 2.5 and the detail was withdrawn and removed from the standard as of v 2.7. Refer to XON.10 Organization Identifier."`
	IdentifierCheckDigit     ST      `hl7:"4,display=Attention: The XON.4 component was deprecated as of v 2.5 and the detail was withdrawn and removed from the standard as of v 2.7."`
	CheckDigitScheme         ST      `hl7:"5,len=3,display=Attention: The XON.5 component was deprecated as of v 2.5 and the detail was withdrawn and removed from the standard as of v 2.7."`
	AssigningAuthority       *HD     `hl7:"6,table=0363,display=The assigning authority is a unique identifier of the system (or organization or agency or department) that creates the data. Assigning authorities are unique across a given HL7 implementation. Refer to User-defined Table 0363 - Assigning Authority for suggested values.   Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment.	  By site agreement- implementers may continue to use User-defined Table 0300 ‚Äì Namespace ID for the first sub-component."`
	IdentifierTypeCode       ID      `hl7:"7,len=5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the 'Assigning authority' component. Refer to HL7 Table 0203 - Identifier Type for suggested values."`
	AssigningFacility        *HD     `hl7:"8,display=The place or location identifier where the identifier was first assigned to the person. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems.  Note: When the HD data type is used in a given segment as a component of a field of another data type- User-defined Table 0300 - Namespace ID (referenced by the first sub-component of the HD component) may be re-defined (given a different user-defined table number and name) by the technical committee responsible for that segment."`
	NameRepresentationCode   ID      `hl7:"9,len=1,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component.  Note: This new component remains in ‚Äúalphabetic‚Äù representation with each repetition of the field using these data types- i.e. even though the name may be represented in an ideographic character set- this component will remain represented in an alphabetic character set.  Refer to HL7 Table 0465 ‚Äì Name/address Representation Code for valid values.  In general this component provides an indication of the representation provided by the data item. It does not necessarily specify the character sets used. Thus- even though the representation might provide an indication of what to expect- the sender is still free to encode the contents using whatever character set is desired. This component provides only hints for the receiver- so it can make choices regarding what it has been sent and what it is capable of displaying."`
	OrganizationIdentifier   ST      `hl7:"10,display=This component contains the sequence of characters (the code) that uniquely identifies the item being referenced by XON.1 Organization Name. This component replaces XON.3 ID Number as of v 2.5.  Note: The check digit and code identifying check digit scheme are null if Organization identifier is alphanumeric."`
}

// Extended Person Name
//
// Note: Replaces PN data type as of v 2.3.
type XPN struct {
	HL7                                         HL7Name `hl7:",name=XPN,len=0,type=d"`
	FamilyName                                  FN      `hl7:"1,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.A.30- 'FN - family name'.  XPN.1 will be empty when XPN.7 is MSK. It MAY be empty when XPN.7 is NAV.  Usage Note: If a person‚Äôs name has only one component- that name will be sent in XPN.1 Family Name. This is common practice in some countries such as Indonesia. This note does not cover the case where only one part of a person's multi-part name is known (e.g.- only know 'John' of 'John Doe')."`
	GivenName                                   ST      `hl7:"2,table=FirstName,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"3,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"4,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"5,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      ST      `hl7:"6,display=Attention: The XPN-6 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v 2.7. See XPN.14 Professional Suffix."`
	NameTypeCode                                ID      `hl7:"7,len=5,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name Type for valid values.  Note: The content of Legal Name is country specific. In the US the legal name is the same as the current married name."`
	NameRepresentationCode                      ID      `hl7:"8,len=1,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component.  Note: This new component remains in 'alphabetic' representation with each repetition of the field using these data types- i.e.- even though the name may be represented in an ideographic character set- this component will remain represented in an alphabetic character set. Refer to HL7 Table 0465 ‚Äì Name/address Representation for valid values.  In general this component provides an indication of the representation provided by the data item. It does not necessarily specify the character sets used. Thus- even though the representation might provide an indication of what to expect- the sender is still free to encode the contents using whatever character set is desired. This component provides only hints for the receiver- so it can make choices regarding what it has been sent and what it is capable of displaying."`
	NameContext                                 *CWE    `hl7:"9,table=0448,display=This component is used to designate the context in which a name is used. The main use case is in Australian healthcare for indigenous patients who prefer to use different names when attending different healthcare institutions. Another use case occurs in the US where health practitioners can be licensed under slightly different names and the reporting of the correct name is vital for administrative purposes. Refer to User-defined Table 0448 ‚Äì Name Context for suggested values."`
	NameValidityRange                           ST      `hl7:"10,display=Attention: The XPN.10 component was deprecated as of v2.5 and the detail was withdrawn and removed from the standard as of v2.7. Refer to 2.A.89.12- 'Effective date (DTM)' and 2.A.89.13- 'Expiration date (DTM)' components."`
	NameAssemblyOrder                           ID      `hl7:"11,len=1,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 0444 ‚Äì Name Assembly Order for valid values."`
	EffectiveDate                               DTM     `hl7:"12,format=YMDHM,display=The first date- if known- on which the person name is valid and active."`
	ExpirationDate                              DTM     `hl7:"13,format=YMDHM,display=The last date- if known- on which the person name is valid and active."`
	ProfessionalSuffix                          ST      `hl7:"14,display=Used to specify an abbreviation- or a string of abbreviations denoting qualifications that support the person‚Äôs profession- (e.g.- licenses- certificates- degrees- affiliations with professional societies- etc.). The Professional Suffix normally follows the Family Name when the Person Name is used for display purposes. Please note that this component is an unformatted string and is used for display purposes only. Detailed information regarding the contents of Professional Suffix is obtained using appropriate segments in Chapter 15- Personnel Management."`
	CalledBy                                    ST      `hl7:"15,display=A 'called by' name is the name that is preferred when a person is directly addressed; sometimes known as a nickname. Note: The called by component contains a name that could be categorized as a nickname using the name usage types in HL7 Table 0200 - Name type. Its use is reserved for instances in which the nickname is a single name part that is provided in addition to a name that has some other type- such as legal. It is understood that the 'called by' name is not part of the full name. Where a nickname has more parts- possibly including a family name- a different XPN with a type of nickname should instead be used.  Examples:  - James Robert Smith is Called By Jim Bob  - James Robert Smith is Called By JR  - Peter Richard Smith is Called By Richard  - Mary Margaret Elizabeth Jones is Called By Meg."`
}

// Extended Telecommunication Number
//
// Example 1: A Work fax number
// ^WPN^FX^^^734^6777777
//
// Example 2: Telephone number with extension
// ^WPN^PH^^^734^6777777^1
//
// Telephone number with internal code. In this example, assume that a corporation's telephone system supports a full external
// telephone number (area code and telephone number). It also supports internal dialing standards that assign a code to each
// facility and an extension to each telephone (which happens to be the last 4 digits of the external telephone number, by convention).
type XTN struct {
	HL7                               HL7Name `hl7:",name=XTN,len=0,type=d"`
	TelephoneNumber                   ST      `hl7:"1,table=PhoneNumber,display=Attention: The XTN-1 component was deprecated as of v2.3 and the detail was withdrawn and removed from the standard as of v2.6."`
	TelecommunicationUseCode          ID      `hl7:"2,len=3,table=0201,display=A code that represents a specific use of a telecommunication number. Refer to HL7 Table 0201 - Telecommunication Use Code for valid values. This component along with XTN.3 describes the nature of the telecommunication data that follows. Best practice requires the population of XTN.2 when XTN.4 or XTN.7 is populated. "`
	TelecommunicationEquipmentType    ID      `hl7:"3,required,len=8,table=0202,display=A code that represents the type of telecommunication equipment. Refer to HL7 Table 0202 - Telecommunication Equipment Type for valid values. This component along with XTN.2 describes the nature of the telecommunication data that follows and is necessary to accurately interpret it."`
	CommunicationAddress              ST      `hl7:"4,conditional,display=This component is required if- and only allowed if- XTN.7 or XTN.12 are not populated.  Note: If any of the HL7 delimiters are found in the Communication Address- such as @- the appropriate HL7 escape sequence SHALL be used when encoding an Internet address (see Chapter 2- 'Control'- section 2.7.1- 'Formatting Codes')."`
	CountryCode                       SNM     `hl7:"5,display=The numeric code assigned by the International Telecommunication Union in standard E.164 to access telephone services in another country.  For example- '+1' is the country code for the United States- '+49' is the code for Germany."`
	AreaCityCode                      SNM     `hl7:"6,display=The numeric code to access telephone services in another area/city within a country. This number historically needs not be dialed if the caller is located in the same area/city as the phone number of the called party.  The use and size of area/city codes is however country specific: some countries do not use area/city codes- or the use of area/city codes may be mandatory when dialing- or area/city codes may be used to group phone numbers based on other criteria than geographic location- such as cell-phone area/city-codes- or free information numbers (e.g.- 800 numbers).  Most countries have a prefix for Area/City codes which only has to be dialed if one doesn't use a country code. This prefix (mostly '0'- sometimes '9') should be omitted from the content of this field. If the prefix for the Area/Code is also mandatory if one uses the country code (e.g.- in Italy) then this field should also contain the prefix."`
	LocalNumber                       SNM     `hl7:"7,conditional,display=The numeric code used to contact the called party- exclusive of country and area/city codes. The Local Number is required when- and allowed only if- XTN.4 and XTN.12 are not populated.   The size of the Local Number is country specific.  Note that the Local Number does not include the numeric codes that have to be dialed once a connection has been established. Examples include (automated) organizational phone systems which allow external callers to dial additional numeric codes. These additional numeric codes should be specified as an extension."`
	Extension                         SNM     `hl7:"8,conditional,display=The numeric code to contact the called party used within an organization- e.g.- the number used if both caller and called party are located within the same organization. The extension is often the same as the last few digits of the Local Number. The use of extensions is country and site specific- and may depend on the type of phone system (PBX) used by the organization."`
	AnyText                           ST      `hl7:"9,display=Contains comments with respect to the telephone number.  Example: |^^^^^^^^Do not use after 5PM|"`
	ExtensionPrefix                   ST      `hl7:"10,display=The characters established within a company‚Äôs internal telephone system network used as a prefix to the Extension component for internal dialing. Note that the use of Extension Prefix requires that the Extension component be valued and that digits- as well as special characters (e.g.- *- #) may be used."`
	SpeedDialCode                     ST      `hl7:"11,display=The characters established within a company‚Äôs internal telephone system used in place of the (external) telephone number to facilitate calling because its length is shorter than that of the telephone number. Note that digits- as well as special characters (e.g.- *- #) may be used."`
	UnformattedTelephoneNumber        ST      `hl7:"12,conditional,display=An expression of the telephone number as an unparsable string. The Unformatted Telephone number is required when- and allowed only if- XTN.4 and XTN.7 are not populated. The phone number was entered as free text and sending system does not know how to parse it.   Example: |^^^^^^^^^^^1-800-Dentist|"`
	EffectiveStartDate                DTM     `hl7:"13,format=YMDHM,display=The first date- if known- on which the telecommunication number is valid and active."`
	ExpirationDate                    DTM     `hl7:"14,format=YMDHM,display=The last date- if known- on which the telecommunication number is valid and active."`
	ExpirationReason                  *CWE    `hl7:"15,table=0868,display=Indicates why this contact number/e-mail was marked as 'ended'.  Refer to User-defined Table 0868 ‚Äì Telecommunication Expiration Reason for valid values."`
	ProtectionCode                    *CWE    `hl7:"16,table=0618,display=Indicates whether this information is considered sensitive or should be protected in some way. Refer to User-defined table 0618 - Protection Code for suggested values. The specific set of codes and appropriate handling of such telecommunications addresses will vary by jurisdiction and is subject to site-specific negotiation. For example- a provider address marked as 'unlisted' might not be printed in an internal address listing."`
	SharedTelecommunicationIdentifier *EI     `hl7:"17,display=A unique identifier for the phone number or e-mail address.  This component allows a phone number to be uniquely identified- and enables the linking of a single phone number to multiple people and contexts. For example- each member of a family living at the same location would share the same phone number- having the same identifier. A correction to the phone number of one family member could be automatically propagated to other members of the family.  HL7 does not assume responsibility for the processing rules for this component."`
	PreferenceOrder                   NM      `hl7:"18,display=For an entity having multiple telecommunication addresses- indicates which is the 'most preferred' (lowest number) to 'least preferred' (highest number).  If the preference order is unique across all usages for a given type- then it indicates the preference across all usages- (e.g. first try my home number- then my business number). If the preference order is unique across all usages and types- then it indicates the preference across all types of telecommunication addresses.  (E.g.- first try my phone; if that doesn't work- use my pager.) Otherwise- the preference order is assumed to only apply within a specific type and usage.  Preference order numbers need not be sequential (i.e.- three numbers with the priority orders of 0- 5 and 15 are legitimate).  The preference order numbers must be non-negative."`
}
