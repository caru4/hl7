// Code generated by "hl7fetch -pkgdir h271 -root ./genjson -version 2.7.1 -network"; DO NOT EDIT.

package h271

//
type ACK struct {
	HL7 HL7Name `hl7:",name=ACK,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
}

// Procedure
type ADT_A01_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A01_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Admit/visit notification
//
// An A01 event is intended to be used for "Admitted" patients only. An A01 event is sent as a result of a patient undergoing the
// admission process which assigns the patient to a bed. It signals the beginning of a patient's stay in a healthcare facility.
// Normally, this information is entered in the primary Patient Administration system and broadcast to the nursing units
// and ancillary systems. It includes short stay and "Adam Everyman" (e.g., patient name is unknown) admissions. For example,
// an A01 event can be used to notify: the pharmacy system that a patient has been admitted and may be legitimately prescribed
// drugs; thenursing system that the patient has been admitted and needs a care plan prepared; the finance system of the start
// of the billing period; the dietary system that a new patient has been installed and requires dietary services; the laboratory,
// pathology, and radiology systems that a patient has been admitted and is entitled to receive services; the clinical repository
// that an admission has taken place for the EMR (electronic medical record).
//
// When an account's start and end dates span a period greater than any particular visit, the P01 (add patient account) event
// should be used to transmit the opening of an account. The A01 event can notify systems of the creation of an account as well
// as notify them of a patient's arrival in the healthcare facility. In order to create a new account without notifying of patient's
// arrival, use the P01 event.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin and end date of the provider, use the ROL-5 - Role
// Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer to Chapter
// 15 for the definition of the ROL segment.
type ADT_A01 struct {
	HL7       HL7Name             `hl7:",name=ADT_A01,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A01_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death And Autopsy"`
}

// Transfer a patient
//
// An A02 event is issued as a result of the patient changing his or her assigned physical location.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition. If the transfer function
// of your Patient Administration system allows demographics to change at the same time as the transfer (for example an address
// change), we recommend (but do not require) sending two messages (an A02 followed by an A08). This A02 event can be used with
// admitted and non-admitted patients.
//
// The new patient location should appear in PV1-3 - Assigned Patient Location while the old patient location should appear
// in PV1-6 - Prior Patient Location. For example, an A02 event can be used to notify: laboratory, radiology, pathology that
// the patient has changed location and test results should be redirected; pharmacy that drugs should be redirected for the
// patient; dietary that the meals should be delivered to a different location; the clinical repository that a transfer has
// taken place for the Electronic Medical Record.
//
// If the patient is going to a temporary location (such as the O/R, X-RAY, LIMBO, the HALLWAY) it is recommended that the A09
// (patient departing-tracking) and A10 (patient arriving-tracking) events be used instead of A02. It is recommended that
// A02 be used only for a real change in the census bed in the Patient Administration system.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer
// to Chapter 15 for the definition of the ROL segment.
type ADT_A02 struct {
	HL7  HL7Name `hl7:",name=ADT_A02,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV  []ARV   `hl7:"7,display=Access Restriction"`
	ROL  []ROL   `hl7:"8,display=Role"`
	PV1  *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	ARV2 []ARV   `hl7:"11,display=Access Restriction"`
	ROL2 []ROL   `hl7:"12,display=Role"`
	DB1  []DB1   `hl7:"13,display=Disability"`
	OBX  []OBX   `hl7:"14,display=Observation/result"`
	PDA  *PDA    `hl7:"15,display=Patient Death And Autopsy"`
}

// Procedure
type ADT_A03_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A03_Procedure,type=tg"`
	PR1 *PR1    `hl7:"18,required,display=Procedures"`
	ROL []ROL   `hl7:"19,display=Role"`
}

// Insurance
type ADT_A03_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Discharge/end visit
//
// An A03 event signals the end of a patient's stay in a healthcare facility. It signals that the patient's status has changed
// to "discharged" and that a discharge date has been recorded. The patient is no longer in the facility. The patient's location
// prior to discharge should be entered in PV1-3 - Assigned Patient Location.
//
// An A03 event can be sent to notify: the pharmacy that the patient's stay has ended and that entitlement to drugs has changed
// accordingly; the nursing system that the patient has been discharged and that the care plan can be completed; the extended
// care or home health system that the patient has been discharged and that the new extended care or home health admission assessment
// can be scheduled; the finance system that the patient billing period has ended; and/or the clinical repository that discharge
// has taken place for the EMR.
//
// For non-admitted patients, an A03 event signals the end of a patient's visit to a healthcare facility. It could be used to
// signal the end of a visit for a one-time or recurring outpatient who is not assigned to a bed. It could also be used to signal
// the end of a visit to the Emergency Room. PV1-45 - Discharge Date/Time can be used for the visit end date/time.
//
// When an account's start and end dates span a period greater than any particular visit, the P06 (end account) event should
// be used to transmit information about the closing of an account. To indicate that a patient has expired, use an A03 event
// with the PID-29 - Patient Death Date and Time and PID-30 - Patient Death Indicator filled in.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. The optional allergy,
// next-of-kin, insurance and guarantor fields should be sent when required to support advanced notification for pending
// extended care or home health admission requirements (such as scheduling of a nursing assessment in preparation for completion
// of the extended care plan). When other important fields change, it is recommended that the A08 (update patient information)
// event be used in addition.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin date and end date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code.
type ADT_A03 struct {
	HL7       HL7Name             `hl7:",name=ADT_A03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	AL1       []AL1               `hl7:"15,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"16,display=Diagnosis"`
	DRG       *DRG                `hl7:"17,display=Diagnosis Related Group"`
	Procedure []ADT_A03_Procedure `hl7:",display=Procedure"`
	OBX       []OBX               `hl7:"20,display=Observation/result"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A03_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	PDA       *PDA                `hl7:"27,display=Patient Death And Autopsy"`
}

// Procedure
type ADT_A04_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A04_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A04_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Register a patient
//
// An A04 event signals that the patient has arrived or checked in as a one-time, or recurring outpatient, and is not assigned
// to a bed. One example might be its use to signal the beginning of a visit to the Emergency Room (= Casualty, etc.). Note that
// some systems refer to these events as outpatient registrations or emergency admissions. PV1-44 - Admit Date/Time is used
// for the visit start date/time.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer
// to Chapter 15 for the definition of the ROL segment.
type ADT_A04 struct {
	HL7       HL7Name             `hl7:",name=ADT_A04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A04_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A04_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death And Autopsy"`
}

// Procedure
type ADT_A05_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A05_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A05_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Pre-admit a patient
//
// An A05 event is sent when a patient undergoes the pre-admission process. During this process, episode-related data is
// collected in preparation for a patient's visit or stay in a healthcare facility. For example, a pre-admit may be performed
// prior to inpatient or outpatient surgery so that lab tests can be performed prior to the surgery. This event can also be used
// to pre-register a non-admitted patient.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Visit level providers (corresponding
// to the PV1 data) are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer
// to Chapter 15 for the definition of the ROL segment.
type ADT_A05 struct {
	HL7       HL7Name             `hl7:",name=ADT_A05,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A05_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A05_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
}

// Procedure
type ADT_A06_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A06_Procedure,type=tg"`
	PR1 *PR1    `hl7:"20,required,display=Procedures"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Insurance
type ADT_A06_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A06_Insurance,type=tg"`
	IN1 *IN1    `hl7:"23,required,display=Insurance"`
	IN2 *IN2    `hl7:"24,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"25,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"26,display=Role"`
}

// Change an outpatient to an inpatient
//
// An A06 event is sent when a patient who was present for a non-admitted visit is being admitted after an evaluation of the seriousness
// of the patient's condition. This event changes a patient's status from non-admitted to admitted. The new patient location
// should appear in PV1-3 - Assigned Patient Location, while the old patient location (if different) should appear in PV1-6
// - Prior Patient Location. The new patient class should appear in PV1-2 - Patient Class.
//
// It will be left to implementation negotiation to determine whether disparate systems merely change the patient class,
// or close and open a new account. The current active account number should appear in field PID-18 - Patient Account Number;
// the prior account number can be included optionally in MRG-3 - Prior Patient Account Number. This arrangement is not intended
// to be a type of merge. The MRG segment isused here only for MRG-3 - Prior Patient Account Number. PV1-19 - Visit Number may
// also be changed during this event.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Visit level providers (corresponding
// to the PV1 data) are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer
// to Chapter 15 for the definition of the ROL segment.
type ADT_A06 struct {
	HL7       HL7Name             `hl7:",name=ADT_A06,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	MRG       *MRG                `hl7:"9,display=Merge Patient Information"`
	NK1       []NK1               `hl7:"10,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"11,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"12,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"13,display=Access Restriction"`
	ROL2      []ROL               `hl7:"14,display=Role"`
	DB1       []DB1               `hl7:"15,display=Disability"`
	OBX       []OBX               `hl7:"16,display=Observation/result"`
	AL1       []AL1               `hl7:"17,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"18,display=Diagnosis"`
	DRG       *DRG                `hl7:"19,display=Diagnosis Related Group"`
	Procedure []ADT_A06_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"22,display=Guarantor"`
	Insurance []ADT_A06_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"27,display=Accident"`
	UB1       *UB1                `hl7:"28,display=Ub82"`
	UB2       *UB2                `hl7:"29,display=Uniform Billing Data"`
}

// Procedure
type ADT_A07_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A07_Procedure,type=tg"`
	PR1 *PR1    `hl7:"20,required,display=Procedures"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Insurance
type ADT_A07_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"23,required,display=Insurance"`
	IN2 *IN2    `hl7:"24,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"25,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"26,display=Role"`
}

// Change an inpatient to an outpatient
//
// An A07 event is sent when a patient who was admitted changes his/her status to "no longer admitted" but is still being seen
// for this episode of care. This event changes a patient from an "admitted" to a "non-admitted" status. The new patient location
// should appear in PV1-3 - Assigned Patient Location, while the old patient location (if different) should appear in PV1-6
// - Prior Patient Location.
//
// It will be left to implementation negotiation to determine whether disparate systems merely change the patient class,
// or close and open a new account. The current active account number should appear in field PID-18 - Patient Account Number;
// the prior account number can be included optionally in MRG-3 - Prior Patient Account Number. This arrangement is not intended
// to be a type of merge. The MRG segment is used here only for MRG-3 - Prior Patient Account Number. PV1-19 - Visit Number may
// also be changed during this event.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin and end date of the provider, use the ROL-5 - Role
// Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer to Chapter
// 15 for the definition of the ROL segment.
type ADT_A07 struct {
	HL7       HL7Name             `hl7:",name=ADT_A07,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	MRG       *MRG                `hl7:"9,display=Merge Patient Information"`
	NK1       []NK1               `hl7:"10,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"11,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"12,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"13,display=Access Restriction"`
	ROL2      []ROL               `hl7:"14,display=Role"`
	DB1       []DB1               `hl7:"15,display=Disability"`
	OBX       []OBX               `hl7:"16,display=Observation/result"`
	AL1       []AL1               `hl7:"17,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"18,display=Diagnosis"`
	DRG       *DRG                `hl7:"19,display=Diagnosis Related Group"`
	Procedure []ADT_A07_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"22,display=Guarantor"`
	Insurance []ADT_A07_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"27,display=Accident"`
	UB1       *UB1                `hl7:"28,display=Ub82"`
	UB2       *UB2                `hl7:"29,display=Uniform Billing Data"`
}

// Procedure
type ADT_A08_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A08_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A08_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Update patient information
//
// This trigger event is used when any patient information has changed but when no other trigger event has occurred. For example,
// an A08 event can be used to notify the receiving systems of a change of address or a name change. We strongly recommend that
// the A08 transaction be used to update fields that are not updated by any of the other trigger events. If there are specific
// trigger events for this update, these trigger events should be used. For example, if a patient's address and location are
// to be changed, then an A08 is used to change the patient address and the appropriate patient location trigger event is used
// to change the patient location. The A08 event can include information specific to an episode of care, but it can also be used
// for demographic information only.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL, with the applicable ROL-3 - Role Code. Refer to Chapter
// 15 for the definition of the ROL segment.
type ADT_A08 struct {
	HL7       HL7Name             `hl7:",name=ADT_A08,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A08_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A08_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death And Autopsy"`
}

// Patient departing - tracking
//
// The A09 and A10 - patient arriving-tracking events are used when there is a change in a patient's physical location (inpatient
// or outpatient) and when this is NOT a change in the official census bed location, as in the case of an outpatient setting.
// There are three situations that qualify as non-census location changes: (a) patient tracking, (b) the patient is in transit
// between locations for some time, (c) a notification of temporary location change.
//
// Patient tracking: This can be used when the nursing application sends a "transfer" before the Patient Administration
// (or official census) system issues an A02 (transfer a patient) event. If the patient has left for a non-temporary location
// and is not in transit, then the PV1-3 - Assigned Patient Location must contain the new patient location, while PV1-6 - Prior
// Patient Location must contain the old patient location.
//
// In transit: The patient's location during the time between an A09 and an A10 (patient arriving - tracking) is defined as
// "in transit." The A09 event is sent when a patient departs from one area of the healthcare facility for the purpose of arriving
// at another area, but without leaving the healthcare institution. This event is used when there is a time span during which
// the patient is neither at his/her old location nor at his/her new location. This process can take some time if a patient is
// being sent to another area in a multi-campus or multi-facility environment. The combination of an A09 and an A10 would serve
// the same purpose as an A02 (transfer a patient) event, except that it accounts for a gap in time required for transport between
// facilities. If the patient will be in transit during the time between the A09 (patient departing - tracking) event and the
// A10 (patient arriving - tracking) event, then PV1-42 - Pending Location is used for the new location, and PV1-11 - Temporary
// Location and PV1-43 - Prior Temporary Location would not be used. PV1-6 - Prior Patient Location should be used for the old
// location.
//
// Temporary location: An A09 can also be used when the patient is being sent to a temporary location (such as the O/R, X-RAY,
// LIMBO, or HALLWAY). The patient may or may not return to the same assignedlocation after occupying the temporary location.
// If the patient is going to a temporary location (such as the O/R, X-RAY, LIMBO, or HALLWAY), then PV1-11 - Temporary Location
// is used to indicate the new temporary location. If the patient is moving from one temporary location to another, then PV1-43
// - Prior Temporary Location may also be used. PV1-6 - Prior Patient Location and PV1-11 - Temporary Location should be used
// when the patient is moving from a permanent location to a temporary location.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// Attention: The DG1 segment was retained for backward compatibility only as of v2.4 and was withdrawn and removed from this
// message structure as of v2.7.
type ADT_A09 struct {
	HL7 HL7Name `hl7:",name=ADT_A09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Patient arriving - tracking
//
// The A10 event is sent when a patient arrives at a new location in the healthcare facility (inpatient or outpatient). The
// A09 - patient departing-tracking and A10 events are used when there is a change in a patient's physical location and when
// this is NOT a change in the official census bed location, as in the case of an outpatient setting. There are three varieties
// of these non-census location changes involving three different kinds of notification: (a) an unofficial notification
// of location change prior to the official notification of patient tracking, (b) the patient is in transit between locations
// for some time, (c) a notification of a temporary location change.
//
// Patient tracking: If the patient is now at a non-temporary location and is not in transit, then PV1-3 - Assigned Patient
// Location must contain the new patient location and PV1-6 - Prior Patient Location can contain the old patient location.
//
// In transit: This is used when there is some period of time between when the patient leaves his/her old location and when he/she
// arrives at the new assigned location. If the patient was in transit during the time between the A09 (patient departing-tracking)
// event and the A10 (patient arriving-tracking) event, then PV1-3 - Assigned Patient Location is used for the new location
// and PV1-6 - Prior Patient Location should be used for the old location. PV1-11 - Temporary Location and PV1-43 - Prior Temporary
// Location are not used.
//
// Temporary location: An A10 event can also be used when the patient is being transferred from a temporary location (X-RAY,
// O/R, LIMBO, or HALLWAY) to the new assigned location. If the patient is arriving at a temporary location (such as the O/R,
// X-RAY, LIMBO, or HALLWAY), then PV1-11 - Temporary Location would be used to indicate the new temporary location. If the
// patient is moving from one temporary location to another, then PV1-43 - Prior Temporary Location may also be used. If the
// patient is arriving at a permanent location from a temporary location, PV1-3 - Assigned Patient Location should be used
// for the new location, and PV1-43 - Prior Temporary Location should be used for the old location.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// Attention: The DG1 segment was retained for backward compatibility only as of v2.4 and was withdrawn and removed from this
// message structure as of v2.7.
type ADT_A10 struct {
	HL7 HL7Name `hl7:",name=ADT_A10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Cancel admit/visit notification
//
// For "admitted" patients, the A11 event is sent when an A01 (admit/visit notification) event is cancelled, either because
// of an erroneous entry of the A01 event, or because of a decision not to admit the patient after all.
//
// For "non-admitted" patients, the A11 event is sent when an A04 (register a patient) event is cancelled, either because
// of an erroneous entry of the A04 event, or because of a decision not to check the patient in for the visit after all. To cancel
// an A05 (pre-admit a patient) event, use the A38 (cancel pre-admit), which was new for Version 2.3 of this Standard.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// Attention: The DG1 segment was retained for backward compatibility only as of v2.4 and was withdrawn and removed from this
// message structure as of v2.7.
type ADT_A11 struct {
	HL7 HL7Name `hl7:",name=ADT_A11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Cancel transfer
//
// The A12 event is sent when an A02 (transfer a patient) event is cancelled, either because of erroneous entry of the A02 event
// or because of a decision not to transfer the patient after all. PV1-3 - Assigned Patient Location must show the location
// of the patient prior to the original transfer.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) even be used in addition.
//
// Attention: The DG1 segment was retained for backward compatibility only as of v2.4 and was withdrawn and removed from this
// message structure as of v2.7.
type ADT_A12 struct {
	HL7 HL7Name `hl7:",name=ADT_A12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Procedure
type ADT_A13_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A13_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A13_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A13_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Cancel discharge/end visit
//
// The A13 event is sent when an A03 (discharge/end visit) event is cancelled, either because of erroneous entry of the A03
// event or because of a decision not to discharge or end the visit of the patient after all. PV1-3 - Assigned Patient Location
// should reflect the location of the patient after the cancellation has been processed. Note that this location may be different
// from the patient's location prior to the erroneous discharge. Prior Location could be used to show the location of the patient
// prior to the erroneous discharge.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL, with the applicable ROL-3 - Role Code. Refer to Chapter
// 15 for the definition of the ROL segment.
type ADT_A13 struct {
	HL7       HL7Name             `hl7:",name=ADT_A13,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A13_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A13_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death And Autopsy"`
}

// Procedure
type ADT_A14_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A14_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A14_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A14_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Pending admit
//
// An A14 event notifies other systems of a planned admission, when there is a reservation or when patient admission is to occur
// imminently. The A14 event is similar to a pre-admit, but without the implication that an account should be opened for the
// purposes of tests prior to admission. It is used when advanced notification of an admit is required in order to prepare for
// the patient's arrival.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL, with the applicable ROL-3 - Role Code. Refer to Chapter
// 15 for the definition of the ROL segment.
type ADT_A14 struct {
	HL7       HL7Name             `hl7:",name=ADT_A14,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A14_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A14_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
}

// Pending transfer
//
// An A15 event notifies other systems of a plan to transfer a patient to a new location when the patient has not yet left the old
// location. It is used when advanced notification of a transfer is required in order to prepare for the patient's location
// change. For example, this transaction could be sent so that staff will be on hand to move the patient or so that dietary services
// can route the next meal to the new location.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer
// to Chapter 15 for the definition of the ROL segment.
//
// Attention: The DG1 segment was retained in this message for backward compatibility only as of v2.4 and was withdrawn and
// removed from this message structure as of v2.7.
type ADT_A15 struct {
	HL7  HL7Name `hl7:",name=ADT_A15,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV  []ARV   `hl7:"7,display=Access Restriction"`
	ROL  []ROL   `hl7:"8,display=Role"`
	PV1  *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	ARV2 []ARV   `hl7:"11,display=Access Restriction"`
	ROL2 []ROL   `hl7:"12,display=Role"`
	DB1  []DB1   `hl7:"13,display=Disability"`
	OBX  []OBX   `hl7:"14,display=Observation/result"`
}

// Procedure
type ADT_A16_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A16_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A16_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A16_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Pending discharge
//
// An A16 event notifies other systems of a plan to discharge a patient when the patient has not yet left the healthcare facility.
// It is used when advanced notification of a discharge is required in order to prepare for the patient's change in location.
// For example, it is used to notify the pharmacy of the possible need for discharge drugs or to notify psychotherapy of the
// possible need for post-discharge appointments or to notify the extended care or home health system that the patient will
// be discharged and that the new extended care and home health admission assessment can be scheduled.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL, with the applicable ROL-3 - Role Code. Refer to Chapter
// 15 for the definition of the ROL segment.
type ADT_A16 struct {
	HL7       HL7Name             `hl7:",name=ADT_A16,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A16_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A16_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
}

// Swap patients
//
// The A17 is used when it is decided that two patients will exchange beds. The patient ID and visit data are repeated for the
// two patients changing places. When other important fields change, it is recommended that the A08 (update patient information)
// event be used in addition.
type ADT_A17 struct {
	HL7  HL7Name `hl7:",name=ADT_A17,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1  []DB1   `hl7:"9,display=Disability"`
	OBX  []OBX   `hl7:"10,display=Observation/result"`
	PID2 *PID    `hl7:"11,required,display=Patient Identification"`
	PD12 *PD1    `hl7:"12,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV22 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
	DB12 []DB1   `hl7:"15,display=Disability"`
	OBX2 []OBX   `hl7:"16,display=Observation/result"`
}

// Bed status update
//
// Certain nursing/census applications need to be able to update the Patient Administration system's bed status.
type ADT_A20 struct {
	HL7 HL7Name `hl7:",name=ADT_A20,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	NPU *NPU    `hl7:"5,required,display=Bed Status Update"`
}

// Patient goes on a "leave of absence"
//
// An A21 event is sent to notify systems that an admitted patient has left the healthcare institution temporarily. It is used
// for systems in which a bed is still assigned to the patient, and it puts the current admitted patient activities on hold.
// For example, it is used to notify dietary services and laboratory systems when the patient goes home for the weekend.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// As there is no specific field for the LOA start date/time, it is recommended field EVN-6 - Event Occurred contain the date/time
// the patient actually left. PV2-47 - Expected LOA Return Date/Time is used to communicate the date/time the patient is expected
// to return from LOA.
type ADT_A21 struct {
	HL7 HL7Name `hl7:",name=ADT_A21,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Patient returns from a "leave of absence"
//
// An A22 event is sent to notify systems that an admitted patient has returned to the healthcare institution after a temporary
// "leave of absence." It is used for systems in which a bed is still assigned to the patient, and it takes their current admitted
// patient activities off of "hold" status. For example, it is used to notify dietary services and laboratory systems when
// the patient returns from a weekend trip to his/her home.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// As there is no specific field for the LOA start date/time, it is recommended that field EVN-6 - Event Occurred contain the
// date/time the patient actually returned from LOA. PV2-47 - Expected LOA Return Date/Time is used to communicate the date/time
// the patient was expected to return from LOA.
type ADT_A22 struct {
	HL7 HL7Name `hl7:",name=ADT_A22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Delete a patient record
//
// The A23 event is used to delete visit or episode-specific information from the patient record. For example, it is used to
// remove old data from a database that cannot hold all historical patient visit data. When an event was entered erroneously,
// use one of the cancel transactions. This event can be used to purge account-level data while retaining the person in the
// database.
type ADT_A23 struct {
	HL7 HL7Name `hl7:",name=ADT_A23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Link patient information
//
// The A24 event is used when the first PID segment needs to be linked to the second PID segment and when both patient identifiers
// identify the same patient. Linking two or more patients does not require the actual merging of patient information; following
// a link event, the affected patient data records should remain distinct. For example, this event could be used in a hospital
// network environment in which there are multiple campuses and in which records need to be linked. For example, hospital
// A, hospital B, and hospital C would each keep their own records on a patient, but an A24 link event would be sent to a corporate-wide
// MPI to enable the coupling of ID information with the corporate ID number. It is used for corporate data repositories, etc.
// This event is not meant to link mothers and babies since a field exists (PID-21 - Mother's Identifier) for that purpose.
// See section 3.6.3, "Patient record links," for a discussion of issues related to implementing patient link messages and
// MPI issues.
//
// This event can also be used to link two patient identifiers when a patient changes from inpatient to outpatient, or vice
// versa. This event can also be used to link two visits of the same patient.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A24 struct {
	HL7  HL7Name `hl7:",name=ADT_A24,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"7,display=Patient Visit"`
	DB1  []DB1   `hl7:"8,display=Disability"`
	PID2 *PID    `hl7:"9,required,display=Patient Identification"`
	PD12 *PD1    `hl7:"10,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"11,display=Patient Visit"`
	DB12 []DB1   `hl7:"12,display=Disability"`
}

// Cancel pending discharge
//
// The A25 event is sent when an A16 (pending discharge) event is cancelled, either because of erroneous entry of the A16 event
// or because of a decision not to discharge the patient after all.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A25 struct {
	HL7 HL7Name `hl7:",name=ADT_A25,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Cancel pending transfer
//
// The A26 event is sent when an A15 (pending transfer) event is cancelled, either because of erroneous entry of the A15 event
// or because of a decision not to transfer the patient after all.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A26 struct {
	HL7 HL7Name `hl7:",name=ADT_A26,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Cancel pending admit
//
// The A27 event is sent when an A14 (pending admit) event is cancelled, either because of erroneous entry of the A14 event or
// because of a decision not to admit the patient after all.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A27 struct {
	HL7 HL7Name `hl7:",name=ADT_A27,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Procedure
type ADT_A28_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A28_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A28_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A28_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Add person information
//
// The purpose of this and the three following messages was to allow sites with multiple systems and respective master patient
// databases to communicate activity related to a person regardless of whether that person is currently a patient on each
// system. Each system has an interest in the database activity of the others in order to maintain data integrity across an
// institution. Though they are defined within the ADT message set, these messages differ in that they are not patient-specific.
// To a certain registry, the person may be a person of interest, a potential future patient, or a potential guarantor. For
// example, these events can be used to maintain an MPI (master patient index), a cancer registry, members of a managed care
// plan, an HIV database, etc.
//
// These events should not replace the use of the A01 (admit/visit notification), A03 (discharge/end visit), A04 (register
// a patient), A08 (update patient information), etc., events. They are not intended to be used for notification of real-time
// Patient Administration events. These events are primarily for demographic data, but optional historical non-demographic
// data may be sent as well.
//
// The person whose data is being sent should be identified in the PID segment using the PID-3 - Patient Identifier List, even
// when the person is not a patient and may be a potential guarantor. An A28 establishes person identifiers, e.g., social security
// number, guarantor identifier, or other unique identifiers, and contains a person identifier in the PID-3 - Patient Identifier
// List. The person involved may or may not have active or inactive cases associated with them. When field names and descriptions
// say "patient," we must translate that to "person" for these transactions. In this manner, "person information" about
// a guarantor can be sent independently of the guarantor's relation to any patient.
//
// For example, a site with separate inpatient, outpatient and medical records systems may require that each system maintain
// concurrent person information. Prior to an admit, the new person is added to the master database of the inpatient system,
// resulting in the broadcast of a message. The outpatient system receives the message and adds the person to its database
// with the possibility that the person may someday become apatient in its system. The medical records system receives the
// message and adds the person to its database with the possibility that it will track inpatient, outpatient, or clinical
// data for that person. The clinical repository database or MPI receives the message to keep all potential patients and guarantors
// in its database.
//
// The A28 event can be used to send everything that is known about a person. For example, it can be sent to an ICU unit (in addition
// to the A02 (transfer a patient) event) when a patient is transferred to the ICU unit in order to backload all demographic
// information for the patient into the ICU system. An A28 (add person information) or A31 (update person information) can
// also be used for backloading MPI information for the person, or for backloading person and historical information.
// In addition to adding a person to a database, the delete, update, and merge messages work in a similar manner to maintain
// concurrent person information. It is left up to site-specific negotiations to decide how much data must be transmitted
// or re-transmitted when a person becomes a patient.
// To maintain backward compatibility with previous releases, the PV1 segment is required. However, a "pseudo-optional"
// PV1 can be achieved by valuing PV1-2 - Patient Class to N - not applicable.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin and end date of the provider, use the ROL-5 - Role
// Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL,
type ADT_A28 struct {
	HL7       HL7Name             `hl7:",name=ADT_A28,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A28_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A28_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
}

// Delete person information
//
// An A29 event can be used to delete all demographic information related to a given person. This event "undoes" an A28 (add
// person information) event. The information from the A28 event is deleted. This event is used, for example, when adding
// the information was performed in error, or when another record already exists for the person, or when one wants to purge
// the person from the database. When this event occurs, all visit and account level data for this person is also purged.
//
// To maintain backward compatibility with previous releases, the PV1 segment is required. However, a "pseudo-optional"
// PV1 can be achieved by valuing PV1-2 - Patient Class to N - not applicable.
type ADT_A29 struct {
	HL7 HL7Name `hl7:",name=ADT_A29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Procedure
type ADT_A31_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A31_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A31_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A31_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Update person information
//
// An A31 event can be used to update person information on an MPI. It is similar to an A08 (update patient information) event,
// but an A08 (update patient information) event should be used to update patient information for a current episode. An A28
// (add person information) or A31 can also be used for backloading MPI information for the person, or for backloading person
// and historical information.
//
// To maintain backward compatibility with previous releases, the PV1 segment is required. However, a "pseudo-optional"
// PV1 can be achieved by valuing PV1-2 - Patient Class to N - not applicable.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin and end date of the provider, use the ROL-5 - Role
// Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer to Chapter
// 15 for the definition of the ROL segment.
type ADT_A31 struct {
	HL7       HL7Name             `hl7:",name=ADT_A31,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restriction"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restriction"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A31_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A31_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Ub82"`
	UB2       *UB2                `hl7:"28,display=Uniform Billing Data"`
}

// Cancel patient arriving - tracking
//
// The A32 event is sent when an A10 (patient arriving-tracking) event is cancelled, either because of erroneous entry of
// the A10 event or because of a decision not to receive the patient after all.
//
// If the patient was in a non-temporary location, then the PV1-3 - Assigned Patient Location may contain (if known) the original
// patient location prior to the erroneous A10 (patient arriving-tracking) event. If the patient was in a temporary location,
// then PV1-11 - Temporary Location may contain (if known) the original patient location prior to the erroneous A10 (patient
// arriving-tracking) event.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A32 struct {
	HL7 HL7Name `hl7:",name=ADT_A32,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Cancel patient departing - tracking
//
// The A33 event is sent when an A09 (patient departing-tracking) event is cancelled, either because of erroneous entry of
// the A09 event or because of a decision not to send the patient after all.
//
// If the patient was in a non-temporary location, then PV1-3 - Assigned Patient location must contain the original patient
// location prior to the erroneous A09 (patient departing-tracking) event. If the patient was in a temporary location, then
// PV1-11 - Temporary Location must contain the original patient location prior to the erroneous A09 (patient departing-tracking)
// event.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A33 struct {
	HL7 HL7Name `hl7:",name=ADT_A33,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
}

// Unlink patient information
//
// The A37 event unlinks two patient identifiers.
type ADT_A37 struct {
	HL7  HL7Name `hl7:",name=ADT_A37,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"7,display=Patient Visit"`
	DB1  []DB1   `hl7:"8,display=Disability"`
	PID2 *PID    `hl7:"9,required,display=Patient Identification"`
	PD12 *PD1    `hl7:"10,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"11,display=Patient Visit"`
	DB12 []DB1   `hl7:"12,display=Disability"`
}

// Cancel pre-admit
//
// The A38 event is sent when an A05 (pre-admit a patient) event is cancelled, either because of erroneous entry of the A05 event
// or because of a decision not to pre-admit the patient after all.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other fields
// change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A38 struct {
	HL7 HL7Name `hl7:",name=ADT_A38,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/result"`
	DG1 []DG1   `hl7:"11,display=Diagnosis"`
	DRG *DRG    `hl7:"12,display=Diagnosis Related Group"`
}

// Patient
type ADT_A40_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A40_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
}

// Merge patient - patient identifier list
//
// A merge has been done at the patient identifier list level. That is, two PID-3 - Patient Identifier List identifiers have
// been merged into one.
//
// An A40 event is used to signal a merge of records for a patient that was incorrectly filed under two different identifiers.
// The "incorrect source identifier" identified in the MRG segment (MRG-1 - Prior Patient Identifier List) is to be merged
// with the required "correct target identifier" of the same "identifier type code" component identified in the PID segment
// (PID-3 - Patient Identifier List). The "incorrect source identifier" would then logically never be referenced in future
// transactions. It is noted that some systems may still physically keep this "incorrect identifier" for audit trail purposes
// or other reasons associated with database index implementation requirements.
//
// The identifiers involved in identifying the patients may or may not have accounts, which may or may not have visits. An A40
// (merge patient-patient identifier list) event is intended for merging patient records without merging other subordinate
// identifiers. Any other subordinate identifiers that were previously associated with the "incorrect source identifier"
// are now associated with the "correct target identifier." Specification of these other subordinate identifiers is not
// required.
//
// This event and the message syntax do, however, allow for the specification of any other "new subordinate identifiers"
// (in addition to the PID-3 - Patient Identifier List identifier). For those environments that may require changes to these
// other subordinate identifiers because of the A40 (merge patient-patient identifier list) event, it is required that
// the old and new identifiers be a "tightly coupled" pair.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.2, "Merge," for a discussion of issues related
// to the implementation of merge messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other fields
// change, it is recommended that the A31 (update person information) event be used for person level updates and A08 (update
// patient information) event for patient level updates.
type ADT_A40 struct {
	HL7     HL7Name           `hl7:",name=ADT_A40,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A40_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A41_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A41_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
}

// Merge account - patient account number
//
// A merge has been done at the account identifier level. That is, two PID-18 - Patient Account Number identifiers have been
// merged into one.
//
// An A41 event is used to signal a merge of records for an account that was incorrectly filed under two different account numbers.
// The "incorrect source patient account number" identified in the MRG segment (MRG-3 - Prior Patient Account Number) is
// to be merged with the "correct target patient account number" identified in the PID segment (PID-18 - Patient Account Number).
// The "incorrect source patient account number" would then logically never be referenced in future transactions. It is
// noted that some systems may still physically keep this "incorrect identifier" for audit trail purposes or other reasons
// associated with database index implementation requirements.
//
// The patient account numbers involved may or may not have visits. An A41 (merge account-patient account number) is intended
// for merging account records without merging other subordinate identifiers. Any other subordinate identifiers that
// were previously associated with the "incorrect source account number" are now associated with the required "correct
// target account number." Specification of these other subordinate identifiers is not required.
//
// This event and the message syntax do, however, allow for the specification of any other "new subordinate identifiers"
// (in addition to the PID-18 - Patient Account Number identifier). For those environments that may require changes to these
// other subordinate identifiers because of this A41 (merge account-patient account number) event, it is required that
// the old and new identifiers be a "tightly coupled" pair.
//
// Each superior identifier associated with this account identifier level should have the same value in both the PID and MRG
// segments.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.2, "Merge," for a discussion of issues related
// to the implementation of merge messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other fields
// change, it is recommended that the A08 (update patient information) event be used in addition
type ADT_A41 struct {
	HL7     HL7Name           `hl7:",name=ADT_A41,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A41_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A42_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A42_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
}

// Merge visit - visit number
//
// A merge has been done at the visit identifier level. That is, two PV1-19 - Visit Number identifiers have been merged into
// one.
//
// An A42 event is used to signal a merge of records for a visit that was incorrectly filed under two different visit numbers.
// The "incorrect source visit number" identified in the MRG segment (MRG-5 - Prior Visit Number) is to be merged with the required
// "correct target visit number" identified in the PV1 segment (PV1-19 - Visit Number). The "incorrect source visit number"
// would then logically never be referenced in future transactions. It is noted that some systems may still physically keep
// this "incorrect identifier" for audit trail purposes or other reasons associated with database index implementation
// requirements.
//
// An A42 (merge visit-visit number) event is intended for merging visit records without merging other identifiers. Any
// other identifiers that were previously associated with the "incorrect source visit number" are now associated with the
// "correct target visit number."
//
// Each superior identifier associated with this visit identifier level should have the same value in the PID and MRG segments,
// or the MRG and PV1 segments, as appropriate.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.2, "Merge," for a discussion of issues related
// to the implementation of merge messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other fields
// change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A42 struct {
	HL7     HL7Name           `hl7:",name=ADT_A42,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A42_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A43_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A43_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
}

// Move patient information - patient identifier list
//
// A move has been done at the patient identifier list level. Identifier to be moved in the PID-3 - Patient Identifier List and
// MRG-1 - Prior Patient Identifier List will have the same value. The "from" (incorrect source patient ID) and "to" (correct
// target patient ID) identifiers have different values. See A43 examples in section 5. The identifiers involved in identifying
// the patient to be moved (MRG-1 - Prior Patient Identifier List) may or may not have accounts, which may or may not have visits.
// In any case, all subordinate data sets associated with the identifier in MRG-1 - Prior Patient Identifier List are moved
// along with the identifier, from the "incorrect source patient ID" to the "correct target patient ID."
//
// No identifiers subordinate to the identifier (account number, visit number, alternate visit ID) are valued in this message.
// Specification of these other subordinate identifiers is not required.
//
// This event and the message syntax do, however, allow for the specification of a "new identifier" (PID-3 - Patient Identifier
// List), which may be application and/or implementation specific and therefore require site negotiation.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.3, "Move," for a discussion of issues related
// to the implementation of move messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When demographic
// data in other fields change, it is recommended that the A08 (update patient information) event be used in conjunction with
// this message. However, all PID data associated with the "correct target identifier" (PID-3 - Patient Identifier List)
// are treated as updated information.
type ADT_A43 struct {
	HL7     HL7Name           `hl7:",name=ADT_A43,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A43_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A44_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A44_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"7,display=Access Restriction"`
	MRG *MRG    `hl7:"8,required,display=Merge Patient Information"`
}

// Move account information - patient account number
//
// A move has been done at the account identifier level. That is, a PID-18 - Patient Account Number associated with one PID-3
// - Patient Identifier List has been moved to another patient identifier list.
//
// An A44 event is used to signal a move of records identified by the MRG-3 - Prior Patient Account Number from the "incorrect
// source patient identifier list" identified in the MRG segment (MRG-1 - Prior Patient Identifier List) to the "correct
// target patient identifier list" identified in the PID segment (PID-3 - Patient Identifier List).
//
// The account number involved in identifying the account to be moved (MRG-3 - Prior Patient Account Number) may or may not
// have visits. In any case, all subordinate data sets associated with the account number in MRG-3 - Prior Patient Account
// Number are moved along with the account number, from the "incorrect source" ID (MRG-1 - Prior Patient Identifier List)
// to the "correct target" ID (PID-3 - Patient Identifier List).
//
// No identifiers subordinate to the account number (visit number, alternate visit ID) are valued in this message.
//
// This event and the message syntax do, however, allow for the specification of a "new identifier" (PID-18 - Patient Account
// Number), which may be application and/or implementation-specific and therefore require site negotiation.
//
// All of the identifiers superior to the account number should be valued in both the MRG segment and the PID segment. In this
// message, the PID-3 - Patient Identifier List is superior to the account number.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.3, "Move," for a discussion of issues related
// to the implementation of move messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When demographic
// data in other fields change, it is recommended that the A08 (update patient information) event be used in conjunction with
// this message. However, all PID data associated with the "account number" are treated as updated information.
type ADT_A44 struct {
	HL7     HL7Name           `hl7:",name=ADT_A44,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A44_Patient `hl7:",required,display=Patient"`
}

// Mergeinfo
type ADT_A45_Mergeinfo struct {
	HL7 HL7Name `hl7:",name=ADT_A45_Mergeinfo,type=tg"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
}

// Move visit information - visit number
//
// A move has been done at the visit identifier level. That is, a PV1-19 - Visit Number or PV1-50 - Alternate Visit ID associated
// with one account identifier (PID-18 - Patient Account Number) has been moved to another account identifier.
//
// An A45 event is used to signal a move of records identified by the MRG-5 - Prior Visit Number or the MRG-6 - Prior Alternate
// Visit ID from the "incorrect source account identifier" identified in the MRG segment (MRG-3 - Prior Patient Account Number)
// to the "correct target account identifier" identified in the PID segment (PID-18 - Patient Account Number).
//
// This event and the message syntax do allow for the specification of "new identifiers" (PV1-19 - Visit Number, or PV1-50
// - Alternate Visit ID), which may be application and/or implementation-specific and therefore require site negotiation.
//
// All of the identifiers superior to the visit number or alternate visit ID should be valued in both the MRG segment and the
// PID segments. In this message, the account number and PID-3 - Patient Identifier List are superior to the visit number and
// alternate visit ID.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.3, "Move," for a discussion of issues related
// to the implementation of move messages. The fields included when this message is sent should be the fields pertinent to
// communicate this event. When demographic data in other fields change, it is recommended that the A08 (update patient information)
// event be used in conjunction with this message. However, all PID data associated with the "correct target visit ID" are
// treated as updated information.
type ADT_A45 struct {
	HL7       HL7Name             `hl7:",name=ADT_A45,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	Mergeinfo []ADT_A45_Mergeinfo `hl7:",required,display=Merge_info"`
}

// Patient
type ADT_A47_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A47_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"7,display=Access Restriction"`
	MRG *MRG    `hl7:"8,required,display=Merge Patient Information"`
}

// Change patient identifier list
//
// A change has been done at the patient identifier list level. That is, a single PID-3 - patient identifier list value has been
// found to be incorrect and has been changed.
//
// An A47 event is used to signal a change of an incorrectly assigned PID-3 - Patient Identifier List value. The "incorrect
// source identifier" value is stored in the MRG segment (MRG-1 - Prior Patient Identifier List) and is to be changed to the
// "correct target patient ID" value stored in the PID segment (PID-3 - Patient Identifier List).
//
// The identifier involved in identifying the patient may or may not have accounts, which may or may not have visits. An A47
// (change patient identifier list) event is intended for changing the value of the patient identifier list without affecting
// other subordinate identifiers. Any other subordinate identifiers that were previously associated with the "incorrect
// source identifier" are now associated with the "correct target identifier." Specification of these other subordinate
// identifiers is not required.
//
// This event and the message syntax do, however, allow for the specification of "new subordinate identifiers" (in addition
// to the PID-3 - Patient Identifier List identifier). For those environments that may require changes to these other subordinate
// identifiers because of this A47 (change patient identifier list) event, it is required that the old and new identifiers
// be a "tightly coupled" pair.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.4, "Change identifier," for a discussion of
// issues related to the implementation of change messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When demographic
// data in other fields change, it is recommended that the A31 (update patient information) event be used in conjunction with
// this message.
type ADT_A47 struct {
	HL7     HL7Name           `hl7:",name=ADT_A47,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A47_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A49_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A49_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
}

// Change patient account number
//
// A change has been done at the account identifier level. That is, a PID-18 - patient account number has been found to be incorrect
// and has been changed.
//
// An A49 event is used to signal a change of an incorrectly assigned account number value. The "incorrect source account number"
// value is stored in the MRG segment (MRG-3 - Prior Patient Account Number) and is to be changed to the "correct target account
// number" value stored in the PID segment (PID-18 - Patient Account Number).
//
// The patient account identifier involved in identifying the account may or may not have visits. An A49 (change patient account
// number) event is intended for changing the value of the account identifier without affecting other subordinate identifiers.
// Any other subordinate identifiers that were previously associated with the "incorrect source account number" are now
// associated with the "correct target account number". Specification of these other subordinate identifiers is not required.
//
// This event and the message syntax do, however, allow for the specification of "new subordinate identifiers" (in addition
// to the PID-18 - Patient Account Number Identifier). For those environments that may require changes to these other subordinate
// identifiers because of this A49 (change patient account number) event, it is required that the old and new identifiers
// be a "tightly coupled" pair.
//
// Each superior identifier associated with this account identifier level, i.e. the PID-3/MRG-1 should have the same value
// in both the PID and MRG segments.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.4, "Change identifier," for a discussion of
// issues related to the implementation of change messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When demographic
// data in other fields change, it is recommended that the A08 (update patient information) event be used in conjunction with
// this message.
type ADT_A49 struct {
	HL7     HL7Name           `hl7:",name=ADT_A49,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A49_Patient `hl7:",required,display=Patient"`
}

// Change visit number
//
// A change has been done at the visit identifier level. That is, a PV1-19 - Visit Number has been found to be incorrect and has
// been changed.
//
// An A50 event is used to signal a change of an incorrectly assigned visit number value. The "incorrect source visit number"
// value is stored in the MRG segment (MRG-5 - Prior Visit Number) and is to be changed to the "correct target visit number" value
// stored in the PV1 segment (PV1-19 - Visit Number).
//
// Each superior identifier associated with this visit number identifier level, i.e. PID-3/MRG-1 and PID-18/MRG-3 should
// have the same value in both the PID and MRG segments.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.4, "Change identifier," for a discussion of
// issues related to the implementation of change messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When demographic
// data in other fields change, it is recommended that the A08 (update patient information) event be used in conjunction with
// this message.
type ADT_A50 struct {
	HL7 HL7Name `hl7:",name=ADT_A50,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
}

// Change alternate visit ID
//
// A change has been done at the alternate visit identifier level. That is, a PV1-50 - Alternate Visit ID has been found to be
// incorrect and has been changed.
//
// An A51 event is used to signal a change of an incorrectly assigned alternate visit ID value. The "incorrect source alternate
// visit ID" value is stored in the MRG segment (MRG-6 - Prior Alternate Visit ID) and is to be changed to the "correct target
// alternate visit ID" value stored in the PV1 segment (PV1-50 - Alternate Visit ID).
//
// Each superior identifier associated with this alternate visit identifier level, i.e. PID-3/MRG-1 and PID-18/MRG-3
// should have the same value in both the PID and MRG segments.
//
// See sections 3.6.2, "Merging patient/person information," and 3.6.2.1.4, "Change identifier," for a discussion of
// issues related to the implementation of change messages.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When demographic
// data in other fields change, it is recommended that the A08 (update patient information) event be used in conjunction with
// this message.
type ADT_A51 struct {
	HL7 HL7Name `hl7:",name=ADT_A51,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
}

// Cancel leave of absence for a patient
//
// The A52 event is sent when an A21 (patient goes on "leave of absence") event is cancelled, either because of erroneous entry
// of the A21 event or because of a decision not to put the patient on "leave of absence" after all.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// As there is no specific field for the cancel LOA date/time, it is recommended field EVN-6 - Event Occurred contain the date/time
// the LOA was actually cancelled (but not necessarily recorded).
type ADT_A52 struct {
	HL7 HL7Name `hl7:",name=ADT_A52,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// Cancel patient returns from a leave of absence
//
// The A53 event is sent when an A22 (patient returns from "leave of absence") event is cancelled, either because of erroneous
// entry of the A22 event or because of a decision not to return the patient from "leave of absence" after all.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// As there is no specific field for the cancel LOA date/time, it is recommended that field EVN-6 - Event Occurred contain the
// date/time the return from LOA was actually cancelled (but not necessarily recorded).
//
// PV2-47 - Expected LOA Return Date/Time is used to communicate the date/time the patient is expected to return from LOA.
type ADT_A53 struct {
	HL7 HL7Name `hl7:",name=ADT_A53,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// Change attending doctor
//
// An A54 event is issued as a result of a change in the attending doctor responsible for the treatment of a patient.
//
// When other important fields change, it is recommended that the A08 (update patient information) event be used in addition.
//
// The new attending doctor of the patient should appear in the PV1-7 - Attending Doctor. For example, an A54 event can be used
// to notify the billing system that doctors' fees should be billed to the new doctor starting from the timestamp in the message.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments.
//
// To communicate the begin and end date of the attending, referring, or admitting doctor, use the ROL-5 - Role Begin Date/Time
// and the ROL-6 - Role End Date/time in the ROL segment, with the applicable ROL-3 - Role Code. Refer to Chapter 15 for the definition
// of the ROL segment. Use "UP" in ROL-2 - Action Code.
type ADT_A54 struct {
	HL7  HL7Name `hl7:",name=ADT_A54,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2 []ROL   `hl7:"10,display=Role"`
}

// Cancel change attending doctor
//
// The A55 event is sent when an A54 (change attending doctor) event is cancelled, either because of erroneous entry of the
// A54 event or because of a decision not to change the attending doctor after all. PV1-7 - Attending Doctor must contain the
// patient's doctor prior to the change of attending doctor.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event. When other important
// fields change, it is recommended that the A08 (update patient information) event be used in addition.
type ADT_A55 struct {
	HL7  HL7Name `hl7:",name=ADT_A55,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2 []ROL   `hl7:"10,display=Role"`
}

// Adversereactiongroup
type ADT_A60_Adversereactiongroup struct {
	HL7 HL7Name `hl7:",name=ADT_A60_Adversereactiongroup,type=tg"`
	IAM *IAM    `hl7:"10,required,display=Patient Adverse Reaction Information"`
	NTE []NTE   `hl7:"11,display=Notes And Comments"`
	IAR []IAR   `hl7:"12,display=Allergy Reaction"`
}

// Update allergy information
//
// This trigger event is used when person/patient allergy information has changed. It is used in conjunction with a new allergy
// segment, the IAM - Patient Allergy Information Segment-Unique Identifier, which supports Action code/unique identifier
// mode update for repeating segments as defined in 2.10.4, "Protocol for interpreting repeating segments or segment groups
// in an update Message."
type ADT_A60 struct {
	HL7                  HL7Name                        `hl7:",name=ADT_A60,type=t"`
	MSH                  *MSH                           `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                          `hl7:"2,display=Software Segment"`
	UAC                  *UAC                           `hl7:"3,display=User Authentication Credential Segment"`
	EVN                  *EVN                           `hl7:"4,required,display=Event Type"`
	PID                  *PID                           `hl7:"5,required,display=Patient Identification"`
	ARV                  []ARV                          `hl7:"6,display=Access Restriction"`
	PV1                  *PV1                           `hl7:"7,display=Patient Visit"`
	PV2                  *PV2                           `hl7:"8,display=Patient Visit - Additional Information"`
	ARV2                 []ARV                          `hl7:"9,display=Access Restriction"`
	Adversereactiongroup []ADT_A60_Adversereactiongroup `hl7:",display=Adverse_reaction_group"`
}

// Change consulting doctor
//
// An A61 event is used as a result of a change in the consulting physician(s) for the treatment of a patient.
//
// When other important fields change, it is recommended that the A08 (update patient information) event be used in addition.
// If the Patient Administration system allows demographics to change at the same time (for example an address change), two
// messages (an A61 followed by an A08) should be sent.
//
// The new consulting doctor(s) of the patient should appear in the PV1-9 - Consulting Doctor and may appear in a role segment
// per new consulting physician.
//
// If a consulting doctor stops being consulting doctor for this patient-visit, the end date/time can be sent in the ROL-6
// - Role End Date/Time.
//
// For example, an A61 event can be used to notify the billing system that doctors' fees for being a consulting doctor, should
// be billed to the new doctor(s) starting from the timestamp in the message.
//
// It is recommended that field EVN-6 - Event Occurred contains the date/time the event actually occurred to the patient.
//
// The ROL - Role Segment is used in this message to communicate providers not specified elsewhere. Person level providers
// with an ongoing relationship are reported in the ROL segment following the PID/PD1 segments. Providers corresponding
// to the PV1 data are reported in the ROL segment following the PV1/PV2 segments. Providers related to a specific procedure
// are reported in the ROL segment following the PR1 segment. Providers related to a specific insurance are reported in the
// ROL segment following the IN1/IN2/IN3 segments. To communicate the begin- and end-date of the provider, use the ROL-5
// - Role Begin Date/Time and the ROL-6 - Role End Date/Time in the ROL segment, with the applicable ROL-3 - Role Code. Refer
// to Chapter 15 for the definition of the ROL segment.
type ADT_A61 struct {
	HL7  HL7Name `hl7:",name=ADT_A61,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	ROL2 []ROL   `hl7:"9,display=Role"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Cancel change consulting doctor
//
// The A62 event is sent when an A61 (change consulting doctor) event is cancelled, either because of erroneous entry of the
// A61 event or because of a decision not to change the consulting physician(s) after all.  PV1-9 - Consulting Doctor must show
// the patient's doctor prior to the change being cancelled.
//
// The fields included when this message is sent should be the fields pertinent to communicate this event.  When other important
// fields change, it is recommended that the A08 (update patient information) event is used.
type ADT_A62 struct {
	HL7  HL7Name `hl7:",name=ADT_A62,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	ROL2 []ROL   `hl7:"9,display=Role"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Visit
type BAR_P01_Visit struct {
	HL7       HL7Name             `hl7:",name=BAR_P01_Visit,type=tg"`
	PV1       *PV1                `hl7:"8,display=Patient Visit"`
	PV2       *PV2                `hl7:"9,display=Patient Visit - Additional Information"`
	ROL       []ROL               `hl7:"10,display=Role"`
	DB1       []DB1               `hl7:"11,display=Disability"`
	OBX       []OBX               `hl7:"12,display=Observation/result"`
	AL1       []AL1               `hl7:"13,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"14,display=Diagnosis"`
	DRG       *DRG                `hl7:"15,display=Diagnosis Related Group"`
	Procedure []BAR_P01_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"18,display=Guarantor"`
	NK1       []NK1               `hl7:"19,display=Next Of Kin / Associated Parties"`
	Insurance []BAR_P01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"24,display=Accident"`
	UB1       *UB1                `hl7:"25,display=Ub82"`
	UB2       *UB2                `hl7:"26,display=Uniform Billing Data"`
}

// Procedure
type BAR_P01_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"16,required,display=Procedures"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// Insurance
type BAR_P01_Insurance struct {
	HL7 HL7Name `hl7:",name=BAR_P01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"20,required,display=Insurance"`
	IN2 *IN2    `hl7:"21,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"22,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"23,display=Role"`
}

// Add patient accounts
//
// Data are sent from some application (usually a Registration or an ADT system, for example) to the patient accounting or
// financial system to establish an account for a patient’s billing/accounts receivable record. Many of the segments associated
// with this event are optional. This optionality allows those systems needing these fields to set up transactions that fulfill
// their requirements and yet satisfy the HL7 requirements.
//
// When an account’s start and end dates span a period greater than any particular visit, the P01 (add account) event should
// be used to transmit the opening of an account. The A01 (admit/visit notification) event can notify systems of the creation
// of an account as well as notify them of a patient’s arrival in the healthcare facility. In order to create a new account without
// notifying systems of a patient’s arrival, use the P01 trigger event.
//
// From Standard Version 2.3 onward, the P01 event should only be used to add a new account that did not exist before, not to update
// an existing account. The new P05 (update account) event should be used to update an existing account. The new P06 (end account)
// event should be used to close an account. With the P01 event, EVN-2 - Recorded Date/Time should contain the account start
// date.
type BAR_P01 struct {
	HL7   HL7Name         `hl7:",name=BAR_P01,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential Segment"`
	EVN   *EVN            `hl7:"4,required,display=Event Type"`
	PID   *PID            `hl7:"5,required,display=Patient Identification"`
	PD1   *PD1            `hl7:"6,display=Patient Additional Demographic"`
	ROL   []ROL           `hl7:"7,display=Role"`
	Visit []BAR_P01_Visit `hl7:",required,display=Visit"`
}

// Patient
type BAR_P02_Patient struct {
	HL7 HL7Name `hl7:",name=BAR_P02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	DB1 []DB1   `hl7:"8,display=Disability"`
}

// Purge patient accounts
//
// Generally, the elimination of all billing/accounts receivable records will be an internal function controlled, for
// example, by the patient accounting or financial system. However, on occasion, there will be a need to correct an account,
// or a series of accounts, that may require that a notice of account deletion be sent from another sub-system and processed,
// for example, by the patient accounting or financial system. Although a series of accounts may be purged within this one
// event, we recommend that only one PID segment be sent per event.
type BAR_P02 struct {
	HL7     HL7Name           `hl7:",name=BAR_P02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []BAR_P02_Patient `hl7:",required,display=Patient"`
}

// Visit
type BAR_P05_Visit struct {
	HL7       HL7Name             `hl7:",name=BAR_P05_Visit,type=tg"`
	PV1       *PV1                `hl7:"8,display=Patient Visit"`
	PV2       *PV2                `hl7:"9,display=Patient Visit - Additional Information"`
	ROL       []ROL               `hl7:"10,display=Role"`
	DB1       []DB1               `hl7:"11,display=Disability"`
	OBX       []OBX               `hl7:"12,display=Observation/result"`
	AL1       []AL1               `hl7:"13,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"14,display=Diagnosis"`
	DRG       *DRG                `hl7:"15,display=Diagnosis Related Group"`
	Procedure []BAR_P05_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"18,display=Guarantor"`
	NK1       []NK1               `hl7:"19,display=Next Of Kin / Associated Parties"`
	Insurance []BAR_P05_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"24,display=Accident"`
	UB1       *UB1                `hl7:"25,display=Ub82"`
	UB2       *UB2                `hl7:"26,display=Uniform Billing Data"`
	ABS       *ABS                `hl7:"27,display=Abstract"`
	BLC       []BLC               `hl7:"28,display=Blood Code"`
	RMI       *RMI                `hl7:"29,display=Risk Management Incident"`
}

// Procedure
type BAR_P05_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P05_Procedure,type=tg"`
	PR1 *PR1    `hl7:"16,required,display=Procedures"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// Insurance
type BAR_P05_Insurance struct {
	HL7 HL7Name `hl7:",name=BAR_P05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"20,required,display=Insurance"`
	IN2 *IN2    `hl7:"21,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"22,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"23,display=Role"`
}

// Update account
//
// The P05 event is sent when an existing account is being updated. From version 2.3 onward, the P01 (add account) event should
// no longer be used for updating an existing account, but only for creating a new account. With the addition of P10 (transmit
// ambulatory payment classification [APC] groups) in version 2.4, it is expected that the P05 (update account) will be used
// to send inpatient coding information and the P10 (transmit ambulatory payment classification [APC] groups) will be used
// to send outpatient coding information.
type BAR_P05 struct {
	HL7   HL7Name         `hl7:",name=BAR_P05,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential Segment"`
	EVN   *EVN            `hl7:"4,required,display=Event Type"`
	PID   *PID            `hl7:"5,required,display=Patient Identification"`
	PD1   *PD1            `hl7:"6,display=Patient Additional Demographic"`
	ROL   []ROL           `hl7:"7,display=Role"`
	Visit []BAR_P05_Visit `hl7:",required,display=Visit"`
}

// Patient
type BAR_P06_Patient struct {
	HL7 HL7Name `hl7:",name=BAR_P06_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
}

// End account
//
// The P06 event is a notification that the account is no longer open, that is, no new charges can accrue to this account. This
// notification is not related to whether or not the account is paid in full. EVN-2 - Recorded Date/Time must contain the account
// end date.
type BAR_P06 struct {
	HL7     HL7Name           `hl7:",name=BAR_P06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []BAR_P06_Patient `hl7:",required,display=Patient"`
}

// Procedure
type BAR_P10_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P10_Procedure,type=tg"`
	PR1 *PR1    `hl7:"9,required,display=Procedures"`
	GP2 *GP2    `hl7:"10,display=Grouping/reimbursement - Procedure Line Item"`
}

// Transmit Ambulatory Payment  Classification(APC)
//
// The P10 event is used to communicate Ambulatory Payment Classification (APC) grouping. The grouping can be estimated
// or actual, based on the APC status indictor in GP1-1. This information is mandated in the USA by the Centers for Medicare
// and Medicaid Services (CMS) for reimbursement of outpatient services. The PID and PV1 segments are included for identification
// purposes onl
type BAR_P10 struct {
	HL7       HL7Name             `hl7:",name=BAR_P10,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PV1       *PV1                `hl7:"6,required,display=Patient Visit"`
	DG1       []DG1               `hl7:"7,display=Diagnosis"`
	GP1       *GP1                `hl7:"8,required,display=Grouping/reimbursement - Visit"`
	Procedure []BAR_P10_Procedure `hl7:",display=Procedure"`
}

// Procedure
type BAR_P12_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P12_Procedure,type=tg"`
	PR1 *PR1    `hl7:"9,required,display=Procedures"`
	ROL []ROL   `hl7:"10,display=Role"`
}

// Update Diagnosis/Procedure
//
// The P12 event is used to communicate diagnosis and/or procedures in update mode.  The newly created fields in DG1 and PR1,
// i.e., identifiers and action codes, must be populated to indicate which change should be applied.  When other patient or
// visit related fields change, use the A08 (update patient information) event.
type BAR_P12 struct {
	HL7       HL7Name             `hl7:",name=BAR_P12,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PV1       *PV1                `hl7:"6,required,display=Patient Visit"`
	DG1       []DG1               `hl7:"7,display=Diagnosis"`
	DRG       *DRG                `hl7:"8,display=Diagnosis Related Group"`
	Procedure []BAR_P12_Procedure `hl7:",display=Procedure"`
	OBX       *OBX                `hl7:"11,display=Observation/result"`
}

// Patient
type BPS_O29_Patient struct {
	HL7          HL7Name               `hl7:",name=BPS_O29_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *BPS_O29_Patientvisit `hl7:",display=Patient_visit"`
}

// Patientvisit
type BPS_O29_Patientvisit struct {
	HL7 HL7Name `hl7:",name=BPS_O29_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Order
type BPS_O29_Order struct {
	HL7     HL7Name           `hl7:",name=BPS_O29_Order,type=tg"`
	ORC     *ORC              `hl7:"11,required,display=Common Order"`
	Timing  []BPS_O29_Timing  `hl7:",display=Timing"`
	BPO     *BPO              `hl7:"14,required,display=Blood Product Order"`
	NTE     []NTE             `hl7:"15,display=Notes And Comments"`
	Product []BPS_O29_Product `hl7:",display=Product"`
}

// Timing
type BPS_O29_Timing struct {
	HL7 HL7Name `hl7:",name=BPS_O29_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"12,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"13,display=Timing/quantity Relationship"`
}

// Product
type BPS_O29_Product struct {
	HL7 HL7Name `hl7:",name=BPS_O29_Product,type=tg"`
	BPX *BPX    `hl7:"16,required,display=Blood Product Dispense Status"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Blood product dispense status
//
// In the pre-transfusion processing of blood products, it is necessary for the transfusion service and the placer system
// to communicate information that is not included in the current HL7 order/observation model. Examples of pre-transfusion
// processing include performing a crossmatch test to ensure compatibility with the patient, or irradiation of the blood
// product due to a special transfusion requirement for the patient. The blood product dispense status messages need to contain
// additional information regarding the blood products requested, such as the Donation ID, product code, blood type, expiration
// date/time and current status of the blood product.
//
// In the processing of commercial blood products, such as Rh Immune Globulin, Factor Concentrate, or Albumin Products,
// the status messages need to contain additional information, such as the lot number and manufacturer, expiration date
// and status of the commercial product.
//
// Blood product dispense status messages use the BPS and BRP messages as described below.
type BPS_O29 struct {
	HL7     HL7Name          `hl7:",name=BPS_O29,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *BPS_O29_Patient `hl7:",display=Patient"`
	Order   []BPS_O29_Order  `hl7:",required,display=Order"`
}

// Response
type BRP_O30_Response struct {
	HL7     HL7Name          `hl7:",name=BRP_O30_Response,type=tg"`
	Patient *BRP_O30_Patient `hl7:",display=Patient"`
}

// Patient
type BRP_O30_Patient struct {
	HL7   HL7Name         `hl7:",name=BRP_O30_Patient,type=tg"`
	PID   *PID            `hl7:"7,required,display=Patient Identification"`
	Order []BRP_O30_Order `hl7:",display=Order"`
}

// Order
type BRP_O30_Order struct {
	HL7    HL7Name          `hl7:",name=BRP_O30_Order,type=tg"`
	ORC    *ORC             `hl7:"8,required,display=Common Order"`
	Timing []BRP_O30_Timing `hl7:",display=Timing"`
	BPO    *BPO             `hl7:"11,display=Blood Product Order"`
	BPX    []BPX            `hl7:"12,display=Blood Product Dispense Status"`
}

// Timing
type BRP_O30_Timing struct {
	HL7 HL7Name `hl7:",name=BRP_O30_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"9,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"10,display=Timing/quantity Relationship"`
}

// Blood product dispense status acknowledgment
type BRP_O30 struct {
	HL7      HL7Name           `hl7:",name=BRP_O30,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *BRP_O30_Response `hl7:",display=Response"`
}

// Response
type BRT_O32_Response struct {
	HL7   HL7Name         `hl7:",name=BRT_O32_Response,type=tg"`
	PID   *PID            `hl7:"7,display=Patient Identification"`
	Order []BRT_O32_Order `hl7:",display=Order"`
}

// Order
type BRT_O32_Order struct {
	HL7    HL7Name          `hl7:",name=BRT_O32_Order,type=tg"`
	ORC    *ORC             `hl7:"8,required,display=Common Order"`
	Timing []BRT_O32_Timing `hl7:",display=Timing"`
	BPO    *BPO             `hl7:"11,display=Blood Product Order"`
	BTX    []BTX            `hl7:"12,display=Blood Product Transfusion/disposition"`
}

// Timing
type BRT_O32_Timing struct {
	HL7 HL7Name `hl7:",name=BRT_O32_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"9,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"10,display=Timing/quantity Relationship"`
}

// Blood product transfusion/disposition acknowledgment
type BRT_O32 struct {
	HL7      HL7Name           `hl7:",name=BRT_O32,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *BRT_O32_Response `hl7:",display=Response"`
}

// Patient
type BTS_O31_Patient struct {
	HL7          HL7Name               `hl7:",name=BTS_O31_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *BTS_O31_Patientvisit `hl7:",display=Patient_visit"`
}

// Patientvisit
type BTS_O31_Patientvisit struct {
	HL7 HL7Name `hl7:",name=BTS_O31_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Order
type BTS_O31_Order struct {
	HL7           HL7Name                 `hl7:",name=BTS_O31_Order,type=tg"`
	ORC           *ORC                    `hl7:"11,required,display=Common Order"`
	Timing        []BTS_O31_Timing        `hl7:",display=Timing"`
	BPO           *BPO                    `hl7:"14,required,display=Blood Product Order"`
	NTE           []NTE                   `hl7:"15,display=Notes And Comments"`
	Productstatus []BTS_O31_Productstatus `hl7:",display=Product_status"`
}

// Timing
type BTS_O31_Timing struct {
	HL7 HL7Name `hl7:",name=BTS_O31_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"12,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"13,display=Timing/quantity Relationship"`
}

// Productstatus
type BTS_O31_Productstatus struct {
	HL7 HL7Name `hl7:",name=BTS_O31_Productstatus,type=tg"`
	BTX *BTX    `hl7:"16,required,display=Blood Product Transfusion/disposition"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Blood product transfusion/disposition
//
// Blood product transfusion/disposition messages use the BTS and BRT messages as described below.
type BTS_O31 struct {
	HL7     HL7Name          `hl7:",name=BTS_O31,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *BTS_O31_Patient `hl7:",display=Patient"`
	Order   []BTS_O31_Order  `hl7:",required,display=Order"`
}

// Collaborative Care Fetch / Collaborative Care Information
//
// This event triggers a query message to be sent from one healthcare provider to another healthcare provider, clinical repository
// or regulatory body regarding a specific patient. The Collaborative Care Fetch message must contain sufficient information
// for the healthcare provider, clinical repository or regulatory body to be able to identify the specific patient. The response
// to a Collaborative Care Fetch is a CCI - Collaborative Care Information message. The meaning of the Collaborative Care
// Query Information message is identical to the meaning of the Collaborative Care Message message.
type CCF_I22 struct {
	HL7 HL7Name `hl7:",name=CCF_I22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
}

// Insurance
type CCI_I22_Insurance struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Appointmenthistory
type CCI_I22_Appointmenthistory struct {
	HL7       HL7Name             `hl7:",name=CCI_I22_Appointmenthistory,type=tg"`
	SCH       *SCH                `hl7:"12,required,display=Scheduling Activity Information"`
	Resources []CCI_I22_Resources `hl7:",display=Resources"`
}

// Resources
type CCI_I22_Resources struct {
	HL7            HL7Name                  `hl7:",name=CCI_I22_Resources,type=tg"`
	RGS            *RGS                     `hl7:"13,required,display=Resource Group"`
	Resourcedetail []CCI_I22_Resourcedetail `hl7:",display=Resource_detail"`
}

// Resourcedetail
type CCI_I22_Resourcedetail struct {
	HL7            HL7Name                 `hl7:",name=CCI_I22_Resourcedetail,type=tg"`
	Resourceobject *CCI_I22_Resourceobject `hl7:",display=Resource_object"`
	OBX            []OBX                   `hl7:"18,display=Observation/result"`
}

// Resourceobject
type CCI_I22_Resourceobject struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Resourceobject,type=tg"`
	AIS *AIS    `hl7:"14,display=Appointment Information"`
	AIG *AIG    `hl7:"15,display=Appointment Information - General Resource"`
	AIL *AIL    `hl7:"16,display=Appointment Information - Location Resource"`
	AIP *AIP    `hl7:"17,display=Appointment Information - Personnel Resource"`
}

// Clinicalhistory
type CCI_I22_Clinicalhistory struct {
	HL7                   HL7Name                         `hl7:",name=CCI_I22_Clinicalhistory,type=tg"`
	ORC                   *ORC                            `hl7:"19,required,display=Common Order"`
	Clinicalhistorydetail []CCI_I22_Clinicalhistorydetail `hl7:",display=Clinical_history_detail"`
	Roleclinicalhistory   []CCI_I22_Roleclinicalhistory   `hl7:",display=Role_clinical_history"`
	CTI                   []CTI                           `hl7:"36,display=Clinical Trial Identification"`
}

// Clinicalhistorydetail
type CCI_I22_Clinicalhistorydetail struct {
	HL7                   HL7Name                        `hl7:",name=CCI_I22_Clinicalhistorydetail,type=tg"`
	Clinicalhistoryobject *CCI_I22_Clinicalhistoryobject `hl7:",display=Clinical_history_object"`
	OBX                   []OBX                          `hl7:"32,display=Observation/result"`
}

// Clinicalhistoryobject
type CCI_I22_Clinicalhistoryobject struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Clinicalhistoryobject,type=tg"`
	OBR *OBR    `hl7:"20,display=Observation Request"`
	ODS *ODS    `hl7:"21,display=Dietary Orders- Supplements- And Preferences"`
	PR1 *PR1    `hl7:"22,display=Procedures"`
	RF1 *RF1    `hl7:"23,display=Referral Information"`
	AL1 *AL1    `hl7:"24,display=Patient Allergy Information"`
	IAM *IAM    `hl7:"25,display=Patient Adverse Reaction Information"`
	ACC *ACC    `hl7:"26,display=Accident"`
	RMI *RMI    `hl7:"27,display=Risk Management Incident"`
	DB1 *DB1    `hl7:"28,display=Disability"`
	DG1 *DG1    `hl7:"29,display=Diagnosis"`
	DRG *DRG    `hl7:"30,display=Diagnosis Related Group"`
	PDA *PDA    `hl7:"31,display=Patient Death And Autopsy"`
}

// Roleclinicalhistory
type CCI_I22_Roleclinicalhistory struct {
	HL7                       HL7Name                            `hl7:",name=CCI_I22_Roleclinicalhistory,type=tg"`
	Roleclinicalhistoryobject *CCI_I22_Roleclinicalhistoryobject `hl7:",display=Role_clinical_history_object"`
	VAR                       []VAR                              `hl7:"35,display=Variance"`
}

// Roleclinicalhistoryobject
type CCI_I22_Roleclinicalhistoryobject struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Roleclinicalhistoryobject,type=tg"`
	ROL *ROL    `hl7:"33,display=Role"`
	PRD *PRD    `hl7:"34,display=Provider Data"`
}

// Patientvisit
type CCI_I22_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"37,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"38,display=Patient Visit - Additional Information"`
}

// Medicationhistory
type CCI_I22_Medicationhistory struct {
	HL7                            HL7Name                                  `hl7:",name=CCI_I22_Medicationhistory,type=tg"`
	ORC                            *ORC                                     `hl7:"39,required,display=Common Order"`
	Medicationorderdetail          *CCI_I22_Medicationorderdetail           `hl7:",display=Medication_order_detail"`
	Medicationencodingdetail       *CCI_I22_Medicationencodingdetail        `hl7:",display=Medication_encoding_detail"`
	Medicationadministrationdetail []CCI_I22_Medicationadministrationdetail `hl7:",display=Medication_administration_detail"`
	CTI                            []CTI                                    `hl7:"51,display=Clinical Trial Identification"`
}

// Medicationorderdetail
type CCI_I22_Medicationorderdetail struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Medicationorderdetail,type=tg"`
	RXO *RXO    `hl7:"40,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"41,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"42,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"43,display=Observation/result"`
}

// Medicationencodingdetail
type CCI_I22_Medicationencodingdetail struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Medicationencodingdetail,type=tg"`
	RXE *RXE    `hl7:"44,required,display=Pharmacy/treatment Encoded Order"`
	RXR []RXR   `hl7:"45,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"46,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"47,display=Observation/result"`
}

// Medicationadministrationdetail
type CCI_I22_Medicationadministrationdetail struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Medicationadministrationdetail,type=tg"`
	RXA []RXA   `hl7:"48,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"49,required,display=Pharmacy/treatment Route"`
	OBX []OBX   `hl7:"50,display=Observation/result"`
}

// Problem
type CCI_I22_Problem struct {
	HL7         HL7Name               `hl7:",name=CCI_I22_Problem,type=tg"`
	PRB         *PRB                  `hl7:"52,required,display=Problem Details"`
	VAR         []VAR                 `hl7:"53,display=Variance"`
	Roleproblem []CCI_I22_Roleproblem `hl7:",display=Role_problem"`
	OBX         []OBX                 `hl7:"57,display=Observation/result"`
}

// Roleproblem
type CCI_I22_Roleproblem struct {
	HL7               HL7Name                    `hl7:",name=CCI_I22_Roleproblem,type=tg"`
	Roleproblemobject *CCI_I22_Roleproblemobject `hl7:",display=Role_problem_object"`
	VAR               []VAR                      `hl7:"56,display=Variance"`
}

// Roleproblemobject
type CCI_I22_Roleproblemobject struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Roleproblemobject,type=tg"`
	ROL *ROL    `hl7:"54,display=Role"`
	PRD *PRD    `hl7:"55,display=Provider Data"`
}

// Goal
type CCI_I22_Goal struct {
	HL7      HL7Name            `hl7:",name=CCI_I22_Goal,type=tg"`
	GOL      *GOL               `hl7:"58,required,display=Goal Detail"`
	VAR      []VAR              `hl7:"59,display=Variance"`
	Rolegoal []CCI_I22_Rolegoal `hl7:",display=Role_goal"`
	OBX      []OBX              `hl7:"63,display=Observation/result"`
}

// Rolegoal
type CCI_I22_Rolegoal struct {
	HL7            HL7Name                 `hl7:",name=CCI_I22_Rolegoal,type=tg"`
	Roalgoalobject *CCI_I22_Roalgoalobject `hl7:",display=Roal_goal_object"`
	VAR            []VAR                   `hl7:"62,display=Variance"`
}

// Roalgoalobject
type CCI_I22_Roalgoalobject struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Roalgoalobject,type=tg"`
	ROL *ROL    `hl7:"60,display=Role"`
	PRD *PRD    `hl7:"61,display=Provider Data"`
}

// Pathway
type CCI_I22_Pathway struct {
	HL7         HL7Name               `hl7:",name=CCI_I22_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"64,required,display=Pathway"`
	VAR         []VAR                 `hl7:"65,display=Variance"`
	Rolepathway []CCI_I22_Rolepathway `hl7:",display=Role_pathway"`
	OBX         []OBX                 `hl7:"69,display=Observation/result"`
}

// Rolepathway
type CCI_I22_Rolepathway struct {
	HL7               HL7Name                    `hl7:",name=CCI_I22_Rolepathway,type=tg"`
	Rolepathwayobject *CCI_I22_Rolepathwayobject `hl7:",display=Role_pathway_object"`
	VAR               []VAR                      `hl7:"68,display=Variance"`
}

// Rolepathwayobject
type CCI_I22_Rolepathwayobject struct {
	HL7 HL7Name `hl7:",name=CCI_I22_Rolepathwayobject,type=tg"`
	ROL *ROL    `hl7:"66,display=Role"`
	PRD *PRD    `hl7:"67,display=Provider Data"`
}

// Collaborative Care Information
type CCI_I22 struct {
	HL7                HL7Name                      `hl7:",name=CCI_I22,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	MSA                *MSA                         `hl7:"4,required,display=Message Acknowledgment"`
	ERR                []ERR                        `hl7:"5,display=Error"`
	PID                *PID                         `hl7:"6,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"7,display=Patient Additional Demographic"`
	NK1                []NK1                        `hl7:"8,display=Next Of Kin / Associated Parties"`
	Insurance          []CCI_I22_Insurance          `hl7:",display=Insurance"`
	Appointmenthistory []CCI_I22_Appointmenthistory `hl7:",display=Appointment_history"`
	Clinicalhistory    []CCI_I22_Clinicalhistory    `hl7:",display=Clinical_history"`
	Patientvisit       []CCI_I22_Patientvisit       `hl7:",required,display=Patient_visit"`
	Medicationhistory  []CCI_I22_Medicationhistory  `hl7:",display=Medication_history"`
	Problem            []CCI_I22_Problem            `hl7:",display=Problem"`
	Goal               []CCI_I22_Goal               `hl7:",display=Goal"`
	Pathway            []CCI_I22_Pathway            `hl7:",display=Pathway"`
	REL                []REL                        `hl7:"70,display=Clinical Relationship Segment"`
}

// Insurance
type CCM_I21_Insurance struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Insurance,type=tg"`
	IN1 *IN1    `hl7:"7,required,display=Insurance"`
	IN2 *IN2    `hl7:"8,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"9,display=Insurance Additional Information- Certification"`
}

// Appointmenthistory
type CCM_I21_Appointmenthistory struct {
	HL7       HL7Name             `hl7:",name=CCM_I21_Appointmenthistory,type=tg"`
	SCH       *SCH                `hl7:"10,required,display=Scheduling Activity Information"`
	Resources []CCM_I21_Resources `hl7:",display=Resources"`
}

// Resources
type CCM_I21_Resources struct {
	HL7            HL7Name                  `hl7:",name=CCM_I21_Resources,type=tg"`
	RGS            *RGS                     `hl7:"11,required,display=Resource Group"`
	Resourcedetail []CCM_I21_Resourcedetail `hl7:",display=Resource_detail"`
}

// Resourcedetail
type CCM_I21_Resourcedetail struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Resourcedetail,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	OBX []OBX   `hl7:"13,display=Observation/result"`
}

// Clinicalhistory
type CCM_I21_Clinicalhistory struct {
	HL7                   HL7Name                         `hl7:",name=CCM_I21_Clinicalhistory,type=tg"`
	ORC                   *ORC                            `hl7:"14,required,display=Common Order"`
	Clinicalhistorydetail []CCM_I21_Clinicalhistorydetail `hl7:",display=Clinical_history_detail"`
	Roleclinicalhistory   []CCM_I21_Roleclinicalhistory   `hl7:",display=Role_clinical_history"`
	CTI                   []CTI                           `hl7:"19,display=Clinical Trial Identification"`
}

// Clinicalhistorydetail
type CCM_I21_Clinicalhistorydetail struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Clinicalhistorydetail,type=tg"`
	OBR *OBR    `hl7:"15,required,display=Observation Request"`
	OBX []OBX   `hl7:"16,display=Observation/result"`
}

// Roleclinicalhistory
type CCM_I21_Roleclinicalhistory struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Roleclinicalhistory,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// Patientvisits
type CCM_I21_Patientvisits struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Patientvisits,type=tg"`
	PV1 *PV1    `hl7:"20,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"21,display=Patient Visit - Additional Information"`
}

// Medicationhistory
type CCM_I21_Medicationhistory struct {
	HL7                            HL7Name                                  `hl7:",name=CCM_I21_Medicationhistory,type=tg"`
	ORC                            *ORC                                     `hl7:"22,required,display=Common Order"`
	Medicationorderdetail          *CCM_I21_Medicationorderdetail           `hl7:",display=Medication_order_detail"`
	Medicationencodingdetail       *CCM_I21_Medicationencodingdetail        `hl7:",display=Medication_encoding_detail"`
	Medicationadministrationdetail []CCM_I21_Medicationadministrationdetail `hl7:",display=Medication_administration_detail"`
	CTI                            []CTI                                    `hl7:"34,display=Clinical Trial Identification"`
}

// Medicationorderdetail
type CCM_I21_Medicationorderdetail struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Medicationorderdetail,type=tg"`
	RXO *RXO    `hl7:"23,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"24,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"25,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"26,display=Observation/result"`
}

// Medicationencodingdetail
type CCM_I21_Medicationencodingdetail struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Medicationencodingdetail,type=tg"`
	RXE *RXE    `hl7:"27,required,display=Pharmacy/treatment Encoded Order"`
	RXR []RXR   `hl7:"28,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"29,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"30,display=Observation/result"`
}

// Medicationadministrationdetail
type CCM_I21_Medicationadministrationdetail struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Medicationadministrationdetail,type=tg"`
	RXA []RXA   `hl7:"31,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"32,required,display=Pharmacy/treatment Route"`
	OBX []OBX   `hl7:"33,display=Observation/result"`
}

// Problem
type CCM_I21_Problem struct {
	HL7         HL7Name               `hl7:",name=CCM_I21_Problem,type=tg"`
	PRB         *PRB                  `hl7:"35,required,display=Problem Details"`
	VAR         []VAR                 `hl7:"36,display=Variance"`
	Roleproblem []CCM_I21_Roleproblem `hl7:",display=Role_problem"`
	OBX         []OBX                 `hl7:"39,display=Observation/result"`
}

// Roleproblem
type CCM_I21_Roleproblem struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Roleproblem,type=tg"`
	ROL *ROL    `hl7:"37,required,display=Role"`
	VAR []VAR   `hl7:"38,display=Variance"`
}

// Goal
type CCM_I21_Goal struct {
	HL7      HL7Name            `hl7:",name=CCM_I21_Goal,type=tg"`
	GOL      *GOL               `hl7:"40,required,display=Goal Detail"`
	VAR      []VAR              `hl7:"41,display=Variance"`
	Rolegoal []CCM_I21_Rolegoal `hl7:",display=Role_goal"`
	OBX      []OBX              `hl7:"44,display=Observation/result"`
}

// Rolegoal
type CCM_I21_Rolegoal struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Rolegoal,type=tg"`
	ROL *ROL    `hl7:"42,required,display=Role"`
	VAR []VAR   `hl7:"43,display=Variance"`
}

// Pathway
type CCM_I21_Pathway struct {
	HL7         HL7Name               `hl7:",name=CCM_I21_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"45,required,display=Pathway"`
	VAR         []VAR                 `hl7:"46,display=Variance"`
	Rolepathway []CCM_I21_Rolepathway `hl7:",display=Role_pathway"`
	OBX         []OBX                 `hl7:"49,display=Observation/result"`
}

// Rolepathway
type CCM_I21_Rolepathway struct {
	HL7 HL7Name `hl7:",name=CCM_I21_Rolepathway,type=tg"`
	ROL *ROL    `hl7:"47,required,display=Role"`
	VAR []VAR   `hl7:"48,display=Variance"`
}

// Collaborative Care Message
//
// This event triggers a message to be sent from one healthcare provider to another healthcare provider, clinical repository
// or regulatory body regarding a specific patient.  The collaborative care message may contain patient demographic information,
// a full history of appointments, specific medical procedures that have been performed, a full clinical history, an administrative
// history of patient visits, a full medication history, all relevant problems, pathways and goals. This message fulfills
// the role of a notification of a single patient’s health status and history.  It is usable for discharge summaries, disease
// notifications or just moving a patient’s electronic medical record from one the place to another.  This message uses the
// REL segment to express the relationships between clinical histories.
type CCM_I21 struct {
	HL7                HL7Name                      `hl7:",name=CCM_I21,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	PID                *PID                         `hl7:"4,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"5,display=Patient Additional Demographic"`
	NK1                []NK1                        `hl7:"6,display=Next Of Kin / Associated Parties"`
	Insurance          []CCM_I21_Insurance          `hl7:",display=Insurance"`
	Appointmenthistory []CCM_I21_Appointmenthistory `hl7:",display=Appointment_history"`
	Clinicalhistory    []CCM_I21_Clinicalhistory    `hl7:",display=Clinical_history"`
	Patientvisits      []CCM_I21_Patientvisits      `hl7:",required,display=Patient_visits"`
	Medicationhistory  []CCM_I21_Medicationhistory  `hl7:",display=Medication_history"`
	Problem            []CCM_I21_Problem            `hl7:",display=Problem"`
	Goal               []CCM_I21_Goal               `hl7:",display=Goal"`
	Pathway            []CCM_I21_Pathway            `hl7:",display=Pathway"`
	REL                []REL                        `hl7:"50,display=Clinical Relationship Segment"`
}

// Providercontact
type CCQ_I19_Providercontact struct {
	HL7 HL7Name `hl7:",name=CCQ_I19_Providercontact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Collaborative Care Query/Collaborative Care Query Update
//
// This event triggers a query message to be sent from a referring healthcare provider to a referred to healthcare provider,
// regarding a specific, previously sent collaborative care referral. The Collaborative Care Query message must contain
// sufficient data for the referred to provider to be able to identify the specific referral being queried. The response to
// a Collaborative Care Query message is a CQU - Collaborative Care Query Update message. The meaning of the Collaborative
// Care Query Update message is identical to the meaning of the Asynchronous Collaborative Care Update message.
type CCQ_I19 struct {
	HL7             HL7Name                   `hl7:",name=CCQ_I19,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential Segment"`
	RF1             *RF1                      `hl7:"4,required,display=Referral Information"`
	Providercontact []CCQ_I19_Providercontact `hl7:",display=Provider_contact"`
	REL             []REL                     `hl7:"7,display=Clinical Relationship Segment"`
}

// Providercontact
type CCR_I16_Providercontact struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Providercontact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Clinicalorder
type CCR_I16_Clinicalorder struct {
	HL7                 HL7Name                       `hl7:",name=CCR_I16_Clinicalorder,type=tg"`
	ORC                 *ORC                          `hl7:"7,required,display=Common Order"`
	Clinicalordertiming []CCR_I16_Clinicalordertiming `hl7:",display=Clinical_order_timing"`
	Clinicalorderdetail []CCR_I16_Clinicalorderdetail `hl7:",required,display=Clinical_order_detail"`
	CTI                 []CTI                         `hl7:"12,display=Clinical Trial Identification"`
}

// Clinicalordertiming
type CCR_I16_Clinicalordertiming struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Clinicalordertiming,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Clinicalorderdetail
type CCR_I16_Clinicalorderdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Clinicalorderdetail,type=tg"`
	OBR *OBR    `hl7:"10,required,display=Observation Request"`
	OBX []OBX   `hl7:"11,display=Observation/result"`
}

// Patient
type CCR_I16_Patient struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Patient,type=tg"`
	PID *PID    `hl7:"13,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"14,display=Patient Additional Demographic"`
}

// Insurance
type CCR_I16_Insurance struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Insurance,type=tg"`
	IN1 *IN1    `hl7:"16,required,display=Insurance"`
	IN2 *IN2    `hl7:"17,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"18,display=Insurance Additional Information- Certification"`
}

// Appointmenthistory
type CCR_I16_Appointmenthistory struct {
	HL7       HL7Name             `hl7:",name=CCR_I16_Appointmenthistory,type=tg"`
	SCH       *SCH                `hl7:"19,required,display=Scheduling Activity Information"`
	Resources []CCR_I16_Resources `hl7:",display=Resources"`
}

// Resources
type CCR_I16_Resources struct {
	HL7            HL7Name                  `hl7:",name=CCR_I16_Resources,type=tg"`
	RGS            *RGS                     `hl7:"20,required,display=Resource Group"`
	Resourcedetail []CCR_I16_Resourcedetail `hl7:",display=Resource_detail"`
}

// Resourcedetail
type CCR_I16_Resourcedetail struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Resourcedetail,type=tg"`
	AIS *AIS    `hl7:"21,required,display=Appointment Information"`
	OBX []OBX   `hl7:"22,display=Observation/result"`
}

// Clinicalhistory
type CCR_I16_Clinicalhistory struct {
	HL7                   HL7Name                         `hl7:",name=CCR_I16_Clinicalhistory,type=tg"`
	ORC                   *ORC                            `hl7:"23,required,display=Common Order"`
	Clinicalhistorydetail []CCR_I16_Clinicalhistorydetail `hl7:",display=Clinical_history_detail"`
	Roleclinicalhistory   []CCR_I16_Roleclinicalhistory   `hl7:",display=Role_clinical_history"`
	CTI                   []CTI                           `hl7:"28,display=Clinical Trial Identification"`
}

// Clinicalhistorydetail
type CCR_I16_Clinicalhistorydetail struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Clinicalhistorydetail,type=tg"`
	OBR *OBR    `hl7:"24,required,display=Observation Request"`
	OBX []OBX   `hl7:"25,display=Observation/result"`
}

// Roleclinicalhistory
type CCR_I16_Roleclinicalhistory struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Roleclinicalhistory,type=tg"`
	ROL *ROL    `hl7:"26,required,display=Role"`
	VAR []VAR   `hl7:"27,display=Variance"`
}

// Patientvisits
type CCR_I16_Patientvisits struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Patientvisits,type=tg"`
	PV1 *PV1    `hl7:"29,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"30,display=Patient Visit - Additional Information"`
}

// Medicationhistory
type CCR_I16_Medicationhistory struct {
	HL7                            HL7Name                                  `hl7:",name=CCR_I16_Medicationhistory,type=tg"`
	ORC                            *ORC                                     `hl7:"31,required,display=Common Order"`
	Medicationorderdetail          *CCR_I16_Medicationorderdetail           `hl7:",display=Medication_order_detail"`
	Medicationencodingdetail       *CCR_I16_Medicationencodingdetail        `hl7:",display=Medication_encoding_detail"`
	Medicationadministrationdetail []CCR_I16_Medicationadministrationdetail `hl7:",display=Medication_administration_detail"`
	CTI                            []CTI                                    `hl7:"43,display=Clinical Trial Identification"`
}

// Medicationorderdetail
type CCR_I16_Medicationorderdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Medicationorderdetail,type=tg"`
	RXO *RXO    `hl7:"32,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"33,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"34,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"35,display=Observation/result"`
}

// Medicationencodingdetail
type CCR_I16_Medicationencodingdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Medicationencodingdetail,type=tg"`
	RXE *RXE    `hl7:"36,required,display=Pharmacy/treatment Encoded Order"`
	RXR []RXR   `hl7:"37,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"38,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"39,display=Observation/result"`
}

// Medicationadministrationdetail
type CCR_I16_Medicationadministrationdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Medicationadministrationdetail,type=tg"`
	RXA []RXA   `hl7:"40,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"41,required,display=Pharmacy/treatment Route"`
	OBX []OBX   `hl7:"42,display=Observation/result"`
}

// Problem
type CCR_I16_Problem struct {
	HL7         HL7Name               `hl7:",name=CCR_I16_Problem,type=tg"`
	PRB         *PRB                  `hl7:"44,required,display=Problem Details"`
	VAR         []VAR                 `hl7:"45,display=Variance"`
	Roleproblem []CCR_I16_Roleproblem `hl7:",display=Role_problem"`
	OBX         []OBX                 `hl7:"48,display=Observation/result"`
}

// Roleproblem
type CCR_I16_Roleproblem struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Roleproblem,type=tg"`
	ROL *ROL    `hl7:"46,required,display=Role"`
	VAR []VAR   `hl7:"47,display=Variance"`
}

// Goal
type CCR_I16_Goal struct {
	HL7      HL7Name            `hl7:",name=CCR_I16_Goal,type=tg"`
	GOL      *GOL               `hl7:"49,required,display=Goal Detail"`
	VAR      []VAR              `hl7:"50,display=Variance"`
	Rolegoal []CCR_I16_Rolegoal `hl7:",display=Role_goal"`
	OBX      []OBX              `hl7:"53,display=Observation/result"`
}

// Rolegoal
type CCR_I16_Rolegoal struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Rolegoal,type=tg"`
	ROL *ROL    `hl7:"51,required,display=Role"`
	VAR []VAR   `hl7:"52,display=Variance"`
}

// Pathway
type CCR_I16_Pathway struct {
	HL7         HL7Name               `hl7:",name=CCR_I16_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"54,required,display=Pathway"`
	VAR         []VAR                 `hl7:"55,display=Variance"`
	Rolepathway []CCR_I16_Rolepathway `hl7:",display=Role_pathway"`
	OBX         []OBX                 `hl7:"58,display=Observation/result"`
}

// Rolepathway
type CCR_I16_Rolepathway struct {
	HL7 HL7Name `hl7:",name=CCR_I16_Rolepathway,type=tg"`
	ROL *ROL    `hl7:"56,required,display=Role"`
	VAR []VAR   `hl7:"57,display=Variance"`
}

// Collaborative Care Referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding a specific patient or group of
// patients.  The intent is to create a collaborative relationship between the referring provider, the referred to provider
// or providers and the patient or patients, for the shared care of the patient or patients. Whilst the acknowledgment is a
// simple ACK message, the expectation is that the referred to provider(s) will send back a CCU – Asynchronous Collaborative
// Care Update at a later time to indicate acceptance or rejection of the referral.
type CCR_I16 struct {
	HL7                HL7Name                      `hl7:",name=CCR_I16,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	RF1                []RF1                        `hl7:"4,required,display=Referral Information"`
	Providercontact    []CCR_I16_Providercontact    `hl7:",required,display=Provider_contact"`
	Clinicalorder      []CCR_I16_Clinicalorder      `hl7:",display=Clinical_order"`
	Patient            []CCR_I16_Patient            `hl7:",required,display=Patient"`
	NK1                []NK1                        `hl7:"15,display=Next Of Kin / Associated Parties"`
	Insurance          []CCR_I16_Insurance          `hl7:",display=Insurance"`
	Appointmenthistory []CCR_I16_Appointmenthistory `hl7:",display=Appointment_history"`
	Clinicalhistory    []CCR_I16_Clinicalhistory    `hl7:",display=Clinical_history"`
	Patientvisits      []CCR_I16_Patientvisits      `hl7:",required,display=Patient_visits"`
	Medicationhistory  []CCR_I16_Medicationhistory  `hl7:",display=Medication_history"`
	Problem            []CCR_I16_Problem            `hl7:",display=Problem"`
	Goal               []CCR_I16_Goal               `hl7:",display=Goal"`
	Pathway            []CCR_I16_Pathway            `hl7:",display=Pathway"`
	REL                []REL                        `hl7:"59,display=Clinical Relationship Segment"`
}

// Providercontact
type CCR_I17_Providercontact struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Providercontact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Clinicalorder
type CCR_I17_Clinicalorder struct {
	HL7                 HL7Name                       `hl7:",name=CCR_I17_Clinicalorder,type=tg"`
	ORC                 *ORC                          `hl7:"7,required,display=Common Order"`
	Clinicalordertiming []CCR_I17_Clinicalordertiming `hl7:",display=Clinical_order_timing"`
	Clinicalorderdetail []CCR_I17_Clinicalorderdetail `hl7:",required,display=Clinical_order_detail"`
	CTI                 []CTI                         `hl7:"12,display=Clinical Trial Identification"`
}

// Clinicalordertiming
type CCR_I17_Clinicalordertiming struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Clinicalordertiming,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Clinicalorderdetail
type CCR_I17_Clinicalorderdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Clinicalorderdetail,type=tg"`
	OBR *OBR    `hl7:"10,required,display=Observation Request"`
	OBX []OBX   `hl7:"11,display=Observation/result"`
}

// Patient
type CCR_I17_Patient struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Patient,type=tg"`
	PID *PID    `hl7:"13,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"14,display=Patient Additional Demographic"`
}

// Insurance
type CCR_I17_Insurance struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Insurance,type=tg"`
	IN1 *IN1    `hl7:"16,required,display=Insurance"`
	IN2 *IN2    `hl7:"17,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"18,display=Insurance Additional Information- Certification"`
}

// Appointmenthistory
type CCR_I17_Appointmenthistory struct {
	HL7       HL7Name             `hl7:",name=CCR_I17_Appointmenthistory,type=tg"`
	SCH       *SCH                `hl7:"19,required,display=Scheduling Activity Information"`
	Resources []CCR_I17_Resources `hl7:",display=Resources"`
}

// Resources
type CCR_I17_Resources struct {
	HL7            HL7Name                  `hl7:",name=CCR_I17_Resources,type=tg"`
	RGS            *RGS                     `hl7:"20,required,display=Resource Group"`
	Resourcedetail []CCR_I17_Resourcedetail `hl7:",display=Resource_detail"`
}

// Resourcedetail
type CCR_I17_Resourcedetail struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Resourcedetail,type=tg"`
	AIS *AIS    `hl7:"21,required,display=Appointment Information"`
	OBX []OBX   `hl7:"22,display=Observation/result"`
}

// Clinicalhistory
type CCR_I17_Clinicalhistory struct {
	HL7                   HL7Name                         `hl7:",name=CCR_I17_Clinicalhistory,type=tg"`
	ORC                   *ORC                            `hl7:"23,required,display=Common Order"`
	Clinicalhistorydetail []CCR_I17_Clinicalhistorydetail `hl7:",display=Clinical_history_detail"`
	Roleclinicalhistory   []CCR_I17_Roleclinicalhistory   `hl7:",display=Role_clinical_history"`
	CTI                   []CTI                           `hl7:"28,display=Clinical Trial Identification"`
}

// Clinicalhistorydetail
type CCR_I17_Clinicalhistorydetail struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Clinicalhistorydetail,type=tg"`
	OBR *OBR    `hl7:"24,required,display=Observation Request"`
	OBX []OBX   `hl7:"25,display=Observation/result"`
}

// Roleclinicalhistory
type CCR_I17_Roleclinicalhistory struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Roleclinicalhistory,type=tg"`
	ROL *ROL    `hl7:"26,required,display=Role"`
	VAR []VAR   `hl7:"27,display=Variance"`
}

// Patientvisits
type CCR_I17_Patientvisits struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Patientvisits,type=tg"`
	PV1 *PV1    `hl7:"29,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"30,display=Patient Visit - Additional Information"`
}

// Medicationhistory
type CCR_I17_Medicationhistory struct {
	HL7                            HL7Name                                  `hl7:",name=CCR_I17_Medicationhistory,type=tg"`
	ORC                            *ORC                                     `hl7:"31,required,display=Common Order"`
	Medicationorderdetail          *CCR_I17_Medicationorderdetail           `hl7:",display=Medication_order_detail"`
	Medicationencodingdetail       *CCR_I17_Medicationencodingdetail        `hl7:",display=Medication_encoding_detail"`
	Medicationadministrationdetail []CCR_I17_Medicationadministrationdetail `hl7:",display=Medication_administration_detail"`
	CTI                            []CTI                                    `hl7:"43,display=Clinical Trial Identification"`
}

// Medicationorderdetail
type CCR_I17_Medicationorderdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Medicationorderdetail,type=tg"`
	RXO *RXO    `hl7:"32,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"33,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"34,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"35,display=Observation/result"`
}

// Medicationencodingdetail
type CCR_I17_Medicationencodingdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Medicationencodingdetail,type=tg"`
	RXE *RXE    `hl7:"36,required,display=Pharmacy/treatment Encoded Order"`
	RXR []RXR   `hl7:"37,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"38,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"39,display=Observation/result"`
}

// Medicationadministrationdetail
type CCR_I17_Medicationadministrationdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Medicationadministrationdetail,type=tg"`
	RXA []RXA   `hl7:"40,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"41,required,display=Pharmacy/treatment Route"`
	OBX []OBX   `hl7:"42,display=Observation/result"`
}

// Problem
type CCR_I17_Problem struct {
	HL7         HL7Name               `hl7:",name=CCR_I17_Problem,type=tg"`
	PRB         *PRB                  `hl7:"44,required,display=Problem Details"`
	VAR         []VAR                 `hl7:"45,display=Variance"`
	Roleproblem []CCR_I17_Roleproblem `hl7:",display=Role_problem"`
	OBX         []OBX                 `hl7:"48,display=Observation/result"`
}

// Roleproblem
type CCR_I17_Roleproblem struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Roleproblem,type=tg"`
	ROL *ROL    `hl7:"46,required,display=Role"`
	VAR []VAR   `hl7:"47,display=Variance"`
}

// Goal
type CCR_I17_Goal struct {
	HL7      HL7Name            `hl7:",name=CCR_I17_Goal,type=tg"`
	GOL      *GOL               `hl7:"49,required,display=Goal Detail"`
	VAR      []VAR              `hl7:"50,display=Variance"`
	Rolegoal []CCR_I17_Rolegoal `hl7:",display=Role_goal"`
	OBX      []OBX              `hl7:"53,display=Observation/result"`
}

// Rolegoal
type CCR_I17_Rolegoal struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Rolegoal,type=tg"`
	ROL *ROL    `hl7:"51,required,display=Role"`
	VAR []VAR   `hl7:"52,display=Variance"`
}

// Pathway
type CCR_I17_Pathway struct {
	HL7         HL7Name               `hl7:",name=CCR_I17_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"54,required,display=Pathway"`
	VAR         []VAR                 `hl7:"55,display=Variance"`
	Rolepathway []CCR_I17_Rolepathway `hl7:",display=Role_pathway"`
	OBX         []OBX                 `hl7:"58,display=Observation/result"`
}

// Rolepathway
type CCR_I17_Rolepathway struct {
	HL7 HL7Name `hl7:",name=CCR_I17_Rolepathway,type=tg"`
	ROL *ROL    `hl7:"56,required,display=Role"`
	VAR []VAR   `hl7:"57,display=Variance"`
}

// Modify Collaborative Care Referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding changes to an existing Collaborative
// Care Referral. Changes may include additional instructions from the referring provider, additional clinical orders,
// additional clinical history, additional patient visits, additional medication history, or modifications to the problems,
// goals and/or pathways. Whilst the acknowledgment is a simple ACK message, the expectation is that the referred to provider(s)
// will send back a CCU – Asynchronous Collaborative Care Update at a later time to indicate acceptance or rejection of the
// modifications.
type CCR_I17 struct {
	HL7                HL7Name                      `hl7:",name=CCR_I17,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	RF1                []RF1                        `hl7:"4,required,display=Referral Information"`
	Providercontact    []CCR_I17_Providercontact    `hl7:",required,display=Provider_contact"`
	Clinicalorder      []CCR_I17_Clinicalorder      `hl7:",display=Clinical_order"`
	Patient            []CCR_I17_Patient            `hl7:",required,display=Patient"`
	NK1                []NK1                        `hl7:"15,display=Next Of Kin / Associated Parties"`
	Insurance          []CCR_I17_Insurance          `hl7:",display=Insurance"`
	Appointmenthistory []CCR_I17_Appointmenthistory `hl7:",display=Appointment_history"`
	Clinicalhistory    []CCR_I17_Clinicalhistory    `hl7:",display=Clinical_history"`
	Patientvisits      []CCR_I17_Patientvisits      `hl7:",required,display=Patient_visits"`
	Medicationhistory  []CCR_I17_Medicationhistory  `hl7:",display=Medication_history"`
	Problem            []CCR_I17_Problem            `hl7:",display=Problem"`
	Goal               []CCR_I17_Goal               `hl7:",display=Goal"`
	Pathway            []CCR_I17_Pathway            `hl7:",display=Pathway"`
	REL                []REL                        `hl7:"59,display=Clinical Relationship Segment"`
}

// Providercontact
type CCR_I18_Providercontact struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Providercontact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Clinicalorder
type CCR_I18_Clinicalorder struct {
	HL7                 HL7Name                       `hl7:",name=CCR_I18_Clinicalorder,type=tg"`
	ORC                 *ORC                          `hl7:"7,required,display=Common Order"`
	Clinicalordertiming []CCR_I18_Clinicalordertiming `hl7:",display=Clinical_order_timing"`
	Clinicalorderdetail []CCR_I18_Clinicalorderdetail `hl7:",required,display=Clinical_order_detail"`
	CTI                 []CTI                         `hl7:"12,display=Clinical Trial Identification"`
}

// Clinicalordertiming
type CCR_I18_Clinicalordertiming struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Clinicalordertiming,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Clinicalorderdetail
type CCR_I18_Clinicalorderdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Clinicalorderdetail,type=tg"`
	OBR *OBR    `hl7:"10,required,display=Observation Request"`
	OBX []OBX   `hl7:"11,display=Observation/result"`
}

// Patient
type CCR_I18_Patient struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Patient,type=tg"`
	PID *PID    `hl7:"13,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"14,display=Patient Additional Demographic"`
}

// Insurance
type CCR_I18_Insurance struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Insurance,type=tg"`
	IN1 *IN1    `hl7:"16,required,display=Insurance"`
	IN2 *IN2    `hl7:"17,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"18,display=Insurance Additional Information- Certification"`
}

// Appointmenthistory
type CCR_I18_Appointmenthistory struct {
	HL7       HL7Name             `hl7:",name=CCR_I18_Appointmenthistory,type=tg"`
	SCH       *SCH                `hl7:"19,required,display=Scheduling Activity Information"`
	Resources []CCR_I18_Resources `hl7:",display=Resources"`
}

// Resources
type CCR_I18_Resources struct {
	HL7            HL7Name                  `hl7:",name=CCR_I18_Resources,type=tg"`
	RGS            *RGS                     `hl7:"20,required,display=Resource Group"`
	Resourcedetail []CCR_I18_Resourcedetail `hl7:",display=Resource_detail"`
}

// Resourcedetail
type CCR_I18_Resourcedetail struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Resourcedetail,type=tg"`
	AIS *AIS    `hl7:"21,required,display=Appointment Information"`
	OBX []OBX   `hl7:"22,display=Observation/result"`
}

// Clinicalhistory
type CCR_I18_Clinicalhistory struct {
	HL7                   HL7Name                         `hl7:",name=CCR_I18_Clinicalhistory,type=tg"`
	ORC                   *ORC                            `hl7:"23,required,display=Common Order"`
	Clinicalhistorydetail []CCR_I18_Clinicalhistorydetail `hl7:",display=Clinical_history_detail"`
	Roleclinicalhistory   []CCR_I18_Roleclinicalhistory   `hl7:",display=Role_clinical_history"`
	CTI                   []CTI                           `hl7:"28,display=Clinical Trial Identification"`
}

// Clinicalhistorydetail
type CCR_I18_Clinicalhistorydetail struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Clinicalhistorydetail,type=tg"`
	OBR *OBR    `hl7:"24,required,display=Observation Request"`
	OBX []OBX   `hl7:"25,display=Observation/result"`
}

// Roleclinicalhistory
type CCR_I18_Roleclinicalhistory struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Roleclinicalhistory,type=tg"`
	ROL *ROL    `hl7:"26,required,display=Role"`
	VAR []VAR   `hl7:"27,display=Variance"`
}

// Patientvisits
type CCR_I18_Patientvisits struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Patientvisits,type=tg"`
	PV1 *PV1    `hl7:"29,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"30,display=Patient Visit - Additional Information"`
}

// Medicationhistory
type CCR_I18_Medicationhistory struct {
	HL7                            HL7Name                                  `hl7:",name=CCR_I18_Medicationhistory,type=tg"`
	ORC                            *ORC                                     `hl7:"31,required,display=Common Order"`
	Medicationorderdetail          *CCR_I18_Medicationorderdetail           `hl7:",display=Medication_order_detail"`
	Medicationencodingdetail       *CCR_I18_Medicationencodingdetail        `hl7:",display=Medication_encoding_detail"`
	Medicationadministrationdetail []CCR_I18_Medicationadministrationdetail `hl7:",display=Medication_administration_detail"`
	CTI                            []CTI                                    `hl7:"43,display=Clinical Trial Identification"`
}

// Medicationorderdetail
type CCR_I18_Medicationorderdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Medicationorderdetail,type=tg"`
	RXO *RXO    `hl7:"32,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"33,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"34,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"35,display=Observation/result"`
}

// Medicationencodingdetail
type CCR_I18_Medicationencodingdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Medicationencodingdetail,type=tg"`
	RXE *RXE    `hl7:"36,required,display=Pharmacy/treatment Encoded Order"`
	RXR []RXR   `hl7:"37,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"38,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"39,display=Observation/result"`
}

// Medicationadministrationdetail
type CCR_I18_Medicationadministrationdetail struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Medicationadministrationdetail,type=tg"`
	RXA []RXA   `hl7:"40,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"41,required,display=Pharmacy/treatment Route"`
	OBX []OBX   `hl7:"42,display=Observation/result"`
}

// Problem
type CCR_I18_Problem struct {
	HL7         HL7Name               `hl7:",name=CCR_I18_Problem,type=tg"`
	PRB         *PRB                  `hl7:"44,required,display=Problem Details"`
	VAR         []VAR                 `hl7:"45,display=Variance"`
	Roleproblem []CCR_I18_Roleproblem `hl7:",display=Role_problem"`
	OBX         []OBX                 `hl7:"48,display=Observation/result"`
}

// Roleproblem
type CCR_I18_Roleproblem struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Roleproblem,type=tg"`
	ROL *ROL    `hl7:"46,required,display=Role"`
	VAR []VAR   `hl7:"47,display=Variance"`
}

// Goal
type CCR_I18_Goal struct {
	HL7      HL7Name            `hl7:",name=CCR_I18_Goal,type=tg"`
	GOL      *GOL               `hl7:"49,required,display=Goal Detail"`
	VAR      []VAR              `hl7:"50,display=Variance"`
	Rolegoal []CCR_I18_Rolegoal `hl7:",display=Role_goal"`
	OBX      []OBX              `hl7:"53,display=Observation/result"`
}

// Rolegoal
type CCR_I18_Rolegoal struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Rolegoal,type=tg"`
	ROL *ROL    `hl7:"51,required,display=Role"`
	VAR []VAR   `hl7:"52,display=Variance"`
}

// Pathway
type CCR_I18_Pathway struct {
	HL7         HL7Name               `hl7:",name=CCR_I18_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"54,required,display=Pathway"`
	VAR         []VAR                 `hl7:"55,display=Variance"`
	Rolepathway []CCR_I18_Rolepathway `hl7:",display=Role_pathway"`
	OBX         []OBX                 `hl7:"58,display=Observation/result"`
}

// Rolepathway
type CCR_I18_Rolepathway struct {
	HL7 HL7Name `hl7:",name=CCR_I18_Rolepathway,type=tg"`
	ROL *ROL    `hl7:"56,required,display=Role"`
	VAR []VAR   `hl7:"57,display=Variance"`
}

// Cancel Collaborative Care Referral
//
// This event triggers a message to be sent from one healthcare provider to another canceling an existing Collaborative Care
// Referral.  A previous Collaborative Care Referral may have been made in error, or perhaps the cancellation has come from
// the patient. Whilst the acknowledgment is a simple ACK message, the expectation is that the referred to provider(s) will
// send back a CCU – Asynchronous Collaborative Care Update at a later time to indicate cancellation of the Collaborative
// Care Referral.
type CCR_I18 struct {
	HL7                HL7Name                      `hl7:",name=CCR_I18,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	RF1                []RF1                        `hl7:"4,required,display=Referral Information"`
	Providercontact    []CCR_I18_Providercontact    `hl7:",required,display=Provider_contact"`
	Clinicalorder      []CCR_I18_Clinicalorder      `hl7:",display=Clinical_order"`
	Patient            []CCR_I18_Patient            `hl7:",required,display=Patient"`
	NK1                []NK1                        `hl7:"15,display=Next Of Kin / Associated Parties"`
	Insurance          []CCR_I18_Insurance          `hl7:",display=Insurance"`
	Appointmenthistory []CCR_I18_Appointmenthistory `hl7:",display=Appointment_history"`
	Clinicalhistory    []CCR_I18_Clinicalhistory    `hl7:",display=Clinical_history"`
	Patientvisits      []CCR_I18_Patientvisits      `hl7:",required,display=Patient_visits"`
	Medicationhistory  []CCR_I18_Medicationhistory  `hl7:",display=Medication_history"`
	Problem            []CCR_I18_Problem            `hl7:",display=Problem"`
	Goal               []CCR_I18_Goal               `hl7:",display=Goal"`
	Pathway            []CCR_I18_Pathway            `hl7:",display=Pathway"`
	REL                []REL                        `hl7:"59,display=Clinical Relationship Segment"`
}

// Providercontact
type CCU_I20_Providercontact struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Providercontact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Patient
type CCU_I20_Patient struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"8,display=Patient Additional Demographic"`
}

// Insurance
type CCU_I20_Insurance struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Appointmenthistory
type CCU_I20_Appointmenthistory struct {
	HL7       HL7Name             `hl7:",name=CCU_I20_Appointmenthistory,type=tg"`
	SCH       *SCH                `hl7:"13,required,display=Scheduling Activity Information"`
	Resources []CCU_I20_Resources `hl7:",display=Resources"`
}

// Resources
type CCU_I20_Resources struct {
	HL7            HL7Name                  `hl7:",name=CCU_I20_Resources,type=tg"`
	RGS            *RGS                     `hl7:"14,required,display=Resource Group"`
	Resourcedetail []CCU_I20_Resourcedetail `hl7:",display=Resource_detail"`
}

// Resourcedetail
type CCU_I20_Resourcedetail struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Resourcedetail,type=tg"`
	AIS *AIS    `hl7:"15,required,display=Appointment Information"`
	OBX []OBX   `hl7:"16,display=Observation/result"`
}

// Clinicalhistory
type CCU_I20_Clinicalhistory struct {
	HL7                   HL7Name                         `hl7:",name=CCU_I20_Clinicalhistory,type=tg"`
	ORC                   *ORC                            `hl7:"17,required,display=Common Order"`
	Clinicalhistorydetail []CCU_I20_Clinicalhistorydetail `hl7:",display=Clinical_history_detail"`
	Roleclinicalhistory   []CCU_I20_Roleclinicalhistory   `hl7:",display=Role_clinical_history"`
	CTI                   []CTI                           `hl7:"22,display=Clinical Trial Identification"`
}

// Clinicalhistorydetail
type CCU_I20_Clinicalhistorydetail struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Clinicalhistorydetail,type=tg"`
	OBR *OBR    `hl7:"18,required,display=Observation Request"`
	OBX []OBX   `hl7:"19,display=Observation/result"`
}

// Roleclinicalhistory
type CCU_I20_Roleclinicalhistory struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Roleclinicalhistory,type=tg"`
	ROL *ROL    `hl7:"20,required,display=Role"`
	VAR []VAR   `hl7:"21,display=Variance"`
}

// Patientvisits
type CCU_I20_Patientvisits struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Patientvisits,type=tg"`
	PV1 *PV1    `hl7:"23,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"24,display=Patient Visit - Additional Information"`
}

// Medicationhistory
type CCU_I20_Medicationhistory struct {
	HL7                            HL7Name                                  `hl7:",name=CCU_I20_Medicationhistory,type=tg"`
	ORC                            *ORC                                     `hl7:"25,required,display=Common Order"`
	Medicationorderdetail          *CCU_I20_Medicationorderdetail           `hl7:",display=Medication_order_detail"`
	Medicationencodingdetail       *CCU_I20_Medicationencodingdetail        `hl7:",display=Medication_encoding_detail"`
	Medicationadministrationdetail []CCU_I20_Medicationadministrationdetail `hl7:",display=Medication_administration_detail"`
	CTI                            []CTI                                    `hl7:"37,display=Clinical Trial Identification"`
}

// Medicationorderdetail
type CCU_I20_Medicationorderdetail struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Medicationorderdetail,type=tg"`
	RXO *RXO    `hl7:"26,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"27,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"28,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"29,display=Observation/result"`
}

// Medicationencodingdetail
type CCU_I20_Medicationencodingdetail struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Medicationencodingdetail,type=tg"`
	RXE *RXE    `hl7:"30,required,display=Pharmacy/treatment Encoded Order"`
	RXR []RXR   `hl7:"31,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"32,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"33,display=Observation/result"`
}

// Medicationadministrationdetail
type CCU_I20_Medicationadministrationdetail struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Medicationadministrationdetail,type=tg"`
	RXA []RXA   `hl7:"34,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"35,required,display=Pharmacy/treatment Route"`
	OBX []OBX   `hl7:"36,display=Observation/result"`
}

// Problem
type CCU_I20_Problem struct {
	HL7         HL7Name               `hl7:",name=CCU_I20_Problem,type=tg"`
	PRB         *PRB                  `hl7:"38,required,display=Problem Details"`
	VAR         []VAR                 `hl7:"39,display=Variance"`
	Roleproblem []CCU_I20_Roleproblem `hl7:",display=Role_problem"`
	OBX         []OBX                 `hl7:"42,display=Observation/result"`
}

// Roleproblem
type CCU_I20_Roleproblem struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Roleproblem,type=tg"`
	ROL *ROL    `hl7:"40,required,display=Role"`
	VAR []VAR   `hl7:"41,display=Variance"`
}

// Goal
type CCU_I20_Goal struct {
	HL7      HL7Name            `hl7:",name=CCU_I20_Goal,type=tg"`
	GOL      *GOL               `hl7:"43,required,display=Goal Detail"`
	VAR      []VAR              `hl7:"44,display=Variance"`
	Rolegoal []CCU_I20_Rolegoal `hl7:",display=Role_goal"`
	OBX      []OBX              `hl7:"47,display=Observation/result"`
}

// Rolegoal
type CCU_I20_Rolegoal struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Rolegoal,type=tg"`
	ROL *ROL    `hl7:"45,required,display=Role"`
	VAR []VAR   `hl7:"46,display=Variance"`
}

// Pathway
type CCU_I20_Pathway struct {
	HL7         HL7Name               `hl7:",name=CCU_I20_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"48,required,display=Pathway"`
	VAR         []VAR                 `hl7:"49,display=Variance"`
	Rolepathway []CCU_I20_Rolepathway `hl7:",display=Role_pathway"`
	OBX         []OBX                 `hl7:"52,display=Observation/result"`
}

// Rolepathway
type CCU_I20_Rolepathway struct {
	HL7 HL7Name `hl7:",name=CCU_I20_Rolepathway,type=tg"`
	ROL *ROL    `hl7:"50,required,display=Role"`
	VAR []VAR   `hl7:"51,display=Variance"`
}

// Asynchronous Collaborative Care Update
//
// This event triggers a message to be sent from a referred to healthcare provider to the referring health care provider, regarding
// a specific, previously received collaborative care referral. The collaborative care update may contain patient demographic
// information, additional appointments, additional clinical history, additional patient visits and additional medication
// history. It may also contain updates of patient problems, pathways and goal. The information is similar to that which may
// have been provided in the original Collaborate Care Referral message, but significantly different, as it is information
// from the perspective of the referred to provider. Patient visits will be those visits by the patient, to the referred to
// provider, relating to the referral. Appointments will be appointments made for the patient, by the referred to provider,
// during those visits. Clinical history will be observations made during those visits and medication history will be medications
// prescribed, observed or recommended during those visits. This message is used to update the referring provider as to the
// current status of the referral. The referrer would also use this message to update of the status of a referral, such as accepted,
// rejected, patient put on waiting list, treatment completed etc.
type CCU_I20 struct {
	HL7                HL7Name                      `hl7:",name=CCU_I20,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	RF1                *RF1                         `hl7:"4,required,display=Referral Information"`
	Providercontact    []CCU_I20_Providercontact    `hl7:",display=Provider_contact"`
	Patient            []CCU_I20_Patient            `hl7:",display=Patient"`
	NK1                []NK1                        `hl7:"9,display=Next Of Kin / Associated Parties"`
	Insurance          []CCU_I20_Insurance          `hl7:",display=Insurance"`
	Appointmenthistory []CCU_I20_Appointmenthistory `hl7:",display=Appointment_history"`
	Clinicalhistory    []CCU_I20_Clinicalhistory    `hl7:",display=Clinical_history"`
	Patientvisits      []CCU_I20_Patientvisits      `hl7:",required,display=Patient_visits"`
	Medicationhistory  []CCU_I20_Medicationhistory  `hl7:",display=Medication_history"`
	Problem            []CCU_I20_Problem            `hl7:",display=Problem"`
	Goal               []CCU_I20_Goal               `hl7:",display=Goal"`
	Pathway            []CCU_I20_Pathway            `hl7:",display=Pathway"`
	REL                []REL                        `hl7:"53,display=Clinical Relationship Segment"`
}

// Providercontact
type CQU_I19_Providercontact struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Providercontact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Patient
type CQU_I19_Patient struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Patient,type=tg"`
	PID *PID    `hl7:"9,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"10,display=Patient Additional Demographic"`
}

// Insurance
type CQU_I19_Insurance struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Appointmenthistory
type CQU_I19_Appointmenthistory struct {
	HL7       HL7Name             `hl7:",name=CQU_I19_Appointmenthistory,type=tg"`
	SCH       *SCH                `hl7:"15,required,display=Scheduling Activity Information"`
	Resources []CQU_I19_Resources `hl7:",display=Resources"`
}

// Resources
type CQU_I19_Resources struct {
	HL7            HL7Name                  `hl7:",name=CQU_I19_Resources,type=tg"`
	RGS            *RGS                     `hl7:"16,required,display=Resource Group"`
	Resourcedetail []CQU_I19_Resourcedetail `hl7:",display=Resource_detail"`
}

// Resourcedetail
type CQU_I19_Resourcedetail struct {
	HL7            HL7Name                 `hl7:",name=CQU_I19_Resourcedetail,type=tg"`
	Resourceobject *CQU_I19_Resourceobject `hl7:",display=Resource_object"`
	OBX            []OBX                   `hl7:"21,display=Observation/result"`
}

// Resourceobject
type CQU_I19_Resourceobject struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Resourceobject,type=tg"`
	AIS *AIS    `hl7:"17,display=Appointment Information"`
	AIG *AIG    `hl7:"18,display=Appointment Information - General Resource"`
	AIL *AIL    `hl7:"19,display=Appointment Information - Location Resource"`
	AIP *AIP    `hl7:"20,display=Appointment Information - Personnel Resource"`
}

// Clinicalhistory
type CQU_I19_Clinicalhistory struct {
	HL7                   HL7Name                         `hl7:",name=CQU_I19_Clinicalhistory,type=tg"`
	ORC                   *ORC                            `hl7:"22,required,display=Common Order"`
	Clinicalhistorydetail []CQU_I19_Clinicalhistorydetail `hl7:",display=Clinical_history_detail"`
	Roleclinicalhistory   []CQU_I19_Roleclinicalhistory   `hl7:",display=Role_clinical_history"`
	CTI                   []CTI                           `hl7:"39,display=Clinical Trial Identification"`
}

// Clinicalhistorydetail
type CQU_I19_Clinicalhistorydetail struct {
	HL7                   HL7Name                        `hl7:",name=CQU_I19_Clinicalhistorydetail,type=tg"`
	Clinicalhistoryobject *CQU_I19_Clinicalhistoryobject `hl7:",display=Clinical_history_object"`
	OBX                   []OBX                          `hl7:"35,display=Observation/result"`
}

// Clinicalhistoryobject
type CQU_I19_Clinicalhistoryobject struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Clinicalhistoryobject,type=tg"`
	OBR *OBR    `hl7:"23,display=Observation Request"`
	ODS *ODS    `hl7:"24,display=Dietary Orders- Supplements- And Preferences"`
	PR1 *PR1    `hl7:"25,display=Procedures"`
	RF1 *RF1    `hl7:"26,display=Referral Information"`
	AL1 *AL1    `hl7:"27,display=Patient Allergy Information"`
	IAM *IAM    `hl7:"28,display=Patient Adverse Reaction Information"`
	ACC *ACC    `hl7:"29,display=Accident"`
	RMI *RMI    `hl7:"30,display=Risk Management Incident"`
	DB1 *DB1    `hl7:"31,display=Disability"`
	DG1 *DG1    `hl7:"32,display=Diagnosis"`
	DRG *DRG    `hl7:"33,display=Diagnosis Related Group"`
	PDA *PDA    `hl7:"34,display=Patient Death And Autopsy"`
}

// Roleclinicalhistory
type CQU_I19_Roleclinicalhistory struct {
	HL7                       HL7Name                            `hl7:",name=CQU_I19_Roleclinicalhistory,type=tg"`
	Roleclinicalhistoryobject *CQU_I19_Roleclinicalhistoryobject `hl7:",display=Role_clinical_history_object"`
	VAR                       []VAR                              `hl7:"38,display=Variance"`
}

// Roleclinicalhistoryobject
type CQU_I19_Roleclinicalhistoryobject struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Roleclinicalhistoryobject,type=tg"`
	ROL *ROL    `hl7:"36,display=Role"`
	PRD *PRD    `hl7:"37,display=Provider Data"`
}

// Patientvisit
type CQU_I19_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"40,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"41,display=Patient Visit - Additional Information"`
}

// Medicationhistory
type CQU_I19_Medicationhistory struct {
	HL7                            HL7Name                                  `hl7:",name=CQU_I19_Medicationhistory,type=tg"`
	ORC                            *ORC                                     `hl7:"42,required,display=Common Order"`
	Medicationorderdetail          *CQU_I19_Medicationorderdetail           `hl7:",display=Medication_order_detail"`
	Medicationencodingdetail       *CQU_I19_Medicationencodingdetail        `hl7:",display=Medication_encoding_detail"`
	Medicationadministrationdetail []CQU_I19_Medicationadministrationdetail `hl7:",display=Medication_administration_detail"`
	CTI                            []CTI                                    `hl7:"54,display=Clinical Trial Identification"`
}

// Medicationorderdetail
type CQU_I19_Medicationorderdetail struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Medicationorderdetail,type=tg"`
	RXO *RXO    `hl7:"43,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"44,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"45,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"46,display=Observation/result"`
}

// Medicationencodingdetail
type CQU_I19_Medicationencodingdetail struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Medicationencodingdetail,type=tg"`
	RXE *RXE    `hl7:"47,required,display=Pharmacy/treatment Encoded Order"`
	RXR []RXR   `hl7:"48,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"49,display=Pharmacy/treatment Component Order"`
	OBX []OBX   `hl7:"50,display=Observation/result"`
}

// Medicationadministrationdetail
type CQU_I19_Medicationadministrationdetail struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Medicationadministrationdetail,type=tg"`
	RXA []RXA   `hl7:"51,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"52,required,display=Pharmacy/treatment Route"`
	OBX []OBX   `hl7:"53,display=Observation/result"`
}

// Problem
type CQU_I19_Problem struct {
	HL7         HL7Name               `hl7:",name=CQU_I19_Problem,type=tg"`
	PRB         *PRB                  `hl7:"55,required,display=Problem Details"`
	VAR         []VAR                 `hl7:"56,display=Variance"`
	Roleproblem []CQU_I19_Roleproblem `hl7:",display=Role_problem"`
	OBX         []OBX                 `hl7:"60,display=Observation/result"`
}

// Roleproblem
type CQU_I19_Roleproblem struct {
	HL7               HL7Name                    `hl7:",name=CQU_I19_Roleproblem,type=tg"`
	Roleproblemobject *CQU_I19_Roleproblemobject `hl7:",display=Role_problem_object"`
	VAR               []VAR                      `hl7:"59,display=Variance"`
}

// Roleproblemobject
type CQU_I19_Roleproblemobject struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Roleproblemobject,type=tg"`
	ROL *ROL    `hl7:"57,display=Role"`
	PRD *PRD    `hl7:"58,display=Provider Data"`
}

// Goal
type CQU_I19_Goal struct {
	HL7      HL7Name            `hl7:",name=CQU_I19_Goal,type=tg"`
	GOL      *GOL               `hl7:"61,required,display=Goal Detail"`
	VAR      []VAR              `hl7:"62,display=Variance"`
	Rolegoal []CQU_I19_Rolegoal `hl7:",display=Role_goal"`
	OBX      []OBX              `hl7:"66,display=Observation/result"`
}

// Rolegoal
type CQU_I19_Rolegoal struct {
	HL7            HL7Name                 `hl7:",name=CQU_I19_Rolegoal,type=tg"`
	Roalgoalobject *CQU_I19_Roalgoalobject `hl7:",display=Roal_goal_object"`
	VAR            []VAR                   `hl7:"65,display=Variance"`
}

// Roalgoalobject
type CQU_I19_Roalgoalobject struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Roalgoalobject,type=tg"`
	ROL *ROL    `hl7:"63,display=Role"`
	PRD *PRD    `hl7:"64,display=Provider Data"`
}

// Pathway
type CQU_I19_Pathway struct {
	HL7         HL7Name               `hl7:",name=CQU_I19_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"67,required,display=Pathway"`
	VAR         []VAR                 `hl7:"68,display=Variance"`
	Rolepathway []CQU_I19_Rolepathway `hl7:",display=Role_pathway"`
	OBX         []OBX                 `hl7:"72,display=Observation/result"`
}

// Rolepathway
type CQU_I19_Rolepathway struct {
	HL7               HL7Name                    `hl7:",name=CQU_I19_Rolepathway,type=tg"`
	Rolepathwayobject *CQU_I19_Rolepathwayobject `hl7:",display=Role_pathway_object"`
	VAR               []VAR                      `hl7:"71,display=Variance"`
}

// Rolepathwayobject
type CQU_I19_Rolepathwayobject struct {
	HL7 HL7Name `hl7:",name=CQU_I19_Rolepathwayobject,type=tg"`
	ROL *ROL    `hl7:"69,display=Role"`
	PRD *PRD    `hl7:"70,display=Provider Data"`
}

// Collaborative Care Referral
type CQU_I19 struct {
	HL7                HL7Name                      `hl7:",name=CQU_I19,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	MSA                *MSA                         `hl7:"4,required,display=Message Acknowledgment"`
	ERR                []ERR                        `hl7:"5,display=Error"`
	RF1                *RF1                         `hl7:"6,display=Referral Information"`
	Providercontact    *CQU_I19_Providercontact     `hl7:",display=Provider_contact"`
	Patient            []CQU_I19_Patient            `hl7:",display=Patient"`
	NK1                []NK1                        `hl7:"11,display=Next Of Kin / Associated Parties"`
	Insurance          []CQU_I19_Insurance          `hl7:",display=Insurance"`
	Appointmenthistory []CQU_I19_Appointmenthistory `hl7:",display=Appointment_history"`
	Clinicalhistory    []CQU_I19_Clinicalhistory    `hl7:",display=Clinical_history"`
	Patientvisit       []CQU_I19_Patientvisit       `hl7:",required,display=Patient_visit"`
	Medicationhistory  []CQU_I19_Medicationhistory  `hl7:",display=Medication_history"`
	Problem            []CQU_I19_Problem            `hl7:",display=Problem"`
	Goal               []CQU_I19_Goal               `hl7:",display=Goal"`
	Pathway            []CQU_I19_Pathway            `hl7:",display=Pathway"`
	REL                []REL                        `hl7:"73,display=Clinical Relationship Segment"`
}

// Patient
type CRM_C01_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C01_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C01_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C01_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C01_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Register a patient on a clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C01 struct {
	HL7     HL7Name           `hl7:",name=CRM_C01,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C01_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C02_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C02_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C02_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C02_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C02_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Cancel a patient registration on clinical trial (for clerical mistakes onl
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C02 struct {
	HL7     HL7Name           `hl7:",name=CRM_C02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C02_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C03_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C03_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C03_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C03_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C03_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Correct/update registration information
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C03 struct {
	HL7     HL7Name           `hl7:",name=CRM_C03,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C03_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C04_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C04_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C04_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C04_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C04_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Patient has gone off a clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C04 struct {
	HL7     HL7Name           `hl7:",name=CRM_C04,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C04_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C05_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C05_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C05_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C05_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C05_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Patient enters phase of clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C05 struct {
	HL7     HL7Name           `hl7:",name=CRM_C05,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C05_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C06_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C06_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C06_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C06_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C06_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Cancel patient entering a phase (clerical mistake)
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C06 struct {
	HL7     HL7Name           `hl7:",name=CRM_C06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C06_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C07_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C07_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C07_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C07_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C07_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Correct/update phase information
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C07 struct {
	HL7     HL7Name           `hl7:",name=CRM_C07,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C07_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C08_Patient struct {
	HL7          HL7Name               `hl7:",name=CRM_C08_Patient,type=tg"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PRT          []PRT                 `hl7:"5,display=Participation Information"`
	Patientvisit *CRM_C08_Patientvisit `hl7:",display=Patient_visit"`
	CSR          *CSR                  `hl7:"8,required,display=Clinical Study Registration"`
	CSP          []CSP                 `hl7:"9,display=Clinical Study Phase"`
}

// Patientvisit
type CRM_C08_Patientvisit struct {
	HL7 HL7Name `hl7:",name=CRM_C08_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Patient has gone off phase of clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems. They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CRM_C08 struct {
	HL7     HL7Name           `hl7:",name=CRM_C08,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CRM_C08_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C09_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C09_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	PRT        []PRT                `hl7:"6,display=Participation Information"`
	NTE        []NTE                `hl7:"7,display=Notes And Comments"`
	Visit      *CSU_C09_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"11,required,display=Clinical Study Registration"`
	Studyphase []CSU_C09_Studyphase `hl7:",required,display=Study_phase"`
}

// Visit
type CSU_C09_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C09_Visit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Studyphase
type CSU_C09_Studyphase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C09_Studyphase,type=tg"`
	CSP           *CSP                    `hl7:"12,display=Clinical Study Phase"`
	Studyschedule []CSU_C09_Studyschedule `hl7:",required,display=Study_schedule"`
}

// Studyschedule
type CSU_C09_Studyschedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C09_Studyschedule,type=tg"`
	CSS              *CSS                       `hl7:"13,display=Clinical Study Data Schedule Segment"`
	Studyobservation []CSU_C09_Studyobservation `hl7:",required,display=Study_observation"`
	Studypharm       []CSU_C09_Studypharm       `hl7:",required,display=Study_pharm"`
}

// Studyobservation
type CSU_C09_Studyobservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C09_Studyobservation,type=tg"`
	ORC       *ORC                `hl7:"14,display=Common Order"`
	OBR       *OBR                `hl7:"15,required,display=Observation Request"`
	PRT       []PRT               `hl7:"16,display=Participation Information"`
	Timingqty []CSU_C09_Timingqty `hl7:",display=Timing_qty"`
	OBX       *OBX                `hl7:"19,required,display=Observation/result"`
	PRT2      []PRT               `hl7:"20,display=Participation Information"`
}

// Timingqty
type CSU_C09_Timingqty struct {
	HL7 HL7Name `hl7:",name=CSU_C09_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Studypharm
type CSU_C09_Studypharm struct {
	HL7         HL7Name              `hl7:",name=CSU_C09_Studypharm,type=tg"`
	Commonorder *CSU_C09_Commonorder `hl7:",display=Common_order"`
	Rxadmin     []CSU_C09_Rxadmin    `hl7:",required,display=Rx_admin"`
}

// Commonorder
type CSU_C09_Commonorder struct {
	HL7 HL7Name `hl7:",name=CSU_C09_Commonorder,type=tg"`
	ORC *ORC    `hl7:"21,required,display=Common Order"`
	PRT []PRT   `hl7:"22,display=Participation Information"`
}

// Rxadmin
type CSU_C09_Rxadmin struct {
	HL7 HL7Name `hl7:",name=CSU_C09_Rxadmin,type=tg"`
	RXA *RXA    `hl7:"23,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"24,required,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"25,display=Participation Information"`
}

// Automated time intervals for reporting, like monthly
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications. Most clinical trials data - clinical observations and study variables - will be communicated
// in OBR and OBX segments. The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial. Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CSU_C09 struct {
	HL7     HL7Name           `hl7:",name=CSU_C09,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CSU_C09_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C10_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C10_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	PRT        []PRT                `hl7:"6,display=Participation Information"`
	NTE        []NTE                `hl7:"7,display=Notes And Comments"`
	Visit      *CSU_C10_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"11,required,display=Clinical Study Registration"`
	Studyphase []CSU_C10_Studyphase `hl7:",required,display=Study_phase"`
}

// Visit
type CSU_C10_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C10_Visit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Studyphase
type CSU_C10_Studyphase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C10_Studyphase,type=tg"`
	CSP           *CSP                    `hl7:"12,display=Clinical Study Phase"`
	Studyschedule []CSU_C10_Studyschedule `hl7:",required,display=Study_schedule"`
}

// Studyschedule
type CSU_C10_Studyschedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C10_Studyschedule,type=tg"`
	CSS              *CSS                       `hl7:"13,display=Clinical Study Data Schedule Segment"`
	Studyobservation []CSU_C10_Studyobservation `hl7:",required,display=Study_observation"`
	Studypharm       []CSU_C10_Studypharm       `hl7:",required,display=Study_pharm"`
}

// Studyobservation
type CSU_C10_Studyobservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C10_Studyobservation,type=tg"`
	ORC       *ORC                `hl7:"14,display=Common Order"`
	OBR       *OBR                `hl7:"15,required,display=Observation Request"`
	PRT       []PRT               `hl7:"16,display=Participation Information"`
	Timingqty []CSU_C10_Timingqty `hl7:",display=Timing_qty"`
	OBX       *OBX                `hl7:"19,required,display=Observation/result"`
	PRT2      []PRT               `hl7:"20,display=Participation Information"`
}

// Timingqty
type CSU_C10_Timingqty struct {
	HL7 HL7Name `hl7:",name=CSU_C10_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Studypharm
type CSU_C10_Studypharm struct {
	HL7         HL7Name              `hl7:",name=CSU_C10_Studypharm,type=tg"`
	Commonorder *CSU_C10_Commonorder `hl7:",display=Common_order"`
	Rxadmin     []CSU_C10_Rxadmin    `hl7:",required,display=Rx_admin"`
}

// Commonorder
type CSU_C10_Commonorder struct {
	HL7 HL7Name `hl7:",name=CSU_C10_Commonorder,type=tg"`
	ORC *ORC    `hl7:"21,required,display=Common Order"`
	PRT []PRT   `hl7:"22,display=Participation Information"`
}

// Rxadmin
type CSU_C10_Rxadmin struct {
	HL7 HL7Name `hl7:",name=CSU_C10_Rxadmin,type=tg"`
	RXA *RXA    `hl7:"23,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"24,required,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"25,display=Participation Information"`
}

// Patient completes the clinical trial
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications. Most clinical trials data - clinical observations and study variables - will be communicated
// in OBR and OBX segments. The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial. Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CSU_C10 struct {
	HL7     HL7Name           `hl7:",name=CSU_C10,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CSU_C10_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C11_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C11_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	PRT        []PRT                `hl7:"6,display=Participation Information"`
	NTE        []NTE                `hl7:"7,display=Notes And Comments"`
	Visit      *CSU_C11_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"11,required,display=Clinical Study Registration"`
	Studyphase []CSU_C11_Studyphase `hl7:",required,display=Study_phase"`
}

// Visit
type CSU_C11_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C11_Visit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Studyphase
type CSU_C11_Studyphase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C11_Studyphase,type=tg"`
	CSP           *CSP                    `hl7:"12,display=Clinical Study Phase"`
	Studyschedule []CSU_C11_Studyschedule `hl7:",required,display=Study_schedule"`
}

// Studyschedule
type CSU_C11_Studyschedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C11_Studyschedule,type=tg"`
	CSS              *CSS                       `hl7:"13,display=Clinical Study Data Schedule Segment"`
	Studyobservation []CSU_C11_Studyobservation `hl7:",required,display=Study_observation"`
	Studypharm       []CSU_C11_Studypharm       `hl7:",required,display=Study_pharm"`
}

// Studyobservation
type CSU_C11_Studyobservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C11_Studyobservation,type=tg"`
	ORC       *ORC                `hl7:"14,display=Common Order"`
	OBR       *OBR                `hl7:"15,required,display=Observation Request"`
	PRT       []PRT               `hl7:"16,display=Participation Information"`
	Timingqty []CSU_C11_Timingqty `hl7:",display=Timing_qty"`
	OBX       *OBX                `hl7:"19,required,display=Observation/result"`
	PRT2      []PRT               `hl7:"20,display=Participation Information"`
}

// Timingqty
type CSU_C11_Timingqty struct {
	HL7 HL7Name `hl7:",name=CSU_C11_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Studypharm
type CSU_C11_Studypharm struct {
	HL7         HL7Name              `hl7:",name=CSU_C11_Studypharm,type=tg"`
	Commonorder *CSU_C11_Commonorder `hl7:",display=Common_order"`
	Rxadmin     []CSU_C11_Rxadmin    `hl7:",required,display=Rx_admin"`
}

// Commonorder
type CSU_C11_Commonorder struct {
	HL7 HL7Name `hl7:",name=CSU_C11_Commonorder,type=tg"`
	ORC *ORC    `hl7:"21,required,display=Common Order"`
	PRT []PRT   `hl7:"22,display=Participation Information"`
}

// Rxadmin
type CSU_C11_Rxadmin struct {
	HL7 HL7Name `hl7:",name=CSU_C11_Rxadmin,type=tg"`
	RXA *RXA    `hl7:"23,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"24,required,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"25,display=Participation Information"`
}

// Patient completes a phase of the clinical trial
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications. Most clinical trials data - clinical observations and study variables - will be communicated
// in OBR and OBX segments. The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial. Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CSU_C11 struct {
	HL7     HL7Name           `hl7:",name=CSU_C11,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CSU_C11_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C12_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C12_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	PRT        []PRT                `hl7:"6,display=Participation Information"`
	NTE        []NTE                `hl7:"7,display=Notes And Comments"`
	Visit      *CSU_C12_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"11,required,display=Clinical Study Registration"`
	Studyphase []CSU_C12_Studyphase `hl7:",required,display=Study_phase"`
}

// Visit
type CSU_C12_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C12_Visit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Studyphase
type CSU_C12_Studyphase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C12_Studyphase,type=tg"`
	CSP           *CSP                    `hl7:"12,display=Clinical Study Phase"`
	Studyschedule []CSU_C12_Studyschedule `hl7:",required,display=Study_schedule"`
}

// Studyschedule
type CSU_C12_Studyschedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C12_Studyschedule,type=tg"`
	CSS              *CSS                       `hl7:"13,display=Clinical Study Data Schedule Segment"`
	Studyobservation []CSU_C12_Studyobservation `hl7:",required,display=Study_observation"`
	Studypharm       []CSU_C12_Studypharm       `hl7:",required,display=Study_pharm"`
}

// Studyobservation
type CSU_C12_Studyobservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C12_Studyobservation,type=tg"`
	ORC       *ORC                `hl7:"14,display=Common Order"`
	OBR       *OBR                `hl7:"15,required,display=Observation Request"`
	PRT       []PRT               `hl7:"16,display=Participation Information"`
	Timingqty []CSU_C12_Timingqty `hl7:",display=Timing_qty"`
	OBX       *OBX                `hl7:"19,required,display=Observation/result"`
	PRT2      []PRT               `hl7:"20,display=Participation Information"`
}

// Timingqty
type CSU_C12_Timingqty struct {
	HL7 HL7Name `hl7:",name=CSU_C12_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Studypharm
type CSU_C12_Studypharm struct {
	HL7         HL7Name              `hl7:",name=CSU_C12_Studypharm,type=tg"`
	Commonorder *CSU_C12_Commonorder `hl7:",display=Common_order"`
	Rxadmin     []CSU_C12_Rxadmin    `hl7:",required,display=Rx_admin"`
}

// Commonorder
type CSU_C12_Commonorder struct {
	HL7 HL7Name `hl7:",name=CSU_C12_Commonorder,type=tg"`
	ORC *ORC    `hl7:"21,required,display=Common Order"`
	PRT []PRT   `hl7:"22,display=Participation Information"`
}

// Rxadmin
type CSU_C12_Rxadmin struct {
	HL7 HL7Name `hl7:",name=CSU_C12_Rxadmin,type=tg"`
	RXA *RXA    `hl7:"23,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"24,required,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"25,display=Participation Information"`
}

// Update/correction of patient order/result information
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications. Most clinical trials data - clinical observations and study variables - will be communicated
// in OBR and OBX segments. The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial. Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
//
// The general acknowledgement message as defined in Chapter 2 should be used for any acknowledgements.
type CSU_C12 struct {
	HL7     HL7Name           `hl7:",name=CSU_C12,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	Patient []CSU_C12_Patient `hl7:",required,display=Patient"`
}

// Commonorder
type DFT_P03_Commonorder struct {
	HL7            HL7Name                  `hl7:",name=DFT_P03_Commonorder,type=tg"`
	ORC            *ORC                     `hl7:"12,display=Common Order"`
	Timingquantity []DFT_P03_Timingquantity `hl7:",display=Timing_quantity"`
	Order          *DFT_P03_Order           `hl7:",display=Order"`
	Observation    []DFT_P03_Observation    `hl7:",display=Observation"`
}

// Timingquantity
type DFT_P03_Timingquantity struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Timingquantity,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/quantity Relationship"`
}

// Order
type DFT_P03_Order struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Order,type=tg"`
	OBR *OBR    `hl7:"15,required,display=Observation Request"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Observation
type DFT_P03_Observation struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Observation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Financial
type DFT_P03_Financial struct {
	HL7                  HL7Name                        `hl7:",name=DFT_P03_Financial,type=tg"`
	FT1                  *FT1                           `hl7:"19,required,display=Financial Transaction"`
	NTE                  *NTE                           `hl7:"20,display=Notes And Comments"`
	Financialprocedure   []DFT_P03_Financialprocedure   `hl7:",display=Financial_procedure"`
	Financialcommonorder []DFT_P03_Financialcommonorder `hl7:",display=Financial_common_order"`
}

// Financialprocedure
type DFT_P03_Financialprocedure struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Financialprocedure,type=tg"`
	PR1 *PR1    `hl7:"21,required,display=Procedures"`
	ROL []ROL   `hl7:"22,display=Role"`
}

// Financialcommonorder
type DFT_P03_Financialcommonorder struct {
	HL7                     HL7Name                           `hl7:",name=DFT_P03_Financialcommonorder,type=tg"`
	ORC                     *ORC                              `hl7:"23,display=Common Order"`
	Financialtimingquantity []DFT_P03_Financialtimingquantity `hl7:",display=Financial_timing_quantity"`
	Financialorder          *DFT_P03_Financialorder           `hl7:",display=Financial_order"`
	Financialobservation    []DFT_P03_Financialobservation    `hl7:",display=Financial_observation"`
}

// Financialtimingquantity
type DFT_P03_Financialtimingquantity struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Financialtimingquantity,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Financialorder
type DFT_P03_Financialorder struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Financialorder,type=tg"`
	OBR *OBR    `hl7:"26,required,display=Observation Request"`
	NTE []NTE   `hl7:"27,display=Notes And Comments"`
}

// Financialobservation
type DFT_P03_Financialobservation struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Financialobservation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/result"`
	NTE []NTE   `hl7:"29,display=Notes And Comments"`
}

// Insurance
type DFT_P03_Insurance struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"33,required,display=Insurance"`
	IN2 *IN2    `hl7:"34,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"35,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"36,display=Role"`
}

// Post detail financial transaction
//
// The Detail Financial Transaction (DFT) message is used to describe a financial transaction transmitted between systems,
// that is, to the billing system for ancillary charges, ADT to billing system for patient deposits, etc.
//
// Use case for Post Detail Financial Transaction with related Order:
//
// This information can originate in many ways. For instance, a detailed financial transaction for an ancillary charge is
// sent to a billing system that also tracks the transaction(s) in relation to their order via placer order number or wishes
// to post these transactions with the additional order information. Therefore a service reaches a state where a detailed
// financial transaction is created and interfaced to other systems along with optional associated order information.
// If the message contains multiple transactions for the same order, such as a test service and venipuncture charge on the
// same order, the ordering information is entered in the Order segment construct that precedes the FT1 segments. If a message
// contains multiple transactions for disparate orders for the same account each FT1 segment construct may contain the order
// related information specific to that transaction within the message.
//
// If the common order information is sent, the Order Control Code should reflect the current state of the common order and
// is not intended to initiate any order related triggers on the receiving application. For example if observations are included
// along with common order information the order control code would indicate ‘RE’ as observations to follow.
//
// If common order information is sent related to the entire message or a specific financial transaction, the required Order
// Control Code should reflect the current state of the common order and is not intended to initiate any order related triggers
// on the receiving application. For example if observations are included along with common order information the order
// control code would indicate ‘RE’ as observations to follow.
//
// If order detail information is sent related to the entire message or a specific financial transaction, the required fields
// for that detail segment must accompany that information.
//
// Note: The ROL segment is optionally included after the PD1 to transmit information for patient level primary care providers,
// after the PV2 for additional information on the physicians whose information is sent there (i.e., Attending Doctor, Referring
// Doctor, Consulting Doctor), and within the insurance construct to transmit information for insurance level primary
// care providers.
//
// Note: There is an information overlap between the FT1, DG1 and PR1 segments. If diagnosis information is sent in an FT1 segment,
// it should be consistent with the information contained in any DG1 segments present within its hierarchy. Since the procedure
// code field within the FT1 does not repeat, if procedure information is sent on an FT1 it is recommended that the single occurrence
// of the code in FT1 equates to the primary procedure (PR1-14 - Procedure Priority code value 1).
//
// Note: The extra set of DG1/DRG/GT1/IN1/IN2/IN3/ROL segments added in V2.4 have been withdrawn as a technical correction
type DFT_P03 struct {
	HL7         HL7Name               `hl7:",name=DFT_P03,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1         *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	ROL         []ROL                 `hl7:"7,display=Role"`
	PV1         *PV1                  `hl7:"8,display=Patient Visit"`
	PV2         *PV2                  `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2        []ROL                 `hl7:"10,display=Role"`
	DB1         []DB1                 `hl7:"11,display=Disability"`
	Commonorder []DFT_P03_Commonorder `hl7:",display=Common_order"`
	Financial   []DFT_P03_Financial   `hl7:",required,display=Financial"`
	DG1         []DG1                 `hl7:"30,display=Diagnosis"`
	DRG         *DRG                  `hl7:"31,display=Diagnosis Related Group"`
	GT1         []GT1                 `hl7:"32,display=Guarantor"`
	Insurance   []DFT_P03_Insurance   `hl7:",display=Insurance"`
	ACC         *ACC                  `hl7:"37,display=Accident"`
}

// Commonorder
type DFT_P11_Commonorder struct {
	HL7            HL7Name                  `hl7:",name=DFT_P11_Commonorder,type=tg"`
	ORC            *ORC                     `hl7:"12,display=Common Order"`
	Timingquantity []DFT_P11_Timingquantity `hl7:",display=Timing_quantity"`
	Order          *DFT_P11_Order           `hl7:",display=Order"`
	Observation    []DFT_P11_Observation    `hl7:",display=Observation"`
}

// Timingquantity
type DFT_P11_Timingquantity struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Timingquantity,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/quantity Relationship"`
}

// Order
type DFT_P11_Order struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Order,type=tg"`
	OBR *OBR    `hl7:"15,required,display=Observation Request"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Observation
type DFT_P11_Observation struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Observation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Insurance
type DFT_P11_Insurance struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Financial
type DFT_P11_Financial struct {
	HL7                  HL7Name                        `hl7:",name=DFT_P11_Financial,type=tg"`
	FT1                  *FT1                           `hl7:"27,required,display=Financial Transaction"`
	Financialprocedure   []DFT_P11_Financialprocedure   `hl7:",display=Financial_procedure"`
	Financialcommonorder []DFT_P11_Financialcommonorder `hl7:",display=Financial_common_order"`
	DG1                  []DG1                          `hl7:"37,display=Diagnosis"`
	DRG                  *DRG                           `hl7:"38,display=Diagnosis Related Group"`
	GT1                  []GT1                          `hl7:"39,display=Guarantor"`
	Financialinsurance   []DFT_P11_Financialinsurance   `hl7:",display=Financial_insurance"`
}

// Financialprocedure
type DFT_P11_Financialprocedure struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Financialprocedure,type=tg"`
	PR1 *PR1    `hl7:"28,required,display=Procedures"`
	ROL []ROL   `hl7:"29,display=Role"`
}

// Financialcommonorder
type DFT_P11_Financialcommonorder struct {
	HL7                     HL7Name                           `hl7:",name=DFT_P11_Financialcommonorder,type=tg"`
	ORC                     *ORC                              `hl7:"30,display=Common Order"`
	Financialtimingquantity []DFT_P11_Financialtimingquantity `hl7:",display=Financial_timing_quantity"`
	Financialorder          *DFT_P11_Financialorder           `hl7:",display=Financial_order"`
	Financialobservation    []DFT_P11_Financialobservation    `hl7:",display=Financial_observation"`
}

// Financialtimingquantity
type DFT_P11_Financialtimingquantity struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Financialtimingquantity,type=tg"`
	TQ1 *TQ1    `hl7:"31,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"32,display=Timing/quantity Relationship"`
}

// Financialorder
type DFT_P11_Financialorder struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Financialorder,type=tg"`
	OBR *OBR    `hl7:"33,required,display=Observation Request"`
	NTE []NTE   `hl7:"34,display=Notes And Comments"`
}

// Financialobservation
type DFT_P11_Financialobservation struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Financialobservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/result"`
	NTE []NTE   `hl7:"36,display=Notes And Comments"`
}

// Financialinsurance
type DFT_P11_Financialinsurance struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Financialinsurance,type=tg"`
	IN1 *IN1    `hl7:"40,required,display=Insurance"`
	IN2 *IN2    `hl7:"41,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"42,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"43,display=Role"`
}

// Post Detail Financial Transactions - New
//
// The Detail Financial Transaction (DFT) - Expanded message is used to describe a financial transaction transmitted between
// systems, that is, to the billing system for ancillary charges, ADT to billing system for patient deposits, etc. It serves
// the same function as the Post Detail Financial Transactions (event P03) message, but also supports the use cases described
// below.
//
// Use case for adding the INx and GT1 segments inside the FT1 repetition:
//
// If the insurance and/or the guarantor information is specific to a certain financial transaction of a patient and differs
// from the patient's regular insurance and/or guarantor, you may use the INx and GT1 segments related to the FT1 segment.
// If being used, the information supersedes the information on the patient level.
//
// Example: Before being employed by a company, a pre-employment physical is required. The cost of the examinations is paid
// by the company, and not by the person’s private health insurance. One of the physicians examining the person is an eye doctor.
// For efficiency reasons, the person made an appointment for these examinations on the same day as he already had an appointment
// with his eye doctor in the same hospital. The costs for this eye doctor appointment are being paid by the patient's private
// health insurance. Both financial transactions for the same patient/person could be sent in the same message. To bill the
// examination for the future-employer to that organization, you need to use the GT1 segment that is related to the FT1.
//
// Note: The ROL segment is optionally included after the PD1 to transmit information for patient level primary care providers,
// after the PV2 for additional information on the physicians whose information is sent there (i.e., Attending Doctor, Referring
// Doctor, Consulting Doctor), and within the insurance construct to transmit information for insurance level primary
// care providers.
//
// Note: There is an information overlap between the FT1, DG1 and PR1 segments. If diagnosis information is sent in an FT1 segment,
// it should be consistent with the information contained in any DG1 segments present within its hierarchy. Since the procedure
// code field within the FT1 does not repeat, if procedure information is sent on an FT1 it is recommended that the single occurrence
// of the code in FT1 equates to the primary procedure (PR1-14 - Procedure Priority code value 1).
type DFT_P11 struct {
	HL7         HL7Name               `hl7:",name=DFT_P11,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1         *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	ROL         []ROL                 `hl7:"7,display=Role"`
	PV1         *PV1                  `hl7:"8,display=Patient Visit"`
	PV2         *PV2                  `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2        []ROL                 `hl7:"10,display=Role"`
	DB1         []DB1                 `hl7:"11,display=Disability"`
	Commonorder []DFT_P11_Commonorder `hl7:",display=Common_order"`
	DG1         []DG1                 `hl7:"19,display=Diagnosis"`
	DRG         *DRG                  `hl7:"20,display=Diagnosis Related Group"`
	GT1         []GT1                 `hl7:"21,display=Guarantor"`
	Insurance   []DFT_P11_Insurance   `hl7:",display=Insurance"`
	ACC         *ACC                  `hl7:"26,display=Accident"`
	Financial   []DFT_P11_Financial   `hl7:",required,display=Financial"`
}

// Command
type EAC_U07_Command struct {
	HL7               HL7Name                    `hl7:",name=EAC_U07_Command,type=tg"`
	ECD               *ECD                       `hl7:"5,required,display=Equipment Command"`
	TQ1               *TQ1                       `hl7:"6,display=Timing/quantity"`
	Specimencontainer *EAC_U07_Specimencontainer `hl7:",display=Specimen_container"`
	CNS               *CNS                       `hl7:"9,display=Clear Notification"`
}

// Specimencontainer
type EAC_U07_Specimencontainer struct {
	HL7 HL7Name `hl7:",name=EAC_U07_Specimencontainer,type=tg"`
	SAC *SAC    `hl7:"7,required,display=Specimen Container Detail"`
	SPM []SPM   `hl7:"8,display=Specimen"`
}

// Automated equipment command
//
// This message is used to send equipment commands from one application to another (e.g., a Laboratory Automation System
// to automated Equipment).
type EAC_U07 struct {
	HL7     HL7Name           `hl7:",name=EAC_U07,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	EQU     *EQU              `hl7:"4,required,display=Equipment Detail"`
	Command []EAC_U07_Command `hl7:",required,display=Command"`
	ROL     *ROL              `hl7:"10,display=Role"`
}

// Notification
type EAN_U09_Notification struct {
	HL7 HL7Name `hl7:",name=EAN_U09_Notification,type=tg"`
	NDS *NDS    `hl7:"5,required,display=Notification Detail"`
	NTE *NTE    `hl7:"6,display=Notes And Comments"`
}

// Automated equipment notification
//
// This message is used to send equipment notifications from one application to another (e.g., alerts sent by automated equipment
// to a Laboratory Automation System).
type EAN_U09 struct {
	HL7          HL7Name                `hl7:",name=EAN_U09,type=t"`
	MSH          *MSH                   `hl7:"1,required,display=Message Header"`
	SFT          []SFT                  `hl7:"2,display=Software Segment"`
	UAC          *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	EQU          *EQU                   `hl7:"4,required,display=Equipment Detail"`
	Notification []EAN_U09_Notification `hl7:",required,display=Notification"`
	ROL          *ROL                   `hl7:"7,display=Role"`
}

// Commandresponse
type EAR_U08_Commandresponse struct {
	HL7               HL7Name                    `hl7:",name=EAR_U08_Commandresponse,type=tg"`
	ECD               *ECD                       `hl7:"5,required,display=Equipment Command"`
	Specimencontainer *EAR_U08_Specimencontainer `hl7:",display=Specimen_container"`
	ECR               *ECR                       `hl7:"8,required,display=Equipment Command Response"`
}

// Specimencontainer
type EAR_U08_Specimencontainer struct {
	HL7 HL7Name `hl7:",name=EAR_U08_Specimencontainer,type=tg"`
	SAC *SAC    `hl7:"6,required,display=Specimen Container Detail"`
	SPM []SPM   `hl7:"7,display=Specimen"`
}

// Automated equipment response
//
// This message is used to send equipment responses to previously issued commands from one application to another (e.g.,
// automated Equipment to a Laboratory Automation System).
type EAR_U08 struct {
	HL7             HL7Name                   `hl7:",name=EAR_U08,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential Segment"`
	EQU             *EQU                      `hl7:"4,required,display=Equipment Detail"`
	Commandresponse []EAR_U08_Commandresponse `hl7:",required,display=Command_response"`
	ROL             *ROL                      `hl7:"9,display=Role"`
}

// InvoiceInformation
type EHC_E01_InvoiceInformation struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E01_InvoiceInformation,type=tg"`
	IVC                   *IVC                            `hl7:"4,required,display=Invoice Segment"`
	PYE                   *PYE                            `hl7:"5,display=Payee Information"`
	CTD                   []CTD                           `hl7:"6,display=Contact Data"`
	AUT                   *AUT                            `hl7:"7,display=Authorization Information"`
	LOC                   []LOC                           `hl7:"8,display=Location Identification"`
	ROL                   []ROL                           `hl7:"9,display=Role"`
	ProductServiceSection []EHC_E01_ProductServiceSection `hl7:",required,display=Product Service Section"`
}

// ProductServiceSection
type EHC_E01_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E01_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"10,required,display=Product/service Section"`
	ProductServiceGroup []EHC_E01_ProductServiceGroup `hl7:",required,display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E01_ProductServiceGroup struct {
	HL7                    HL7Name                          `hl7:",name=EHC_E01_ProductServiceGroup,type=tg"`
	PSG                    *PSG                             `hl7:"11,required,display=Product/service Group"`
	LOC                    []LOC                            `hl7:"12,display=Location Identification"`
	ROL                    []ROL                            `hl7:"13,display=Role"`
	PatientInfo            []EHC_E01_PatientInfo            `hl7:",display=Patient Info"`
	ProductServiceLineItem []EHC_E01_ProductServiceLineItem `hl7:",required,display=Product Service Line Item"`
	Procedure              []EHC_E01_Procedure              `hl7:",display=Procedure"`
	InvoiceProcessing      []EHC_E01_InvoiceProcessing      `hl7:",display=Invoice Processing"`
}

// PatientInfo
type EHC_E01_PatientInfo struct {
	HL7       HL7Name             `hl7:",name=EHC_E01_PatientInfo,type=tg"`
	PID       *PID                `hl7:"14,required,display=Patient Identification"`
	PV1       *PV1                `hl7:"15,display=Patient Visit"`
	PV2       *PV2                `hl7:"16,display=Patient Visit - Additional Information"`
	ACC       []ACC               `hl7:"17,display=Accident"`
	Insurance []EHC_E01_Insurance `hl7:",required,display=Insurance"`
	Diagnosis []EHC_E01_Diagnosis `hl7:",display=Diagnosis"`
	OBX       []OBX               `hl7:"22,display=Observation/result"`
}

// Insurance
type EHC_E01_Insurance struct {
	HL7 HL7Name `hl7:",name=EHC_E01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
}

// Diagnosis
type EHC_E01_Diagnosis struct {
	HL7 HL7Name `hl7:",name=EHC_E01_Diagnosis,type=tg"`
	DG1 *DG1    `hl7:"20,required,display=Diagnosis"`
	NTE []NTE   `hl7:"21,display=Notes And Comments"`
}

// ProductServiceLineItem
type EHC_E01_ProductServiceLineItem struct {
	HL7 HL7Name `hl7:",name=EHC_E01_ProductServiceLineItem,type=tg"`
	PSL *PSL    `hl7:"23,required,display=Product/service Line Item"`
	NTE []NTE   `hl7:"24,display=Notes And Comments"`
	ADJ []ADJ   `hl7:"25,display=Adjustment"`
	AUT *AUT    `hl7:"26,display=Authorization Information"`
	LOC []LOC   `hl7:"27,display=Location Identification"`
	ROL []ROL   `hl7:"28,display=Role"`
}

// Procedure
type EHC_E01_Procedure struct {
	HL7 HL7Name `hl7:",name=EHC_E01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"29,required,display=Procedures"`
	NTE []NTE   `hl7:"30,display=Notes And Comments"`
	ROL []ROL   `hl7:"31,display=Role"`
}

// InvoiceProcessing
type EHC_E01_InvoiceProcessing struct {
	HL7 HL7Name `hl7:",name=EHC_E01_InvoiceProcessing,type=tg"`
	IPR *IPR    `hl7:"32,required,display=Invoice Processing Results"`
}

// Submit HealthCare Services Invoice
//
// This message is used to submit a HealthCare Services Invoice to a TPA/Payer for processing and payment. A HealthCare Services
// Invoice may have 1 or more Product/Service Line Items (detail lines), grouped as a Product/Service Group. Each Product/Service
// Line Item represents a specific fee item. Refer to the beginning of this section for more information on the structure of
// a HealthCare Services Invoice.
//
// This message can be used to submit a HealthCare Services Invoice or to resubmit a previously submitted HealthCare Services
// Invoice (in case it was not properly acknowledged the first time that it was submitted). This message cannot be used to update
// an Invoice (e.g., add or cancel Product/Service Line Items) or cancel a HealthCare Services Invoice. To cancel a HealthCare
// Services Invoice, use the EHC^E02 – Cancel HealthCare Services Invoice message. To update a HealthCare Services Invoice
// it must first be cancelled (see EHC^E02 – Cancel HealthCare Services Invoice) and then re–submitted using this message
// with new Invoice numbers.
//
// This message can also be used as a Pre-Determination message. This allows a Provider Application to submit a HealthCare
// Services Invoice to a Payer Application and run it through the Payer's edit and adjudication engine. The only difference
// between a Pre-Determination Invoice and a regular Invoice is the Payer will not pay the Pre-Determination Invoice. Setting
// the Invoice Control on IVC to "PD" identifies a Pre-Determination Invoice.
//
// Note that an EHC^E12 – Request Additional Information (pending) is a valid response for an EHC^E01 – Submit HealthCare
// Services Invoice.  In this case, the interactions would be EHC^E01 -> EHC^E12 (pending).
type EHC_E01 struct {
	HL7                HL7Name                     `hl7:",name=EHC_E01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                []UAC                       `hl7:"3,display=User Authentication Credential Segment"`
	InvoiceInformation *EHC_E01_InvoiceInformation `hl7:",required,display=Invoice Information"`
}

// InvoiceInformation
type EHC_E02_InvoiceInformation struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E02_InvoiceInformation,type=tg"`
	IVC                   *IVC                            `hl7:"4,required,display=Invoice Segment"`
	PYE                   *PYE                            `hl7:"5,required,display=Payee Information"`
	CTD                   []CTD                           `hl7:"6,display=Contact Data"`
	NTE                   []NTE                           `hl7:"7,display=Notes And Comments"`
	ProductServiceSection []EHC_E02_ProductServiceSection `hl7:",display=Product Service Section"`
}

// ProductServiceSection
type EHC_E02_ProductServiceSection struct {
	HL7 HL7Name       `hl7:",name=EHC_E02_ProductServiceSection,type=tg"`
	PSS *PSS          `hl7:"8,required,display=Product/service Section"`
	Psg []EHC_E02_Psg `hl7:",display=Psg"`
}

// Psg
type EHC_E02_Psg struct {
	HL7 HL7Name `hl7:",name=EHC_E02_Psg,type=tg"`
	PSG *PSG    `hl7:"9,required,display=Product/service Group"`
	PSL []PSL   `hl7:"10,display=Product/service Line Item"`
}

// Cancel HealthCare Services Invoice
//
// This message is used to cancel one HealthCare Services Invoices or one Product/Service Group in an Invoice or one Product/Service
// Line Item in an Invoice that have previously been submitted to a TPA/Payer for processing and payment.  Invoice Control
// codes are used to indicate the specific action being requested of the Payer (CN for Cancel Invoice, CG for Cancel Product/Service
// Group and CI for Cancel Product/Service Line Item). An Invoice that is cancelled must be marked as cancel only and not purged
// from the Payer Application's database.
//
// The Payer may/may not be able to cancel the Invoice/Product/Service Line Item, and will indicate processing results in
// the response message. In some situations, the Payer has already paid the Product/Service Line Item, and therefore will
// hold a debit amount for the Payee until subsequent billing from the Payee utilizes the debit amount.
//
// This message cannot be used to cancel or remove ancillary information for an Invoice and/or Product/Service Line Item
// such as Authorization or Contact information or any referenced health documents.
type EHC_E02 struct {
	HL7                HL7Name                     `hl7:",name=EHC_E02,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                []UAC                       `hl7:"3,display=User Authentication Credential Segment"`
	InvoiceInformation *EHC_E02_InvoiceInformation `hl7:",required,display=Invoice Information"`
}

// ReassessmentRequestInfo
type EHC_E04_ReassessmentRequestInfo struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E04_ReassessmentRequestInfo,type=tg"`
	IVC                   *IVC                            `hl7:"4,required,display=Invoice Segment"`
	NTE                   []NTE                           `hl7:"5,display=Notes And Comments"`
	ProductServiceSection []EHC_E04_ProductServiceSection `hl7:",display=Product Service Section"`
}

// ProductServiceSection
type EHC_E04_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E04_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"6,required,display=Product/service Section"`
	ProductServiceGroup []EHC_E04_ProductServiceGroup `hl7:",display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E04_ProductServiceGroup struct {
	HL7 HL7Name `hl7:",name=EHC_E04_ProductServiceGroup,type=tg"`
	PSG *PSG    `hl7:"7,required,display=Product/service Group"`
	PSL []PSL   `hl7:"8,display=Product/service Line Item"`
}

// Re-Assess HealthCare Services Invoice Request
//
// This message is used to submit a single Re-Assess HealthCare Services Invoice Request to a TPA/Payer for processing. The
// Re-Assess HealthCare Services Invoice Request is used by a Provider, to request review of a previously adjudicated HealthCare
// Services Invoice, with optional specification of a Product/Service Line Item within that Invoice. Note that the HealthCare
// Services Invoice need not necessarily be sent to a TPA/Payer using the EHC^E01 – Submit HealthCare Services Invoice: it
// may be manually submitted.
//
// Adjudication for a HealthCare Services Invoice may be re-assessed either because background information, such as a Provider's
// billing rate may have changed or if some of the adjudication rules have changed since original adjudication of the Invoice.
//
// This message cannot be used to change or delete information from the HealthCare Services Invoice. The only information
// allowed in this message are Provider Invoice Number and Payer Invoice Number, and optional notes to assist in the re-assessment
// by the TPA/Payer.
type EHC_E04 struct {
	HL7                     HL7Name                          `hl7:",name=EHC_E04,type=t"`
	MSH                     *MSH                             `hl7:"1,required,display=Message Header"`
	SFT                     []SFT                            `hl7:"2,display=Software Segment"`
	UAC                     []UAC                            `hl7:"3,display=User Authentication Credential Segment"`
	ReassessmentRequestInfo *EHC_E04_ReassessmentRequestInfo `hl7:",required,display=Reassessment Request Info"`
}

// InvoiceProcessingResultsInfo
type EHC_E10_InvoiceProcessingResultsInfo struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E10_InvoiceProcessingResultsInfo,type=tg"`
	IPR                   *IPR                            `hl7:"6,required,display=Invoice Processing Results"`
	NTE                   []NTE                           `hl7:"7,display=Notes And Comments"`
	PYE                   *PYE                            `hl7:"8,required,display=Payee Information"`
	IN1                   *IN1                            `hl7:"9,required,display=Insurance"`
	IN2                   *IN2                            `hl7:"10,display=Insurance Additional Information"`
	IVC                   *IVC                            `hl7:"11,required,display=Invoice Segment"`
	ProductServiceSection []EHC_E10_ProductServiceSection `hl7:",required,display=Product Service Section"`
}

// ProductServiceSection
type EHC_E10_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E10_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"12,required,display=Product/service Section"`
	ProductServiceGroup []EHC_E10_ProductServiceGroup `hl7:",required,display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E10_ProductServiceGroup struct {
	HL7                    HL7Name                          `hl7:",name=EHC_E10_ProductServiceGroup,type=tg"`
	PSG                    *PSG                             `hl7:"13,required,display=Product/service Group"`
	ProductServiceLineInfo []EHC_E10_ProductServiceLineInfo `hl7:",required,display=Product Service Line Info"`
}

// ProductServiceLineInfo
type EHC_E10_ProductServiceLineInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E10_ProductServiceLineInfo,type=tg"`
	PSL *PSL    `hl7:"14,required,display=Product/service Line Item"`
	ADJ []ADJ   `hl7:"15,display=Adjustment"`
}

// Edit/Adjudication Results
//
// This message is used to send edit and/or adjudication results for a HealthCare Services Invoice. Edit/Adjudication results
// are sent to the same Network Application ID that originated the Invoice, which was specified as the Sending Application
// on MSH on the original HealthCare Services Invoice.
//
// This message is returned to a Provider Application each time an EHC^E01 – Submit HealthCare Services Invoice message is
// successfully processed by a Payer Application. As a minimum, the EHC^E10 – Edit/Adjudication Results message will contain
// the Payer Applications' Invoice number (Payer Invoice Number on IVC), status codes for each Product/Service Line Item
// in the Invoice and optionally, a tracking number for the Payer Application (Payer Tracking Number on PSL).
//
// Note that an EHC^E12 – Request Additional Information (pending) is a valid response for an EHC^E01 – Submit HealthCare
// Services Invoice.  In this case, the interactions would be EHC^E01 -> EHC^E12 (pending).  If the Payer Application is able
// to process the Invoice on-line, the EHC^E10 – Edit/Adjudication Results message will contain the Invoice Processing
// Results portion completely filled out, indicating the results of the adjudication (e.g., paid as submitted, paid partial,
// etc.).
type EHC_E10 struct {
	HL7                          HL7Name                                `hl7:",name=EHC_E10,type=t"`
	MSH                          *MSH                                   `hl7:"1,required,display=Message Header"`
	SFT                          []SFT                                  `hl7:"2,display=Software Segment"`
	UAC                          []UAC                                  `hl7:"3,display=User Authentication Credential Segment"`
	MSA                          *MSA                                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR                          []ERR                                  `hl7:"5,display=Error"`
	InvoiceProcessingResultsInfo []EHC_E10_InvoiceProcessingResultsInfo `hl7:",required,display=Invoice Processing Results Info"`
}

// Request
type EHC_E12_Request struct {
	HL7 HL7Name `hl7:",name=EHC_E12_Request,type=tg"`
	CTD *CTD    `hl7:"11,display=Contact Data"`
	OBR *OBR    `hl7:"12,required,display=Observation Request"`
	NTE *NTE    `hl7:"13,display=Notes And Comments"`
	OBX []OBX   `hl7:"14,display=Observation/result"`
}

// Request Additional Information
//
// A Payer or TPA uses this message to request additional information in support of an Invoice or a (Pre) Authorization Request.
// Normally, this request would be sent following receipt of an E01 or E20 message.  However, it can also be sent following receipt
// of an E04 Re-Assess HealthCare Services Invoice Request.  In this latter case the request for additional information still
// has as its object the original invoice (which is now under review) rather than the Re-assessment request per se.
//
// The E12 can only be used to initiate a request for information and cannot be used to modify, place on hold or cancel an earlier
// request.  This message cannot be used to convey information on the status of a claim and/or adjudication results (i.e.,
// cannot be used in place of an E10 Edit/Adjudication Results message).
//
// The scope of the request for additional information is defined through the inclusion of contextual data from the original
// Invoice or (Pre) Authorization Request.  By specifying a particular Product/Service Group, patient and/or Product/Service
// Line item the requested information (e.g., a discharge narrative) is deemed to apply to those particular service events
// and not to any others which may have been part of the original Invoice or (Pre) Authorization Request.
//
// In terms of absolute limits the E12 request is restricted to a single Product/Service Group from the original Invoice or
// (Pre) Authorization Request.   Thereafter, the context can be more narrowly defined by inclusion of patient and/or Product/Service
// Line item information from within the same Product/Service Group. Thus, if a particular P/S Line Item is included, the
// message recipient must interpret this to mean that the request is related to that one line item.  If the P/S Line Item is excluded
// the request is related to any and all line items in the original Product/Service Group.  Similarly for patients: identification
// of a particular patient restricts the request to that patient alone, whereas omission of patient information means that
// the request applies to any and all patients identified in the original Product/Service Group.
//
// The E12 message is restricted to zero or one patients and to zero or one Product/Service Line items.  One consequence of these
// limits is that a Payer requiring information about a variety of patients or products/services from an original invoice
// may have to generate multiple (E12) requests.
//
// The E12 message requires the use of LOINC classification standard to describe the information being requested (as do the
// E13/14 response messages).  The codified request can also be supplemented by free-form text if greater specificity is
// required.
//
// This message supports the use of pre-defined responses.  That is, the sender specifies both the request as well as a range
// of possible answers for the recipient to choose from.  This is an optional usage that is designed for real-time environments
// in which the Payer employs an adjudication engine to both solicit the additional information and manage the responses.
type EHC_E12 struct {
	HL7     HL7Name           `hl7:",name=EHC_E12,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     []UAC             `hl7:"3,display=User Authentication Credential Segment"`
	RFI     *RFI              `hl7:"4,required,display=Request For Information"`
	CTD     []CTD             `hl7:"5,display=Contact Data"`
	IVC     *IVC              `hl7:"6,required,display=Invoice Segment"`
	PSS     *PSS              `hl7:"7,required,display=Product/service Section"`
	PSG     *PSG              `hl7:"8,required,display=Product/service Group"`
	PID     *PID              `hl7:"9,display=Patient Identification"`
	PSL     []PSL             `hl7:"10,display=Product/service Line Item"`
	Request []EHC_E12_Request `hl7:",required,display=Request"`
}

// Request
type EHC_E13_Request struct {
	HL7      HL7Name            `hl7:",name=EHC_E13_Request,type=tg"`
	CTD      *CTD               `hl7:"13,display=Contact Data"`
	OBR      *OBR               `hl7:"14,required,display=Observation Request"`
	NTE      *NTE               `hl7:"15,display=Notes And Comments"`
	Response []EHC_E13_Response `hl7:",required,display=Response"`
}

// Response
type EHC_E13_Response struct {
	HL7 HL7Name `hl7:",name=EHC_E13_Response,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/result"`
	NTE *NTE    `hl7:"17,display=Notes And Comments"`
	TXA *TXA    `hl7:"18,display=Transcription Document Header"`
}

// Additional Information Response
//
// This message is used by a Provider to immediately respond to an EHC_E12 Request for Additional Information, in other words
// an automated response.  The EHC_E13 message cannot be sent unsolicited.
type EHC_E13 struct {
	HL7     HL7Name           `hl7:",name=EHC_E13,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     []UAC             `hl7:"3,display=User Authentication Credential Segment"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	RFI     *RFI              `hl7:"6,required,display=Request For Information"`
	CTD     []CTD             `hl7:"7,display=Contact Data"`
	IVC     *IVC              `hl7:"8,required,display=Invoice Segment"`
	PSS     *PSS              `hl7:"9,required,display=Product/service Section"`
	PSG     *PSG              `hl7:"10,required,display=Product/service Group"`
	PID     *PID              `hl7:"11,display=Patient Identification"`
	PSL     *PSL              `hl7:"12,display=Product/service Line Item"`
	Request []EHC_E13_Request `hl7:",required,display=Request"`
}

// PaymentRemittanceHeaderInfo
type EHC_E15_PaymentRemittanceHeaderInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E15_PaymentRemittanceHeaderInfo,type=tg"`
	PMT *PMT    `hl7:"4,required,display=Payment Information"`
	PYE *PYE    `hl7:"5,required,display=Payee Information"`
}

// PaymentRemittanceDetailInfo
type EHC_E15_PaymentRemittanceDetailInfo struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E15_PaymentRemittanceDetailInfo,type=tg"`
	IPR                   *IPR                            `hl7:"6,required,display=Invoice Processing Results"`
	IVC                   *IVC                            `hl7:"7,required,display=Invoice Segment"`
	ProductServiceSection []EHC_E15_ProductServiceSection `hl7:",required,display=Product Service Section"`
}

// ProductServiceSection
type EHC_E15_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E15_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"8,required,display=Product/service Section"`
	ProductServiceGroup []EHC_E15_ProductServiceGroup `hl7:",required,display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E15_ProductServiceGroup struct {
	HL7         HL7Name               `hl7:",name=EHC_E15_ProductServiceGroup,type=tg"`
	PSG         *PSG                  `hl7:"9,required,display=Product/service Group"`
	PslItemInfo []EHC_E15_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type EHC_E15_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E15_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"10,required,display=Product/service Line Item"`
	ADJ []ADJ   `hl7:"11,display=Adjustment"`
}

// AdjustmentPayee
type EHC_E15_AdjustmentPayee struct {
	HL7 HL7Name `hl7:",name=EHC_E15_AdjustmentPayee,type=tg"`
	ADJ *ADJ    `hl7:"12,required,display=Adjustment"`
	ROL *ROL    `hl7:"13,display=Role"`
}

// Payment/Remittance Advice
//
// This message is used to send a payment/ remittance advice to a Payee for the payment of HealthCare Services Invoices and/or
// other adjustments.   The Payment/Remittance Advice can be sent to the originating Provider Application (Network Application
// ID) or alternately to the Payee's Network Application ID, depending on how the Payee has been configured by the Payer. If
// a Payment/Remittance Advice is paid by check, it typically has a 1 to 1 correspondence with a check number. However, there
// are occasions when one check number covers multiple Payment/Remittance Advices. This message does not enforce a 1 to 1
// relationship between check number and Payment/Remittance Advice. That is, the same check number (Check Number on PMT)
// can be used on multiple Payment/Remittance Advices.
//
// A Payment/Remittance Advice may not be generated if a Payee is a Person and not an organization (Payee Type on PYE = "PERS"
// or "PPER").
//
// Once an EHC^E15 message is prepared (which may be on a regular basis such as monthly or bi-weekly), it is either sent to the
// Provider Application (if the Provider Application is able to receive unsolicited results) or stored on a queue for the
// Provider Application. If left on a queue for the Provider Application, then the QBP^E99 message must be used by the Provider
// Application to poll the Payer Application for the EHC^E15.
type EHC_E15 struct {
	HL7                         HL7Name                               `hl7:",name=EHC_E15,type=t"`
	MSH                         *MSH                                  `hl7:"1,required,display=Message Header"`
	SFT                         []SFT                                 `hl7:"2,display=Software Segment"`
	UAC                         []UAC                                 `hl7:"3,display=User Authentication Credential Segment"`
	PaymentRemittanceHeaderInfo *EHC_E15_PaymentRemittanceHeaderInfo  `hl7:",required,display=Payment Remittance Header Info"`
	PaymentRemittanceDetailInfo []EHC_E15_PaymentRemittanceDetailInfo `hl7:",display=Payment Remittance Detail Info"`
	AdjustmentPayee             []EHC_E15_AdjustmentPayee             `hl7:",display=Adjustment Payee"`
}

// AuthorizationRequest
type EHC_E20_AuthorizationRequest struct {
	HL7         HL7Name               `hl7:",name=EHC_E20_AuthorizationRequest,type=tg"`
	IVC         *IVC                  `hl7:"4,required,display=Invoice Segment"`
	CTD         []CTD                 `hl7:"5,required,display=Contact Data"`
	LOC         []LOC                 `hl7:"6,display=Location Identification"`
	ROL         []ROL                 `hl7:"7,display=Role"`
	PatInfo     []EHC_E20_PatInfo     `hl7:",required,display=Pat Info"`
	PslItemInfo []EHC_E20_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PatInfo
type EHC_E20_PatInfo struct {
	HL7       HL7Name             `hl7:",name=EHC_E20_PatInfo,type=tg"`
	PID       *PID                `hl7:"8,required,display=Patient Identification"`
	ACC       []ACC               `hl7:"9,display=Accident"`
	Insurance []EHC_E20_Insurance `hl7:",required,display=Insurance"`
	Diagnosis []EHC_E20_Diagnosis `hl7:",display=Diagnosis"`
	OBX       []OBX               `hl7:"14,display=Observation/result"`
}

// Insurance
type EHC_E20_Insurance struct {
	HL7 HL7Name `hl7:",name=EHC_E20_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
}

// Diagnosis
type EHC_E20_Diagnosis struct {
	HL7 HL7Name `hl7:",name=EHC_E20_Diagnosis,type=tg"`
	DG1 *DG1    `hl7:"12,required,display=Diagnosis"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// PslItemInfo
type EHC_E20_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E20_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"15,required,display=Product/service Line Item"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
	ADJ []ADJ   `hl7:"17,display=Adjustment"`
	LOC []LOC   `hl7:"18,display=Location Identification"`
	ROL []ROL   `hl7:"19,display=Role"`
}

// Submit Authorization Request
//
// This message is used to submit a single Authorization Request to a TPA/Payer for authorization (for payment). An Authorization
// Request is made for one or more patients and may include 1 or more Product/Service Line Items (detail lines), each of which
// represents a specific, billable item or Payer allowed Treatment Plan.
//
// If the Authorization is approved, then the Payer Application will return either an Authorization Number (Authorization
// Identifier on AUT) or individual who has authorized the Authorization Request (Name of Authorizer on AUT). The Authorization
// Number is not the same number as the Authorization Request Number; the latter indicates the number used to identify the
// request for authorization. The presence of the AUT segment in the EHC^E24 – Authorization Request Response message implies
// authorization. However, the Authorization may be restricted, which is described as Payer Adjustments.
//
// This message can be used to submit an Authorization Request or to resubmit an Authorization Request (in case it was not properly
// acknowledged the first time that it was submitted). This message cannot be used to update an Authorization Request (e.g.,
// add or cancel Product/Service Line Items) or cancel an Authorization Request. To cancel an Authorization Request, use
// the EHC^E21 – Cancel Authorization Request message. To update an Authorization it must first be cancelled (see EHC^E21
// – Cancel Authorization Request) and then re–submitted using this message with new Provider control numbers.
type EHC_E20 struct {
	HL7                  HL7Name                       `hl7:",name=EHC_E20,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  []UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	AuthorizationRequest *EHC_E20_AuthorizationRequest `hl7:",required,display=Authorization Request"`
}

// AuthorizationRequest
type EHC_E21_AuthorizationRequest struct {
	HL7         HL7Name               `hl7:",name=EHC_E21_AuthorizationRequest,type=tg"`
	IVC         *IVC                  `hl7:"4,required,display=Invoice Segment"`
	PslItemInfo []EHC_E21_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type EHC_E21_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E21_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"5,required,display=Product/service Line Item"`
	NTE []NTE   `hl7:"6,display=Notes And Comments"`
	AUT *AUT    `hl7:"7,display=Authorization Information"`
}

// Cancel Authorization Request
//
// This message is used to cancel an Authorization Request, as a result of a previously submitted EHC^E20 – Submit Authorization
// Request message.
//
// This message can be used to cancel the entire Authorization Request, or an individual Product/Service Line Item within
// an Authorization Request.
//
// This message cannot be used to update ancillary information in an Authorization that has been submitted to a Payer. The
// original request must be cancelled, and a new Authorization Request submitted to the Payer.
type EHC_E21 struct {
	HL7                  HL7Name                       `hl7:",name=EHC_E21,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  []UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	AuthorizationRequest *EHC_E21_AuthorizationRequest `hl7:",required,display=Authorization Request"`
}

// AuthorizationResponseInfo
type EHC_E24_AuthorizationResponseInfo struct {
	HL7         HL7Name               `hl7:",name=EHC_E24_AuthorizationResponseInfo,type=tg"`
	IVC         *IVC                  `hl7:"6,required,display=Invoice Segment"`
	PslItemInfo []EHC_E24_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type EHC_E24_PslItemInfo struct {
	HL7             HL7Name                   `hl7:",name=EHC_E24_PslItemInfo,type=tg"`
	PSL             *PSL                      `hl7:"7,required,display=Product/service Line Item"`
	AUT             *AUT                      `hl7:"8,display=Authorization Information"`
	PayerAdjustment []EHC_E24_PayerAdjustment `hl7:",display=Payer Adjustment"`
}

// PayerAdjustment
type EHC_E24_PayerAdjustment struct {
	HL7 HL7Name `hl7:",name=EHC_E24_PayerAdjustment,type=tg"`
	ADJ *ADJ    `hl7:"9,required,display=Adjustment"`
}

// Authorization Response
//
// This message is used to send results of an Authorization Request to a Provider Application. Authorization results are
// sent to the same Network Application ID that originated the Authorization Request, which was specified as the Sending
// Application on MSH on the original Authorization Request.
type EHC_E24 struct {
	HL7                       HL7Name                            `hl7:",name=EHC_E24,type=t"`
	MSH                       *MSH                               `hl7:"1,required,display=Message Header"`
	SFT                       []SFT                              `hl7:"2,display=Software Segment"`
	UAC                       []UAC                              `hl7:"3,display=User Authentication Credential Segment"`
	MSA                       *MSA                               `hl7:"4,required,display=Message Acknowledgment"`
	ERR                       []ERR                              `hl7:"5,display=Error"`
	AuthorizationResponseInfo *EHC_E24_AuthorizationResponseInfo `hl7:",required,display=Authorization Response Info"`
}

// Automated equipment status request
//
// This message is used to request information about a device's or piece of equipment's status from one application to another
// (e.g., Laboratory Automation System to automated equipment). The equipment identified in the EQU segment should respond
// with its status using the "Automated Equipment Status Update."
type ESR_U02 struct {
	HL7 HL7Name `hl7:",name=ESR_U02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	ROL *ROL    `hl7:"5,display=Role"`
}

// Automated equipment status update
//
// This message is used to send information about the status of a device or equipment from one application to another (e.g.,
// automated device to a Laboratory Automation System). The status update can be sent unsolicited or as a response to the trigger
// "Automated Equipment Status Request."
type ESU_U01 struct {
	HL7 HL7Name `hl7:",name=ESU_U01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	ISD []ISD   `hl7:"5,display=Interaction Status Detail"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated equipment inventory request
//
// This message is used to request information about inventory items from one application to another (e.g., Laboratory Automation
// System to automated equipment). The equipment specified in the EQU segment should respond with the information about
// inventory item requested in the INV segment (or all items).
type INR_U06 struct {
	HL7 HL7Name `hl7:",name=INR_U06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	INV []INV   `hl7:"5,required,display=Inventory Detail"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated equipment inventory update
//
// This message is used to send information about inventory items from one application to another (e.g., automated Equipment
// to a Laboratory Automation System).
type INU_U05 struct {
	HL7 HL7Name `hl7:",name=INU_U05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	INV []INV   `hl7:"5,required,display=Inventory Detail"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated equipment log/service request
//
// This message is used to request log and/or service events from one application to another (e.g., Laboratory Automation
// System to automated equipment).
type LSR_U13 struct {
	HL7 HL7Name `hl7:",name=LSR_U13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	EQP []EQP   `hl7:"5,required,display=Equipment/log Service"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated equipment log/service update
//
// This message is used to send log and/or service events from one application to another (e.g., automated equipment to Laboratory
// Automation System).
type LSU_U12 struct {
	HL7 HL7Name `hl7:",name=LSU_U12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	EQP []EQP   `hl7:"5,required,display=Equipment/log Service"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Commonorder
type MDM_T01_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T01_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T01_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T01_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T01_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Original document notification
//
// This is a notification of the creation of a document without the accompanying content.  There are multiple approaches by
// which systems become aware of documents:
//
// Scenario A: A document is dictated and chart tracking system is notified that it has been dictated and is awaiting transcription.
//
//
// Scenario B: Dictation is transcribed and chart tracking system is notified that the document exists and requires authentication.
//
//
// Scenario C: A provider orders a series of three X-rays.  The radiologist dictates a single document which covers all three
// orders.  Multiple placer numbers are used to identify each of these orders.
type MDM_T01 struct {
	HL7         HL7Name               `hl7:",name=MDM_T01,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T01_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
}

// Commonorder
type MDM_T02_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T02_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T02_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T02_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T02_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Observation
type MDM_T02_Observation struct {
	HL7 HL7Name `hl7:",name=MDM_T02_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Original document notification and content
//
// This is a notification of the creation of a document with the accompanying content.
//
// Scenario A: Dictation is transcribed and the chart tracking system is notified that the document exists and requires authentication.
// The content of the document is transmitted along with the notification.
//
// Scenario B: A provider orders a series of three X-rays.  The radiologist’s dictation is transcribed in a single document,
// which covers all three orders.  Multiple placer numbers are used to identify each of the orders within the single document
// message.  The notification and document content are transmitted.
type MDM_T02 struct {
	HL7         HL7Name               `hl7:",name=MDM_T02,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T02_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
	Observation []MDM_T02_Observation `hl7:",required,display=Observation"`
}

// Commonorder
type MDM_T03_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T03_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T03_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T03_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T03_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Document status change notification
//
// This is a notification of a change in a status of a document without the accompanying content.
//
// Scenario: A document is authenticated.  Notification is sent to the chart tracking system and is used to update the document
// status from pre-authenticated to authenticated or legally authenticated.
//
// A change in any of the following independent status characteristics would cause a message to be sent:
// - Completion Status
// - Confidentiality Status
// - Availability Status (the Availability Status of “cancelled” is supported in T11 (document cancel notification) or
// T03)
// - Storage Status
type MDM_T03 struct {
	HL7         HL7Name               `hl7:",name=MDM_T03,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T03_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
}

// Commonorder
type MDM_T04_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T04_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T04_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T04_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T04_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Observation
type MDM_T04_Observation struct {
	HL7 HL7Name `hl7:",name=MDM_T04_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Document status change notification and content
//
// This is a notification of a change in a status of a document with the accompanying content.
//
// Scenario: A document is authenticated.  Notification is sent to the chart tracking system and is used to update the document
// status from pre-authenticated to authenticated or legally authenticated.  The document content is also transmitted.
type MDM_T04 struct {
	HL7         HL7Name               `hl7:",name=MDM_T04,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T04_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
	Observation []MDM_T04_Observation `hl7:",required,display=Observation"`
}

// Commonorder
type MDM_T05_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T05_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T05_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T05_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T05_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Document addendum notification
//
// This is a notification of an addendum to a document without the accompanying content.
//
// Scenario:  Author dictates additional information as an addendum to a previously transcribed document.  A new document
// is transcribed.  This addendum has its own new unique document ID that is linked to the original document via the parent ID.
// Addendum document notification is transmitted.  This creates a composite document.
type MDM_T05 struct {
	HL7         HL7Name               `hl7:",name=MDM_T05,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T05_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
}

// Commonorder
type MDM_T06_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T06_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T06_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T06_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T06_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Observation
type MDM_T06_Observation struct {
	HL7 HL7Name `hl7:",name=MDM_T06_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Document addendum notification and content
//
// This is a notification of an addendum to a document with the accompanying content.
//
// Scenario:  Author dictates additional information as an addendum to a previously transcribed document.  A new document
// is transcribed.  This addendum has its own new unique document ID that is linked to the original document via the parent ID.
// Addendum document notification is transmitted, along with the document content.  This creates a composite document.
type MDM_T06 struct {
	HL7         HL7Name               `hl7:",name=MDM_T06,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T06_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
	Observation []MDM_T06_Observation `hl7:",required,display=Observation"`
}

// Commonorder
type MDM_T07_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T07_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T07_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T07_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T07_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Document edit notification
//
// Note:  The only valid use of this trigger event is for documents whose availability status is “Unavailable,” i.e., the document
// has not been made available for patient care.
//
// This is a notification of an edit to a document without the accompanying content.
//
// Scenario:  Errors, which need to be corrected, are discovered in a document.  The original document is edited, and an edit
// notification is sent.
type MDM_T07 struct {
	HL7         HL7Name               `hl7:",name=MDM_T07,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T07_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
}

// Commonorder
type MDM_T08_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T08_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T08_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T08_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T08_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Observation
type MDM_T08_Observation struct {
	HL7 HL7Name `hl7:",name=MDM_T08_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Document edit notification and content
//
// Note:  The only valid use of this trigger event is for documents whose availability status is "Unavailable," i.e., the document
// has not been made available for patient care.
//
// This is a notification of an edit to a document with the accompanying content.
//
// Scenario:   Errors, which need to be corrected, are discovered in a document.  The original document is edited, and an edit
// notification and document content are sent.
type MDM_T08 struct {
	HL7         HL7Name               `hl7:",name=MDM_T08,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T08_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
	Observation []MDM_T08_Observation `hl7:",required,display=Observation"`
}

// Commonorder
type MDM_T09_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T09_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T09_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T09_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T09_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Document replacement notification
//
// Note:  This trigger event is generally used when the original document availability status is “Available.”
//
// This is a notification of replacement to a document without the accompanying content.
//
// Scenario:  Errors discovered in a document are corrected.  The original document is replaced with the revised document.
// The replacement document has its own new unique document ID that is linked to the original document via the parent ID.  The
// availability status of the original document is changed to “Obsolete” but the original document should be retained in
// the system for historical reference.  Document replacement notification is sent.
type MDM_T09 struct {
	HL7         HL7Name               `hl7:",name=MDM_T09,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T09_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
}

// Commonorder
type MDM_T10_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T10_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T10_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T10_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T10_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Observation
type MDM_T10_Observation struct {
	HL7 HL7Name `hl7:",name=MDM_T10_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Document replacement notification and content
//
// Scenario:   Errors discovered in a document are corrected.  The original document is replaced with the revised document.
// The replacement document has its own new unique document ID that is linked to the original document via the parent ID.  The
// availability status of the original document is changed to “Obsolete” but the original document should be retained in
// the system for historical reference.  Document replacement notification and document content are sent.
type MDM_T10 struct {
	HL7         HL7Name               `hl7:",name=MDM_T10,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T10_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
	Observation []MDM_T10_Observation `hl7:",required,display=Observation"`
}

// Commonorder
type MDM_T11_Commonorder struct {
	HL7    HL7Name          `hl7:",name=MDM_T11_Commonorder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T11_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes And Comments"`
}

// Timing
type MDM_T11_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T11_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/quantity Relationship"`
}

// Document cancel notification
//
// This is a notification of a cancellation of a document.   This trigger event should be used only for an original document with
// an availability status of “Unavailable.”  When a document has been made available for patient care, the process should
// be to replace the original document, which then becomes obsolete.  The replacement document describes why the erroneous
// information exists.
//
// Scenario:  When the author dictated a document, the wrong patient identification was given, and the document was transcribed
// and sent to the wrong patient’s record.  When the error is discovered, a cancellation notice is sent to remove the document
// from general access in the wrong patient’s record. In these cases, a reason should be supplied in the cancellation message.
// To protect patient privacy, the correct patient’s identifying information should not be placed on the erroneous document
// that is retained in the wrong patient’s record for historical reference.  A new document notification and content will
// be created using a T02 (original document notification and content) event and sent for association with the correct patient’s
// record.
type MDM_T11 struct {
	HL7         HL7Name               `hl7:",name=MDM_T11,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	Commonorder []MDM_T11_Commonorder `hl7:",display=Common_order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	CON         []CON                 `hl7:"13,display=Consent Segment"`
}

// Staff/Practitioner Master File Application Acknowledgment
//
// The staff identification (STF), practitioner detail (PRA), practitioner organization unit segment (ORG), professional
// affiliation (AFF), language detail (LAN), educational detail (EDU), and certificate detail (CER) segments can be used
// to transmit master files information between systems. The STF segment provides general information about personnel;
// the PRA, ORG, AFF, LAN, EDU, CER and NTE segments provide detailed information for a staff member.
type MFK_M02 struct {
	HL7 HL7Name `hl7:",name=MFK_M02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Charge Description Master File Application Acknowledgment
//
// The charge description (CDM) master file segment should be used in conjunction with the general master file segments.
// Interfacing systems often need not only to communicate data about a patient's detailed charges, but also to communicate
// the charge identification entries by which an application knows how to handle a particular charge code.  The charge description
// master is a master file.  The CDM segment below is a specially designed master file segment for interfacing charge description
// masters.  In the following message, the MFI-master file identifier should equal "CDM."  When the CDM segment is used in an
// MFN message, the abstract definition is as follows.
type MFK_M04 struct {
	HL7 HL7Name `hl7:",name=MFK_M04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Patient Location Master File Application Acknowledgment
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the inventory of healthcare patient locations, such as nursing units, rooms, beds, clinics, exam rooms,
// etc.  In a network environment, this segment can be used to define patient locations to other applications.  The segment
// also includes the readiness states and support locations for the patient locations.
type MFK_M05 struct {
	HL7 HL7Name `hl7:",name=MFK_M05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Clinical Study with Phases and Schedules Master File Application Acknowledgment
//
// MFK message for Clinical Study with phases and schedules
type MFK_M06 struct {
	HL7 HL7Name `hl7:",name=MFK_M06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Clinical Study without Phases but with Schedules Master File Application Acknowledgment
//
// MFK message for Clinical Study without phases but with schedules
type MFK_M07 struct {
	HL7 HL7Name `hl7:",name=MFK_M07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Observation (Numeric) Master File Application Acknowledgment
type MFK_M08 struct {
	HL7 HL7Name `hl7:",name=MFK_M08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Observation (Categorical) Master File Application Acknowledgment
type MFK_M09 struct {
	HL7 HL7Name `hl7:",name=MFK_M09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Observation Batteries Master File Application Acknowledgment
type MFK_M10 struct {
	HL7 HL7Name `hl7:",name=MFK_M10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Calculated Observations Master File Application Acknowledgment
type MFK_M11 struct {
	HL7 HL7Name `hl7:",name=MFK_M11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
}

// Additional Basic Observation/Service Attributes Master File Application Acknowledgment
type MFK_M12 struct {
	HL7 HL7Name `hl7:",name=MFK_M12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// General Master File Application Acknowledgment
//
// The MFN General master file notification transaction is used where the master file is a simple one that contains only a key
// and the text value of that key.  Both values are carried in MFE-4 - Primary Key Value - MFE.  The specific master file being updated
// is identified by MFI-1 - Master File Identifier and MFI-2 - Master Files Application Identifier.
//
// The MFA segment carries acknowledgment information for the corresponding MFE segment (identified by MFA-5 - Primary
// Key Value - MFA).  Fields MFE-4 - Primary Key Value - MFE and MFA-5 - Primary Key Value - MFA provide the link between the corresponding
// segments.
type MFK_M13 struct {
	HL7 HL7Name `hl7:",name=MFK_M13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Site Defined Master File Application Acknowledgment
//
// The MFN Site defined master file notification transaction is used where the master file is not a simple one (as defined for
// MFN^M13) and is not a transaction type currently defined by HL7, but rather requires one or more HL7 and/or 'Z' segments
// to carry the master file information.
//
// The master file record identified by the MFE segment is contained in Z-segments immediately following the MFE segment,
// and is denoted by "..." in the MFN abstract message definition given above.  This record may be either a flat record contained
// in a single segment, or a complex record needing more than a single segment to carry its data and (usually hierarchical)
// structure.
//
// The definition of this transaction and the associated abstract message structure code (as defined in MSH-9 - Message Type,
// denoted by MFN_Znn above) are subject to site negotiation.  Refer to Chapter 2, section 2.17, "Local Extension" for additional
// information on 'Z' abstract message structure code definition.
type MFK_M14 struct {
	HL7 HL7Name `hl7:",name=MFK_M14,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Inventory Item Master File Application Acknowledgment
//
// This section is concerned with describing a master file message that should be used to communicate information that relates
// to the inventory of items that can be used to perform an ordered service.  While an order specifies a service that is represented
// in an Other Observation/Service Item master file, this message is concerned with communicating attributes of those orderable
// items (for example lot number and expiration date) that are represented in the Other Observation/Service Item master
// file.  These attributes are more granular than can be represented in the Other Observation/Service Item master file as
// there may be multiple items in inventory that meet the characteristics of the Service Item but have different specific
// characteristics, e.g., multiple lots of a vaccine.
type MFK_M15 struct {
	HL7 HL7Name `hl7:",name=MFK_M15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Enhanced Inventory Item Master File Application Acknowledgment
//
// This section describes a master file message designed to communicate information that relates to the sharing of material
// item master catalog and material item-inventory information between materials management systems and other systems
// such as surgical and immunization systems.  The synchronization of the "item master" between systems and across the enterprise
// enables the success of the subsequent interfacing of transactions such as: material item requisitions (pre and post case),
// accounts payable invoices for the payment of material items, journal entries generated from the issue of items to departments
// or other inventory locations, and patient charges that allow a customer to improve patient care through the better management
// of materials.  To face budget challenges, healthcare organizations need materials management systems that integrate
// with finance to automate logistics, eliminate paperwork and analyze data to improve efficiency and reduce overall costs.
// This process is a major contributor to improving the customers' bottom line by helping to eliminate materials waste, streamline
// ordering, ensure accurate payment of materials purchased, ensure accurate billing for materials used, and an accurate
// presentation of the financial statements of a healthcare facility.
type MFK_M16 struct {
	HL7 HL7Name `hl7:",name=MFK_M16,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// DRG Master File Application Acknowledgment
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the DRG basic information, such as relative weight, lower and upper trim points, etc.
type MFK_M17 struct {
	HL7 HL7Name `hl7:",name=MFK_M17,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Mfstaff
type MFN_M02_Mfstaff struct {
	HL7 HL7Name `hl7:",name=MFN_M02_Mfstaff,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	STF *STF    `hl7:"6,required,display=Staff Identification"`
	PRA []PRA   `hl7:"7,display=Practitioner Detail"`
	ORG []ORG   `hl7:"8,display=Practitioner Organization Unit Segment"`
	AFF []AFF   `hl7:"9,display=Professional Affiliation"`
	LAN []LAN   `hl7:"10,display=Language Detail"`
	EDU []EDU   `hl7:"11,display=Educational Detail"`
	CER []CER   `hl7:"12,display=Certificate Detail"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Master file - staff practitioner
//
// The staff identification (STF), practitioner detail (PRA), practitioner organization unit segment (ORG), professional
// affiliation (AFF), language detail (LAN), educational detail (EDU), and certificate detail (CER) segments can be used
// to transmit master files information between systems. The STF segment provides general information about personnel;
// the PRA, ORG, AFF, LAN, EDU, CER and NTE segments provide detailed information for a staff member
type MFN_M02 struct {
	HL7     HL7Name           `hl7:",name=MFN_M02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	MFI     *MFI              `hl7:"4,required,display=Master File Identification"`
	Mfstaff []MFN_M02_Mfstaff `hl7:",required,display=Mf_staff"`
}

// Mfcdm
type MFN_M04_Mfcdm struct {
	HL7 HL7Name `hl7:",name=MFN_M04_Mfcdm,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	CDM *CDM    `hl7:"6,required,display=Charge Description Master"`
	PRC []PRC   `hl7:"7,display=Pricing"`
}

// Master files charge description
//
// The charge description (CDM) master file segment should be used in conjunction with the general master file segments in
// Section 8.5, "GENERAL MASTER FILE SEGMENTS." Interfacing systems often need not only to communicate data about a patient's
// detailed charges, but also to communicate the charge identification entries by which an application knows how to handle
// a particular charge code. The charge description master is a master file. The CDM segment below is a specially designed
// master file segment for interfacing charge description masters. In the following message, the MFI-master file identifier
// should equal "CDM."
type MFN_M04 struct {
	HL7   HL7Name         `hl7:",name=MFN_M04,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential Segment"`
	MFI   *MFI            `hl7:"4,required,display=Master File Identification"`
	Mfcdm []MFN_M04_Mfcdm `hl7:",required,display=Mf_cdm"`
}

// Mflocation
type MFN_M05_Mflocation struct {
	HL7       HL7Name             `hl7:",name=MFN_M05_Mflocation,type=tg"`
	MFE       *MFE                `hl7:"5,required,display=Master File Entry"`
	LOC       *LOC                `hl7:"6,required,display=Location Identification"`
	LCH       []LCH               `hl7:"7,display=Location Characteristic"`
	LRL       []LRL               `hl7:"8,display=Location Relationship"`
	Mflocdept []MFN_M05_Mflocdept `hl7:",required,display=Mf_loc_dept"`
}

// Mflocdept
type MFN_M05_Mflocdept struct {
	HL7 HL7Name `hl7:",name=MFN_M05_Mflocdept,type=tg"`
	LDP *LDP    `hl7:"9,required,display=Location Department"`
	LCH []LCH   `hl7:"10,display=Location Characteristic"`
	LCC []LCC   `hl7:"11,display=Location Charge Code"`
}

// Patient location master file
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the inventory of healthcare patient locations, such as nursing units, rooms, beds, clinics, exam rooms,
// etc. In a network environment, this segment can be used to define patient locations to other applications. The segment
// also includes the readiness states and support locations for the patient locations.
// The LOC, LCH, LRL, LDP, and LCC segments must be preceded by the MFI and MFE segments, as described in Section 8.5, "GENERAL
// MASTER FILE SEGMENTS."
type MFN_M05 struct {
	HL7        HL7Name              `hl7:",name=MFN_M05,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	SFT        []SFT                `hl7:"2,display=Software Segment"`
	UAC        *UAC                 `hl7:"3,display=User Authentication Credential Segment"`
	MFI        *MFI                 `hl7:"4,required,display=Master File Identification"`
	Mflocation []MFN_M05_Mflocation `hl7:",required,display=Mf_location"`
}

// Mfclinstudy
type MFN_M06_Mfclinstudy struct {
	HL7                HL7Name                      `hl7:",name=MFN_M06_Mfclinstudy,type=tg"`
	MFE                *MFE                         `hl7:"5,required,display=Master File Entry"`
	CM0                *CM0                         `hl7:"6,required,display=Clinical Study Master"`
	Mfphasescheddetail []MFN_M06_Mfphasescheddetail `hl7:",display=Mf_phase_sched_detail"`
}

// Mfphasescheddetail
type MFN_M06_Mfphasescheddetail struct {
	HL7 HL7Name `hl7:",name=MFN_M06_Mfphasescheddetail,type=tg"`
	CM1 *CM1    `hl7:"7,required,display=Clinical Study Phase Master"`
	CM2 []CM2   `hl7:"8,display=Clinical Study Schedule Master"`
}

// Clinical study with phases and schedules master file
//
// The CM0 (Clinical Study Master), CM1 (Clinical Study Phase), and CM2 (Clinical Study Schedule) segments can be used to
// transmit master files information between systems. The CM0 segment contains the information about the study itself;
// the CM1 contains the information about one phase of the study identified in the preceding CM0; and the CM2 contains the information
// about the scheduled time points for the preceding study or phase-related treatment or evaluation events. When these segments
// are used in an MFN message, the abstract definition is described below.
// Case 1: MFN message for Clinical Study with phases and schedules
type MFN_M06 struct {
	HL7         HL7Name               `hl7:",name=MFN_M06,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	MFI         *MFI                  `hl7:"4,required,display=Master File Identification"`
	Mfclinstudy []MFN_M06_Mfclinstudy `hl7:",required,display=Mf_clin_study"`
}

// Mfclinstudysched
type MFN_M07_Mfclinstudysched struct {
	HL7 HL7Name `hl7:",name=MFN_M07_Mfclinstudysched,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	CM0 *CM0    `hl7:"6,required,display=Clinical Study Master"`
	CM2 []CM2   `hl7:"7,display=Clinical Study Schedule Master"`
}

// Clinical study without phases but with schedules master file
//
// The CM0 (Clinical Study Master), CM1 (Clinical Study Phase), and CM2 (Clinical Study Schedule) segments can be used to
// transmit master files information between systems. The CM0 segment contains the information about the study itself;
// the CM1 contains the information about one phase of the study identified in the preceding CM0; and the CM2 contains the information
// about the scheduled time points for the preceding study or phase-related treatment or evaluation events. When these segments
// are used in an MFN message, the abstract definition is described below.
// Case 2: MFN message for Clinical Study without phases but with schedules
type MFN_M07 struct {
	HL7              HL7Name                    `hl7:",name=MFN_M07,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	SFT              []SFT                      `hl7:"2,display=Software Segment"`
	UAC              *UAC                       `hl7:"3,display=User Authentication Credential Segment"`
	MFI              *MFI                       `hl7:"4,required,display=Master File Identification"`
	Mfclinstudysched []MFN_M07_Mfclinstudysched `hl7:",required,display=Mf_clin_study_sched"`
}

// Mftestnumeric
type MFN_M08_Mftestnumeric struct {
	HL7 HL7Name `hl7:",name=MFN_M08_Mftestnumeric,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	OM1 *OM1    `hl7:"6,required,display=General Segment"`
	OM2 *OM2    `hl7:"7,display=Numeric Observation"`
	OM3 *OM3    `hl7:"8,display=Categorical Service/test/observation"`
	OM4 *OM4    `hl7:"9,display=Observations That Require Specimens"`
}

// Test/observation (numeric) master file
//
// Note: The MFK message is used for an application acknowledgment in either the original or enhanced acknowledgment modes.
// Note: MFI-1 - Master File Identifier = OMA for numeric observations.
// Note: A service/test/observation definition may have both an OM2 (numeric) and OM3 (categorical) segment included in
// case the value may be either numeric and/or categorical.
type MFN_M08 struct {
	HL7           HL7Name                 `hl7:",name=MFN_M08,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MFI           *MFI                    `hl7:"4,required,display=Master File Identification"`
	Mftestnumeric []MFN_M08_Mftestnumeric `hl7:",required,display=Mf_test_numeric"`
}

// Mftestcategorical
type MFN_M09_Mftestcategorical struct {
	HL7             HL7Name                  `hl7:",name=MFN_M09_Mftestcategorical,type=tg"`
	MFE             *MFE                     `hl7:"5,required,display=Master File Entry"`
	OM1             *OM1                     `hl7:"6,required,display=General Segment"`
	Mftestcatdetail *MFN_M09_Mftestcatdetail `hl7:",display=Mf_test_cat_detail"`
}

// Mftestcatdetail
type MFN_M09_Mftestcatdetail struct {
	HL7 HL7Name `hl7:",name=MFN_M09_Mftestcatdetail,type=tg"`
	OM3 *OM3    `hl7:"7,required,display=Categorical Service/test/observation"`
	OM4 []OM4   `hl7:"8,display=Observations That Require Specimens"`
}

// Test/observation (categorical) master file
//
// Note: The MFK message is used for an application acknowledgment in either the original or enhanced acknowledgment modes.
// Note: MFI-1 - Master File Identifier = OMB for categorical observations.
type MFN_M09 struct {
	HL7               HL7Name                     `hl7:",name=MFN_M09,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	MFI               *MFI                        `hl7:"4,required,display=Master File Identification"`
	Mftestcategorical []MFN_M09_Mftestcategorical `hl7:",required,display=Mf_test_categorical"`
}

// Mftestbatteries
type MFN_M10_Mftestbatteries struct {
	HL7              HL7Name                   `hl7:",name=MFN_M10_Mftestbatteries,type=tg"`
	MFE              *MFE                      `hl7:"5,required,display=Master File Entry"`
	OM1              *OM1                      `hl7:"6,required,display=General Segment"`
	Mftestbattdetail *MFN_M10_Mftestbattdetail `hl7:",display=Mf_test_batt_detail"`
}

// Mftestbattdetail
type MFN_M10_Mftestbattdetail struct {
	HL7 HL7Name `hl7:",name=MFN_M10_Mftestbattdetail,type=tg"`
	OM5 *OM5    `hl7:"7,required,display=Observation Batteries (sets)"`
	OM4 []OM4   `hl7:"8,display=Observations That Require Specimens"`
}

// Test /observation batteries master file
//
// Note: The MFK message is used for an application acknowledgment in either the original or enhanced acknowledgment modes.
// Note: MFI-1 - Master File Identifier = OMC for observation batteries.
type MFN_M10 struct {
	HL7             HL7Name                   `hl7:",name=MFN_M10,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential Segment"`
	MFI             *MFI                      `hl7:"4,required,display=Master File Identification"`
	Mftestbatteries []MFN_M10_Mftestbatteries `hl7:",required,display=Mf_test_batteries"`
}

// Mftestcalculated
type MFN_M11_Mftestcalculated struct {
	HL7              HL7Name                   `hl7:",name=MFN_M11_Mftestcalculated,type=tg"`
	MFE              *MFE                      `hl7:"5,required,display=Master File Entry"`
	OM1              *OM1                      `hl7:"6,required,display=General Segment"`
	Mftestcalcdetail *MFN_M11_Mftestcalcdetail `hl7:",display=Mf_test_calc_detail"`
}

// Mftestcalcdetail
type MFN_M11_Mftestcalcdetail struct {
	HL7 HL7Name `hl7:",name=MFN_M11_Mftestcalcdetail,type=tg"`
	OM6 *OM6    `hl7:"7,required,display=Observations That Are Calculated From Other Observations"`
	OM2 *OM2    `hl7:"8,required,display=Numeric Observation"`
}

// Test/calculated observations master file
//
// Note: The MFK message is used for an application acknowledgment in either the original or enhanced acknowledgment modes.
// Note: MFI-1 - Master File Identifier = OMD for calculated observations.
type MFN_M11 struct {
	HL7              HL7Name                    `hl7:",name=MFN_M11,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	SFT              []SFT                      `hl7:"2,display=Software Segment"`
	UAC              *UAC                       `hl7:"3,display=User Authentication Credential Segment"`
	MFI              *MFI                       `hl7:"4,required,display=Master File Identification"`
	Mftestcalculated []MFN_M11_Mftestcalculated `hl7:",required,display=Mf_test_calculated"`
}

// Mfobsattributes
type MFN_M12_Mfobsattributes struct {
	HL7 HL7Name `hl7:",name=MFN_M12_Mfobsattributes,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	OM1 *OM1    `hl7:"6,required,display=General Segment"`
	OM7 *OM7    `hl7:"7,display=Additional Basic Attributes"`
}

// Master file notification message
//
// Note: The MFK message is used for an application acknowledgment in either the original or enhanced acknowledgment modes.
// Note: MFI-1 - Master File Identifier = OME for additional basic observation/service attributes.
type MFN_M12 struct {
	HL7             HL7Name                   `hl7:",name=MFN_M12,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential Segment"`
	MFI             *MFI                      `hl7:"4,required,display=Master File Identification"`
	Mfobsattributes []MFN_M12_Mfobsattributes `hl7:",required,display=Mf_obs_attributes"`
}

// Master file notification - general
//
// The MFN General master file notification transaction is used where the master file is a simple one that contains only a key
// and the text value of that key. Both values are carried in MFE-4 - Primary Key Value - MFE. The specific master file being updated
// is identified by MFI-1 - Master File Identifier and MFI-2 - Master Files Application Identifier.
type MFN_M13 struct {
	HL7 HL7Name `hl7:",name=MFN_M13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MFI *MFI    `hl7:"4,required,display=Master File Identification"`
	MFE []MFE   `hl7:"5,required,display=Master File Entry"`
}

// Mfsitedefined
type MFN_M14_Mfsitedefined struct {
	HL7 HL7Name `hl7:",name=MFN_M14_Mfsitedefined,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	Hxx *Hxx    `hl7:"6,required,display=Any Hl7 Segment"`
}

// Master file notification - site defined
//
// The MFN Site defined master file notification transaction is used where the master file is not a simple one (as defined for
// MFN^M13) and is not a transaction type currently defined by HL7, but rather requires one or more HL7 and/or 'Z' segments
// to carry the master file information
type MFN_M14 struct {
	HL7           HL7Name                 `hl7:",name=MFN_M14,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MFI           *MFI                    `hl7:"4,required,display=Master File Identification"`
	Mfsitedefined []MFN_M14_Mfsitedefined `hl7:",required,display=Mf_site_defined"`
}

// Mfinvitem
type MFN_M15_Mfinvitem struct {
	HL7 HL7Name `hl7:",name=MFN_M15_Mfinvitem,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	IIM *IIM    `hl7:"6,required,display=Inventory Item Master"`
}

// Inventory item master file notification
//
// This section is concerned with describing a master file message that should be used to communicate information that relates
// to the inventory of items that can be used to perform an ordered service. While an order specifies a service that is represented
// in an Other Observation/Service Item master file, this message is concerned with communicating attributes of those orderable
// items (for example lot number and expiration date) that are represented in the Other Observation/Service Item master
// file. These attributes are more granular than can be represented in the Other Observation/Service Item master file as
// there may be multiple items in inventory that meet the characteristics of the Service Item but have different specific
// characteristics, e.g., multiple lots of a vaccine.
// Each MFE/IIM structure describes a specific set of lot, expiration date, location, etc. for a Service Item. Multiple instances
// of MFE/IIM could be used to describe the same Service Item lot at multiple locations, or a location with multiple lots of
// the same Service Item.
// This message is not intended to act as a complete inventory management system. Various inventory management concepts,
// e.g., PAR levels, invoice and purchase order tracking, are intentionally not supported. The message is intended to synchronize
// limited orderable item attributes, e.g., quantity on hand, lot number, expiration date, between communicating systems.
// Such systems may include a Pharmacy Application and a Nurse-based dispensing system. While the Pharmacy application
// may define the service items (communicated in [MFN^M12^MFN_12] Other Observation/Service Item master file Messages),
// the dispensing system would communicate the lot numbers, expiration date and quantity on hand for service items in inventory
// using the Inventory Item Master file message
type MFN_M15 struct {
	HL7       HL7Name             `hl7:",name=MFN_M15,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	MFI       *MFI                `hl7:"4,required,display=Master File Identification"`
	Mfinvitem []MFN_M15_Mfinvitem `hl7:",required,display=Mf_inv_item"`
}

// Materialitemrecord
type MFN_M16_Materialitemrecord struct {
	HL7              HL7Name                    `hl7:",name=MFN_M16_Materialitemrecord,type=tg"`
	MFE              *MFE                       `hl7:"5,required,display=Master File Entry"`
	ITM              *ITM                       `hl7:"6,required,display=Material Item"`
	NTE              []NTE                      `hl7:"7,display=Notes And Comments"`
	Sterilization    []MFN_M16_Sterilization    `hl7:",display=Sterilization"`
	Purchasingvendor []MFN_M16_Purchasingvendor `hl7:",display=Purchasing_vendor"`
	Materiallocation []MFN_M16_Materiallocation `hl7:",display=Material_location"`
}

// Sterilization
type MFN_M16_Sterilization struct {
	HL7 HL7Name `hl7:",name=MFN_M16_Sterilization,type=tg"`
	STZ *STZ    `hl7:"8,required,display=Sterilization Parameter"`
	NTE []NTE   `hl7:"9,display=Notes And Comments"`
}

// Purchasingvendor
type MFN_M16_Purchasingvendor struct {
	HL7       HL7Name             `hl7:",name=MFN_M16_Purchasingvendor,type=tg"`
	VND       *VND                `hl7:"10,required,display=Purchasing Vendor"`
	Packaging []MFN_M16_Packaging `hl7:",display=Packaging"`
}

// Packaging
type MFN_M16_Packaging struct {
	HL7 HL7Name `hl7:",name=MFN_M16_Packaging,type=tg"`
	PKG *PKG    `hl7:"11,required,display=Item Packaging"`
	PCE []PCE   `hl7:"12,display=Patient Charge Cost Center Exceptions"`
}

// Materiallocation
type MFN_M16_Materiallocation struct {
	HL7 HL7Name `hl7:",name=MFN_M16_Materiallocation,type=tg"`
	IVT *IVT    `hl7:"13,required,display=Material Location"`
	ILT []ILT   `hl7:"14,display=Material Lot"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Master File Notification Inventory Item Enhanced
//
// This section describes a master file message designed to communicate information that relates to the sharing of material
// item master catalog and material item-inventory information between materials management systems and other systems
// such as surgical and immunization systems. The synchronization of the "item master" between systems and across the enterprise
// enables the success of the subsequent interfacing of transactions such as: material item requisitions (pre and post case),
// accounts payable invoices for the payment of material items, journal entries generated from the issue of items to departments
// or other inventory locations, and patient charges that allow a customer to improve patient care through the better management
// of materials. To face budget challenges, healthcare organizations need materials management systems that integrate
// with finance to automate logistics, eliminate paperwork and analyze data to improve efficiency and reduce overall costs.
// This process is a major contributor to improving the customers' bottom line by helping to eliminate materials waste, streamline
// ordering, ensure accurate payment of materials purchased, ensure accurate billing for materials used, and an accurate
// presentation of the financial statements of a healthcare facility.
// Material items defined in this message include consumable supplies, devices, surgical sets, and implants.
type MFN_M16 struct {
	HL7                HL7Name                      `hl7:",name=MFN_M16,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	MFI                *MFI                         `hl7:"4,required,display=Master File Identification"`
	Materialitemrecord []MFN_M16_Materialitemrecord `hl7:",required,display=Material_item_record"`
}

// Mfdrg
type MFN_M17_Mfdrg struct {
	HL7 HL7Name `hl7:",name=MFN_M17_Mfdrg,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	DMI *DMI    `hl7:"6,required,display=Drg Master File Information"`
}

// DRG Master File Message
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the DRG basic information, such as relative weight, lower and upper trim points, etc.
// The DMI segment must be preceded by the MFI and MFE segments, as described in Section 8.5, GENERAL MASTER FILE SEGMENTS.
// In the following message, the MFI-1 - Master File Identifier field should equal "DMI".
type MFN_M17 struct {
	HL7   HL7Name         `hl7:",name=MFN_M17,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential Segment"`
	MFI   *MFI            `hl7:"4,required,display=Master File Identification"`
	Mfdrg []MFN_M17_Mfdrg `hl7:",required,display=Mf_drg"`
}

// Clockandstatswithnotes
type NMD_N02_Clockandstatswithnotes struct {
	HL7       HL7Name            `hl7:",name=NMD_N02_Clockandstatswithnotes,type=tg"`
	Clock     *NMD_N02_Clock     `hl7:",display=Clock"`
	Appstats  *NMD_N02_Appstats  `hl7:",display=App_stats"`
	Appstatus *NMD_N02_Appstatus `hl7:",display=App_status"`
}

// Clock
type NMD_N02_Clock struct {
	HL7 HL7Name `hl7:",name=NMD_N02_Clock,type=tg"`
	NCK *NCK    `hl7:"4,required,display=System Clock"`
	NTE []NTE   `hl7:"5,display=Notes And Comments"`
}

// Appstats
type NMD_N02_Appstats struct {
	HL7 HL7Name `hl7:",name=NMD_N02_Appstats,type=tg"`
	NST *NST    `hl7:"6,required,display=Application Control Level Statistics"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Appstatus
type NMD_N02_Appstatus struct {
	HL7 HL7Name `hl7:",name=NMD_N02_Appstatus,type=tg"`
	NSC *NSC    `hl7:"8,required,display=Application Status Change"`
	NTE []NTE   `hl7:"9,display=Notes And Comments"`
}

// Application management data message (unsolicited)
//
// The N02 event signifies when an unsolicited update (UU) Application Management Data message (NMD) is created by on application
// to transmit application management information to other applications.  In this case, the initiating application sends
// an NMD message as an unsolicited update (UU) containing application management information to a receiving application,
// which responds with a generic acknowledgement message (ACK).
//
// For example, an application going down for backups (or starting up again after backups) might issue such a message to one
// or more other applications.  An application switching to another CPU or file-server may also need to use this transaction
// to notify other systems.
type NMD_N02 struct {
	HL7                    HL7Name                          `hl7:",name=NMD_N02,type=t"`
	MSH                    *MSH                             `hl7:"1,required,display=Message Header"`
	SFT                    []SFT                            `hl7:"2,display=Software Segment"`
	UAC                    *UAC                             `hl7:"3,display=User Authentication Credential Segment"`
	Clockandstatswithnotes []NMD_N02_Clockandstatswithnotes `hl7:",required,display=Clock_and_stats_with_notes"`
}

// Patient
type OMB_O27_Patient struct {
	HL7          HL7Name               `hl7:",name=OMB_O27_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *OMB_O27_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OMB_O27_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// Patientvisit
type OMB_O27_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OMB_O27_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OMB_O27_Insurance struct {
	HL7 HL7Name `hl7:",name=OMB_O27_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Order
type OMB_O27_Order struct {
	HL7         HL7Name               `hl7:",name=OMB_O27_Order,type=tg"`
	ORC         *ORC                  `hl7:"16,required,display=Common Order"`
	Timing      []OMB_O27_Timing      `hl7:",display=Timing"`
	BPO         *BPO                  `hl7:"19,required,display=Blood Product Order"`
	SPM         *SPM                  `hl7:"20,display=Specimen"`
	NTE         []NTE                 `hl7:"21,display=Notes And Comments"`
	DG1         []DG1                 `hl7:"22,display=Diagnosis"`
	Observation []OMB_O27_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"25,display=Financial Transaction"`
	BLG         *BLG                  `hl7:"26,display=Billing"`
}

// Timing
type OMB_O27_Timing struct {
	HL7 HL7Name `hl7:",name=OMB_O27_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Observation
type OMB_O27_Observation struct {
	HL7 HL7Name `hl7:",name=OMB_O27_Observation,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/result"`
	NTE []NTE   `hl7:"24,display=Notes And Comments"`
}

// Blood product order
//
// Blood product order messages present the need for additional information that is not included in standard HL7 order messages.
// Order messages must contain accompanying details regarding the blood product component, such as special processing
// requirements (e.g., irradiation and leukoreduction), and the amount of the blood product to be administered. Additionally,
// specific relevant clinical information can be included to allow the prospective review of the appropriateness of the
// blood product order.
//
// Blood product orders use the OMB message with the BPO segment for the detail segment and the acknowledgment message, ORB
// as described below.
//
// The NTE segment(s) can be included in the OMB message in four places; in each place the NTE refers to the segment that it follows.
// In particular, the NTEs following the MSH refer only to the message header; the NTEs following the blood product order segment
// apply to the service defined by that ORC and blood product order segment.
//
// The PID segment is required if and only if new orders are being entered and they are related to a particular patient. For non-patient-related
// orders the PID segment is never included.
//
// The optional PV1 segment is present mainly to permit transmission of patient visit information such as current location
// with an order.
type OMB_O27 struct {
	HL7     HL7Name          `hl7:",name=OMB_O27,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OMB_O27_Patient `hl7:",display=Patient"`
	Order   []OMB_O27_Order  `hl7:",required,display=Order"`
}

// Patient
type OMD_O03_Patient struct {
	HL7          HL7Name               `hl7:",name=OMD_O03_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *OMD_O03_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OMD_O03_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// Patientvisit
type OMD_O03_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OMD_O03_Insurance struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Orderdiet
type OMD_O03_Orderdiet struct {
	HL7        HL7Name              `hl7:",name=OMD_O03_Orderdiet,type=tg"`
	ORC        *ORC                 `hl7:"16,required,display=Common Order"`
	Timingdiet []OMD_O03_Timingdiet `hl7:",display=Timing_diet"`
	Diet       *OMD_O03_Diet        `hl7:",display=Diet"`
}

// Timingdiet
type OMD_O03_Timingdiet struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Timingdiet,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Diet
type OMD_O03_Diet struct {
	HL7         HL7Name               `hl7:",name=OMD_O03_Diet,type=tg"`
	ODS         []ODS                 `hl7:"19,required,display=Dietary Orders- Supplements- And Preferences"`
	NTE         []NTE                 `hl7:"20,display=Notes And Comments"`
	Observation []OMD_O03_Observation `hl7:",display=Observation"`
}

// Observation
type OMD_O03_Observation struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Observation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Ordertray
type OMD_O03_Ordertray struct {
	HL7        HL7Name              `hl7:",name=OMD_O03_Ordertray,type=tg"`
	ORC        *ORC                 `hl7:"23,required,display=Common Order"`
	Timingtray []OMD_O03_Timingtray `hl7:",display=Timing_tray"`
	ODT        []ODT                `hl7:"26,required,display=Diet Tray Instructions"`
	NTE        []NTE                `hl7:"27,display=Notes And Comments"`
}

// Timingtray
type OMD_O03_Timingtray struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Timingtray,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Diet order
type OMD_O03 struct {
	HL7       HL7Name             `hl7:",name=OMD_O03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   *OMD_O03_Patient    `hl7:",display=Patient"`
	Orderdiet []OMD_O03_Orderdiet `hl7:",required,display=Order_diet"`
	Ordertray []OMD_O03_Ordertray `hl7:",display=Order_tray"`
}

// Patient
type OMG_O19_Patient struct {
	HL7          HL7Name               `hl7:",name=OMG_O19_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	NK1          []NK1                 `hl7:"9,display=Next Of Kin / Associated Parties"`
	Patientvisit *OMG_O19_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OMG_O19_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"16,display=Guarantor"`
	AL1          []AL1                 `hl7:"17,display=Patient Allergy Information"`
}

// Patientvisit
type OMG_O19_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Insurance
type OMG_O19_Insurance struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Order
type OMG_O19_Order struct {
	HL7         HL7Name               `hl7:",name=OMG_O19_Order,type=tg"`
	ORC         *ORC                  `hl7:"18,required,display=Common Order"`
	PRT         []PRT                 `hl7:"19,display=Participation Information"`
	Timing      []OMG_O19_Timing      `hl7:",display=Timing"`
	OBR         *OBR                  `hl7:"22,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"23,display=Notes And Comments"`
	PRT2        []PRT                 `hl7:"24,display=Participation Information"`
	CTD         *CTD                  `hl7:"25,display=Contact Data"`
	DG1         []DG1                 `hl7:"26,display=Diagnosis"`
	Observation []OMG_O19_Observation `hl7:",display=Observation"`
	Specimen    []OMG_O19_Specimen    `hl7:",display=Specimen"`
	Priorresult []OMG_O19_Priorresult `hl7:",display=Prior_result"`
	FT1         []FT1                 `hl7:"53,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"54,display=Clinical Trial Identification"`
	BLG         *BLG                  `hl7:"55,display=Billing"`
}

// Timing
type OMG_O19_Timing struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/quantity Relationship"`
}

// Observation
type OMG_O19_Observation struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Observation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	PRT []PRT   `hl7:"28,display=Participation Information"`
	NTE []NTE   `hl7:"29,display=Notes And Comments"`
}

// Specimen
type OMG_O19_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OMG_O19_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"30,required,display=Specimen"`
	Specimenobservation []OMG_O19_Specimenobservation `hl7:",display=Specimen_observation"`
	Container           []OMG_O19_Container           `hl7:",display=Container"`
}

// Specimenobservation
type OMG_O19_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"31,required,display=Observation/result"`
	PRT []PRT   `hl7:"32,display=Participation Information"`
}

// Container
type OMG_O19_Container struct {
	HL7                  HL7Name                        `hl7:",name=OMG_O19_Container,type=tg"`
	SAC                  *SAC                           `hl7:"33,required,display=Specimen Container Detail"`
	Containerobservation []OMG_O19_Containerobservation `hl7:",display=Container_observation"`
}

// Containerobservation
type OMG_O19_Containerobservation struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Containerobservation,type=tg"`
	OBX *OBX    `hl7:"34,required,display=Observation/result"`
	PRT []PRT   `hl7:"35,display=Participation Information"`
}

// Priorresult
type OMG_O19_Priorresult struct {
	HL7               HL7Name                    `hl7:",name=OMG_O19_Priorresult,type=tg"`
	Patientprior      *OMG_O19_Patientprior      `hl7:",display=Patient_prior"`
	Patientvisitprior *OMG_O19_Patientvisitprior `hl7:",display=Patient_visit_prior"`
	AL1               []AL1                      `hl7:"42,display=Patient Allergy Information"`
	Orderprior        []OMG_O19_Orderprior       `hl7:",required,display=Order_prior"`
}

// Patientprior
type OMG_O19_Patientprior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Patientprior,type=tg"`
	PID *PID    `hl7:"36,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"37,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"38,display=Participation Information"`
}

// Patientvisitprior
type OMG_O19_Patientvisitprior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Patientvisitprior,type=tg"`
	PV1 *PV1    `hl7:"39,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"40,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"41,display=Participation Information"`
}

// Orderprior
type OMG_O19_Orderprior struct {
	HL7              HL7Name                    `hl7:",name=OMG_O19_Orderprior,type=tg"`
	ORC              *ORC                       `hl7:"43,required,display=Common Order"`
	OBR              *OBR                       `hl7:"44,required,display=Observation Request"`
	Timingprior      []OMG_O19_Timingprior      `hl7:",display=Timing_prior"`
	NTE              []NTE                      `hl7:"47,display=Notes And Comments"`
	PRT              []PRT                      `hl7:"48,display=Participation Information"`
	CTD              *CTD                       `hl7:"49,display=Contact Data"`
	Observationprior []OMG_O19_Observationprior `hl7:",required,display=Observation_prior"`
}

// Timingprior
type OMG_O19_Timingprior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Timingprior,type=tg"`
	TQ1 *TQ1    `hl7:"45,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"46,display=Timing/quantity Relationship"`
}

// Observationprior
type OMG_O19_Observationprior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Observationprior,type=tg"`
	OBX *OBX    `hl7:"50,required,display=Observation/result"`
	PRT []PRT   `hl7:"51,display=Participation Information"`
	NTE []NTE   `hl7:"52,display=Notes And Comments"`
}

// General clinical order
//
// The function of this message is to initiate the transmission of information about a general clinical order that uses the
// OBR segment. OMG messages can originate also with a placer, filler, or an interested third party.
// The trigger event for this message is any change to a general clinical order. Such changes include submission of new orders,
// cancellations, updates, patient and non-patient-specific orders, etc.
//
// This trigger includes segments identified as being for 'previous results.' These segments allow the sending system to
// include demographic and/or result information from previous result reports when they are related to the current order.
//
// For example:
// - Diagnostic laboratories referring tests to another lab for either confirmation of results (HIV, etc.) or due to not being
// equipped to do the tests (genetic testing, etc.).
// - Diagnostic laboratories sending test results to Knowledge Bases for the automated generation of diagnostic comments
// for inclusion into the lab report.
//
// The CTD segment in this trigger is used to transmit temporary patient contact details specific to this order.
type OMG_O19 struct {
	HL7     HL7Name          `hl7:",name=OMG_O19,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OMG_O19_Patient `hl7:",display=Patient"`
	Order   []OMG_O19_Order  `hl7:",required,display=Order"`
}

// Patient
type OMI_O23_Patient struct {
	HL7          HL7Name               `hl7:",name=OMI_O23_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *OMI_O23_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OMI_O23_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"15,display=Guarantor"`
	AL1          []AL1                 `hl7:"16,display=Patient Allergy Information"`
}

// Patientvisit
type OMI_O23_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OMI_O23_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Insurance
type OMI_O23_Insurance struct {
	HL7 HL7Name `hl7:",name=OMI_O23_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Order
type OMI_O23_Order struct {
	HL7         HL7Name               `hl7:",name=OMI_O23_Order,type=tg"`
	ORC         *ORC                  `hl7:"17,required,display=Common Order"`
	Timing      []OMI_O23_Timing      `hl7:",display=Timing"`
	OBR         *OBR                  `hl7:"20,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"21,display=Notes And Comments"`
	PRT         []PRT                 `hl7:"22,display=Participation Information"`
	CTD         *CTD                  `hl7:"23,display=Contact Data"`
	DG1         []DG1                 `hl7:"24,display=Diagnosis"`
	Observation []OMI_O23_Observation `hl7:",display=Observation"`
	IPC         []IPC                 `hl7:"28,required,display=Imaging Procedure Control Segment"`
}

// Timing
type OMI_O23_Timing struct {
	HL7 HL7Name `hl7:",name=OMI_O23_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"18,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"19,display=Timing/quantity Relationship"`
}

// Observation
type OMI_O23_Observation struct {
	HL7 HL7Name `hl7:",name=OMI_O23_Observation,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/result"`
	PRT []PRT   `hl7:"26,display=Participation Information"`
	NTE []NTE   `hl7:"27,display=Notes And Comments"`
}

// Imaging order
//
// This message is used in communication between the information systems involved in the fulfillment of the request directed
// to the imaging department, such as a Radiology Information System (RIS) and a Picture Archiving and Communication System
// (PACS). For the purpose of the following discussion these systems will be identified as Imaging Department Information
// Systems (IDIS). Information contained in the Imaging Procedure Control (IPC) segment allows multiple IDIS to share the
// context of Imaging Studies (collections of images acquired, processed, stored, and interpreted) in Image Management
// tasks.
//
// The order for the imaging service is communicated between the Order Placer (such as an Order Entry system) and the Order
// Filler (such as an RIS). In the imaging department environment, the Order Filler also identifies the set of procedures
// (studies) and sub-procedures (procedure steps) that have to be performed in the process of fulfilling the order. Each
// sub-procedure is performed using a single device (station). The Order Filler identifies the type of device and either
// a specific device or group of devices (for example, by geographic location) one of which is to be used in performing the procedure
// step. Thus, the system performs an aspect of workflow management in the department.
//
// Another information system in the department may be managing storage and distribution of the images within the department
// as well as providing them to the enterprise. This system will have to operate within the same context as the system managing
// the workflow. This context includes identifiers, content of the order, and details of procedures and procedure steps
// that have to be performed to fulfill that particular order.
//
// It is expected that the OMI message will typically be used in communication between IDIS as depicted in figure 4-1.
type OMI_O23 struct {
	HL7     HL7Name          `hl7:",name=OMI_O23,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OMI_O23_Patient `hl7:",display=Patient"`
	Order   []OMI_O23_Order  `hl7:",required,display=Order"`
}

// Patient
type OML_O21_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O21_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	NK1          []NK1                 `hl7:"9,display=Next Of Kin / Associated Parties"`
	Patientvisit *OML_O21_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OML_O21_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"16,display=Guarantor"`
	AL1          []AL1                 `hl7:"17,display=Patient Allergy Information"`
}

// Patientvisit
type OML_O21_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OML_O21_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Insurance
type OML_O21_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O21_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Order
type OML_O21_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O21_Order,type=tg"`
	ORC                *ORC                        `hl7:"18,required,display=Common Order"`
	PRT                []PRT                       `hl7:"19,display=Participation Information"`
	Timing             []OML_O21_Timing            `hl7:",display=Timing"`
	Observationrequest *OML_O21_Observationrequest `hl7:",display=Observation_request"`
	FT1                []FT1                       `hl7:"54,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"55,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"56,display=Billing"`
}

// Timing
type OML_O21_Timing struct {
	HL7 HL7Name `hl7:",name=OML_O21_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/quantity Relationship"`
}

// Observationrequest
type OML_O21_Observationrequest struct {
	HL7         HL7Name               `hl7:",name=OML_O21_Observationrequest,type=tg"`
	OBR         *OBR                  `hl7:"22,required,display=Observation Request"`
	TCD         *TCD                  `hl7:"23,display=Test Code Detail"`
	NTE         []NTE                 `hl7:"24,display=Notes And Comments"`
	PRT         []PRT                 `hl7:"25,display=Participation Information"`
	CTD         *CTD                  `hl7:"26,display=Contact Data"`
	DG1         []DG1                 `hl7:"27,display=Diagnosis"`
	Observation []OML_O21_Observation `hl7:",display=Observation"`
	Specimen    []OML_O21_Specimen    `hl7:",display=Specimen"`
	Priorresult []OML_O21_Priorresult `hl7:",display=Prior_result"`
}

// Observation
type OML_O21_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O21_Observation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/result"`
	PRT []PRT   `hl7:"29,display=Participation Information"`
	TCD *TCD    `hl7:"30,display=Test Code Detail"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
}

// Specimen
type OML_O21_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OML_O21_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"32,required,display=Specimen"`
	Specimenobservation []OML_O21_Specimenobservation `hl7:",display=Specimen_observation"`
	Container           []OML_O21_Container           `hl7:",display=Container"`
}

// Specimenobservation
type OML_O21_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OML_O21_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/result"`
	PRT []PRT   `hl7:"34,display=Participation Information"`
}

// Container
type OML_O21_Container struct {
	HL7                  HL7Name                        `hl7:",name=OML_O21_Container,type=tg"`
	SAC                  *SAC                           `hl7:"35,required,display=Specimen Container Detail"`
	Containerobservation []OML_O21_Containerobservation `hl7:",display=Container_observation"`
}

// Containerobservation
type OML_O21_Containerobservation struct {
	HL7 HL7Name `hl7:",name=OML_O21_Containerobservation,type=tg"`
	OBX *OBX    `hl7:"36,required,display=Observation/result"`
	PRT []PRT   `hl7:"37,display=Participation Information"`
}

// Priorresult
type OML_O21_Priorresult struct {
	HL7               HL7Name                    `hl7:",name=OML_O21_Priorresult,type=tg"`
	Patientprior      *OML_O21_Patientprior      `hl7:",display=Patient_prior"`
	Patientvisitprior *OML_O21_Patientvisitprior `hl7:",display=Patient_visit_prior"`
	AL1               []AL1                      `hl7:"44,display=Patient Allergy Information"`
	Orderprior        []OML_O21_Orderprior       `hl7:",required,display=Order_prior"`
}

// Patientprior
type OML_O21_Patientprior struct {
	HL7 HL7Name `hl7:",name=OML_O21_Patientprior,type=tg"`
	PID *PID    `hl7:"38,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"39,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"40,display=Participation Information"`
}

// Patientvisitprior
type OML_O21_Patientvisitprior struct {
	HL7 HL7Name `hl7:",name=OML_O21_Patientvisitprior,type=tg"`
	PV1 *PV1    `hl7:"41,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"42,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"43,display=Participation Information"`
}

// Orderprior
type OML_O21_Orderprior struct {
	HL7              HL7Name                    `hl7:",name=OML_O21_Orderprior,type=tg"`
	ORC              *ORC                       `hl7:"45,required,display=Common Order"`
	OBR              *OBR                       `hl7:"46,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"47,display=Notes And Comments"`
	PRT              []PRT                      `hl7:"48,display=Participation Information"`
	Timingprior      []OML_O21_Timingprior      `hl7:",display=Timing_prior"`
	Observationprior []OML_O21_Observationprior `hl7:",required,display=Observation_prior"`
}

// Timingprior
type OML_O21_Timingprior struct {
	HL7 HL7Name `hl7:",name=OML_O21_Timingprior,type=tg"`
	TQ1 *TQ1    `hl7:"49,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"50,display=Timing/quantity Relationship"`
}

// Observationprior
type OML_O21_Observationprior struct {
	HL7 HL7Name `hl7:",name=OML_O21_Observationprior,type=tg"`
	OBX *OBX    `hl7:"51,required,display=Observation/result"`
	PRT []PRT   `hl7:"52,display=Participation Information"`
	NTE []NTE   `hl7:"53,display=Notes And Comments"`
}

// Laboratory order
//
// The following message structure may be used for the communication of laboratory and other order messages and must be used
// for lab automation messages where it is required that the Specimen/Container information is within the ORC/OBR segment
// group.
//
// The trigger event for this message is any change to a laboratory order. Such changes include submission of new orders, cancellations,
// updates, etc. OML messages can originate also with a placer, filler, or an interested third party.
//
// Note: The additional patient information, which is sent after the OBR with the current order (the segments PID, PD1, PV1,
// PV2, etc, indicated below with words "previous result"), could have been transferred with the previous result because
// the patient demographics related to the previous result can differ from the demographics related to the current order.
// The current intent is to only allow references to the same patient as in the header PID.
//
// The SAC segments included in the message allow the transfer of, e.g., a laboratory order with multiple containers and multiple
// test orders related to each container, or laboratory orders with test order requiring multiple containers.
//
// Refer to Chapter 13, "Laboratory Automation" for examples of usage, particularly to clarify the use of two references
// to SAC segments in this one message.
//
// The CTD segment in this trigger is used to transmit temporary patient contact details specific to this order.
//
// In relationship to triggers O21, O33, O35, and Oxx this message/trigger (O21) should be used where an order with multiple
// samples and optionally multiple containers per order item are to be communicated, but not against a complete specimen
// shipment (O39)
type OML_O21 struct {
	HL7     HL7Name          `hl7:",name=OML_O21,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OML_O21_Patient `hl7:",display=Patient"`
	Order   []OML_O21_Order  `hl7:",required,display=Order"`
}

// Patient
type OML_O33_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O33_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	NK1          []NK1                 `hl7:"9,display=Next Of Kin / Associated Parties"`
	Patientvisit *OML_O33_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OML_O33_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"16,display=Guarantor"`
	AL1          []AL1                 `hl7:"17,display=Patient Allergy Information"`
}

// Patientvisit
type OML_O33_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OML_O33_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Insurance
type OML_O33_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O33_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Specimen
type OML_O33_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OML_O33_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"18,required,display=Specimen"`
	Specimenobservation []OML_O33_Specimenobservation `hl7:",display=Specimen_observation"`
	SAC                 []SAC                         `hl7:"21,display=Specimen Container Detail"`
	Order               []OML_O33_Order               `hl7:",required,display=Order"`
}

// Specimenobservation
type OML_O33_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OML_O33_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/result"`
	PRT []PRT   `hl7:"20,display=Participation Information"`
}

// Order
type OML_O33_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O33_Order,type=tg"`
	ORC                *ORC                        `hl7:"22,required,display=Common Order"`
	PRT                []PRT                       `hl7:"23,display=Participation Information"`
	Timing             []OML_O33_Timing            `hl7:",display=Timing"`
	Observationrequest *OML_O33_Observationrequest `hl7:",display=Observation_request"`
	FT1                []FT1                       `hl7:"51,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"52,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"53,display=Billing"`
}

// Timing
type OML_O33_Timing struct {
	HL7 HL7Name `hl7:",name=OML_O33_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Observationrequest
type OML_O33_Observationrequest struct {
	HL7         HL7Name               `hl7:",name=OML_O33_Observationrequest,type=tg"`
	OBR         *OBR                  `hl7:"26,required,display=Observation Request"`
	TCD         *TCD                  `hl7:"27,display=Test Code Detail"`
	NTE         []NTE                 `hl7:"28,display=Notes And Comments"`
	PRT         []PRT                 `hl7:"29,display=Participation Information"`
	DG1         []DG1                 `hl7:"30,display=Diagnosis"`
	Observation []OML_O33_Observation `hl7:",display=Observation"`
	Priorresult []OML_O33_Priorresult `hl7:",display=Prior_result"`
}

// Observation
type OML_O33_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O33_Observation,type=tg"`
	OBX *OBX    `hl7:"31,required,display=Observation/result"`
	PRT []PRT   `hl7:"32,display=Participation Information"`
	TCD *TCD    `hl7:"33,display=Test Code Detail"`
	NTE []NTE   `hl7:"34,display=Notes And Comments"`
}

// Priorresult
type OML_O33_Priorresult struct {
	HL7               HL7Name                    `hl7:",name=OML_O33_Priorresult,type=tg"`
	Patientprior      *OML_O33_Patientprior      `hl7:",display=Patient_prior"`
	Patientvisitprior *OML_O33_Patientvisitprior `hl7:",display=Patient_visit_prior"`
	AL1               []AL1                      `hl7:"41,display=Patient Allergy Information"`
	Orderprior        []OML_O33_Orderprior       `hl7:",required,display=Order_prior"`
}

// Patientprior
type OML_O33_Patientprior struct {
	HL7 HL7Name `hl7:",name=OML_O33_Patientprior,type=tg"`
	PID *PID    `hl7:"35,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"36,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"37,display=Participation Information"`
}

// Patientvisitprior
type OML_O33_Patientvisitprior struct {
	HL7 HL7Name `hl7:",name=OML_O33_Patientvisitprior,type=tg"`
	PV1 *PV1    `hl7:"38,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"39,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"40,display=Participation Information"`
}

// Orderprior
type OML_O33_Orderprior struct {
	HL7              HL7Name                    `hl7:",name=OML_O33_Orderprior,type=tg"`
	ORC              *ORC                       `hl7:"42,required,display=Common Order"`
	OBR              *OBR                       `hl7:"43,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"44,display=Notes And Comments"`
	PRT              []PRT                      `hl7:"45,display=Participation Information"`
	Timingprior      []OML_O33_Timingprior      `hl7:",display=Timing_prior"`
	Observationprior []OML_O33_Observationprior `hl7:",required,display=Observation_prior"`
}

// Timingprior
type OML_O33_Timingprior struct {
	HL7 HL7Name `hl7:",name=OML_O33_Timingprior,type=tg"`
	TQ1 *TQ1    `hl7:"46,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"47,display=Timing/quantity Relationship"`
}

// Observationprior
type OML_O33_Observationprior struct {
	HL7 HL7Name `hl7:",name=OML_O33_Observationprior,type=tg"`
	OBX *OBX    `hl7:"48,required,display=Observation/result"`
	PRT []PRT   `hl7:"49,display=Participation Information"`
	NTE []NTE   `hl7:"50,display=Notes And Comments"`
}

// Laboratory order for multiple orders related to a single specimen
//
// The trigger event for this message is any change to a laboratory order. Such changes include submission of new orders, cancellations,
// updates, etc., where multiple orders are associated with a single sample which may be carried in multiple containers.
// OML messages can originate also with a placer, filler, or an interested third party.
//
// This allows for a Specimen-centric message with multiple orders per specimen grouped by the specimen.
//
// The following message structure may be used for the communication of laboratory and other order messages and must be used
// for lab automation messages where the message requires Specimen/container information to group a number of orders.
//
// In relationship to triggers O21, O33, and O35, this message/trigger (O33) should be used where a specimen, with optional
// multiple containers, may have multiple orders to be communicated.
type OML_O33 struct {
	HL7      HL7Name            `hl7:",name=OML_O33,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	NTE      []NTE              `hl7:"4,display=Notes And Comments"`
	Patient  *OML_O33_Patient   `hl7:",display=Patient"`
	Specimen []OML_O33_Specimen `hl7:",required,display=Specimen"`
}

// Patient
type OML_O35_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O35_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	NK1          []NK1                 `hl7:"9,display=Next Of Kin / Associated Parties"`
	Patientvisit *OML_O35_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OML_O35_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"16,display=Guarantor"`
	AL1          []AL1                 `hl7:"17,display=Patient Allergy Information"`
}

// Patientvisit
type OML_O35_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OML_O35_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Insurance
type OML_O35_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O35_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Specimen
type OML_O35_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OML_O35_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"18,required,display=Specimen"`
	Specimenobservation []OML_O35_Specimenobservation `hl7:",display=Specimen_observation"`
	Specimencontainer   []OML_O35_Specimencontainer   `hl7:",required,display=Specimen_container"`
}

// Specimenobservation
type OML_O35_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OML_O35_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/result"`
	PRT []PRT   `hl7:"20,display=Participation Information"`
}

// Specimencontainer
type OML_O35_Specimencontainer struct {
	HL7   HL7Name         `hl7:",name=OML_O35_Specimencontainer,type=tg"`
	SAC   *SAC            `hl7:"21,required,display=Specimen Container Detail"`
	Order []OML_O35_Order `hl7:",required,display=Order"`
}

// Order
type OML_O35_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O35_Order,type=tg"`
	ORC                *ORC                        `hl7:"22,required,display=Common Order"`
	PRT                []PRT                       `hl7:"23,display=Participation Information"`
	Timing             []OML_O35_Timing            `hl7:",display=Timing"`
	Observationrequest *OML_O35_Observationrequest `hl7:",display=Observation_request"`
	FT1                []FT1                       `hl7:"51,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"52,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"53,display=Billing"`
}

// Timing
type OML_O35_Timing struct {
	HL7 HL7Name `hl7:",name=OML_O35_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Observationrequest
type OML_O35_Observationrequest struct {
	HL7         HL7Name               `hl7:",name=OML_O35_Observationrequest,type=tg"`
	OBR         *OBR                  `hl7:"26,required,display=Observation Request"`
	TCD         *TCD                  `hl7:"27,display=Test Code Detail"`
	NTE         []NTE                 `hl7:"28,display=Notes And Comments"`
	PRT         []PRT                 `hl7:"29,display=Participation Information"`
	DG1         []DG1                 `hl7:"30,display=Diagnosis"`
	Observation []OML_O35_Observation `hl7:",display=Observation"`
	Priorresult []OML_O35_Priorresult `hl7:",display=Prior_result"`
}

// Observation
type OML_O35_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O35_Observation,type=tg"`
	OBX *OBX    `hl7:"31,required,display=Observation/result"`
	PRT []PRT   `hl7:"32,display=Participation Information"`
	TCD *TCD    `hl7:"33,display=Test Code Detail"`
	NTE []NTE   `hl7:"34,display=Notes And Comments"`
}

// Priorresult
type OML_O35_Priorresult struct {
	HL7               HL7Name                    `hl7:",name=OML_O35_Priorresult,type=tg"`
	Patientprior      *OML_O35_Patientprior      `hl7:",display=Patient_prior"`
	Patientvisitprior *OML_O35_Patientvisitprior `hl7:",display=Patient_visit_prior"`
	AL1               []AL1                      `hl7:"41,display=Patient Allergy Information"`
	Orderprior        []OML_O35_Orderprior       `hl7:",required,display=Order_prior"`
}

// Patientprior
type OML_O35_Patientprior struct {
	HL7 HL7Name `hl7:",name=OML_O35_Patientprior,type=tg"`
	PID *PID    `hl7:"35,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"36,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"37,display=Participation Information"`
}

// Patientvisitprior
type OML_O35_Patientvisitprior struct {
	HL7 HL7Name `hl7:",name=OML_O35_Patientvisitprior,type=tg"`
	PV1 *PV1    `hl7:"38,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"39,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"40,display=Participation Information"`
}

// Orderprior
type OML_O35_Orderprior struct {
	HL7              HL7Name                    `hl7:",name=OML_O35_Orderprior,type=tg"`
	ORC              *ORC                       `hl7:"42,required,display=Common Order"`
	OBR              *OBR                       `hl7:"43,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"44,display=Notes And Comments"`
	PRT              []PRT                      `hl7:"45,display=Participation Information"`
	Timingprior      []OML_O35_Timingprior      `hl7:",display=Timing_prior"`
	Observationprior []OML_O35_Observationprior `hl7:",required,display=Observation_prior"`
}

// Timingprior
type OML_O35_Timingprior struct {
	HL7 HL7Name `hl7:",name=OML_O35_Timingprior,type=tg"`
	TQ1 *TQ1    `hl7:"46,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"47,display=Timing/quantity Relationship"`
}

// Observationprior
type OML_O35_Observationprior struct {
	HL7 HL7Name `hl7:",name=OML_O35_Observationprior,type=tg"`
	OBX *OBX    `hl7:"48,required,display=Observation/result"`
	PRT []PRT   `hl7:"49,display=Participation Information"`
	NTE []NTE   `hl7:"50,display=Notes And Comments"`
}

// Laboratory order for multiple orders related to a single container of a sp
//
// The trigger event for this message is any change to a laboratory order. Such changes include submission of new orders, cancellations,
// updates, etc., where multiple orders are associated with a single sample which may be carried in multiple containers.
// OML messages can originate also with a placer, filler, or an interested third party.
//
// This allows for a Specimen-centric message with multiple orders per specimen grouped by the specimen.
//
// The following message structure may be used for the communication of laboratory and other order messages and must be used
// for lab automation messages where the message requires Specimen/container information to group a number of orders.
//
// In relationship to triggers O21, O33, and O35, this message/trigger (O35) should be used for laboratory orders where there
// is 1 or more Specimens with 1 to many containers and each container may have 1 to many orders with previous result(s) per container.
type OML_O35 struct {
	HL7      HL7Name            `hl7:",name=OML_O35,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	NTE      []NTE              `hl7:"4,display=Notes And Comments"`
	Patient  *OML_O35_Patient   `hl7:",display=Patient"`
	Specimen []OML_O35_Specimen `hl7:",required,display=Specimen"`
}

// Patient
type OML_O39_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O39_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	NK1          []NK1                 `hl7:"9,display=Next Of Kin / Associated Parties"`
	Patientvisit *OML_O39_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OML_O39_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"16,display=Guarantor"`
	AL1          []AL1                 `hl7:"17,display=Patient Allergy Information"`
}

// Patientvisit
type OML_O39_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OML_O39_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Insurance
type OML_O39_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O39_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Order
type OML_O39_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O39_Order,type=tg"`
	ORC                *ORC                        `hl7:"18,required,display=Common Order"`
	PRT                []PRT                       `hl7:"19,display=Participation Information"`
	Timing             []OML_O39_Timing            `hl7:",display=Timing"`
	Observationrequest *OML_O39_Observationrequest `hl7:",display=Observation_request"`
	FT1                []FT1                       `hl7:"42,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"43,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"44,display=Billing"`
}

// Timing
type OML_O39_Timing struct {
	HL7 HL7Name `hl7:",name=OML_O39_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/quantity Relationship"`
}

// Observationrequest
type OML_O39_Observationrequest struct {
	HL7              HL7Name                    `hl7:",name=OML_O39_Observationrequest,type=tg"`
	OBR              *OBR                       `hl7:"22,required,display=Observation Request"`
	TCD              *TCD                       `hl7:"23,display=Test Code Detail"`
	NTE              []NTE                      `hl7:"24,display=Notes And Comments"`
	PRT              []PRT                      `hl7:"25,display=Participation Information"`
	CTD              *CTD                       `hl7:"26,display=Contact Data"`
	DG1              []DG1                      `hl7:"27,display=Diagnosis"`
	Observation      []OML_O39_Observation      `hl7:",display=Observation"`
	Specimenshipment []OML_O39_Specimenshipment `hl7:",display=Specimen_shipment"`
}

// Observation
type OML_O39_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O39_Observation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/result"`
	PRT []PRT   `hl7:"29,display=Participation Information"`
	TCD *TCD    `hl7:"30,display=Test Code Detail"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
}

// Specimenshipment
type OML_O39_Specimenshipment struct {
	HL7                 HL7Name                       `hl7:",name=OML_O39_Specimenshipment,type=tg"`
	SHP                 *SHP                          `hl7:"32,required,display=Shipment"`
	Shipmentobservation []OML_O39_Shipmentobservation `hl7:",display=Shipment_observation"`
	Package             []OML_O39_Package             `hl7:",required,display=Package"`
}

// Shipmentobservation
type OML_O39_Shipmentobservation struct {
	HL7 HL7Name `hl7:",name=OML_O39_Shipmentobservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/result"`
	PRT []PRT   `hl7:"34,display=Participation Information"`
}

// Package
type OML_O39_Package struct {
	HL7               HL7Name                     `hl7:",name=OML_O39_Package,type=tg"`
	PAC               *PAC                        `hl7:"35,required,display=Shipment Package"`
	Specimeninpackage []OML_O39_Specimeninpackage `hl7:",display=Specimen_in_package"`
}

// Specimeninpackage
type OML_O39_Specimeninpackage struct {
	HL7                        HL7Name                              `hl7:",name=OML_O39_Specimeninpackage,type=tg"`
	SPM                        *SPM                                 `hl7:"36,required,display=Specimen"`
	Specimenobservation        []OML_O39_Specimenobservation        `hl7:",display=Specimen_observation"`
	Specimencontainerinpackage []OML_O39_Specimencontainerinpackage `hl7:",display=Specimen_container_in_package"`
}

// Specimenobservation
type OML_O39_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OML_O39_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"37,required,display=Observation/result"`
	PRT []PRT   `hl7:"38,display=Participation Information"`
}

// Specimencontainerinpackage
type OML_O39_Specimencontainerinpackage struct {
	HL7                  HL7Name                        `hl7:",name=OML_O39_Specimencontainerinpackage,type=tg"`
	SAC                  *SAC                           `hl7:"39,required,display=Specimen Container Detail"`
	Containerobservation []OML_O39_Containerobservation `hl7:",display=Container_observation"`
}

// Containerobservation
type OML_O39_Containerobservation struct {
	HL7 HL7Name `hl7:",name=OML_O39_Containerobservation,type=tg"`
	OBX *OBX    `hl7:"40,required,display=Observation/result"`
	PRT []PRT   `hl7:"41,display=Participation Information"`
}

// Specimen shipment centric laboratory order
//
// The function of this message is to apply an order to all specimens in a shipment or a package within a shipment.
type OML_O39 struct {
	HL7     HL7Name          `hl7:",name=OML_O39,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OML_O39_Patient `hl7:",display=Patient"`
	Order   []OML_O39_Order  `hl7:",required,display=Order"`
}

// Patient
type OMN_O07_Patient struct {
	HL7          HL7Name               `hl7:",name=OMN_O07_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *OMN_O07_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OMN_O07_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// Patientvisit
type OMN_O07_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OMN_O07_Insurance struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Order
type OMN_O07_Order struct {
	HL7         HL7Name               `hl7:",name=OMN_O07_Order,type=tg"`
	ORC         *ORC                  `hl7:"16,required,display=Common Order"`
	Timing      []OMN_O07_Timing      `hl7:",display=Timing"`
	RQD         *RQD                  `hl7:"19,required,display=Requisition Detail"`
	RQ1         *RQ1                  `hl7:"20,display=Requisition Detail-1"`
	NTE         []NTE                 `hl7:"21,display=Notes And Comments"`
	Observation []OMN_O07_Observation `hl7:",display=Observation"`
	BLG         *BLG                  `hl7:"24,display=Billing"`
}

// Timing
type OMN_O07_Timing struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Observation
type OMN_O07_Observation struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Observation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/result"`
	NTE []NTE   `hl7:"23,display=Notes And Comments"`
}

// Non-stock requisition order
//
// Non-stock requisitions can use the ORM message with the RQD and RQ1 segments as the detail segment, or use the OMN and ORN
// messages described below:
type OMN_O07 struct {
	HL7     HL7Name          `hl7:",name=OMN_O07,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OMN_O07_Patient `hl7:",display=Patient"`
	Order   []OMN_O07_Order  `hl7:",required,display=Order"`
}

// Patient
type OMP_O09_Patient struct {
	HL7                    HL7Name                         `hl7:",name=OMP_O09_Patient,type=tg"`
	PID                    *PID                            `hl7:"5,required,display=Patient Identification"`
	Additionaldemographics *OMP_O09_Additionaldemographics `hl7:",display=Additional_demographics"`
	NTE                    []NTE                           `hl7:"8,display=Notes And Comments"`
	Patientvisit           *OMP_O09_Patientvisit           `hl7:",display=Patient_visit"`
	Insurance              []OMP_O09_Insurance             `hl7:",display=Insurance"`
	GT1                    *GT1                            `hl7:"15,display=Guarantor"`
	AL1                    []AL1                           `hl7:"16,display=Patient Allergy Information"`
}

// Additionaldemographics
type OMP_O09_Additionaldemographics struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Additionaldemographics,type=tg"`
	PD1 *PD1    `hl7:"6,required,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Patientvisit
type OMP_O09_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Insurance
type OMP_O09_Insurance struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Order
type OMP_O09_Order struct {
	HL7         HL7Name               `hl7:",name=OMP_O09_Order,type=tg"`
	ORC         *ORC                  `hl7:"17,required,display=Common Order"`
	Timing      []OMP_O09_Timing      `hl7:",display=Timing"`
	RXO         *RXO                  `hl7:"20,required,display=Pharmacy/treatment Order"`
	PRT         []PRT                 `hl7:"21,display=Participation Information"`
	NTE         []NTE                 `hl7:"22,display=Notes And Comments"`
	RXR         []RXR                 `hl7:"23,required,display=Pharmacy/treatment Route"`
	Component   []OMP_O09_Component   `hl7:",display=Component"`
	Observation []OMP_O09_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"29,display=Financial Transaction"`
	BLG         *BLG                  `hl7:"30,display=Billing"`
}

// Timing
type OMP_O09_Timing struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"18,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"19,display=Timing/quantity Relationship"`
}

// Component
type OMP_O09_Component struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Component,type=tg"`
	RXC *RXC    `hl7:"24,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Observation
type OMP_O09_Observation struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Observation,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/result"`
	PRT []PRT   `hl7:"27,display=Participation Information"`
	NTE []NTE   `hl7:"28,display=Notes And Comments"`
}

// Pharmacy/treatment order
type OMP_O09 struct {
	HL7     HL7Name          `hl7:",name=OMP_O09,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OMP_O09_Patient `hl7:",display=Patient"`
	Order   []OMP_O09_Order  `hl7:",required,display=Order"`
}

// Patient
type OMS_O05_Patient struct {
	HL7          HL7Name               `hl7:",name=OMS_O05_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *OMS_O05_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []OMS_O05_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// Patientvisit
type OMS_O05_Patientvisit struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OMS_O05_Insurance struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Order
type OMS_O05_Order struct {
	HL7         HL7Name               `hl7:",name=OMS_O05_Order,type=tg"`
	ORC         *ORC                  `hl7:"16,required,display=Common Order"`
	Timing      []OMS_O05_Timing      `hl7:",display=Timing"`
	RQD         *RQD                  `hl7:"19,required,display=Requisition Detail"`
	RQ1         *RQ1                  `hl7:"20,display=Requisition Detail-1"`
	NTE         []NTE                 `hl7:"21,display=Notes And Comments"`
	Observation []OMS_O05_Observation `hl7:",display=Observation"`
	BLG         *BLG                  `hl7:"24,display=Billing"`
}

// Timing
type OMS_O05_Timing struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Observation
type OMS_O05_Observation struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Observation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/result"`
	NTE []NTE   `hl7:"23,display=Notes And Comments"`
}

// Stock requisition order
//
// Stock requisition orders use the ORM where RQD is the detail segment for backward compatibility or can use the OMS and ORS
// messages described below.
type OMS_O05 struct {
	HL7     HL7Name          `hl7:",name=OMS_O05,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *OMS_O05_Patient `hl7:",display=Patient"`
	Order   []OMS_O05_Order  `hl7:",required,display=Order"`
}

// Guarantor
type OPL_O37_Guarantor struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Guarantor,type=tg"`
	GT1 *GT1    `hl7:"6,required,display=Guarantor"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Order
type OPL_O37_Order struct {
	HL7         HL7Name              `hl7:",name=OPL_O37_Order,type=tg"`
	NK1         []NK1                `hl7:"8,required,display=Next Of Kin / Associated Parties"`
	Patient     *OPL_O37_Patient     `hl7:",display=Patient"`
	Specimen    []OPL_O37_Specimen   `hl7:",required,display=Specimen"`
	Priorresult *OPL_O37_Priorresult `hl7:",display=Prior_result"`
	FT1         []FT1                `hl7:"48,display=Financial Transaction"`
	CTI         []CTI                `hl7:"49,display=Clinical Trial Identification"`
	BLG         *BLG                 `hl7:"50,display=Billing"`
}

// Patient
type OPL_O37_Patient struct {
	HL7                   HL7Name                         `hl7:",name=OPL_O37_Patient,type=tg"`
	PID                   *PID                            `hl7:"9,required,display=Patient Identification"`
	PD1                   *PD1                            `hl7:"10,display=Patient Additional Demographic"`
	PRT                   []PRT                           `hl7:"11,display=Participation Information"`
	Observationsonpatient []OPL_O37_Observationsonpatient `hl7:",display=Observations_on_patient"`
	Insurance             []OPL_O37_Insurance             `hl7:",display=Insurance"`
	AL1                   []AL1                           `hl7:"17,display=Patient Allergy Information"`
}

// Observationsonpatient
type OPL_O37_Observationsonpatient struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Observationsonpatient,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/result"`
	PRT []PRT   `hl7:"13,display=Participation Information"`
}

// Insurance
type OPL_O37_Insurance struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Insurance,type=tg"`
	IN1 *IN1    `hl7:"14,required,display=Insurance"`
	IN2 *IN2    `hl7:"15,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"16,display=Insurance Additional Information- Certification"`
}

// Specimen
type OPL_O37_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OPL_O37_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"18,required,display=Specimen"`
	Specimenobservation []OPL_O37_Specimenobservation `hl7:",display=Specimen_observation"`
	Container           []OPL_O37_Container           `hl7:",display=Container"`
	Observationrequest  []OPL_O37_Observationrequest  `hl7:",required,display=Observation_request"`
}

// Specimenobservation
type OPL_O37_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/result"`
	PRT []PRT   `hl7:"20,display=Participation Information"`
}

// Container
type OPL_O37_Container struct {
	HL7                  HL7Name                        `hl7:",name=OPL_O37_Container,type=tg"`
	SAC                  *SAC                           `hl7:"21,required,display=Specimen Container Detail"`
	Containerobservation []OPL_O37_Containerobservation `hl7:",display=Container_observation"`
}

// Containerobservation
type OPL_O37_Containerobservation struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Containerobservation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/result"`
	PRT []PRT   `hl7:"23,display=Participation Information"`
}

// Observationrequest
type OPL_O37_Observationrequest struct {
	HL7                     HL7Name                           `hl7:",name=OPL_O37_Observationrequest,type=tg"`
	ORC                     *ORC                              `hl7:"24,required,display=Common Order"`
	OBR                     *OBR                              `hl7:"25,required,display=Observation Request"`
	PRT                     []PRT                             `hl7:"26,display=Participation Information"`
	Timing                  []OPL_O37_Timing                  `hl7:",display=Timing"`
	TCD                     *TCD                              `hl7:"29,display=Test Code Detail"`
	DG1                     []DG1                             `hl7:"30,display=Diagnosis"`
	Orderrelatedobservation []OPL_O37_Orderrelatedobservation `hl7:",display=Order_related_observation"`
}

// Timing
type OPL_O37_Timing struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"27,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"28,display=Timing/quantity Relationship"`
}

// Orderrelatedobservation
type OPL_O37_Orderrelatedobservation struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Orderrelatedobservation,type=tg"`
	OBX *OBX    `hl7:"31,required,display=Observation/result"`
	PRT []PRT   `hl7:"32,display=Participation Information"`
}

// Priorresult
type OPL_O37_Priorresult struct {
	HL7               HL7Name                    `hl7:",name=OPL_O37_Priorresult,type=tg"`
	NK1               []NK1                      `hl7:"33,required,display=Next Of Kin / Associated Parties"`
	Patientprior      *OPL_O37_Patientprior      `hl7:",display=Patient_prior"`
	Patientvisitprior *OPL_O37_Patientvisitprior `hl7:",display=Patient_visit_prior"`
	AL1               *AL1                       `hl7:"40,display=Patient Allergy Information"`
	Orderprior        []OPL_O37_Orderprior       `hl7:",required,display=Order_prior"`
}

// Patientprior
type OPL_O37_Patientprior struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Patientprior,type=tg"`
	PID *PID    `hl7:"34,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"35,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"36,display=Participation Information"`
}

// Patientvisitprior
type OPL_O37_Patientvisitprior struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Patientvisitprior,type=tg"`
	PV1 *PV1    `hl7:"37,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"38,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"39,display=Participation Information"`
}

// Orderprior
type OPL_O37_Orderprior struct {
	HL7                    HL7Name                          `hl7:",name=OPL_O37_Orderprior,type=tg"`
	OBR                    *OBR                             `hl7:"41,required,display=Observation Request"`
	ORC                    *ORC                             `hl7:"42,display=Common Order"`
	PRT                    []PRT                            `hl7:"43,display=Participation Information"`
	Timing2                *OPL_O37_Timing2                 `hl7:",display=Timing2"`
	Observationresultgroup []OPL_O37_Observationresultgroup `hl7:",required,display=Observation_result_group"`
}

// Timing2
type OPL_O37_Timing2 struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Timing2,type=tg"`
	TQ1 *TQ1    `hl7:"44,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"45,display=Timing/quantity Relationship"`
}

// Observationresultgroup
type OPL_O37_Observationresultgroup struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Observationresultgroup,type=tg"`
	OBX *OBX    `hl7:"46,required,display=Observation/result"`
	PRT []PRT   `hl7:"47,display=Participation Information"`
}

// Population/Location-Based Laboratory Order Message
//
// This message supports the use-case for submission of field level specimen and order data to diagnostic laboratories
type OPL_O37 struct {
	HL7       HL7Name            `hl7:",name=OPL_O37,type=t"`
	MSH       *MSH               `hl7:"1,required,display=Message Header"`
	SFT       []SFT              `hl7:"2,display=Software Segment"`
	UAC       *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	NTE       []NTE              `hl7:"4,display=Notes And Comments"`
	PRT       []PRT              `hl7:"5,required,display=Participation Information"`
	Guarantor *OPL_O37_Guarantor `hl7:",display=Guarantor"`
	Order     []OPL_O37_Order    `hl7:",required,display=Order"`
}

// Response
type OPR_O38_Response struct {
	HL7   HL7Name         `hl7:",name=OPR_O38_Response,type=tg"`
	Order []OPR_O38_Order `hl7:",required,display=Order"`
}

// Order
type OPR_O38_Order struct {
	HL7      HL7Name            `hl7:",name=OPR_O38_Order,type=tg"`
	NK1      []NK1              `hl7:"7,required,display=Next Of Kin / Associated Parties"`
	PID      *PID               `hl7:"8,display=Patient Identification"`
	PRT      []PRT              `hl7:"9,display=Participation Information"`
	Specimen []OPR_O38_Specimen `hl7:",display=Specimen"`
}

// Specimen
type OPR_O38_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OPR_O38_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"10,required,display=Specimen"`
	Specimenobservation []OPR_O38_Specimenobservation `hl7:",display=Specimen_observation"`
	SAC                 []SAC                         `hl7:"13,display=Specimen Container Detail"`
	Observationrequest  []OPR_O38_Observationrequest  `hl7:",display=Observation_request"`
	Timing              []OPR_O38_Timing              `hl7:",display=Timing"`
}

// Specimenobservation
type OPR_O38_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OPR_O38_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"11,required,display=Observation/result"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Observationrequest
type OPR_O38_Observationrequest struct {
	HL7 HL7Name `hl7:",name=OPR_O38_Observationrequest,type=tg"`
	ORC *ORC    `hl7:"14,required,display=Common Order"`
	OBR *OBR    `hl7:"15,required,display=Observation Request"`
	PRT []PRT   `hl7:"16,display=Participation Information"`
}

// Timing
type OPR_O38_Timing struct {
	HL7 HL7Name `hl7:",name=OPR_O38_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Population/Location-Based Laboratory Order Acknowledgment Message
//
// The function of this message is to respond to an OPL message. An OPR message is the application acknowledgment to an OPL message.
// See Chapter 2 for a description of the acknowledgment paradigm.
//
// Note: Based upon general message/acknowledgment patterns, it would be expected that this message type would be ORP. However,
// when this message type was introduced, ORP was already in use as Pharmacy/Treatment Order Acknowledgment.
type OPR_O38 struct {
	HL7      HL7Name           `hl7:",name=OPR_O38,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *OPR_O38_Response `hl7:",display=Response"`
}

// Patientvisitobservation
type OPU_R25_Patientvisitobservation struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Patientvisitobservation,type=tg"`
	OBX *OBX    `hl7:"8,required,display=Observation/result"`
	NTE []NTE   `hl7:"9,display=Notes And Comments"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Accessiondetail
type OPU_R25_Accessiondetail struct {
	HL7      HL7Name            `hl7:",name=OPU_R25_Accessiondetail,type=tg"`
	NK1      []NK1              `hl7:"11,required,display=Next Of Kin / Associated Parties"`
	Patient  *OPU_R25_Patient   `hl7:",display=Patient"`
	Specimen []OPU_R25_Specimen `hl7:",required,display=Specimen"`
}

// Patient
type OPU_R25_Patient struct {
	HL7                HL7Name                      `hl7:",name=OPU_R25_Patient,type=tg"`
	PID                *PID                         `hl7:"12,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"13,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"14,display=Participation Information"`
	Patientobservation []OPU_R25_Patientobservation `hl7:",display=Patient_observation"`
}

// Patientobservation
type OPU_R25_Patientobservation struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/result"`
	PRT []PRT   `hl7:"16,display=Participation Information"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Specimen
type OPU_R25_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OPU_R25_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"18,required,display=Specimen"`
	Specimenobservation []OPU_R25_Specimenobservation `hl7:",display=Specimen_observation"`
	Container           []OPU_R25_Container           `hl7:",display=Container"`
	Order               []OPU_R25_Order               `hl7:",required,display=Order"`
}

// Specimenobservation
type OPU_R25_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/result"`
	PRT []PRT   `hl7:"20,display=Participation Information"`
	NTE []NTE   `hl7:"21,display=Notes And Comments"`
}

// Container
type OPU_R25_Container struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Container,type=tg"`
	SAC *SAC    `hl7:"22,required,display=Specimen Container Detail"`
	INV *INV    `hl7:"23,display=Inventory Detail"`
}

// Order
type OPU_R25_Order struct {
	HL7       HL7Name             `hl7:",name=OPU_R25_Order,type=tg"`
	OBR       *OBR                `hl7:"24,required,display=Observation Request"`
	ORC       *ORC                `hl7:"25,display=Common Order"`
	NTE       []NTE               `hl7:"26,display=Notes And Comments"`
	PRT       []PRT               `hl7:"27,display=Participation Information"`
	Timingqty []OPU_R25_Timingqty `hl7:",display=Timing_qty"`
	Result    []OPU_R25_Result    `hl7:",required,display=Result"`
}

// Timingqty
type OPU_R25_Timingqty struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"28,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"29,display=Timing/quantity Relationship"`
}

// Result
type OPU_R25_Result struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Result,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/result"`
	PRT []PRT   `hl7:"31,display=Participation Information"`
	NTE []NTE   `hl7:"32,display=Notes And Comments"`
}

// Unsolicited Population/Location-Based Laboratory Observation Message
//
// This message supports unsolicited population or location-based surveillance reporting to a central repository where
// the accession / visit may contain references to multiple patients, multiple specimens, non-patient specimens, and multiple
// orders per specimen.
//
// This message structure represents the way most submissions to veterinary laboratories occur. There is a multi-tier hierarchy
// in which a single individual (for example, a veterinarian or an owner of a production facility) submits one or more specimen
// samples from one or more animals or non-living entity, such as environmental specimens or feed. This grouped submission
// of specimens from multiple animal 'patients' is usually referred to as an 'accession' which can be considered analogous
// to a 'visit' in the veterinary laboratory context. This is what accounts for the unusual structure where the PV1 segment
// precedes a repeatable ACCESSION_DETAIL group.
//
// Since specimens can originate from non-patients the PATIENT group is optional. This allows for specimens that are both
// associated with patients as well as those associated with non-patients to be included under the same accession (visit).
// Each specimen may have one or more orders assigned, each of which may have one or more individual results.
//
// The OBX segment at the visit level provides the reason for submission. The repeatable PRT segment at the visit level represents
// the person(s) or organization submitting the request and other interested parties and locations who (that) play a role
// in the disposition of the accession/visit.
//
// The NK1 segment contains owner and/or responsible party information for the patient and/or specimen.
type OPU_R25 struct {
	HL7                     HL7Name                           `hl7:",name=OPU_R25,type=t"`
	MSH                     *MSH                              `hl7:"1,required,display=Message Header"`
	SFT                     []SFT                             `hl7:"2,display=Software Segment"`
	UAC                     *UAC                              `hl7:"3,display=User Authentication Credential Segment"`
	NTE                     *NTE                              `hl7:"4,display=Notes And Comments"`
	PV1                     *PV1                              `hl7:"5,required,display=Patient Visit"`
	PV2                     *PV2                              `hl7:"6,display=Patient Visit - Additional Information"`
	PRT                     []PRT                             `hl7:"7,display=Participation Information"`
	Patientvisitobservation []OPU_R25_Patientvisitobservation `hl7:",display=Patient_visit_observation"`
	Accessiondetail         []OPU_R25_Accessiondetail         `hl7:",required,display=Accession_detail"`
}

// Observation Report Acknowledgement
//
// This message enables a response to the ORU^R30 message to provide an application level acknowledgement that may include
// a placer order number.
type ORA_R33 struct {
	HL7 HL7Name `hl7:",name=ORA_R33,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	ORC *ORC    `hl7:"6,display=Common Order"`
}

// Response
type ORB_O28_Response struct {
	HL7     HL7Name          `hl7:",name=ORB_O28_Response,type=tg"`
	Patient *ORB_O28_Patient `hl7:",display=Patient"`
}

// Patient
type ORB_O28_Patient struct {
	HL7   HL7Name         `hl7:",name=ORB_O28_Patient,type=tg"`
	PID   *PID            `hl7:"7,required,display=Patient Identification"`
	Order []ORB_O28_Order `hl7:",display=Order"`
}

// Order
type ORB_O28_Order struct {
	HL7    HL7Name          `hl7:",name=ORB_O28_Order,type=tg"`
	ORC    *ORC             `hl7:"8,required,display=Common Order"`
	Timing []ORB_O28_Timing `hl7:",display=Timing"`
	BPO    *BPO             `hl7:"11,display=Blood Product Order"`
}

// Timing
type ORB_O28_Timing struct {
	HL7 HL7Name `hl7:",name=ORB_O28_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"9,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"10,display=Timing/quantity Relationship"`
}

// Blood product order acknowledgment
type ORB_O28 struct {
	HL7      HL7Name           `hl7:",name=ORB_O28,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORB_O28_Response `hl7:",display=Response"`
}

// Response
type ORD_O04_Response struct {
	HL7       HL7Name             `hl7:",name=ORD_O04_Response,type=tg"`
	Patient   *ORD_O04_Patient    `hl7:",display=Patient"`
	Orderdiet []ORD_O04_Orderdiet `hl7:",required,display=Order_diet"`
	Ordertray []ORD_O04_Ordertray `hl7:",display=Order_tray"`
}

// Patient
type ORD_O04_Patient struct {
	HL7 HL7Name `hl7:",name=ORD_O04_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Orderdiet
type ORD_O04_Orderdiet struct {
	HL7        HL7Name              `hl7:",name=ORD_O04_Orderdiet,type=tg"`
	ORC        *ORC                 `hl7:"9,required,display=Common Order"`
	Timingdiet []ORD_O04_Timingdiet `hl7:",display=Timing_diet"`
	ODS        []ODS                `hl7:"12,display=Dietary Orders- Supplements- And Preferences"`
	NTE        []NTE                `hl7:"13,display=Notes And Comments"`
}

// Timingdiet
type ORD_O04_Timingdiet struct {
	HL7 HL7Name `hl7:",name=ORD_O04_Timingdiet,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/quantity Relationship"`
}

// Ordertray
type ORD_O04_Ordertray struct {
	HL7        HL7Name              `hl7:",name=ORD_O04_Ordertray,type=tg"`
	ORC        *ORC                 `hl7:"14,required,display=Common Order"`
	Timingtray []ORD_O04_Timingtray `hl7:",display=Timing_tray"`
	ODT        []ODT                `hl7:"17,display=Diet Tray Instructions"`
	NTE        []NTE                `hl7:"18,display=Notes And Comments"`
}

// Timingtray
type ORD_O04_Timingtray struct {
	HL7 HL7Name `hl7:",name=ORD_O04_Timingtray,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/quantity Relationship"`
}

// Diet order acknowledgment
type ORD_O04 struct {
	HL7      HL7Name           `hl7:",name=ORD_O04,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORD_O04_Response `hl7:",display=Response"`
}

// Response
type ORG_O20_Response struct {
	HL7     HL7Name          `hl7:",name=ORG_O20_Response,type=tg"`
	Patient *ORG_O20_Patient `hl7:",display=Patient"`
	Order   []ORG_O20_Order  `hl7:",required,display=Order"`
}

// Patient
type ORG_O20_Patient struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
	PRT []PRT   `hl7:"9,display=Participation Information"`
}

// Order
type ORG_O20_Order struct {
	HL7              HL7Name                   `hl7:",name=ORG_O20_Order,type=tg"`
	ORC              *ORC                      `hl7:"10,required,display=Common Order"`
	Timing           []ORG_O20_Timing          `hl7:",display=Timing"`
	Observationgroup *ORG_O20_Observationgroup `hl7:",display=Observation_group"`
	PRT              []PRT                     `hl7:"14,display=Participation Information"`
	NTE              []NTE                     `hl7:"15,display=Notes And Comments"`
	CTI              []CTI                     `hl7:"16,display=Clinical Trial Identification"`
	Specimen         []ORG_O20_Specimen        `hl7:",display=Specimen"`
}

// Timing
type ORG_O20_Timing struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Observationgroup
type ORG_O20_Observationgroup struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Observationgroup,type=tg"`
	OBR *OBR    `hl7:"13,required,display=Observation Request"`
}

// Specimen
type ORG_O20_Specimen struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Specimen,type=tg"`
	SPM *SPM    `hl7:"17,required,display=Specimen"`
	SAC []SAC   `hl7:"18,display=Specimen Container Detail"`
}

// General clinical order response
//
// The function of this message is to respond to an OMG message. An ORG message is the application acknowledgment to an OMG message.
// See Chapter 2 for a description of the acknowledgment paradigm.
//
// In ORG the PID and ORC segments are optional, particularly in case of an error response. However, ORC segments are always
// required in ORG when the OBR is present. For example, a response ORG might include only the MSH and MSA.
//
// The function (e.g., cancel, new order) of both OMG and ORG messages is determined by the value in ORC-1-order control. (See
// the table of order control values for a complete list.)
type ORG_O20 struct {
	HL7      HL7Name           `hl7:",name=ORG_O20,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORG_O20_Response `hl7:",display=Response"`
}

// Response
type ORI_O24_Response struct {
	HL7     HL7Name          `hl7:",name=ORI_O24_Response,type=tg"`
	Patient *ORI_O24_Patient `hl7:",display=Patient"`
	Order   []ORI_O24_Order  `hl7:",required,display=Order"`
}

// Patient
type ORI_O24_Patient struct {
	HL7 HL7Name `hl7:",name=ORI_O24_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
	PRT []PRT   `hl7:"9,display=Participation Information"`
}

// Order
type ORI_O24_Order struct {
	HL7    HL7Name          `hl7:",name=ORI_O24_Order,type=tg"`
	ORC    *ORC             `hl7:"10,required,display=Common Order"`
	Timing []ORI_O24_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"13,required,display=Observation Request"`
	NTE    []NTE            `hl7:"14,display=Notes And Comments"`
	PRT    []PRT            `hl7:"15,display=Participation Information"`
	IPC    []IPC            `hl7:"16,required,display=Imaging Procedure Control Segment"`
}

// Timing
type ORI_O24_Timing struct {
	HL7 HL7Name `hl7:",name=ORI_O24_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Imaging order response message to any OMI
//
// The function of this message is to respond to an OMI message. An ORI message is the application acknowledgment to an OMI message.
// See Chapter 2 for a description of the acknowledgment paradigm.
type ORI_O24 struct {
	HL7      HL7Name           `hl7:",name=ORI_O24,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORI_O24_Response `hl7:",display=Response"`
}

// Response
type ORL_O22_Response struct {
	HL7   HL7Name         `hl7:",name=ORL_O22_Response,type=tg"`
	PID   *PID            `hl7:"7,required,display=Patient Identification"`
	PRT   []PRT           `hl7:"8,display=Participation Information"`
	Order []ORL_O22_Order `hl7:",display=Order"`
}

// Order
type ORL_O22_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O22_Order,type=tg"`
	ORC                *ORC                        `hl7:"9,required,display=Common Order"`
	PRT                []PRT                       `hl7:"10,display=Participation Information"`
	Timing             []ORL_O22_Timing            `hl7:",display=Timing"`
	Observationrequest *ORL_O22_Observationrequest `hl7:",display=Observation_request"`
}

// Timing
type ORL_O22_Timing struct {
	HL7 HL7Name `hl7:",name=ORL_O22_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Observationrequest
type ORL_O22_Observationrequest struct {
	HL7      HL7Name            `hl7:",name=ORL_O22_Observationrequest,type=tg"`
	OBR      *OBR               `hl7:"13,required,display=Observation Request"`
	PRT      []PRT              `hl7:"14,display=Participation Information"`
	Specimen []ORL_O22_Specimen `hl7:",display=Specimen"`
}

// Specimen
type ORL_O22_Specimen struct {
	HL7 HL7Name `hl7:",name=ORL_O22_Specimen,type=tg"`
	SPM *SPM    `hl7:"15,required,display=Specimen"`
	SAC []SAC   `hl7:"16,display=Specimen Container Detail"`
}

// General laboratory order response message to any OML
//
// The function of this message is to respond to an OML message. An ORL message is the application acknowledgment to an OML message.
// See Chapter 2 for a description of the acknowledgment paradigm.
type ORL_O22 struct {
	HL7      HL7Name           `hl7:",name=ORL_O22,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORL_O22_Response `hl7:",display=Response"`
}

// Response
type ORL_O34_Response struct {
	HL7      HL7Name            `hl7:",name=ORL_O34_Response,type=tg"`
	PID      *PID               `hl7:"7,required,display=Patient Identification"`
	PRT      []PRT              `hl7:"8,display=Participation Information"`
	Specimen []ORL_O34_Specimen `hl7:",required,display=Specimen"`
}

// Specimen
type ORL_O34_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=ORL_O34_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"9,required,display=Specimen"`
	Specimenobservation []ORL_O34_Specimenobservation `hl7:",display=Specimen_observation"`
	SAC                 []SAC                         `hl7:"12,display=Specimen Container Detail"`
	Order               []ORL_O34_Order               `hl7:",display=Order"`
}

// Specimenobservation
type ORL_O34_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=ORL_O34_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"10,required,display=Observation/result"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Order
type ORL_O34_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O34_Order,type=tg"`
	ORC                *ORC                        `hl7:"13,required,display=Common Order"`
	PRT                []PRT                       `hl7:"14,display=Participation Information"`
	Timing             []ORL_O34_Timing            `hl7:",display=Timing"`
	Observationrequest *ORL_O34_Observationrequest `hl7:",display=Observation_request"`
}

// Timing
type ORL_O34_Timing struct {
	HL7 HL7Name `hl7:",name=ORL_O34_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/quantity Relationship"`
}

// Observationrequest
type ORL_O34_Observationrequest struct {
	HL7 HL7Name `hl7:",name=ORL_O34_Observationrequest,type=tg"`
	OBR *OBR    `hl7:"17,required,display=Observation Request"`
	PRT []PRT   `hl7:"18,display=Participation Information"`
}

// Laboratory order response message to a multiple order related to single sp
//
// The function of this message is to respond to an OML message where the original trigger event produced an OML with the Specimen
// Group segment above the ORC. An ORL message is the application acknowledgment to an OML message. See Chapter 2 for a description
// of the acknowledgment paradigm.
type ORL_O34 struct {
	HL7      HL7Name           `hl7:",name=ORL_O34,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORL_O34_Response `hl7:",display=Response"`
}

// Response
type ORL_O36_Response struct {
	HL7      HL7Name            `hl7:",name=ORL_O36_Response,type=tg"`
	PID      *PID               `hl7:"7,required,display=Patient Identification"`
	PRT      []PRT              `hl7:"8,display=Participation Information"`
	Specimen []ORL_O36_Specimen `hl7:",required,display=Specimen"`
}

// Specimen
type ORL_O36_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=ORL_O36_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"9,required,display=Specimen"`
	Specimenobservation []ORL_O36_Specimenobservation `hl7:",display=Specimen_observation"`
	NTE                 []NTE                         `hl7:"12,display=Notes And Comments"`
	Specimencontainer   []ORL_O36_Specimencontainer   `hl7:",required,display=Specimen_container"`
}

// Specimenobservation
type ORL_O36_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=ORL_O36_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"10,required,display=Observation/result"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Specimencontainer
type ORL_O36_Specimencontainer struct {
	HL7   HL7Name         `hl7:",name=ORL_O36_Specimencontainer,type=tg"`
	SAC   *SAC            `hl7:"13,required,display=Specimen Container Detail"`
	Order []ORL_O36_Order `hl7:",display=Order"`
}

// Order
type ORL_O36_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O36_Order,type=tg"`
	ORC                *ORC                        `hl7:"14,required,display=Common Order"`
	PRT                []PRT                       `hl7:"15,display=Participation Information"`
	Timing             []ORL_O36_Timing            `hl7:",display=Timing"`
	Observationrequest *ORL_O36_Observationrequest `hl7:",display=Observation_request"`
}

// Timing
type ORL_O36_Timing struct {
	HL7 HL7Name `hl7:",name=ORL_O36_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/quantity Relationship"`
}

// Observationrequest
type ORL_O36_Observationrequest struct {
	HL7 HL7Name `hl7:",name=ORL_O36_Observationrequest,type=tg"`
	OBR *OBR    `hl7:"18,required,display=Observation Request"`
	PRT []PRT   `hl7:"19,display=Participation Information"`
}

// Laboratory order response message to a single container of a specimen OML
//
// The function of this message is to respond to an OML message where the original trigger event produced an OML with the Specimen
// Group segment above the ORC. An ORL message is the application acknowledgment to an OML message. See Chapter 2 for a description
// of the acknowledgment paradigm.
type ORL_O36 struct {
	HL7      HL7Name           `hl7:",name=ORL_O36,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORL_O36_Response `hl7:",display=Response"`
}

// Response
type ORL_O40_Response struct {
	HL7     HL7Name          `hl7:",name=ORL_O40_Response,type=tg"`
	Patient *ORL_O40_Patient `hl7:",display=Patient"`
}

// Patient
type ORL_O40_Patient struct {
	HL7   HL7Name         `hl7:",name=ORL_O40_Patient,type=tg"`
	PID   *PID            `hl7:"7,required,display=Patient Identification"`
	PRT   []PRT           `hl7:"8,display=Participation Information"`
	Order []ORL_O40_Order `hl7:",display=Order"`
}

// Order
type ORL_O40_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O40_Order,type=tg"`
	ORC                *ORC                        `hl7:"9,required,display=Common Order"`
	PRT                []PRT                       `hl7:"10,display=Participation Information"`
	Timing             []ORL_O40_Timing            `hl7:",display=Timing"`
	Observationrequest *ORL_O40_Observationrequest `hl7:",display=Observation_request"`
}

// Timing
type ORL_O40_Timing struct {
	HL7 HL7Name `hl7:",name=ORL_O40_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Observationrequest
type ORL_O40_Observationrequest struct {
	HL7              HL7Name                    `hl7:",name=ORL_O40_Observationrequest,type=tg"`
	OBR              *OBR                       `hl7:"13,required,display=Observation Request"`
	PRT              []PRT                      `hl7:"14,display=Participation Information"`
	Specimenshipment []ORL_O40_Specimenshipment `hl7:",display=Specimen_shipment"`
}

// Specimenshipment
type ORL_O40_Specimenshipment struct {
	HL7     HL7Name           `hl7:",name=ORL_O40_Specimenshipment,type=tg"`
	SHP     *SHP              `hl7:"15,required,display=Shipment"`
	Package []ORL_O40_Package `hl7:",required,display=Package"`
}

// Package
type ORL_O40_Package struct {
	HL7               HL7Name                     `hl7:",name=ORL_O40_Package,type=tg"`
	PAC               *PAC                        `hl7:"16,required,display=Shipment Package"`
	Specimeninpackage []ORL_O40_Specimeninpackage `hl7:",display=Specimen_in_package"`
}

// Specimeninpackage
type ORL_O40_Specimeninpackage struct {
	HL7                        HL7Name                              `hl7:",name=ORL_O40_Specimeninpackage,type=tg"`
	SPM                        *SPM                                 `hl7:"17,required,display=Specimen"`
	Specimencontainerinpackage []ORL_O40_Specimencontainerinpackage `hl7:",display=Specimen_container_in_package"`
}

// Specimencontainerinpackage
type ORL_O40_Specimencontainerinpackage struct {
	HL7 HL7Name `hl7:",name=ORL_O40_Specimencontainerinpackage,type=tg"`
	SAC *SAC    `hl7:"18,required,display=Specimen Container Detail"`
}

// Specimen Shipment Centric Laboratory Order Acknowledgment Message
//
// The function of this message is to respond to an OML message. An ORL message is the application acknowledgment to an OML message.
// See Chapter 2 for a description of the acknowledgment paradigm.
type ORL_O40 struct {
	HL7      HL7Name           `hl7:",name=ORL_O40,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORL_O40_Response `hl7:",display=Response"`
}

// Response
type ORN_O08_Response struct {
	HL7     HL7Name          `hl7:",name=ORN_O08_Response,type=tg"`
	Patient *ORN_O08_Patient `hl7:",display=Patient"`
	Order   []ORN_O08_Order  `hl7:",required,display=Order"`
}

// Patient
type ORN_O08_Patient struct {
	HL7 HL7Name `hl7:",name=ORN_O08_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type ORN_O08_Order struct {
	HL7    HL7Name          `hl7:",name=ORN_O08_Order,type=tg"`
	ORC    *ORC             `hl7:"9,required,display=Common Order"`
	Timing []ORN_O08_Timing `hl7:",display=Timing"`
	RQD    *RQD             `hl7:"12,required,display=Requisition Detail"`
	RQ1    *RQ1             `hl7:"13,display=Requisition Detail-1"`
	NTE    []NTE            `hl7:"14,display=Notes And Comments"`
}

// Timing
type ORN_O08_Timing struct {
	HL7 HL7Name `hl7:",name=ORN_O08_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/quantity Relationship"`
}

// Non-stock requisition acknowledgment
type ORN_O08 struct {
	HL7      HL7Name           `hl7:",name=ORN_O08,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORN_O08_Response `hl7:",display=Response"`
}

// Response
type ORP_O10_Response struct {
	HL7     HL7Name          `hl7:",name=ORP_O10_Response,type=tg"`
	Patient *ORP_O10_Patient `hl7:",display=Patient"`
	Order   []ORP_O10_Order  `hl7:",required,display=Order"`
}

// Patient
type ORP_O10_Patient struct {
	HL7 HL7Name `hl7:",name=ORP_O10_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type ORP_O10_Order struct {
	HL7         HL7Name              `hl7:",name=ORP_O10_Order,type=tg"`
	ORC         *ORC                 `hl7:"9,required,display=Common Order"`
	PRT         []PRT                `hl7:"10,display=Participation Information"`
	Timing      []ORP_O10_Timing     `hl7:",display=Timing"`
	Orderdetail *ORP_O10_Orderdetail `hl7:",display=Order_detail"`
}

// Timing
type ORP_O10_Timing struct {
	HL7 HL7Name `hl7:",name=ORP_O10_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Orderdetail
type ORP_O10_Orderdetail struct {
	HL7       HL7Name             `hl7:",name=ORP_O10_Orderdetail,type=tg"`
	RXO       *RXO                `hl7:"13,required,display=Pharmacy/treatment Order"`
	PRT       []PRT               `hl7:"14,display=Participation Information"`
	NTE       []NTE               `hl7:"15,display=Notes And Comments"`
	RXR       []RXR               `hl7:"16,required,display=Pharmacy/treatment Route"`
	Component []ORP_O10_Component `hl7:",display=Component"`
}

// Component
type ORP_O10_Component struct {
	HL7 HL7Name `hl7:",name=ORP_O10_Component,type=tg"`
	RXC *RXC    `hl7:"17,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Pharmacy/treatment order acknowledgment
type ORP_O10 struct {
	HL7      HL7Name           `hl7:",name=ORP_O10,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORP_O10_Response `hl7:",display=Response"`
}

// Response
type ORS_O06_Response struct {
	HL7     HL7Name          `hl7:",name=ORS_O06_Response,type=tg"`
	Patient *ORS_O06_Patient `hl7:",display=Patient"`
	Order   []ORS_O06_Order  `hl7:",required,display=Order"`
}

// Patient
type ORS_O06_Patient struct {
	HL7 HL7Name `hl7:",name=ORS_O06_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type ORS_O06_Order struct {
	HL7    HL7Name          `hl7:",name=ORS_O06_Order,type=tg"`
	ORC    *ORC             `hl7:"9,required,display=Common Order"`
	Timing []ORS_O06_Timing `hl7:",display=Timing"`
	RQD    *RQD             `hl7:"12,required,display=Requisition Detail"`
	RQ1    *RQ1             `hl7:"13,display=Requisition Detail-1"`
	NTE    []NTE            `hl7:"14,display=Notes And Comments"`
}

// Timing
type ORS_O06_Timing struct {
	HL7 HL7Name `hl7:",name=ORS_O06_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/quantity Relationship"`
}

// Stock requisition acknowledgment
type ORS_O06 struct {
	HL7      HL7Name           `hl7:",name=ORS_O06,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *ORS_O06_Response `hl7:",display=Response"`
}

// Patientresult
type ORU_R01_Patientresult struct {
	HL7              HL7Name                    `hl7:",name=ORU_R01_Patientresult,type=tg"`
	Patient          *ORU_R01_Patient           `hl7:",display=Patient"`
	Orderobservation []ORU_R01_Orderobservation `hl7:",required,display=Order_observation"`
}

// Patient
type ORU_R01_Patient struct {
	HL7                HL7Name                      `hl7:",name=ORU_R01_Patient,type=tg"`
	PID                *PID                         `hl7:"4,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"5,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"6,display=Participation Information"`
	NTE                []NTE                        `hl7:"7,display=Notes And Comments"`
	NK1                []NK1                        `hl7:"8,display=Next Of Kin / Associated Parties"`
	Patientobservation []ORU_R01_Patientobservation `hl7:",display=Patient_observation"`
	Visit              *ORU_R01_Visit               `hl7:",display=Visit"`
}

// Patientobservation
type ORU_R01_Patientobservation struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"9,required,display=Observation/result"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Visit
type ORU_R01_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Visit,type=tg"`
	PV1 *PV1    `hl7:"11,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"12,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"13,display=Participation Information"`
}

// Orderobservation
type ORU_R01_Orderobservation struct {
	HL7         HL7Name               `hl7:",name=ORU_R01_Orderobservation,type=tg"`
	ORC         *ORC                  `hl7:"14,display=Common Order"`
	OBR         *OBR                  `hl7:"15,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"16,display=Notes And Comments"`
	PRT         []PRT                 `hl7:"17,display=Participation Information"`
	Timingqty   []ORU_R01_Timingqty   `hl7:",display=Timing_qty"`
	CTD         *CTD                  `hl7:"20,display=Contact Data"`
	Observation []ORU_R01_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"24,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"25,display=Clinical Trial Identification"`
	Specimen    []ORU_R01_Specimen    `hl7:",display=Specimen"`
}

// Timingqty
type ORU_R01_Timingqty struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"18,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"19,display=Timing/quantity Relationship"`
}

// Observation
type ORU_R01_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Observation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	PRT []PRT   `hl7:"22,display=Participation Information"`
	NTE []NTE   `hl7:"23,display=Notes And Comments"`
}

// Specimen
type ORU_R01_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=ORU_R01_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"26,required,display=Specimen"`
	Specimenobservation []ORU_R01_Specimenobservation `hl7:",display=Specimen_observation"`
}

// Specimenobservation
type ORU_R01_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	PRT []PRT   `hl7:"28,display=Participation Information"`
}

// Unsolicited transmission of an observation message
//
// The ORU message is for transmitting laboratory results to other systems. The OUL message is designed to accommodate the
// laboratory processes of laboratory automation systems.
//
// With the segment (OBX) defined in this chapter, and the OBR defined in Chapter 4, one can construct almost any clinical report
// as a multi-level hierarchy, with the PID segment defined in Chapter 3 at the upper level, an order record (OBR) at the next
// level with one or more observation records (OBX), followed by the specimen information (SPM) and one or more observations
// (OBX) directly associated with the specimen.
//
// One result segment (OBX) is transmitted for each component of a diagnostic report, such as an EKG or obstetrical ultrasound
// or electrolyte battery.
//
// The CTD segment in this trigger is used to transmit temporary patient contact details specific to this order.
//
// Note: The ORC is permitted but not required in this message. Any information that could be included in either the ORC or the
// OBR must be included in the OBR on reporting. Notice also that the ORU (and the QRY) messages accommodate reports about many
// patients.
//
// Many report headers (OBR) may be sent beneath each patient segment, with many separate observation segments (OBX) related
// to the order / observation request beneath each OBR. OBX segments that are related to specimens immediately follow the
// SPM segments. Note segments (NTE) may be inserted at different locations in the message. The note segment applies to the
// entity that immediately precedes it, i.e., the patient if it follows the PID segment, the observation request if it follows
// the OBR segment, and the individual result if it follows the OBX segment.
type ORU_R01 struct {
	HL7           HL7Name                 `hl7:",name=ORU_R01,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	Patientresult []ORU_R01_Patientresult `hl7:",required,display=Patient_result"`
	DSC           *DSC                    `hl7:"29,display=Continuation Pointer"`
}

// Patientobservation
type ORU_R30_Patientobservation struct {
	HL7 HL7Name `hl7:",name=ORU_R30_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"7,required,display=Observation/result"`
	PRT []PRT   `hl7:"8,display=Participation Information"`
}

// Visit
type ORU_R30_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R30_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Timingqty
type ORU_R30_Timingqty struct {
	HL7 HL7Name `hl7:",name=ORU_R30_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/quantity Relationship"`
}

// Observation
type ORU_R30_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R30_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/result"`
	PRT []PRT   `hl7:"19,display=Participation Information"`
	NTE []NTE   `hl7:"20,display=Notes And Comments"`
}

// Unsolicited Point-Of-Care Observation Message Without Existing Order - Pla
//
// This event trigger instructs the receiving system to create a new order for the observation(s) contained in the message.
//
// One example of this trigger’s use case occurs when a Doctor verbally instructs a nurse to perform a test. Looking at this
// use case from an information management perspective, one might expect that, the nurse would enter an order into laboratory
// information or ordering system before performing the test. However, there usually isn't time for order entry in these
// use cases. In fact, it is highly desirable for the POC measurement process to become automated so that the only action a user
// needs to take is to make a measurement on the POC Device, with all other processes for generating an order and tying it in to
// the observation handled by the "machines."
//
// In order to allow for the passing of specific information relating to the Patient, responsible Doctor, placing doctor,
// patient location, etc., there is a requirement for the inclusion of a PV1 and PD1 segment in the ORU message type. One example
// of this trigger’s use case occurs when a Doctor at a remote site without a shared Patient index instructs a nurse to perform
// a test. The testing is carried out without prior entry of a request into the LIS. Once performed, the results, along with
// the patient information are transmitted to the LIS. In some circumstances, the LIS may add clinical interpretation to
// this and report it back to the placing system and/or another system. In order to allow for this to take place, the requester,
// location, etc., information is required.
//
// To allow the sending system to correlate every result with its associated order, the receiving system will return the placer
// order number in the ORC segment of the ORA^R33 message. If the receiving system cannot place an order it must returning an
// application level error description in the Application Acknowledgement Message MSA Text Message field.
//
// The sending system must return a commit-level acknowledgement in response to the ORA^R33 message.
type ORU_R30 struct {
	HL7                HL7Name                      `hl7:",name=ORU_R30,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	PID                *PID                         `hl7:"4,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"5,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"6,display=Participation Information"`
	Patientobservation []ORU_R30_Patientobservation `hl7:",display=Patient_observation"`
	Visit              *ORU_R30_Visit               `hl7:",display=Visit"`
	ORC                *ORC                         `hl7:"12,required,display=Common Order"`
	OBR                *OBR                         `hl7:"13,required,display=Observation Request"`
	NTE                []NTE                        `hl7:"14,display=Notes And Comments"`
	PRT2               []PRT                        `hl7:"15,display=Participation Information"`
	Timingqty          []ORU_R30_Timingqty          `hl7:",display=Timing_qty"`
	Observation        []ORU_R30_Observation        `hl7:",required,display=Observation"`
}

// Patientobservation
type ORU_R31_Patientobservation struct {
	HL7 HL7Name `hl7:",name=ORU_R31_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"7,required,display=Observation/result"`
	PRT []PRT   `hl7:"8,display=Participation Information"`
}

// Visit
type ORU_R31_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R31_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Timingqty
type ORU_R31_Timingqty struct {
	HL7 HL7Name `hl7:",name=ORU_R31_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/quantity Relationship"`
}

// Observation
type ORU_R31_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R31_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/result"`
	PRT []PRT   `hl7:"19,display=Participation Information"`
	NTE []NTE   `hl7:"20,display=Notes And Comments"`
}

// Unsolicited New Point-Of-Care Observation Message - Search For An Order
//
// This event trigger instructs the receiving system to search for an existing order for the observation(s) contained in
// the message.
//
// In this case, the sending system does not know if an order has been placed. This transaction instructs the receiving system
// to search for an existing order for the associated results. If the receiver finds an existing order, it should return the
// Placer ID to the sender in the ORC segment of an OML^O21 message. This information allows the Observation Reviewer to correlate
// every result with its associated order.
//
// The institution’s business rules will determine what the receiving system does if it can’t find a matching order. Possibilities
// include automatically placing an order (as in trigger event R30), or returning an application level error description
// in the Application Acknowledgement MSA Text Message field..
//
// If it is necessary to pass specific information related to the Patient, responsible Doctor, placing doctor, patient location
// etc, there is a requirement for the inclusion of a PV1 and PD1 segment in the ORU message type (see also ORU^R30 for description).
type ORU_R31 struct {
	HL7                HL7Name                      `hl7:",name=ORU_R31,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	PID                *PID                         `hl7:"4,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"5,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"6,display=Participation Information"`
	Patientobservation []ORU_R31_Patientobservation `hl7:",display=Patient_observation"`
	Visit              *ORU_R31_Visit               `hl7:",display=Visit"`
	ORC                *ORC                         `hl7:"12,required,display=Common Order"`
	OBR                *OBR                         `hl7:"13,required,display=Observation Request"`
	NTE                []NTE                        `hl7:"14,display=Notes And Comments"`
	PRT2               []PRT                        `hl7:"15,display=Participation Information"`
	Timingqty          []ORU_R31_Timingqty          `hl7:",display=Timing_qty"`
	Observation        []ORU_R31_Observation        `hl7:",required,display=Observation"`
}

// Patientobservation
type ORU_R32_Patientobservation struct {
	HL7 HL7Name `hl7:",name=ORU_R32_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"7,required,display=Observation/result"`
	PRT []PRT   `hl7:"8,display=Participation Information"`
}

// Visit
type ORU_R32_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R32_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Timingqty
type ORU_R32_Timingqty struct {
	HL7 HL7Name `hl7:",name=ORU_R32_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/quantity Relationship"`
}

// Observation
type ORU_R32_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R32_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/result"`
	PRT []PRT   `hl7:"19,display=Participation Information"`
	NTE []NTE   `hl7:"20,display=Notes And Comments"`
}

// Unsolicited Pre-Ordered Point-Of-Care Observation
//
// This event trigger instructs the receiver to place the result with the order information included in the message.
//
// From a traditional clinical laboratory perspective, this event trigger’s use case is probably the predominant (if not
// exclusive) one. However, in the POC environment, it is actually uncommon to have an order already generated when a test
// is performed. It does happen sometimes, though. If it is necessary to pass specific information related to the Patient,
// responsible Doctor, placing doctor, patient location, etc., there is a requirement for the inclusion of a PV1 and PD1 segment
// in the ORU message type (see also ORU^R30 for description).
//
// If the receiving system accepts both the order and the result, it will return an ORA^R33 Application Acknowledgement message
// with the acknowledgement code of AA. A comment may be included in the Acknowledgement Message MSA Text Message field.
//
// If the receiving system is unable to accept both the order and the result, no order or result should be placed and an ACK^33
// Application Acknowledgement message must be returned to the sender with the error identified in the MSA Text Message field.
//
// The sending system must return a commit-level acknowledgement in response to the ORA^R33 message.
type ORU_R32 struct {
	HL7                HL7Name                      `hl7:",name=ORU_R32,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential Segment"`
	PID                *PID                         `hl7:"4,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"5,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"6,display=Participation Information"`
	Patientobservation []ORU_R32_Patientobservation `hl7:",display=Patient_observation"`
	Visit              *ORU_R32_Visit               `hl7:",display=Visit"`
	ORC                *ORC                         `hl7:"12,required,display=Common Order"`
	OBR                *OBR                         `hl7:"13,required,display=Observation Request"`
	NTE                []NTE                        `hl7:"14,display=Notes And Comments"`
	PRT2               []PRT                        `hl7:"15,display=Participation Information"`
	Timingqty          []ORU_R32_Timingqty          `hl7:",display=Timing_qty"`
	Observation        []ORU_R32_Observation        `hl7:",required,display=Observation"`
}

// Shipment
type OSM_R26_Shipment struct {
	HL7                 HL7Name                       `hl7:",name=OSM_R26_Shipment,type=tg"`
	SHP                 *SHP                          `hl7:"4,required,display=Shipment"`
	PRT                 []PRT                         `hl7:"5,required,display=Participation Information"`
	Shippingobservation []OSM_R26_Shippingobservation `hl7:",display=Shipping_observation"`
	Package             []OSM_R26_Package             `hl7:",required,display=Package"`
}

// Shippingobservation
type OSM_R26_Shippingobservation struct {
	HL7 HL7Name `hl7:",name=OSM_R26_Shippingobservation,type=tg"`
	OBX *OBX    `hl7:"6,required,display=Observation/result"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Package
type OSM_R26_Package struct {
	HL7      HL7Name            `hl7:",name=OSM_R26_Package,type=tg"`
	PAC      *PAC               `hl7:"8,required,display=Shipment Package"`
	PRT      []PRT              `hl7:"9,display=Participation Information"`
	Specimen []OSM_R26_Specimen `hl7:",display=Specimen"`
}

// Specimen
type OSM_R26_Specimen struct {
	HL7                                     HL7Name                                          `hl7:",name=OSM_R26_Specimen,type=tg"`
	SPM                                     *SPM                                             `hl7:"10,required,display=Specimen"`
	PRT                                     []PRT                                            `hl7:"11,display=Participation Information"`
	Specimenobservation                     []OSM_R26_Specimenobservation                    `hl7:",display=Specimen_observation"`
	Container                               []OSM_R26_Container                              `hl7:",display=Container"`
	Subjectpersonanimalidentification       *OSM_R26_Subjectpersonanimalidentification       `hl7:",display=Subject_person_animal_identification"`
	Subjectpopulationlocationidentification *OSM_R26_Subjectpopulationlocationidentification `hl7:",display=Subject_population_location_identification"`
}

// Specimenobservation
type OSM_R26_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OSM_R26_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/result"`
	PRT []PRT   `hl7:"13,display=Participation Information"`
}

// Container
type OSM_R26_Container struct {
	HL7                  HL7Name                        `hl7:",name=OSM_R26_Container,type=tg"`
	SAC                  *SAC                           `hl7:"14,required,display=Specimen Container Detail"`
	Containerobservation []OSM_R26_Containerobservation `hl7:",display=Container_observation"`
}

// Containerobservation
type OSM_R26_Containerobservation struct {
	HL7 HL7Name `hl7:",name=OSM_R26_Containerobservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/result"`
	PRT []PRT   `hl7:"16,display=Participation Information"`
}

// Subjectpersonanimalidentification
type OSM_R26_Subjectpersonanimalidentification struct {
	HL7                HL7Name                      `hl7:",name=OSM_R26_Subjectpersonanimalidentification,type=tg"`
	PID                *PID                         `hl7:"17,required,display=Patient Identification"`
	PRT                []PRT                        `hl7:"18,display=Participation Information"`
	Patientobservation []OSM_R26_Patientobservation `hl7:",display=Patient_observation"`
	NK1                []NK1                        `hl7:"21,display=Next Of Kin / Associated Parties"`
}

// Patientobservation
type OSM_R26_Patientobservation struct {
	HL7 HL7Name `hl7:",name=OSM_R26_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/result"`
	PRT []PRT   `hl7:"20,display=Participation Information"`
}

// Subjectpopulationlocationidentification
type OSM_R26_Subjectpopulationlocationidentification struct {
	HL7                     HL7Name                           `hl7:",name=OSM_R26_Subjectpopulationlocationidentification,type=tg"`
	PV1                     *PV1                              `hl7:"22,required,display=Patient Visit"`
	PRT                     []PRT                             `hl7:"23,display=Participation Information"`
	Patientvisitobservation []OSM_R26_Patientvisitobservation `hl7:",display=Patient_visit_observation"`
	PID                     *PID                              `hl7:"26,display=Patient Identification"`
	PRT2                    []PRT                             `hl7:"27,display=Participation Information"`
	NK1                     []NK1                             `hl7:"28,display=Next Of Kin / Associated Parties"`
}

// Patientvisitobservation
type OSM_R26_Patientvisitobservation struct {
	HL7 HL7Name `hl7:",name=OSM_R26_Patientvisitobservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	PRT []PRT   `hl7:"25,display=Participation Information"`
}

// Unsolicited Specimen Shipment Manifest Message
//
// The OSM^R26 Unsolicited Specimen Shipment Manifest message is used to communicate the contents of a specimen shipment
// to a specimen receiver (typically a laboratory). The message documents details regard the following:
// - Shipment information including sender, receiver, shipper, shipping container, etc.;
// - Specimens in the shipment;
// - Specimen containers; and,
// - Identification of persons/places/things associated with the specimens.
type OSM_R26 struct {
	HL7      HL7Name            `hl7:",name=OSM_R26,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	Shipment []OSM_R26_Shipment `hl7:",required,display=Shipment"`
}

// Patient
type OUL_R22_Patient struct {
	HL7                HL7Name                      `hl7:",name=OUL_R22_Patient,type=tg"`
	PID                *PID                         `hl7:"5,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"6,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"7,display=Participation Information"`
	NTE                []NTE                        `hl7:"8,display=Notes And Comments"`
	Patientobservation []OUL_R22_Patientobservation `hl7:",display=Patient_observation"`
	Visit              *OUL_R22_Visit               `hl7:",display=Visit"`
}

// Patientobservation
type OUL_R22_Patientobservation struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"9,required,display=Observation/result"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Visit
type OUL_R22_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Visit,type=tg"`
	PV1 *PV1    `hl7:"11,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"12,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"13,display=Participation Information"`
}

// Specimen
type OUL_R22_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OUL_R22_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"15,required,display=Specimen"`
	Specimenobservation []OUL_R22_Specimenobservation `hl7:",display=Specimen_observation"`
	Container           []OUL_R22_Container           `hl7:",display=Container"`
	Order               []OUL_R22_Order               `hl7:",required,display=Order"`
}

// Specimenobservation
type OUL_R22_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/result"`
	PRT []PRT   `hl7:"17,display=Participation Information"`
}

// Container
type OUL_R22_Container struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Container,type=tg"`
	SAC *SAC    `hl7:"18,required,display=Specimen Container Detail"`
	INV *INV    `hl7:"19,display=Inventory Detail"`
}

// Order
type OUL_R22_Order struct {
	HL7       HL7Name             `hl7:",name=OUL_R22_Order,type=tg"`
	OBR       *OBR                `hl7:"20,required,display=Observation Request"`
	ORC       *ORC                `hl7:"21,display=Common Order"`
	NTE       []NTE               `hl7:"22,display=Notes And Comments"`
	PRT       []PRT               `hl7:"23,display=Participation Information"`
	Timingqty []OUL_R22_Timingqty `hl7:",display=Timing_qty"`
	Result    []OUL_R22_Result    `hl7:",display=Result"`
	CTI       []CTI               `hl7:"31,display=Clinical Trial Identification"`
}

// Timingqty
type OUL_R22_Timingqty struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Result
type OUL_R22_Result struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Result,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/result"`
	PRT []PRT   `hl7:"27,display=Participation Information"`
	TCD *TCD    `hl7:"28,display=Test Code Detail"`
	SID []SID   `hl7:"29,display=Substance Identifier"`
	NTE []NTE   `hl7:"30,display=Notes And Comments"`
}

// Unsolicited Specimen Oriented Observation Message
//
// This message was designed to accommodate specimen oriented testing. It should be applicable to container-less testing
// (e.g., elephant on a table) and laboratory automation systems requiring container.
//
// Generally this construct allows transfer of multiple results related to a specimen from a patient, where this specimen
// has been in none, one, or multiple containers.
//
// In addition to the patient results themselves it permits the communication of the following kinds of information:
// - Analysis results of a non patient related sample (e.g., environmental) – patient related segments (e.g., PID, PD1, PV1,
// PV2) are optional.
// - Analysis results to a particular container with QC sample and the lot and manufacturer information about this sample
// (SAC-INV segments) – however for this purpose the "Unsolicited Specimen Container Oriented Observation Message" (OUL^R23)
// is recommended due to explicit relation between the observation and the container.
// - Basic identification data (lot, manufacturer, etc.) of the reagents and other substances involved in the generation
// of analysis results (TCD-SID segments).
//
// Refer to Chapter 13 Laboratory Automation for additional examples of usage of SAC.
type OUL_R22 struct {
	HL7      HL7Name            `hl7:",name=OUL_R22,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	NTE      *NTE               `hl7:"4,display=Notes And Comments"`
	Patient  *OUL_R22_Patient   `hl7:",display=Patient"`
	NK1      []NK1              `hl7:"14,display=Next Of Kin / Associated Parties"`
	Specimen []OUL_R22_Specimen `hl7:",required,display=Specimen"`
	DSC      *DSC               `hl7:"32,display=Continuation Pointer"`
}

// Patient
type OUL_R23_Patient struct {
	HL7                HL7Name                      `hl7:",name=OUL_R23_Patient,type=tg"`
	PID                *PID                         `hl7:"5,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"6,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"7,display=Participation Information"`
	NTE                []NTE                        `hl7:"8,display=Notes And Comments"`
	Patientobservation []OUL_R23_Patientobservation `hl7:",display=Patient_observation"`
	Visit              *OUL_R23_Visit               `hl7:",display=Visit"`
}

// Patientobservation
type OUL_R23_Patientobservation struct {
	HL7 HL7Name `hl7:",name=OUL_R23_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"9,required,display=Observation/result"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Visit
type OUL_R23_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R23_Visit,type=tg"`
	PV1 *PV1    `hl7:"11,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"12,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"13,display=Participation Information"`
}

// Specimen
type OUL_R23_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OUL_R23_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"15,required,display=Specimen"`
	Specimenobservation []OUL_R23_Specimenobservation `hl7:",display=Specimen_observation"`
	Container           []OUL_R23_Container           `hl7:",required,display=Container"`
}

// Specimenobservation
type OUL_R23_Specimenobservation struct {
	HL7 HL7Name `hl7:",name=OUL_R23_Specimenobservation,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/result"`
	PRT []PRT   `hl7:"17,display=Participation Information"`
}

// Container
type OUL_R23_Container struct {
	HL7   HL7Name         `hl7:",name=OUL_R23_Container,type=tg"`
	SAC   *SAC            `hl7:"18,required,display=Specimen Container Detail"`
	INV   *INV            `hl7:"19,display=Inventory Detail"`
	Order []OUL_R23_Order `hl7:",required,display=Order"`
}

// Order
type OUL_R23_Order struct {
	HL7       HL7Name             `hl7:",name=OUL_R23_Order,type=tg"`
	OBR       *OBR                `hl7:"20,required,display=Observation Request"`
	ORC       *ORC                `hl7:"21,display=Common Order"`
	NTE       []NTE               `hl7:"22,display=Notes And Comments"`
	PRT       []PRT               `hl7:"23,display=Participation Information"`
	Timingqty []OUL_R23_Timingqty `hl7:",display=Timing_qty"`
	Result    []OUL_R23_Result    `hl7:",display=Result"`
	CTI       []CTI               `hl7:"31,display=Clinical Trial Identification"`
}

// Timingqty
type OUL_R23_Timingqty struct {
	HL7 HL7Name `hl7:",name=OUL_R23_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Result
type OUL_R23_Result struct {
	HL7 HL7Name `hl7:",name=OUL_R23_Result,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/result"`
	PRT []PRT   `hl7:"27,display=Participation Information"`
	TCD *TCD    `hl7:"28,display=Test Code Detail"`
	SID []SID   `hl7:"29,display=Substance Identifier"`
	NTE []NTE   `hl7:"30,display=Notes And Comments"`
}

// Unsolicited Specimen Container Oriented Observation Message
//
// This message was designed to accommodate specimen oriented testing. It should be applicable to, for example, laboratory
// automation systems requiring container.
//
// Generally this construct allows transfer of multiple results related to one or more specific containers with one or more
// specimens from a patient.
//
// In addition to the patient results themselves it permits the communication of the following kinds of information:
// - Analysis results of a non patient related sample (e.g., environmental) – patient related segments (e.g., PID, PD1, PV1,
// PV2) are optional.
// - Analysis results to a particular container with QC sample and the lot and manufacturer information about this sample
// (SAC-INV segments).
// - Basic identification data (lot, manufacturer, etc.) of the reagents and other substances involved in the generation
// of analysis results (TCD-SID segments).
//
// Refer to Chapter 13 Laboratory Automation for additional examples of usage of SAC.
type OUL_R23 struct {
	HL7      HL7Name            `hl7:",name=OUL_R23,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	NTE      *NTE               `hl7:"4,display=Notes And Comments"`
	Patient  *OUL_R23_Patient   `hl7:",display=Patient"`
	NK1      []NK1              `hl7:"14,display=Next Of Kin / Associated Parties"`
	Specimen []OUL_R23_Specimen `hl7:",required,display=Specimen"`
	DSC      *DSC               `hl7:"32,display=Continuation Pointer"`
}

// Patient
type OUL_R24_Patient struct {
	HL7                HL7Name                      `hl7:",name=OUL_R24_Patient,type=tg"`
	PID                *PID                         `hl7:"5,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"6,display=Patient Additional Demographic"`
	PRT                []PRT                        `hl7:"7,display=Participation Information"`
	NTE                []NTE                        `hl7:"8,display=Notes And Comments"`
	Patientobservation []OUL_R24_Patientobservation `hl7:",display=Patient_observation"`
	Visit              *OUL_R24_Visit               `hl7:",display=Visit"`
}

// Patientobservation
type OUL_R24_Patientobservation struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Patientobservation,type=tg"`
	OBX *OBX    `hl7:"9,required,display=Observation/result"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Visit
type OUL_R24_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Visit,type=tg"`
	PV1 *PV1    `hl7:"11,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"12,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"13,display=Participation Information"`
}

// Order
type OUL_R24_Order struct {
	HL7       HL7Name             `hl7:",name=OUL_R24_Order,type=tg"`
	OBR       *OBR                `hl7:"15,required,display=Observation Request"`
	ORC       *ORC                `hl7:"16,display=Common Order"`
	NTE       []NTE               `hl7:"17,display=Notes And Comments"`
	PRT       []PRT               `hl7:"18,display=Participation Information"`
	Timingqty []OUL_R24_Timingqty `hl7:",display=Timing_qty"`
	Specimen  []OUL_R24_Specimen  `hl7:",display=Specimen"`
	DSC       *DSC                `hl7:"32,display=Continuation Pointer"`
}

// Timingqty
type OUL_R24_Timingqty struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"19,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"20,display=Timing/quantity Relationship"`
}

// Specimen
type OUL_R24_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OUL_R24_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"21,required,display=Specimen"`
	Specimenobservation []OUL_R24_Specimenobservation `hl7:",display=Specimen_observation"`
	Result              []OUL_R24_Result              `hl7:",display=Result"`
	CTI                 []CTI                         `hl7:"31,display=Clinical Trial Identification"`
}

// Specimenobservation
type OUL_R24_Specimenobservation struct {
	HL7       HL7Name             `hl7:",name=OUL_R24_Specimenobservation,type=tg"`
	OBX       *OBX                `hl7:"22,required,display=Observation/result"`
	PRT       []PRT               `hl7:"23,display=Participation Information"`
	Container []OUL_R24_Container `hl7:",display=Container"`
}

// Container
type OUL_R24_Container struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Container,type=tg"`
	SAC *SAC    `hl7:"24,required,display=Specimen Container Detail"`
	INV *INV    `hl7:"25,display=Inventory Detail"`
}

// Result
type OUL_R24_Result struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Result,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/result"`
	PRT []PRT   `hl7:"27,display=Participation Information"`
	TCD *TCD    `hl7:"28,display=Test Code Detail"`
	SID []SID   `hl7:"29,display=Substance Identifier"`
	NTE []NTE   `hl7:"30,display=Notes And Comments"`
}

// Unsolicited Order Oriented Observation Message
//
// This message was designed to accommodate multi-specimen oriented testing. It should be applicable to, e.g., laboratory
// automation systems requiring container.
//
// Generally this construct allows transfer of multiple results, each one related to none, one or more specific containers
// with one or more specimens from a patient. (Example: Creatinine Clearance result with detailed information about the
// urine and serum specimens and their containers.)
//
// In addition to the patient results themselves it permits the communication of the following kinds of information:
// - Analysis results of a non patient related sample (e.g., environmental) – patient related segments (e.g., PID, PD1, PV1,
// PV2) are optional.
// - Analysis results to a particular container with QC sample and the lot and manufacturer information about this sample
// (SAC-INV segments).
// - Basic identification data (lot, manufacturer, etc.) of the reagents and other substances involved in the generation
// of analysis results (TCD-SID segments).
//
// Refer to Chapter 13 Laboratory Automation for additional examples of usage of SAC.
type OUL_R24 struct {
	HL7     HL7Name          `hl7:",name=OUL_R24,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     *NTE             `hl7:"4,display=Notes And Comments"`
	Patient *OUL_R24_Patient `hl7:",display=Patient"`
	NK1     []NK1            `hl7:"14,display=Next Of Kin / Associated Parties"`
	Order   []OUL_R24_Order  `hl7:",required,display=Order"`
}

// Visit
type PEX_P07_Visit struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Experience
type PEX_P07_Experience struct {
	HL7            HL7Name                  `hl7:",name=PEX_P07_Experience,type=tg"`
	PES            *PES                     `hl7:"12,required,display=Product Experience Sender"`
	Pexobservation []PEX_P07_Pexobservation `hl7:",required,display=Pex_observation"`
}

// Pexobservation
type PEX_P07_Pexobservation struct {
	HL7      HL7Name            `hl7:",name=PEX_P07_Pexobservation,type=tg"`
	PEO      *PEO               `hl7:"13,required,display=Product Experience Observation"`
	Pexcause []PEX_P07_Pexcause `hl7:",required,display=Pex_cause"`
}

// Pexcause
type PEX_P07_Pexcause struct {
	HL7              HL7Name                    `hl7:",name=PEX_P07_Pexcause,type=tg"`
	PCR              *PCR                       `hl7:"14,required,display=Possible Causal Relationship"`
	Rxorder          *PEX_P07_Rxorder           `hl7:",display=Rx_order"`
	Rxadministration []PEX_P07_Rxadministration `hl7:",display=Rx_administration"`
	PRB              []PRB                      `hl7:"23,display=Problem Details"`
	Observation      []PEX_P07_Observation      `hl7:",display=Observation"`
	NTE              []NTE                      `hl7:"26,display=Notes And Comments"`
	Associatedperson *PEX_P07_Associatedperson  `hl7:",display=Associated_person"`
	Study            []PEX_P07_Study            `hl7:",display=Study"`
}

// Rxorder
type PEX_P07_Rxorder struct {
	HL7       HL7Name             `hl7:",name=PEX_P07_Rxorder,type=tg"`
	RXE       *RXE                `hl7:"15,required,display=Pharmacy/treatment Encoded Order"`
	PRT       []PRT               `hl7:"16,display=Participation Information"`
	Timingqty []PEX_P07_Timingqty `hl7:",required,display=Timing_qty"`
	RXR       []RXR               `hl7:"19,display=Pharmacy/treatment Route"`
}

// Timingqty
type PEX_P07_Timingqty struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Rxadministration
type PEX_P07_Rxadministration struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Rxadministration,type=tg"`
	RXA *RXA    `hl7:"20,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"21,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"22,display=Participation Information"`
}

// Observation
type PEX_P07_Observation struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Observation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	PRT []PRT   `hl7:"25,display=Participation Information"`
}

// Associatedperson
type PEX_P07_Associatedperson struct {
	HL7                   HL7Name                         `hl7:",name=PEX_P07_Associatedperson,type=tg"`
	NK1                   *NK1                            `hl7:"27,required,display=Next Of Kin / Associated Parties"`
	Associatedrxorder     *PEX_P07_Associatedrxorder      `hl7:",display=Associated_rx_order"`
	Associatedrxadmin     []PEX_P07_Associatedrxadmin     `hl7:",display=Associated_rx_admin"`
	PRB                   []PRB                           `hl7:"36,display=Problem Details"`
	Associatedobservation []PEX_P07_Associatedobservation `hl7:",display=Associated_observation"`
}

// Associatedrxorder
type PEX_P07_Associatedrxorder struct {
	HL7          HL7Name                `hl7:",name=PEX_P07_Associatedrxorder,type=tg"`
	RXE          *RXE                   `hl7:"28,required,display=Pharmacy/treatment Encoded Order"`
	PRT          []PRT                  `hl7:"29,display=Participation Information"`
	Nk1timingqty []PEX_P07_Nk1timingqty `hl7:",required,display=Nk1_timing_qty"`
	RXR          []RXR                  `hl7:"32,display=Pharmacy/treatment Route"`
}

// Nk1timingqty
type PEX_P07_Nk1timingqty struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Nk1timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"30,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"31,display=Timing/quantity Relationship"`
}

// Associatedrxadmin
type PEX_P07_Associatedrxadmin struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Associatedrxadmin,type=tg"`
	RXA *RXA    `hl7:"33,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"34,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"35,display=Participation Information"`
}

// Associatedobservation
type PEX_P07_Associatedobservation struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Associatedobservation,type=tg"`
	OBX *OBX    `hl7:"37,required,display=Observation/result"`
	PRT []PRT   `hl7:"38,display=Participation Information"`
}

// Study
type PEX_P07_Study struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Study,type=tg"`
	CSR *CSR    `hl7:"39,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"40,display=Clinical Study Phase"`
}

// Unsolicited initial individual product experience report
//
// The primary application of this message is to transfer information related to an adverse event occurring while a patient
// was exposed to a product.
//
// The PID segment provides the patient identification information including institutional identification numbers,
// date of birth and in the case of patients who die, information about their death. Patients are frequently identified only
// by their initials which can be represented in the PID segment, e.g., the initials JMO would appear as J^M^O in the name field
// of the PID segment. The EVN segment identifies the type of transaction that is being sent -- primarily it specifies who the
// sender is and implies which information is expected to be included in the message. A message sent from a healthcare provider,
// for example, might contain minimal information, while a message from a pharmaceutical manufacturer might contain nearly
// complete information.
//
// The PES or Product Experience Sender segment provides information about the message sender and its knowledge of the event.
// The heart of the product experience message is the product experience observation (PEO) segment and the PCR segments clustered
// under it. The PEO segment identifies a clinical event and the PCR segments identify products which are potentially causally
// related to the event. There may be more than one product which is potentially related to the event so multiple PCR segments
// can be included. RXE and RXR segments can be repeated and provide information about the products the patient was exposed
// to at the time of the event (typically excluding those used to treat the event). Details about the administration of the
// products identified in the PCR segments should be described with RXE and RXR segments. Repeated PRB segments provide information
// about diagnoses which represent comorbid conditions. The repeated OBX segments are used to send patient observations
// such as height, weight, last menstrual period, and laboratory results. Analytical commentary can be included in the NTE
// segment. This commentary will typically be the sender’s analysis of the event and the potentially causally related products.
// Finally, the CSR and CSP segments can optionally be included if the event occurred during a formal clinical trial in order
// to describe the trial.
//
// When a product experience relates to an exposure which occurred indirectly (transmammary or transplacentally for example),
// the individual experiencing the adverse effect — the fetus or child — would be described in the PID segment and the individual
// via which they are exposed in the NK1 segment. The first set of RXE segments would typically indicate the drugs which to which
// the fetus or child was exposed. Additional codes for the route are defined in this Appendix to allow the suspected routes
// of exposure to be represented. The second set of RXE/RXR segment - those clustered under the NK1 segment - would represent
// the route by which the mother or father was exposed to the drug. Early spontaneous abortion would normally be treated as
// an adverse effect on the mother rather than on the fetus, and the PID would refer to the mother. The second set of PRB/OBX segments
// reflects the problems/observations associated with the individual via which they were exposed.
//
// Each message contains information about a single case including one patient (PID), at least one sender (PES), one or more
// events (PEO) and one or more suspected products (PCR and RXE/RXA) for a minimal message. The structure of the message allows
// actual administration information to be sent in the RXA if known; if administration information is unavailable, or the
// adverse reaction cannot be related to a single administration event, the RXE segment can be used to send prescription level
// information. Additional information may be included based on availability and regulatory requirements.
//
// The MSH segment specifies the character set (MSH-18) and the language (MSH-19) used in the PEX message.
// The PEX message is designed to accommodate required reporting of adverse product events to the responsible regulatory
// agencies. In the United States, the paper version of this report is Medwatch.
type PEX_P07 struct {
	HL7        HL7Name              `hl7:",name=PEX_P07,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	SFT        []SFT                `hl7:"2,display=Software Segment"`
	UAC        *UAC                 `hl7:"3,display=User Authentication Credential Segment"`
	EVN        *EVN                 `hl7:"4,required,display=Event Type"`
	PID        *PID                 `hl7:"5,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"6,display=Patient Additional Demographic"`
	PRT        []PRT                `hl7:"7,display=Participation Information"`
	NTE        []NTE                `hl7:"8,display=Notes And Comments"`
	Visit      *PEX_P07_Visit       `hl7:",display=Visit"`
	Experience []PEX_P07_Experience `hl7:",required,display=Experience"`
}

// Visit
type PEX_P08_Visit struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Experience
type PEX_P08_Experience struct {
	HL7            HL7Name                  `hl7:",name=PEX_P08_Experience,type=tg"`
	PES            *PES                     `hl7:"12,required,display=Product Experience Sender"`
	Pexobservation []PEX_P08_Pexobservation `hl7:",required,display=Pex_observation"`
}

// Pexobservation
type PEX_P08_Pexobservation struct {
	HL7      HL7Name            `hl7:",name=PEX_P08_Pexobservation,type=tg"`
	PEO      *PEO               `hl7:"13,required,display=Product Experience Observation"`
	Pexcause []PEX_P08_Pexcause `hl7:",required,display=Pex_cause"`
}

// Pexcause
type PEX_P08_Pexcause struct {
	HL7              HL7Name                    `hl7:",name=PEX_P08_Pexcause,type=tg"`
	PCR              *PCR                       `hl7:"14,required,display=Possible Causal Relationship"`
	Rxorder          *PEX_P08_Rxorder           `hl7:",display=Rx_order"`
	Rxadministration []PEX_P08_Rxadministration `hl7:",display=Rx_administration"`
	PRB              []PRB                      `hl7:"23,display=Problem Details"`
	Observation      []PEX_P08_Observation      `hl7:",display=Observation"`
	NTE              []NTE                      `hl7:"26,display=Notes And Comments"`
	Associatedperson *PEX_P08_Associatedperson  `hl7:",display=Associated_person"`
	Study            []PEX_P08_Study            `hl7:",display=Study"`
}

// Rxorder
type PEX_P08_Rxorder struct {
	HL7       HL7Name             `hl7:",name=PEX_P08_Rxorder,type=tg"`
	RXE       *RXE                `hl7:"15,required,display=Pharmacy/treatment Encoded Order"`
	PRT       []PRT               `hl7:"16,display=Participation Information"`
	Timingqty []PEX_P08_Timingqty `hl7:",required,display=Timing_qty"`
	RXR       []RXR               `hl7:"19,display=Pharmacy/treatment Route"`
}

// Timingqty
type PEX_P08_Timingqty struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/quantity Relationship"`
}

// Rxadministration
type PEX_P08_Rxadministration struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Rxadministration,type=tg"`
	RXA *RXA    `hl7:"20,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"21,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"22,display=Participation Information"`
}

// Observation
type PEX_P08_Observation struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Observation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	PRT []PRT   `hl7:"25,display=Participation Information"`
}

// Associatedperson
type PEX_P08_Associatedperson struct {
	HL7                   HL7Name                         `hl7:",name=PEX_P08_Associatedperson,type=tg"`
	NK1                   *NK1                            `hl7:"27,required,display=Next Of Kin / Associated Parties"`
	Associatedrxorder     *PEX_P08_Associatedrxorder      `hl7:",display=Associated_rx_order"`
	Associatedrxadmin     []PEX_P08_Associatedrxadmin     `hl7:",display=Associated_rx_admin"`
	PRB                   []PRB                           `hl7:"36,display=Problem Details"`
	Associatedobservation []PEX_P08_Associatedobservation `hl7:",display=Associated_observation"`
}

// Associatedrxorder
type PEX_P08_Associatedrxorder struct {
	HL7          HL7Name                `hl7:",name=PEX_P08_Associatedrxorder,type=tg"`
	RXE          *RXE                   `hl7:"28,required,display=Pharmacy/treatment Encoded Order"`
	PRT          []PRT                  `hl7:"29,display=Participation Information"`
	Nk1timingqty []PEX_P08_Nk1timingqty `hl7:",required,display=Nk1_timing_qty"`
	RXR          []RXR                  `hl7:"32,display=Pharmacy/treatment Route"`
}

// Nk1timingqty
type PEX_P08_Nk1timingqty struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Nk1timingqty,type=tg"`
	TQ1 *TQ1    `hl7:"30,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"31,display=Timing/quantity Relationship"`
}

// Associatedrxadmin
type PEX_P08_Associatedrxadmin struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Associatedrxadmin,type=tg"`
	RXA *RXA    `hl7:"33,required,display=Pharmacy/treatment Administration"`
	RXR *RXR    `hl7:"34,display=Pharmacy/treatment Route"`
	PRT []PRT   `hl7:"35,display=Participation Information"`
}

// Associatedobservation
type PEX_P08_Associatedobservation struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Associatedobservation,type=tg"`
	OBX *OBX    `hl7:"37,required,display=Observation/result"`
	PRT []PRT   `hl7:"38,display=Participation Information"`
}

// Study
type PEX_P08_Study struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Study,type=tg"`
	CSR *CSR    `hl7:"39,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"40,display=Clinical Study Phase"`
}

// Unsolicited update individual product experience report
//
// The primary application of this message is to transfer information related to an adverse event occurring while a patient
// was exposed to a product.
//
// The PID segment provides the patient identification information including institutional identification numbers,
// date of birth and in the case of patients who die, information about their death. Patients are frequently identified only
// by their initials which can be represented in the PID segment, e.g., the initials JMO would appear as J^M^O in the name field
// of the PID segment. The EVN segment identifies the type of transaction that is being sent -- primarily it specifies who the
// sender is and implies which information is expected to be included in the message. A message sent from a healthcare provider,
// for example, might contain minimal information, while a message from a pharmaceutical manufacturer might contain nearly
// complete information.
//
// The PES or Product Experience Sender segment provides information about the message sender and its knowledge of the event.
// The heart of the product experience message is the product experience observation (PEO) segment and the PCR segments clustered
// under it. The PEO segment identifies a clinical event and the PCR segments identify products which are potentially causally
// related to the event. There may be more than one product which is potentially related to the event so multiple PCR segments
// can be included. RXE and RXR segments can be repeated and provide information about the products the patient was exposed
// to at the time of the event (typically excluding those used to treat the event). Details about the administration of the
// products identified in the PCR segments should be described with RXE and RXR segments. Repeated PRB segments provide information
// about diagnoses which represent comorbid conditions. The repeated OBX segments are used to send patient observations
// such as height, weight, last menstrual period, and laboratory results. Analytical commentary can be included in the NTE
// segment. This commentary will typically be the sender’s analysis of the event and the potentially causally related products.
// Finally, the CSR and CSP segments can optionally be included if the event occurred during a formal clinical trial in order
// to describe the trial.
//
// When a product experience relates to an exposure which occurred indirectly (transmammary or transplacentally for example),
// the individual experiencing the adverse effect — the fetus or child — would be described in the PID segment and the individual
// via which they are exposed in the NK1 segment. The first set of RXE segments would typically indicate the drugs which to which
// the fetus or child was exposed. Additional codes for the route are defined in this Appendix to allow the suspected routes
// of exposure to be represented. The second set of RXE/RXR segment - those clustered under the NK1 segment - would represent
// the route by which the mother or father was exposed to the drug. Early spontaneous abortion would normally be treated as
// an adverse effect on the mother rather than on the fetus, and the PID would refer to the mother. The second set of PRB/OBX segments
// reflects the problems/observations associated with the individual via which they were exposed.
//
// Each message contains information about a single case including one patient (PID), at least one sender (PES), one or more
// events (PEO) and one or more suspected products (PCR and RXE/RXA) for a minimal message. The structure of the message allows
// actual administration information to be sent in the RXA if known; if administration information is unavailable, or the
// adverse reaction cannot be related to a single administration event, the RXE segment can be used to send prescription level
// information. Additional information may be included based on availability and regulatory requirements.
//
// The MSH segment specifies the character set (MSH-18) and the language (MSH-19) used in the PEX message.
// The PEX message is designed to accommodate required reporting of adverse product events to the responsible regulatory
// agencies. In the United States, the paper version of this report is Medwatch.
type PEX_P08 struct {
	HL7        HL7Name              `hl7:",name=PEX_P08,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	SFT        []SFT                `hl7:"2,display=Software Segment"`
	UAC        *UAC                 `hl7:"3,display=User Authentication Credential Segment"`
	EVN        *EVN                 `hl7:"4,required,display=Event Type"`
	PID        *PID                 `hl7:"5,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"6,display=Patient Additional Demographic"`
	PRT        []PRT                `hl7:"7,display=Participation Information"`
	NTE        []NTE                `hl7:"8,display=Notes And Comments"`
	Visit      *PEX_P08_Visit       `hl7:",display=Visit"`
	Experience []PEX_P08_Experience `hl7:",required,display=Experience"`
}

// Patientvisit
type PGL_PC6_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Goal
type PGL_PC6_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC6_Goal,type=tg"`
	GOL         *GOL                  `hl7:"7,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Goalrole    []PGL_PC6_Goalrole    `hl7:",display=Goal_role"`
	Pathway     []PGL_PC6_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC6_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC6_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC6_Order       `hl7:",display=Order"`
}

// Goalrole
type PGL_PC6_Goalrole struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Goalrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PGL_PC6_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Observation
type PGL_PC6_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Problem
type PGL_PC6_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC6_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	Problemrole        []PGL_PC6_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PGL_PC6_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PGL_PC6_Problemrole struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Problemrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Problemobservation
type PGL_PC6_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Order
type PGL_PC6_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC6_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	Orderdetail *PGL_PC6_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PGL_PC6_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PGL_PC6_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"24,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"25,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"26,display=Variance"`
	Orderobservation []PGL_PC6_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PGL_PC6_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	NTE []NTE   `hl7:"28,display=Notes And Comments"`
	VAR []VAR   `hl7:"29,display=Variance"`
}

// PC/ goal add
//
// This message is used to send goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.
type PGL_PC6 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC6,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PGL_PC6_Patientvisit `hl7:",display=Patient_visit"`
	Goal         []PGL_PC6_Goal        `hl7:",required,display=Goal"`
}

// Patientvisit
type PGL_PC7_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Goal
type PGL_PC7_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC7_Goal,type=tg"`
	GOL         *GOL                  `hl7:"7,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Goalrole    []PGL_PC7_Goalrole    `hl7:",display=Goal_role"`
	Pathway     []PGL_PC7_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC7_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC7_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC7_Order       `hl7:",display=Order"`
}

// Goalrole
type PGL_PC7_Goalrole struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Goalrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PGL_PC7_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Observation
type PGL_PC7_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Problem
type PGL_PC7_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC7_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	Problemrole        []PGL_PC7_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PGL_PC7_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PGL_PC7_Problemrole struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Problemrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Problemobservation
type PGL_PC7_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Order
type PGL_PC7_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC7_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	Orderdetail *PGL_PC7_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PGL_PC7_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PGL_PC7_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"24,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"25,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"26,display=Variance"`
	Orderobservation []PGL_PC7_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PGL_PC7_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	NTE []NTE   `hl7:"28,display=Notes And Comments"`
	VAR []VAR   `hl7:"29,display=Variance"`
}

// PC/ goal update
//
// This message is used to update goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.
type PGL_PC7 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC7,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PGL_PC7_Patientvisit `hl7:",display=Patient_visit"`
	Goal         []PGL_PC7_Goal        `hl7:",required,display=Goal"`
}

// Patientvisit
type PGL_PC8_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Goal
type PGL_PC8_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC8_Goal,type=tg"`
	GOL         *GOL                  `hl7:"7,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Goalrole    []PGL_PC8_Goalrole    `hl7:",display=Goal_role"`
	Pathway     []PGL_PC8_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC8_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC8_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC8_Order       `hl7:",display=Order"`
}

// Goalrole
type PGL_PC8_Goalrole struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Goalrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PGL_PC8_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Observation
type PGL_PC8_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Problem
type PGL_PC8_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC8_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	Problemrole        []PGL_PC8_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PGL_PC8_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PGL_PC8_Problemrole struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Problemrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Problemobservation
type PGL_PC8_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Order
type PGL_PC8_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC8_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	Orderdetail *PGL_PC8_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PGL_PC8_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PGL_PC8_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"24,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"25,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"26,display=Variance"`
	Orderobservation []PGL_PC8_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PGL_PC8_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	NTE []NTE   `hl7:"28,display=Notes And Comments"`
	VAR []VAR   `hl7:"29,display=Variance"`
}

// PC/ goal delete
//
// This message is used to delete goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.
type PGL_PC8 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC8,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PGL_PC8_Patientvisit `hl7:",display=Patient_visit"`
	Goal         []PGL_PC8_Goal        `hl7:",required,display=Goal"`
}

// Provider
type PIN_I07_Provider struct {
	HL7 HL7Name `hl7:",name=PIN_I07_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Guarantorinsurance
type PIN_I07_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=PIN_I07_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []PIN_I07_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type PIN_I07_Insurance struct {
	HL7 HL7Name `hl7:",name=PIN_I07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Unsolicited insurance information
//
// This trigger event is used by an entity or organization to transmit to a healthcare provider the insurance information
// on a specific patient.  Typically, the healthcare provider will be a primary care provider.
type PIN_I07 struct {
	HL7                HL7Name                     `hl7:",name=PIN_I07,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	Provider           []PIN_I07_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *PIN_I07_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes And Comments"`
}

// Add personnel record
//
// An event B01 signals to add a new record for healthcare administration information about an individual healthcare practitioner
// establishing a relationship between that practitioner and the institution.
// The EVN segment is used to indicate the effective or planned date.
type PMU_B01 struct {
	HL7 HL7Name `hl7:",name=PMU_B01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit Segment"`
	AFF []AFF   `hl7:"8,display=Professional Affiliation"`
	LAN []LAN   `hl7:"9,display=Language Detail"`
	EDU []EDU   `hl7:"10,display=Educational Detail"`
	CER []CER   `hl7:"11,display=Certificate Detail"`
	NK1 []NK1   `hl7:"12,display=Next Of Kin / Associated Parties"`
	ROL []ROL   `hl7:"13,display=Role"`
}

// Update personnel record
//
// An event B02 signals to update the record with the healthcare administration information about an individual healthcare
// practitioner.  This event should not be used to grant/revoke a certificate.
// The EVN segment is used to indicate the effective or planned date.
type PMU_B02 struct {
	HL7 HL7Name `hl7:",name=PMU_B02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit Segment"`
	AFF []AFF   `hl7:"8,display=Professional Affiliation"`
	LAN []LAN   `hl7:"9,display=Language Detail"`
	EDU []EDU   `hl7:"10,display=Educational Detail"`
	CER []CER   `hl7:"11,display=Certificate Detail"`
	NK1 []NK1   `hl7:"12,display=Next Of Kin / Associated Parties"`
	ROL []ROL   `hl7:"13,display=Role"`
}

// Delete personnel record
//
// An event B03 signals to delete the record with the healthcare administration information about an individual healthcare
// practitioner to correct erroneous entries.
// The EVN segment is used to indicate the effective or planned date.
type PMU_B03 struct {
	HL7 HL7Name `hl7:",name=PMU_B03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
}

// Active practicing person
//
// An event B04 signals that a staff member is available for work (e.g., schedules can be created) and has a relationship with
// the institution.  This message applies to STF-7.
type PMU_B04 struct {
	HL7 HL7Name `hl7:",name=PMU_B04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit Segment"`
}

// Deactivate practicing person
//
// An event B05 indicates that a staff member is temporarily unavailable for work, while maintaining a relationship with
// the institution.  This message applies to STF-7.
type PMU_B05 struct {
	HL7 HL7Name `hl7:",name=PMU_B05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit Segment"`
}

// Terminate practicing person
//
// An event B06 signals that the formal relationship between a staff member and the institution has ended (i.e., upon termination).
type PMU_B06 struct {
	HL7 HL7Name `hl7:",name=PMU_B06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit Segment"`
}

// Certificate
type PMU_B07_Certificate struct {
	HL7 HL7Name `hl7:",name=PMU_B07_Certificate,type=tg"`
	CER *CER    `hl7:"7,required,display=Certificate Detail"`
	ROL []ROL   `hl7:"8,display=Role"`
}

// Grant Certificate/Permission
//
// An event B07 indicates that a health professional is granted a certificate/permission for a special purpose.
//
// A permission is issued by an organization and documented in form of a certificate.  An update of a role results in an issuing
// of a new certificate.
//
// The EVN segment is used to indicate the effective or planned date.
type PMU_B07 struct {
	HL7         HL7Name               `hl7:",name=PMU_B07,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	STF         *STF                  `hl7:"5,required,display=Staff Identification"`
	PRA         *PRA                  `hl7:"6,display=Practitioner Detail"`
	Certificate []PMU_B07_Certificate `hl7:",display=Certificate"`
}

// Revoke Certificate/Permission
type PMU_B08 struct {
	HL7 HL7Name `hl7:",name=PMU_B08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA *PRA    `hl7:"6,display=Practitioner Detail"`
	CER []CER   `hl7:"7,display=Certificate Detail"`
}

// Patientvisit
type PPG_PCG_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPG_PCG_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCG_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Pathwayrole []PPG_PCG_Pathwayrole `hl7:",display=Pathway_role"`
	Goal        []PPG_PCG_Goal        `hl7:",display=Goal"`
}

// Pathwayrole
type PPG_PCG_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Goal
type PPG_PCG_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCG_Goal,type=tg"`
	GOL             *GOL                      `hl7:"12,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"13,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"14,display=Variance"`
	Goalrole        []PPG_PCG_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPG_PCG_Goalobservation `hl7:",display=Goal_observation"`
	Problem         []PPG_PCG_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCG_Order           `hl7:",display=Order"`
}

// Goalrole
type PPG_PCG_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_Goalrole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// Goalobservation
type PPG_PCG_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Problem
type PPG_PCG_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCG_Problem,type=tg"`
	PRB                *PRB                         `hl7:"19,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"20,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"21,display=Variance"`
	Problemrole        []PPG_PCG_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPG_PCG_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PPG_PCG_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_Problemrole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// Problemobservation
type PPG_PCG_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Order
type PPG_PCG_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCG_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	Orderdetail *PPG_PCG_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPG_PCG_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPG_PCG_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"27,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"28,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"29,display=Variance"`
	Orderobservation []PPG_PCG_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPG_PCG_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/result"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// PC/ pathway (goal-oriented) add
type PPG_PCG struct {
	HL7          HL7Name               `hl7:",name=PPG_PCG,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPG_PCG_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PPG_PCG_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PPG_PCH_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPG_PCH_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCH_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Pathwayrole []PPG_PCH_Pathwayrole `hl7:",display=Pathway_role"`
	Goal        []PPG_PCH_Goal        `hl7:",display=Goal"`
}

// Pathwayrole
type PPG_PCH_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Goal
type PPG_PCH_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCH_Goal,type=tg"`
	GOL             *GOL                      `hl7:"12,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"13,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"14,display=Variance"`
	Goalrole        []PPG_PCH_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPG_PCH_Goalobservation `hl7:",display=Goal_observation"`
	Problem         []PPG_PCH_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCH_Order           `hl7:",display=Order"`
}

// Goalrole
type PPG_PCH_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_Goalrole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// Goalobservation
type PPG_PCH_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Problem
type PPG_PCH_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCH_Problem,type=tg"`
	PRB                *PRB                         `hl7:"19,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"20,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"21,display=Variance"`
	Problemrole        []PPG_PCH_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPG_PCH_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PPG_PCH_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_Problemrole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// Problemobservation
type PPG_PCH_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Order
type PPG_PCH_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCH_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	Orderdetail *PPG_PCH_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPG_PCH_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPG_PCH_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"27,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"28,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"29,display=Variance"`
	Orderobservation []PPG_PCH_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPG_PCH_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/result"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// PC/ pathway (goal-oriented) update
type PPG_PCH struct {
	HL7          HL7Name               `hl7:",name=PPG_PCH,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPG_PCH_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PPG_PCH_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PPG_PCJ_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPG_PCJ_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCJ_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Pathwayrole []PPG_PCJ_Pathwayrole `hl7:",display=Pathway_role"`
	Goal        []PPG_PCJ_Goal        `hl7:",display=Goal"`
}

// Pathwayrole
type PPG_PCJ_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Goal
type PPG_PCJ_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCJ_Goal,type=tg"`
	GOL             *GOL                      `hl7:"12,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"13,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"14,display=Variance"`
	Goalrole        []PPG_PCJ_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPG_PCJ_Goalobservation `hl7:",display=Goal_observation"`
	Problem         []PPG_PCJ_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCJ_Order           `hl7:",display=Order"`
}

// Goalrole
type PPG_PCJ_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_Goalrole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// Goalobservation
type PPG_PCJ_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Problem
type PPG_PCJ_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCJ_Problem,type=tg"`
	PRB                *PRB                         `hl7:"19,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"20,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"21,display=Variance"`
	Problemrole        []PPG_PCJ_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPG_PCJ_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PPG_PCJ_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_Problemrole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// Problemobservation
type PPG_PCJ_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Order
type PPG_PCJ_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCJ_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	Orderdetail *PPG_PCJ_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPG_PCJ_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPG_PCJ_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"27,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"28,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"29,display=Variance"`
	Orderobservation []PPG_PCJ_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPG_PCJ_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/result"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// PC/ pathway (goal-oriented) delete
type PPG_PCJ struct {
	HL7          HL7Name               `hl7:",name=PPG_PCJ,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPG_PCJ_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PPG_PCJ_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PPP_PCB_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPP_PCB_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCB_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Pathwayrole []PPP_PCB_Pathwayrole `hl7:",display=Pathway_role"`
	Problem     []PPP_PCB_Problem     `hl7:",display=Problem"`
}

// Pathwayrole
type PPP_PCB_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Problem
type PPP_PCB_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCB_Problem,type=tg"`
	PRB                *PRB                         `hl7:"12,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"13,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"14,display=Variance"`
	Problemrole        []PPP_PCB_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPP_PCB_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PPP_PCB_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCB_Order              `hl7:",display=Order"`
}

// Problemrole
type PPP_PCB_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_Problemrole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// Problemobservation
type PPP_PCB_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Goal
type PPP_PCB_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCB_Goal,type=tg"`
	GOL             *GOL                      `hl7:"19,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"20,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"21,display=Variance"`
	Goalrole        []PPP_PCB_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPP_PCB_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PPP_PCB_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_Goalrole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// Goalobservation
type PPP_PCB_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Order
type PPP_PCB_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCB_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	Orderdetail *PPP_PCB_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPP_PCB_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPP_PCB_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"27,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"28,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"29,display=Variance"`
	Orderobservation []PPP_PCB_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPP_PCB_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/result"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// PC/ pathway (problem-oriented) add
type PPP_PCB struct {
	HL7          HL7Name               `hl7:",name=PPP_PCB,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPP_PCB_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PPP_PCB_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PPP_PCC_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPP_PCC_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCC_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Pathwayrole []PPP_PCC_Pathwayrole `hl7:",display=Pathway_role"`
	Problem     []PPP_PCC_Problem     `hl7:",display=Problem"`
}

// Pathwayrole
type PPP_PCC_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Problem
type PPP_PCC_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCC_Problem,type=tg"`
	PRB                *PRB                         `hl7:"12,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"13,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"14,display=Variance"`
	Problemrole        []PPP_PCC_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPP_PCC_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PPP_PCC_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCC_Order              `hl7:",display=Order"`
}

// Problemrole
type PPP_PCC_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_Problemrole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// Problemobservation
type PPP_PCC_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Goal
type PPP_PCC_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCC_Goal,type=tg"`
	GOL             *GOL                      `hl7:"19,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"20,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"21,display=Variance"`
	Goalrole        []PPP_PCC_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPP_PCC_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PPP_PCC_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_Goalrole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// Goalobservation
type PPP_PCC_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Order
type PPP_PCC_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCC_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	Orderdetail *PPP_PCC_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPP_PCC_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPP_PCC_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"27,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"28,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"29,display=Variance"`
	Orderobservation []PPP_PCC_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPP_PCC_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/result"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// PC/ pathway (problem-oriented) update
type PPP_PCC struct {
	HL7          HL7Name               `hl7:",name=PPP_PCC,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPP_PCC_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PPP_PCC_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PPP_PCD_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPP_PCD_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCD_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	Pathwayrole []PPP_PCD_Pathwayrole `hl7:",display=Pathway_role"`
	Problem     []PPP_PCD_Problem     `hl7:",display=Problem"`
}

// Pathwayrole
type PPP_PCD_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Problem
type PPP_PCD_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCD_Problem,type=tg"`
	PRB                *PRB                         `hl7:"12,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"13,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"14,display=Variance"`
	Problemrole        []PPP_PCD_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPP_PCD_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PPP_PCD_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCD_Order              `hl7:",display=Order"`
}

// Problemrole
type PPP_PCD_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_Problemrole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// Problemobservation
type PPP_PCD_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/result"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Goal
type PPP_PCD_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCD_Goal,type=tg"`
	GOL             *GOL                      `hl7:"19,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"20,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"21,display=Variance"`
	Goalrole        []PPP_PCD_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPP_PCD_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PPP_PCD_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_Goalrole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// Goalobservation
type PPP_PCD_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Order
type PPP_PCD_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCD_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	Orderdetail *PPP_PCD_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPP_PCD_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPP_PCD_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"27,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"28,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"29,display=Variance"`
	Orderobservation []PPP_PCD_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPP_PCD_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/result"`
	NTE []NTE   `hl7:"31,display=Notes And Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// PC/ pathway (problem-oriented) delete
type PPP_PCD struct {
	HL7          HL7Name               `hl7:",name=PPP_PCD,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPP_PCD_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PPP_PCD_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PPR_PC1_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Problem
type PPR_PC1_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC1_Problem,type=tg"`
	PRB                *PRB                         `hl7:"7,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"8,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"9,display=Variance"`
	Problemrole        []PPR_PC1_Problemrole        `hl7:",display=Problem_role"`
	Pathway            []PPR_PC1_Pathway            `hl7:",display=Pathway"`
	Problemobservation []PPR_PC1_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PPR_PC1_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC1_Order              `hl7:",display=Order"`
}

// Problemrole
type PPR_PC1_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Problemrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PPR_PC1_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Problemobservation
type PPR_PC1_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Goal
type PPR_PC1_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC1_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	Goalrole        []PPR_PC1_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPR_PC1_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PPR_PC1_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Goalrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Goalobservation
type PPR_PC1_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Order
type PPR_PC1_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC1_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	Orderdetail *PPR_PC1_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPR_PC1_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPR_PC1_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"24,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"25,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"26,display=Variance"`
	Orderobservation []PPR_PC1_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPR_PC1_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	NTE []NTE   `hl7:"28,display=Notes And Comments"`
	VAR []VAR   `hl7:"29,display=Variance"`
}

// PC/ problem add
//
// The patient problem message is used to send problems from one application to another (e.g., a point of care system to a clinical
// repository).  Many of the segments associated with this event are optional.  This optionality allows systems in need of
// this information to set up transactions that fulfill their requirements.
type PPR_PC1 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC1,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPR_PC1_Patientvisit `hl7:",display=Patient_visit"`
	Problem      []PPR_PC1_Problem     `hl7:",required,display=Problem"`
}

// Patientvisit
type PPR_PC2_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Problem
type PPR_PC2_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC2_Problem,type=tg"`
	PRB                *PRB                         `hl7:"7,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"8,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"9,display=Variance"`
	Problemrole        []PPR_PC2_Problemrole        `hl7:",display=Problem_role"`
	Pathway            []PPR_PC2_Pathway            `hl7:",display=Pathway"`
	Problemobservation []PPR_PC2_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PPR_PC2_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC2_Order              `hl7:",display=Order"`
}

// Problemrole
type PPR_PC2_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Problemrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PPR_PC2_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Problemobservation
type PPR_PC2_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Goal
type PPR_PC2_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC2_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	Goalrole        []PPR_PC2_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPR_PC2_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PPR_PC2_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Goalrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Goalobservation
type PPR_PC2_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Order
type PPR_PC2_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC2_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	Orderdetail *PPR_PC2_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPR_PC2_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPR_PC2_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"24,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"25,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"26,display=Variance"`
	Orderobservation []PPR_PC2_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPR_PC2_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	NTE []NTE   `hl7:"28,display=Notes And Comments"`
	VAR []VAR   `hl7:"29,display=Variance"`
}

// PC/ problem update
//
// The patient problem message is used to update problems from one application to another (e.g., a point of care system to a
// clinical repository).  Many of the segments associated with this event are optional.  This optionality allows systems
// in need of this information to set up transactions that fulfill their requirements.
type PPR_PC2 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC2,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPR_PC2_Patientvisit `hl7:",display=Patient_visit"`
	Problem      []PPR_PC2_Problem     `hl7:",required,display=Problem"`
}

// Patientvisit
type PPR_PC3_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Problem
type PPR_PC3_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC3_Problem,type=tg"`
	PRB                *PRB                         `hl7:"7,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"8,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"9,display=Variance"`
	Problemrole        []PPR_PC3_Problemrole        `hl7:",display=Problem_role"`
	Pathway            []PPR_PC3_Pathway            `hl7:",display=Pathway"`
	Problemobservation []PPR_PC3_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PPR_PC3_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC3_Order              `hl7:",display=Order"`
}

// Problemrole
type PPR_PC3_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Problemrole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PPR_PC3_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Problemobservation
type PPR_PC3_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/result"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Goal
type PPR_PC3_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC3_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	Goalrole        []PPR_PC3_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPR_PC3_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PPR_PC3_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Goalrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Goalobservation
type PPR_PC3_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Order
type PPR_PC3_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC3_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	Orderdetail *PPR_PC3_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPR_PC3_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPR_PC3_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"24,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"25,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"26,display=Variance"`
	Orderobservation []PPR_PC3_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPR_PC3_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/result"`
	NTE []NTE   `hl7:"28,display=Notes And Comments"`
	VAR []VAR   `hl7:"29,display=Variance"`
}

// PC/ problem delete
//
// The patient problem message is used to delete problems from one application to another (e.g., a point of care system to a
// clinical repository).  Many of the segments associated with this event are optional.  This optionality allows systems
// in need of this information to set up transactions that fulfill their requirements.
type PPR_PC3 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC3,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential Segment"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	Patientvisit *PPR_PC3_Patientvisit `hl7:",display=Patient_visit"`
	Problem      []PPR_PC3_Problem     `hl7:",required,display=Problem"`
}

// Patient
type PPT_PCL_Patient struct {
	HL7          HL7Name               `hl7:",name=PPT_PCL_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	Patientvisit *PPT_PCL_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PPT_PCL_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PPT_PCL_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Pathway
type PPT_PCL_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPT_PCL_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"11,required,display=Pathway"`
	NTE         []NTE                 `hl7:"12,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"13,display=Variance"`
	Pathwayrole []PPT_PCL_Pathwayrole `hl7:",display=Pathway_role"`
	Goal        []PPT_PCL_Goal        `hl7:",display=Goal"`
}

// Pathwayrole
type PPT_PCL_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// Goal
type PPT_PCL_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPT_PCL_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	Goalrole        []PPT_PCL_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PPT_PCL_Goalobservation `hl7:",display=Goal_observation"`
	Problem         []PPT_PCL_Problem         `hl7:",display=Problem"`
	Order           []PPT_PCL_Order           `hl7:",display=Order"`
}

// Goalrole
type PPT_PCL_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_Goalrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Goalobservation
type PPT_PCL_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Problem
type PPT_PCL_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPT_PCL_Problem,type=tg"`
	PRB                *PRB                         `hl7:"23,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"24,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"25,display=Variance"`
	Problemrole        []PPT_PCL_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPT_PCL_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PPT_PCL_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_Problemrole,type=tg"`
	ROL *ROL    `hl7:"26,required,display=Role"`
	VAR []VAR   `hl7:"27,display=Variance"`
}

// Problemobservation
type PPT_PCL_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/result"`
	NTE []NTE   `hl7:"29,display=Notes And Comments"`
}

// Order
type PPT_PCL_Order struct {
	HL7         HL7Name              `hl7:",name=PPT_PCL_Order,type=tg"`
	ORC         *ORC                 `hl7:"30,required,display=Common Order"`
	Orderdetail *PPT_PCL_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPT_PCL_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPT_PCL_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"31,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"32,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"33,display=Variance"`
	Orderobservation []PPT_PCL_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPT_PCL_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"34,required,display=Observation/result"`
	NTE []NTE   `hl7:"35,display=Notes And Comments"`
	VAR []VAR   `hl7:"36,display=Variance"`
}

// PC/ pathway (goal-oriented) query response
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by PPT (a response from the system responsible for maintaining the goal-oriented
// pathway information).
type PPT_PCL struct {
	HL7     HL7Name           `hl7:",name=PPT_PCL,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Withdrawn"`
	Patient []PPT_PCL_Patient `hl7:",required,display=Patient"`
}

// Patient
type PPV_PCA_Patient struct {
	HL7          HL7Name               `hl7:",name=PPV_PCA_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	Patientvisit *PPV_PCA_Patientvisit `hl7:",display=Patient_visit"`
	Goal         []PPV_PCA_Goal        `hl7:",required,display=Goal"`
}

// Patientvisit
type PPV_PCA_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Goal
type PPV_PCA_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPV_PCA_Goal,type=tg"`
	GOL             *GOL                      `hl7:"11,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"12,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"13,display=Variance"`
	Goalrole        []PPV_PCA_Goalrole        `hl7:",display=Goal_role"`
	Goalpathway     []PPV_PCA_Goalpathway     `hl7:",display=Goal_pathway"`
	Goalobservation []PPV_PCA_Goalobservation `hl7:",display=Goal_observation"`
	Problem         []PPV_PCA_Problem         `hl7:",display=Problem"`
	Order           []PPV_PCA_Order           `hl7:",display=Order"`
}

// Goalrole
type PPV_PCA_Goalrole struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_Goalrole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// Goalpathway
type PPV_PCA_Goalpathway struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_Goalpathway,type=tg"`
	PTH *PTH    `hl7:"16,required,display=Pathway"`
	VAR []VAR   `hl7:"17,display=Variance"`
}

// Goalobservation
type PPV_PCA_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/result"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Problem
type PPV_PCA_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPV_PCA_Problem,type=tg"`
	PRB                *PRB                         `hl7:"20,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"21,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"22,display=Variance"`
	Problemrole        []PPV_PCA_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PPV_PCA_Problemobservation `hl7:",display=Problem_observation"`
}

// Problemrole
type PPV_PCA_Problemrole struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_Problemrole,type=tg"`
	ROL *ROL    `hl7:"23,required,display=Role"`
	VAR []VAR   `hl7:"24,display=Variance"`
}

// Problemobservation
type PPV_PCA_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/result"`
	NTE []NTE   `hl7:"26,display=Notes And Comments"`
}

// Order
type PPV_PCA_Order struct {
	HL7         HL7Name              `hl7:",name=PPV_PCA_Order,type=tg"`
	ORC         *ORC                 `hl7:"27,required,display=Common Order"`
	Orderdetail *PPV_PCA_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PPV_PCA_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PPV_PCA_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"28,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"29,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"30,display=Variance"`
	Orderobservation []PPV_PCA_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PPV_PCA_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"31,required,display=Observation/result"`
	NTE []NTE   `hl7:"32,display=Notes And Comments"`
	VAR []VAR   `hl7:"33,display=Variance"`
}

// PC/ goal response
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by PPV (a response from the system responsible for maintaining the goal
// information).
type PPV_PCA struct {
	HL7     HL7Name           `hl7:",name=PPV_PCA,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Withdrawn"`
	Patient []PPV_PCA_Patient `hl7:",required,display=Patient"`
}

// Patient
type PRR_PC5_Patient struct {
	HL7          HL7Name               `hl7:",name=PRR_PC5_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	Patientvisit *PRR_PC5_Patientvisit `hl7:",display=Patient_visit"`
	Problem      []PRR_PC5_Problem     `hl7:",required,display=Problem"`
}

// Patientvisit
type PRR_PC5_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Problem
type PRR_PC5_Problem struct {
	HL7                HL7Name                      `hl7:",name=PRR_PC5_Problem,type=tg"`
	PRB                *PRB                         `hl7:"11,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"12,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"13,display=Variance"`
	Problemrole        []PRR_PC5_Problemrole        `hl7:",display=Problem_role"`
	Problempathway     []PRR_PC5_Problempathway     `hl7:",display=Problem_pathway"`
	Problemobservation []PRR_PC5_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PRR_PC5_Goal               `hl7:",display=Goal"`
	Order              []PRR_PC5_Order              `hl7:",display=Order"`
}

// Problemrole
type PRR_PC5_Problemrole struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_Problemrole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// Problempathway
type PRR_PC5_Problempathway struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_Problempathway,type=tg"`
	PTH *PTH    `hl7:"16,required,display=Pathway"`
	VAR []VAR   `hl7:"17,display=Variance"`
}

// Problemobservation
type PRR_PC5_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/result"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Goal
type PRR_PC5_Goal struct {
	HL7             HL7Name                   `hl7:",name=PRR_PC5_Goal,type=tg"`
	GOL             *GOL                      `hl7:"20,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"21,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"22,display=Variance"`
	Goalrole        []PRR_PC5_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PRR_PC5_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PRR_PC5_Goalrole struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_Goalrole,type=tg"`
	ROL *ROL    `hl7:"23,required,display=Role"`
	VAR []VAR   `hl7:"24,display=Variance"`
}

// Goalobservation
type PRR_PC5_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/result"`
	NTE []NTE   `hl7:"26,display=Notes And Comments"`
}

// Order
type PRR_PC5_Order struct {
	HL7         HL7Name              `hl7:",name=PRR_PC5_Order,type=tg"`
	ORC         *ORC                 `hl7:"27,required,display=Common Order"`
	Orderdetail *PRR_PC5_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PRR_PC5_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PRR_PC5_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"28,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"29,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"30,display=Variance"`
	Orderobservation []PRR_PC5_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PRR_PC5_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"31,required,display=Observation/result"`
	NTE []NTE   `hl7:"32,display=Notes And Comments"`
	VAR []VAR   `hl7:"33,display=Variance"`
}

// PC/ problem response
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by PRR (a response from the system responsible for maintaining the problem
// information).
type PRR_PC5 struct {
	HL7     HL7Name           `hl7:",name=PRR_PC5,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Withdrawn"`
	Patient []PRR_PC5_Patient `hl7:",required,display=Patient"`
}

// Patient
type PTR_PCF_Patient struct {
	HL7          HL7Name               `hl7:",name=PTR_PCF_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	Patientvisit *PTR_PCF_Patientvisit `hl7:",display=Patient_visit"`
	Pathway      []PTR_PCF_Pathway     `hl7:",required,display=Pathway"`
}

// Patientvisit
type PTR_PCF_Patientvisit struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Pathway
type PTR_PCF_Pathway struct {
	HL7         HL7Name               `hl7:",name=PTR_PCF_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"11,required,display=Pathway"`
	NTE         []NTE                 `hl7:"12,display=Notes And Comments"`
	VAR         []VAR                 `hl7:"13,display=Variance"`
	Pathwayrole []PTR_PCF_Pathwayrole `hl7:",display=Pathway_role"`
	Problem     []PTR_PCF_Problem     `hl7:",display=Problem"`
}

// Pathwayrole
type PTR_PCF_Pathwayrole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_Pathwayrole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// Problem
type PTR_PCF_Problem struct {
	HL7                HL7Name                      `hl7:",name=PTR_PCF_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes And Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	Problemrole        []PTR_PCF_Problemrole        `hl7:",display=Problem_role"`
	Problemobservation []PTR_PCF_Problemobservation `hl7:",display=Problem_observation"`
	Goal               []PTR_PCF_Goal               `hl7:",display=Goal"`
	Order              []PTR_PCF_Order              `hl7:",display=Order"`
}

// Problemrole
type PTR_PCF_Problemrole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_Problemrole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// Problemobservation
type PTR_PCF_Problemobservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_Problemobservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Goal
type PTR_PCF_Goal struct {
	HL7             HL7Name                   `hl7:",name=PTR_PCF_Goal,type=tg"`
	GOL             *GOL                      `hl7:"23,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"24,display=Notes And Comments"`
	VAR             []VAR                     `hl7:"25,display=Variance"`
	Goalrole        []PTR_PCF_Goalrole        `hl7:",display=Goal_role"`
	Goalobservation []PTR_PCF_Goalobservation `hl7:",display=Goal_observation"`
}

// Goalrole
type PTR_PCF_Goalrole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_Goalrole,type=tg"`
	ROL *ROL    `hl7:"26,required,display=Role"`
	VAR []VAR   `hl7:"27,display=Variance"`
}

// Goalobservation
type PTR_PCF_Goalobservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_Goalobservation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/result"`
	NTE []NTE   `hl7:"29,display=Notes And Comments"`
}

// Order
type PTR_PCF_Order struct {
	HL7         HL7Name              `hl7:",name=PTR_PCF_Order,type=tg"`
	ORC         *ORC                 `hl7:"30,required,display=Common Order"`
	Orderdetail *PTR_PCF_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type PTR_PCF_Orderdetail struct {
	HL7              HL7Name                    `hl7:",name=PTR_PCF_Orderdetail,type=tg"`
	OBR              *OBR                       `hl7:"31,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"32,display=Notes And Comments"`
	VAR              []VAR                      `hl7:"33,display=Variance"`
	Orderobservation []PTR_PCF_Orderobservation `hl7:",display=Order_observation"`
}

// Orderobservation
type PTR_PCF_Orderobservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_Orderobservation,type=tg"`
	OBX *OBX    `hl7:"34,required,display=Observation/result"`
	NTE []NTE   `hl7:"35,display=Notes And Comments"`
	VAR []VAR   `hl7:"36,display=Variance"`
}

// PC/ pathway (problem-oriented) query response
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by PTR (a response from the system responsible for maintaining the problem-oriented
// pathway information).
type PTR_PCF struct {
	HL7     HL7Name           `hl7:",name=PTR_PCF,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential Segment"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Withdrawn"`
	Patient []PTR_PCF_Patient `hl7:",required,display=Patient"`
}

// QueryInformation
type QBP_E03_QueryInformation struct {
	HL7 HL7Name `hl7:",name=QBP_E03_QueryInformation,type=tg"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
}

// HealthCare Services Invoice Status Query
//
// This message is used to query the status of a HealthCare Services Invoice. There are 3 types of queries handled by this message:
// 1) a specific Invoice, 2) a specific Product/Service Group or 3) a specific Product/Service Line Item. If a Provider wants
// to obtain information on a group of invoices (e.g., submitted in a date range), each individual Invoice must be queried.
//
// This message may also be used to query an Invoice submitted at another Network Application ID and Network Facility ID, as
// long as sufficient identification information is provided to qualify the request and requestor.  These are noted as Processing
// Rules for this message.
//
// Note that the response to this query has the same content as an EHC^E10 – Edit/Adjudication Results message.
type QBP_E03 struct {
	HL7              HL7Name                   `hl7:",name=QBP_E03,type=t"`
	MSH              *MSH                      `hl7:"1,required,display=Message Header"`
	SFT              []SFT                     `hl7:"2,display=Software Segment"`
	UAC              []UAC                     `hl7:"3,display=User Authentication Credential Segment"`
	QueryInformation *QBP_E03_QueryInformation `hl7:",required,display=Query Information"`
}

// Query
type QBP_E22_Query struct {
	HL7 HL7Name `hl7:",name=QBP_E22_Query,type=tg"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
}

// Query Authorization Request Status
//
// This message is used to query the status of an Authorization Request. There are 2 types of queries handled by this message:
// 1) a specific Authorization Request or 2) a specific Product/Service Line Item. If a Provider wants to obtain information
// on a group of Authorization Requests (e.g., submitted in a date range), each individual Authorization Request must be
// queried.
type QBP_E22 struct {
	HL7   HL7Name        `hl7:",name=QBP_E22,type=t"`
	MSH   *MSH           `hl7:"1,required,display=Message Header"`
	SFT   []SFT          `hl7:"2,display=Software Segment"`
	UAC   []UAC          `hl7:"3,display=User Authentication Credential Segment"`
	Query *QBP_E22_Query `hl7:",required,display=Query"`
}

// Qbp
type QBP_Q11_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Q11_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Query by parameter requesting an RSP segment pattern response
//
// The QBP_Q11 structure supports a Segment Pattern Response and contains the MSH, QPD, RCP, and DSC segments.  Its default
// trigger event is Q11.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value
// in its Query Profile.  If a unique trigger event value is chosen for a site-defined query, that value SHALL begin with Z.
//
// Note on QBP: Query By Example variant:  The query by example is an extension of Query by Parameter (QBP) in which search parameters
// are passed by sending them in the segment which naturally carries them. A Query Profile which uses this variant SHALL replace
// the ellipses in the input QBP_Q11 grammar above, with the specific segments that it accepts.
//
// Note:  The indicated trigger events are the default values for MSH-9-2-Trigger event.  Standard and site-defined queries
// may use these trigger events or may specify unique trigger event values in their Query Profiles.  Unique trigger event values
// for site-defined queries SHALL begin with Z.
type QBP_Q11 struct {
	HL7 HL7Name      `hl7:",name=QBP_Q11,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Q11_Qbp `hl7:",display=Qbp"`
	RCP *RCP         `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"7,display=Continuation Pointer"`
}

// Qbp
type QBP_Q13_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Q13_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Query by parameter requesting an  RTB - tabular response
//
// The QBP_Q13 structure supports a Tabular Response and contains the MSH, RDF, RCP, and DSC segments.  Its default trigger
// event is Q13.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value in its
// Query Profile.  If a unique trigger event value is chosen for a site-defined query, that value SHALL begin with Z.
//
// Unless otherwise specified in the query's Query Profile, the default value for the RDF segment shall be understood to contain
// all available fields from the Virtual Table. The Client may override the default RDF by specifying explicitly the columns
// to be returned.
type QBP_Q13 struct {
	HL7 HL7Name      `hl7:",name=QBP_Q13,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Q13_Qbp `hl7:",display=Qbp"`
	RDF *RDF         `hl7:"6,display=Table Row Definition"`
	RCP *RCP         `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"8,display=Continuation Pointer"`
}

// Query by parameter requesting an RDY display response
//
// The QBP_Q15 structure supports a Display Response and contains the MSH, QPD, RCP, and DSC segments.  Its default trigger
// event is Q15.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value in its
// Query Profile.  If a unique trigger event value is chosen for a site-defined query, that value SHALL begin with Z.
//
// Note on QBP: Query By Example variant:  The query by example is an extension of Query by Parameter (QBP) in which search parameters
// are passed by sending them in the segment which naturally carries them. A Query Profile which uses this variant SHALL replace
// the ellipses in the input QBP_Q11 grammar above, with the specific segments that it accepts.
type QBP_Q15 struct {
	HL7 HL7Name `hl7:",name=QBP_Q15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Get person demographics
type QBP_Q21 struct {
	HL7 HL7Name `hl7:",name=QBP_Q21,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Find candidates
type QBP_Q22 struct {
	HL7 HL7Name `hl7:",name=QBP_Q22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Get corresponding identifiers
type QBP_Q23 struct {
	HL7 HL7Name `hl7:",name=QBP_Q23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Allocate identifiers
type QBP_Q24 struct {
	HL7 HL7Name `hl7:",name=QBP_Q24,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Personnel Information by Segment Query
//
// Retrieve all available personnel information based upon the values of one or more commonly used search parameters
type QBP_Q25 struct {
	HL7 HL7Name `hl7:",name=QBP_Q25,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Qbp
type QBP_Q31_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Q31_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// QBP Query Dispense history
type QBP_Q31 struct {
	HL7 HL7Name      `hl7:",name=QBP_Q31,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Q31_Qbp `hl7:",display=Qbp"`
	RCP *RCP         `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"7,display=Continuation Pointer"`
}

// Find Candidates including Visit Information
type QBP_Q32 struct {
	HL7 HL7Name `hl7:",name=QBP_Q32,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Information about Phone Calls
type QBP_Z73 struct {
	HL7 HL7Name `hl7:",name=QBP_Z73,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
}

// Qbp
type QBP_Z75_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z75_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Tabular Patient List
//
// To find patient records that closely (as specified by the Client) match a set of input criteria using a specified algorithm.
type QBP_Z75 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z75,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z75_Qbp `hl7:",display=Qbp"`
	RDF *RDF         `hl7:"6,display=Table Row Definition"`
	RCP *RCP         `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"8,display=Continuation Pointer"`
}

// Qbp
type QBP_Z77_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z77_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Tabular Patient List
//
// To find patient records that closely (as specified by the Client) match a set of input criteria using a specified algorithm
type QBP_Z77 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z77,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z77_Qbp `hl7:",display=Qbp"`
	RDF *RDF         `hl7:"6,display=Table Row Definition"`
	RCP *RCP         `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"8,display=Continuation Pointer"`
}

// Dispense Information
//
// To retrieve patient pharmacy dispense history information from the Server
type QBP_Z79 struct {
	HL7 HL7Name `hl7:",name=QBP_Z79,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Qbp
type QBP_Z81_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z81_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Dispense History
//
// To retrieve patient pharmacy dispense history information from the Server.
type QBP_Z81 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z81,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z81_Qbp `hl7:",display=Qbp"`
	RCP *RCP         `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"7,display=Continuation Pointer"`
}

// Qbp
type QBP_Z85_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z85_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Pharmacy Information Comprehensive
//
// To retrieve patient pharmacy history information from the Server.
type QBP_Z85 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z85,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z85_Qbp `hl7:",display=Qbp"`
	RCP *RCP         `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"7,display=Continuation Pointer"`
}

// Qbp
type QBP_Z87_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z87_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Dispense Information
//
// To retrieve patient pharmacy dispense history information from the Server
type QBP_Z87 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z87,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z87_Qbp `hl7:",display=Qbp"`
	RCP *RCP         `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"7,display=Continuation Pointer"`
}

// Qbp
type QBP_Z89_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z89_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Lab Results History
//
// To retrieve patient laboratory results information from the Server.
type QBP_Z89 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z89,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z89_Qbp `hl7:",display=Qbp"`
	RCP *RCP         `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"7,display=Continuation Pointer"`
}

// Qbp
type QBP_Z91_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z91_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Who Am I
//
// Find the identity of the patient for specified medical record number(s)
type QBP_Z91 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z91,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z91_Qbp `hl7:",display=Qbp"`
	RDF *RDF         `hl7:"6,display=Table Row Definition"`
	RCP *RCP         `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"8,display=Continuation Pointer"`
}

// Qbp
type QBP_Z93_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z93_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Tabular Dispense History
//
// Returns response sorted by Date Dispensed unless otherwise specified.
type QBP_Z93 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z93,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z93_Qbp `hl7:",display=Qbp"`
	RDF *RDF         `hl7:"6,display=Table Row Definition"`
	RCP *RCP         `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"8,display=Continuation Pointer"`
}

// Qbp
type QBP_Z95_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z95_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Tabular Dispense History
//
// To retrieve patient pharmacy dispense history information from the Server.
type QBP_Z95 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z95,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z95_Qbp `hl7:",display=Qbp"`
	RDF *RDF         `hl7:"6,display=Table Row Definition"`
	RCP *RCP         `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"8,display=Continuation Pointer"`
}

// Dispense History
//
// To retrieve patient pharmacy dispense history information from the Server.
type QBP_Z97 struct {
	HL7 HL7Name `hl7:",name=QBP_Z97,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Qbp
type QBP_Z99_Qbp struct {
	HL7 HL7Name `hl7:",name=QBP_Z99_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Who Am I
//
// Find the identity of the patient for specified medical record number(s)
type QBP_Z99 struct {
	HL7 HL7Name      `hl7:",name=QBP_Z99,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QBP_Z99_Qbp `hl7:",display=Qbp"`
	RDF *RDF         `hl7:"6,display=Table Row Definition"`
	RCP *RCP         `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"8,display=Continuation Pointer"`
}

// Cancel query/acknowledge message
type QCN_J01 struct {
	HL7 HL7Name `hl7:",name=QCN_J01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QID *QID    `hl7:"4,required,display=Query Identification"`
}

// PC/ problem query
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8 Who Filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PC4 struct {
	HL7 HL7Name `hl7:",name=QRY_PC4,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QRD *QRD    `hl7:"4,required,display=Withdrawn"`
	QRF *QRF    `hl7:"5,display=Withdrawn"`
}

// PC/ goal query
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8 Who Filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PC9 struct {
	HL7 HL7Name `hl7:",name=QRY_PC9,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QRD *QRD    `hl7:"4,required,display=Withdrawn"`
	QRF *QRF    `hl7:"5,display=Withdrawn"`
}

// PC/ pathway (problem-oriented) query
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8 Who Filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PCE struct {
	HL7 HL7Name `hl7:",name=QRY_PCE,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QRD *QRD    `hl7:"4,required,display=Withdrawn"`
	QRF *QRF    `hl7:"5,display=Withdrawn"`
}

// PC/ pathway (goal-oriented) query
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.  The original mode
// query and the QRD/QRF segments have been replaced.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8 Who Filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PCK struct {
	HL7 HL7Name `hl7:",name=QRY_PCK,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QRD *QRD    `hl7:"4,required,display=Withdrawn"`
	QRF *QRF    `hl7:"5,display=Withdrawn"`
}

// Create subscription
type QSB_Q16 struct {
	HL7 HL7Name `hl7:",name=QSB_Q16,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// ORU Subscription
//
// Sends Lab Results, either filtered or unfiltered, as specified in the input parameters.
type QSB_Z83 struct {
	HL7 HL7Name `hl7:",name=QSB_Z83,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Cancel subscription/acknowledge message
type QSX_J02 struct {
	HL7 HL7Name `hl7:",name=QSX_J02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	QID *QID    `hl7:"4,required,display=Query Identification"`
}

// Qbp
type QVR_Q17_Qbp struct {
	HL7 HL7Name `hl7:",name=QVR_Q17_Qbp,type=tg"`
	Hxx *Hxx    `hl7:"5,display=Any Hl7 Segment"`
}

// Query for previous events
//
// The Query for Previous Events is like a Query by Parameter with a Segment Pattern Response except that the response consists
// of zero to many messages of the type defined in the Query Profile rather than a single response message containing multiple
// iterations of the segment pattern.  While the messages sent in response to a QVR will reflect events which occurred in the
// past, the time stamp in the message header will reflect the time the message is actually constructed (current time).  It
// is also similar to the previous generation VQQ/RQQ Event Replay.
//
// While the response is similar to subscription messages, it differs from subscription in that the response messages are
// the result of "interrogating" the database rather than events being triggered in the current timeframe.
// In a Query for Previous Events, the Server still has to parse the query, but avoids the handshaking protocols required in
// normal query/response situations. The Server acknowledges the query with the general acknowledgement message ACK.
// The Server then transmits a sequence of messages as if they were simulated unsolicited messages. This is useful for low
// end systems that unable to deal with the overhead of the query response message syntax, i.e., systems that can only process
// unsolicited update messages.
//
// Systems that choose to offer the QVR should offer guidance in the Query Profile, where appropriate, concerning the scope
// and size of the data requested by the Client.  Moreover, the Query Profile should contain language cautioning Clients of
// the potential for harm from getting messages out of the original sequence and/or context.
//
// Use cases for this query are as follows: 1) to populate a database initially, 2) to recover from an extended down time on the
// part of the recipient, or 3) to enable systems which normally receive unsolicited data to be extended to act as a query client
// with minimal modification.
//
// Note:  If there is a concern that it will be difficult to distinguish these messages from any current realtime messages,
// e.g., if they are going down the same pipe, the data offerer might choose to designate a unique MSH-3 Sending application
// for the messages it sends in response to a QVR. This would allow downstream systems to recognize which messages were the
// result of the QVR, versus which are the result of current realtime activity on the sending system. For example, there may
// be 2 systems receiving pharmacy dispense messages. If system A wishes to issue a QVR to receive a historical load, system
// B might misinterpret the QVR results coming over the pipe as actual live data. A separate Sending Application name would
// allow for easy differentiation.
type QVR_Q17 struct {
	HL7 HL7Name      `hl7:",name=QVR_Q17,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	UAC *UAC         `hl7:"3,display=User Authentication Credential Segment"`
	QPD *QPD         `hl7:"4,required,display=Query Parameter Definition"`
	Qbp *QVR_Q17_Qbp `hl7:",display=Qbp"`
	RCP *RCP         `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC         `hl7:"7,display=Continuation Pointer"`
}

// Patient
type RAS_O17_Patient struct {
	HL7                    HL7Name                         `hl7:",name=RAS_O17_Patient,type=tg"`
	PID                    *PID                            `hl7:"5,required,display=Patient Identification"`
	Additionaldemographics *RAS_O17_Additionaldemographics `hl7:",display=Additional_demographics"`
	NTE                    []NTE                           `hl7:"8,display=Notes And Comments"`
	AL1                    []AL1                           `hl7:"9,display=Patient Allergy Information"`
	Patientvisit           *RAS_O17_Patientvisit           `hl7:",display=Patient_visit"`
}

// Additionaldemographics
type RAS_O17_Additionaldemographics struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Additionaldemographics,type=tg"`
	PD1 *PD1    `hl7:"6,required,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Patientvisit
type RAS_O17_Patientvisit struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Order
type RAS_O17_Order struct {
	HL7            HL7Name                  `hl7:",name=RAS_O17_Order,type=tg"`
	ORC            *ORC                     `hl7:"13,required,display=Common Order"`
	Timing         []RAS_O17_Timing         `hl7:",display=Timing"`
	Orderdetail    *RAS_O17_Orderdetail     `hl7:",display=Order_detail"`
	PRT            []PRT                    `hl7:"21,display=Participation Information"`
	Encoding       *RAS_O17_Encoding        `hl7:",display=Encoding"`
	Administration []RAS_O17_Administration `hl7:",required,display=Administration"`
	CTI            []CTI                    `hl7:"35,display=Clinical Trial Identification"`
}

// Timing
type RAS_O17_Timing struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/quantity Relationship"`
}

// Orderdetail
type RAS_O17_Orderdetail struct {
	HL7                   HL7Name                        `hl7:",name=RAS_O17_Orderdetail,type=tg"`
	RXO                   *RXO                           `hl7:"16,required,display=Pharmacy/treatment Order"`
	Orderdetailsupplement *RAS_O17_Orderdetailsupplement `hl7:",display=Order_detail_supplement"`
}

// Orderdetailsupplement
type RAS_O17_Orderdetailsupplement struct {
	HL7        HL7Name              `hl7:",name=RAS_O17_Orderdetailsupplement,type=tg"`
	NTE        []NTE                `hl7:"17,required,display=Notes And Comments"`
	RXR        []RXR                `hl7:"18,required,display=Pharmacy/treatment Route"`
	Components []RAS_O17_Components `hl7:",display=Components"`
}

// Components
type RAS_O17_Components struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Components,type=tg"`
	RXC *RXC    `hl7:"19,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"20,display=Notes And Comments"`
}

// Encoding
type RAS_O17_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RAS_O17_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"22,required,display=Pharmacy/treatment Encoded Order"`
	PRT           []PRT                   `hl7:"23,display=Participation Information"`
	NTE           []NTE                   `hl7:"24,display=Notes And Comments"`
	Timingencoded []RAS_O17_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"27,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"28,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RAS_O17_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"25,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"26,display=Timing/quantity Relationship"`
}

// Administration
type RAS_O17_Administration struct {
	HL7         HL7Name               `hl7:",name=RAS_O17_Administration,type=tg"`
	RXA         []RXA                 `hl7:"29,required,display=Pharmacy/treatment Administration"`
	PRT         []PRT                 `hl7:"30,display=Participation Information"`
	RXR         *RXR                  `hl7:"31,required,display=Pharmacy/treatment Route"`
	Observation []RAS_O17_Observation `hl7:",display=Observation"`
}

// Observation
type RAS_O17_Observation struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Observation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/result"`
	PRT []PRT   `hl7:"33,display=Participation Information"`
	NTE []NTE   `hl7:"34,display=Notes And Comments"`
}

// Pharmacy/treatment administration
//
// The RAS message may be created by the administering application (e.g., nursing application) for each instance of administration
// for an existing order. If the administering application wants to report several administrations of medication/treatment
// for a given order with a single RAS message, each instance is reported by a separate (repeating) RXA segment. In addition,
// the administration records for a group of orders may be sent in a single message by creating repeating groups of segments
// at the ORC level.
//
// In the most common case, the RAS messages would be sent from a nursing application to the pharmacy or treatment application
// (or to the ordering application or another clinical application), which could use the data to generate the medication
// administration reports. Multiple RXA segments, each corresponding to a separate administration instance for a given
// order, may be sent with a single ORC.
//
// Note: The use of RAS with the trigger of O01 and RRA with the trigger O02 is maintained for backward compatibility as of v2.4
// and is withdrawn as of v2.7.
type RAS_O17 struct {
	HL7     HL7Name          `hl7:",name=RAS_O17,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RAS_O17_Patient `hl7:",display=Patient"`
	Order   []RAS_O17_Order  `hl7:",required,display=Order"`
}

// Provider
type RCI_I05_Provider struct {
	HL7 HL7Name `hl7:",name=RCI_I05_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Observation
type RCI_I05_Observation struct {
	HL7     HL7Name          `hl7:",name=RCI_I05_Observation,type=tg"`
	OBR     *OBR             `hl7:"13,required,display=Observation Request"`
	NTE     []NTE            `hl7:"14,display=Notes And Comments"`
	Results *RCI_I05_Results `hl7:",display=Results"`
}

// Results
type RCI_I05_Results struct {
	HL7 HL7Name `hl7:",name=RCI_I05_Results,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/result"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Return clinical information
type RCI_I05 struct {
	HL7         HL7Name              `hl7:",name=RCI_I05,type=t"`
	MSH         *MSH                 `hl7:"1,required,display=Message Header"`
	SFT         []SFT                `hl7:"2,display=Software Segment"`
	UAC         *UAC                 `hl7:"3,display=User Authentication Credential Segment"`
	MSA         *MSA                 `hl7:"4,display=Message Acknowledgment"`
	QRD         *QRD                 `hl7:"5,required,display=Withdrawn"`
	QRF         *QRF                 `hl7:"6,display=Withdrawn"`
	Provider    []RCI_I05_Provider   `hl7:",required,display=Provider"`
	PID         *PID                 `hl7:"9,required,display=Patient Identification"`
	DG1         []DG1                `hl7:"10,display=Diagnosis"`
	DRG         []DRG                `hl7:"11,display=Diagnosis Related Group"`
	AL1         []AL1                `hl7:"12,display=Patient Allergy Information"`
	Observation *RCI_I05_Observation `hl7:",display=Observation"`
	NTE         []NTE                `hl7:"17,display=Notes And Comments"`
}

// Provider
type RCL_I06_Provider struct {
	HL7 HL7Name `hl7:",name=RCL_I06_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Return clinical list
type RCL_I06 struct {
	HL7      HL7Name            `hl7:",name=RCL_I06,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	MSA      *MSA               `hl7:"4,display=Message Acknowledgment"`
	QRD      *QRD               `hl7:"5,required,display=Withdrawn"`
	QRF      *QRF               `hl7:"6,display=Withdrawn"`
	Provider []RCL_I06_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"9,required,display=Patient Identification"`
	DG1      []DG1              `hl7:"10,display=Diagnosis"`
	DRG      []DRG              `hl7:"11,display=Diagnosis Related Group"`
	AL1      []AL1              `hl7:"12,display=Patient Allergy Information"`
	NTE      []NTE              `hl7:"13,display=Notes And Comments"`
	DSP      []DSP              `hl7:"14,display=Display Data"`
	DSC      *DSC               `hl7:"15,display=Continuation Pointer"`
}

// Patient
type RDE_O11_Patient struct {
	HL7          HL7Name               `hl7:",name=RDE_O11_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *RDE_O11_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []RDE_O11_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"15,display=Guarantor"`
	AL1          []AL1                 `hl7:"16,display=Patient Allergy Information"`
}

// Patientvisit
type RDE_O11_Patientvisit struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Insurance
type RDE_O11_Insurance struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Order
type RDE_O11_Order struct {
	HL7           HL7Name                 `hl7:",name=RDE_O11_Order,type=tg"`
	ORC           *ORC                    `hl7:"17,required,display=Common Order"`
	Timing        []RDE_O11_Timing        `hl7:",display=Timing"`
	Orderdetail   *RDE_O11_Orderdetail    `hl7:",display=Order_detail"`
	PRT           []PRT                   `hl7:"25,display=Participation Information"`
	RXE           *RXE                    `hl7:"26,required,display=Pharmacy/treatment Encoded Order"`
	PRT2          []PRT                   `hl7:"27,display=Participation Information"`
	NTE           []NTE                   `hl7:"28,display=Notes And Comments"`
	Timingencoded []RDE_O11_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"31,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"32,display=Pharmacy/treatment Component Order"`
	Observation   []RDE_O11_Observation   `hl7:",display=Observation"`
	FT1           []FT1                   `hl7:"36,display=Financial Transaction"`
	BLG           *BLG                    `hl7:"37,display=Billing"`
	CTI           []CTI                   `hl7:"38,display=Clinical Trial Identification"`
}

// Timing
type RDE_O11_Timing struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"18,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"19,display=Timing/quantity Relationship"`
}

// Orderdetail
type RDE_O11_Orderdetail struct {
	HL7       HL7Name             `hl7:",name=RDE_O11_Orderdetail,type=tg"`
	RXO       *RXO                `hl7:"20,required,display=Pharmacy/treatment Order"`
	NTE       []NTE               `hl7:"21,display=Notes And Comments"`
	RXR       []RXR               `hl7:"22,required,display=Pharmacy/treatment Route"`
	Component []RDE_O11_Component `hl7:",display=Component"`
}

// Component
type RDE_O11_Component struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Component,type=tg"`
	RXC *RXC    `hl7:"23,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"24,display=Notes And Comments"`
}

// Timingencoded
type RDE_O11_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"29,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"30,display=Timing/quantity Relationship"`
}

// Observation
type RDE_O11_Observation struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Observation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/result"`
	PRT []PRT   `hl7:"34,display=Participation Information"`
	NTE []NTE   `hl7:"35,display=Notes And Comments"`
}

// Pharmacy/treatment encoded order
//
// This message communicates the pharmacy or treatment application's encoding of the pharmacy/treatment order ,OMP, message.
// It may be sent as an unsolicited message to report on either a single order or multiple pharmacy/treatment orders for a patient.
//
// The RDE/RRE message pair can also be used to communicate a refill authorization request; however, a specific trigger event
// has been assigned. See section 4A.3.13 "RDE - Pharmacy/Treatment Refill Authorization Request Message (Event O25)."
// As a site-specific variant, the original order segments (RXO, RXRs, associated RXCs, and any NTEs) may be sent optionally
// (for comparison).
//
// Note:
// The RXCs which follow the RXO may not be fully encoded, but those that follow the RXE must be fully encoded.
// The NTE segment(s) following the PD1 segment are intended to communicate notes and comments relative to the patient.
// The NTE segment(s) following the RXO segment are intended to communicate notes and comments relative to the pharmacy/treatment
// order.
// The NTE segment(s) following the RXE segment are intended to communicate notes and comments relative to the encoded order.
// The NTE segment(s) following the RXC segment are intended to communicate notes and comments relative to the component(s).
// The NTE segment following the OBX segment is intended to communicate notes and comments relative to the results.
type RDE_O11 struct {
	HL7     HL7Name          `hl7:",name=RDE_O11,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RDE_O11_Patient `hl7:",display=Patient"`
	Order   []RDE_O11_Order  `hl7:",required,display=Order"`
}

// Patient
type RDE_O25_Patient struct {
	HL7          HL7Name               `hl7:",name=RDE_O25_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	PRT          []PRT                 `hl7:"7,display=Participation Information"`
	NTE          []NTE                 `hl7:"8,display=Notes And Comments"`
	Patientvisit *RDE_O25_Patientvisit `hl7:",display=Patient_visit"`
	Insurance    []RDE_O25_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"15,display=Guarantor"`
	AL1          []AL1                 `hl7:"16,display=Patient Allergy Information"`
}

// Patientvisit
type RDE_O25_Patientvisit struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Insurance
type RDE_O25_Insurance struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Order
type RDE_O25_Order struct {
	HL7           HL7Name                 `hl7:",name=RDE_O25_Order,type=tg"`
	ORC           *ORC                    `hl7:"17,required,display=Common Order"`
	Timing        []RDE_O25_Timing        `hl7:",display=Timing"`
	Orderdetail   *RDE_O25_Orderdetail    `hl7:",display=Order_detail"`
	PRT           []PRT                   `hl7:"25,display=Participation Information"`
	RXE           *RXE                    `hl7:"26,required,display=Pharmacy/treatment Encoded Order"`
	PRT2          []PRT                   `hl7:"27,display=Participation Information"`
	NTE           []NTE                   `hl7:"28,display=Notes And Comments"`
	Timingencoded []RDE_O25_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"31,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"32,display=Pharmacy/treatment Component Order"`
	Observation   []RDE_O25_Observation   `hl7:",display=Observation"`
	FT1           []FT1                   `hl7:"36,display=Financial Transaction"`
	BLG           *BLG                    `hl7:"37,display=Billing"`
	CTI           []CTI                   `hl7:"38,display=Clinical Trial Identification"`
}

// Timing
type RDE_O25_Timing struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"18,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"19,display=Timing/quantity Relationship"`
}

// Orderdetail
type RDE_O25_Orderdetail struct {
	HL7       HL7Name             `hl7:",name=RDE_O25_Orderdetail,type=tg"`
	RXO       *RXO                `hl7:"20,required,display=Pharmacy/treatment Order"`
	NTE       []NTE               `hl7:"21,display=Notes And Comments"`
	RXR       []RXR               `hl7:"22,required,display=Pharmacy/treatment Route"`
	Component []RDE_O25_Component `hl7:",display=Component"`
}

// Component
type RDE_O25_Component struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Component,type=tg"`
	RXC *RXC    `hl7:"23,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"24,display=Notes And Comments"`
}

// Timingencoded
type RDE_O25_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"29,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"30,display=Timing/quantity Relationship"`
}

// Observation
type RDE_O25_Observation struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Observation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/result"`
	PRT []PRT   `hl7:"34,display=Participation Information"`
	NTE []NTE   `hl7:"35,display=Notes And Comments"`
}

// Pharmacy/treatment refill authorization request
//
// The RDE/RRE is used to communicate a refill authorization request originating with the pharmacy. This message replicates
// the standard RDE message with a different trigger event code to indicate the specific use case of a refill authorization
// request.
type RDE_O25 struct {
	HL7     HL7Name          `hl7:",name=RDE_O25,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RDE_O25_Patient `hl7:",display=Patient"`
	Order   []RDE_O25_Order  `hl7:",required,display=Order"`
}

// Definition
type RDR_RDR_Definition struct {
	HL7     HL7Name          `hl7:",name=RDR_RDR_Definition,type=tg"`
	QRD     *QRD             `hl7:"6,required,display=Withdrawn"`
	QRF     *QRF             `hl7:"7,display=Withdrawn"`
	Patient *RDR_RDR_Patient `hl7:",display=Patient"`
	Order   []RDR_RDR_Order  `hl7:",required,display=Order"`
}

// Patient
type RDR_RDR_Patient struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	NTE []NTE   `hl7:"9,display=Notes And Comments"`
}

// Order
type RDR_RDR_Order struct {
	HL7      HL7Name            `hl7:",name=RDR_RDR_Order,type=tg"`
	ORC      *ORC               `hl7:"10,required,display=Common Order"`
	Timing   []RDR_RDR_Timing   `hl7:",display=Timing"`
	Encoding *RDR_RDR_Encoding  `hl7:",display=Encoding"`
	Dispense []RDR_RDR_Dispense `hl7:",required,display=Dispense"`
}

// Timing
type RDR_RDR_Timing struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Encoding
type RDR_RDR_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RDR_RDR_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"13,required,display=Pharmacy/treatment Encoded Order"`
	Timingencoded []RDR_RDR_Timingencoded `hl7:",display=Timing_encoded"`
	RXR           []RXR                   `hl7:"16,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"17,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RDR_RDR_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/quantity Relationship"`
}

// Dispense
type RDR_RDR_Dispense struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Dispense,type=tg"`
	RXD *RXD    `hl7:"18,required,display=Pharmacy/treatment Dispense"`
	RXR []RXR   `hl7:"19,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"20,display=Pharmacy/treatment Component Order"`
}

// Pharmacy/treatment Dispense Information
type RDR_RDR struct {
	HL7        HL7Name              `hl7:",name=RDR_RDR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        []ERR                `hl7:"3,display=Error"`
	SFT        *SFT                 `hl7:"4,display=Software Segment"`
	UAC        *UAC                 `hl7:"5,display=User Authentication Credential Segment"`
	Definition []RDR_RDR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"21,display=Continuation Pointer"`
}

// Patient
type RDS_O13_Patient struct {
	HL7                    HL7Name                         `hl7:",name=RDS_O13_Patient,type=tg"`
	PID                    *PID                            `hl7:"5,required,display=Patient Identification"`
	Additionaldemographics *RDS_O13_Additionaldemographics `hl7:",display=Additional_demographics"`
	NTE                    []NTE                           `hl7:"8,display=Notes And Comments"`
	AL1                    []AL1                           `hl7:"9,display=Patient Allergy Information"`
	Patientvisit           *RDS_O13_Patientvisit           `hl7:",display=Patient_visit"`
}

// Additionaldemographics
type RDS_O13_Additionaldemographics struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Additionaldemographics,type=tg"`
	PD1 *PD1    `hl7:"6,required,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"7,display=Participation Information"`
}

// Patientvisit
type RDS_O13_Patientvisit struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"12,display=Participation Information"`
}

// Order
type RDS_O13_Order struct {
	HL7         HL7Name               `hl7:",name=RDS_O13_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	Timing      []RDS_O13_Timing      `hl7:",display=Timing"`
	Orderdetail *RDS_O13_Orderdetail  `hl7:",display=Order_detail"`
	PRT         []PRT                 `hl7:"21,display=Participation Information"`
	Encoding    *RDS_O13_Encoding     `hl7:",display=Encoding"`
	RXD         *RXD                  `hl7:"29,required,display=Pharmacy/treatment Dispense"`
	PRT2        []PRT                 `hl7:"30,display=Participation Information"`
	NTE         []NTE                 `hl7:"31,display=Notes And Comments"`
	RXR         []RXR                 `hl7:"32,required,display=Pharmacy/treatment Route"`
	RXC         []RXC                 `hl7:"33,display=Pharmacy/treatment Component Order"`
	Observation []RDS_O13_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"37,display=Financial Transaction"`
}

// Timing
type RDS_O13_Timing struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/quantity Relationship"`
}

// Orderdetail
type RDS_O13_Orderdetail struct {
	HL7                   HL7Name                        `hl7:",name=RDS_O13_Orderdetail,type=tg"`
	RXO                   *RXO                           `hl7:"16,required,display=Pharmacy/treatment Order"`
	Orderdetailsupplement *RDS_O13_Orderdetailsupplement `hl7:",display=Order_detail_supplement"`
}

// Orderdetailsupplement
type RDS_O13_Orderdetailsupplement struct {
	HL7       HL7Name             `hl7:",name=RDS_O13_Orderdetailsupplement,type=tg"`
	NTE       []NTE               `hl7:"17,required,display=Notes And Comments"`
	RXR       []RXR               `hl7:"18,required,display=Pharmacy/treatment Route"`
	Component []RDS_O13_Component `hl7:",display=Component"`
}

// Component
type RDS_O13_Component struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Component,type=tg"`
	RXC *RXC    `hl7:"19,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"20,display=Notes And Comments"`
}

// Encoding
type RDS_O13_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RDS_O13_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"22,required,display=Pharmacy/treatment Encoded Order"`
	PRT           []PRT                   `hl7:"23,display=Participation Information"`
	NTE           []NTE                   `hl7:"24,display=Notes And Comments"`
	Timingencoded []RDS_O13_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"27,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"28,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RDS_O13_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"25,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"26,display=Timing/quantity Relationship"`
}

// Observation
type RDS_O13_Observation struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Observation,type=tg"`
	OBX *OBX    `hl7:"34,required,display=Observation/result"`
	PRT []PRT   `hl7:"35,display=Participation Information"`
	NTE []NTE   `hl7:"36,display=Notes And Comments"`
}

// Pharmacy/treatment dispense
//
// The RDS message may be created by the pharmacy/treatment application for each instance of dispensing a drug or treatment
// to fill an existing order or orders. In the most common case, the RDS messages would be routed to a Nursing application or
// to some clinical application, which needs the data about drugs dispensed or treatments given. As a site-specific variant,
// the original order segments (RXO, RXE and their associated RXR/RXCs) may be sent optionally (for comparison).
//
// The ORC must have the filler order number and the order control code RE. The RXE and associated RXCs may be present if the receiving
// application needs any of their data. The RXD carries the dispense data for a given issuance of medication: thus it may describe
// a single dose, a half-day dose, a daily dose, a refill of a prescription, etc. The RXD is not a complete record of an order.
// Use the RXO and RXE segments if a complete order is needed. It is a record from the pharmacy or treatment supplier to the Nursing
// application (or other) with drug/treatment dispense and administration instructions.
//
// The FT1 segment is optional and repeating in order to accommodate multiple charge, benefit and pricing situations. Example
// use cases demonstrating zero, one and two FT1 segments follow:
//
// In the case where the RDS message represents a dispense event that is in process (i.e., has not been received by the patient),
// the financial transactions associated with the dispense do not yet exist. Until the financial transactions associated
// with the dispense event have been completed, no FT1 segment may exist in the message.
//
// In the case where the RDS message represents a dispense event that has been received by the patient, and thus all financial
// transactions have been completed, the RDS message may contain one or more FT1 segments. Examples of single and multiple
// FT1 segments follow.
//
// Payment for the dispense event completed by a single payor:
// MSH|^&~\|Pharm|GenHosp|CIS|GenHosp|2006082911150700||RDS^O13^RDS_O13|...<cr>
// PID|...<cr>
// ORC|RE|...<cr>
// RXD|1|00310‐0131‐10^LISINOPRIL 10MG TABLET^NDC|200607150830|100|TAB|...<cr>
// FT1|1|||200607151035||PY|00310‐0131‐10^LISINOPRIL 10MG TABLET^NDC|||100|125.43&USD|...<cr>
//
// Payment for the dispense event involves multiple payment sources:
// MSH|^&~\|Pharm|GenHosp|CIS|GenHosp|2006082213000700||RDS^O13^RDS_O13|...<cr>
// PID|...<cr>
// ORC|RE|...<cr>
// RXD|1|00340‐0241‐10^VERAPAMIL 120MG TABLET^NDC|200607200940|100|TAB|...<cr>
// FT1|1|||200607211055||CD|00340024110^VERAPAMIL 120MG TABLET ^NDC|||100|55.43&USD|...<cr>
// (amount paid by insurance)
// FT1|2|||200607211055||CP|00340024110^VERAPAMIL 120MG TABLET ^NDC|||100|5.00&USD|...<cr> (copay paid by patient)
//
// The use of RDS with the trigger of O01 and RRD with the trigger O02 is maintained for backward compatibility as of v2.4 and
// is withdrawn as of v2.7.
type RDS_O13 struct {
	HL7     HL7Name          `hl7:",name=RDS_O13,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RDS_O13_Patient `hl7:",display=Patient"`
	Order   []RDS_O13_Order  `hl7:",required,display=Order"`
}

// Display response in response to QBP^Q15
//
// The RDY_K15 supports a Display Response to the QBP and contains the MSH, MSA, ERR, QAK, DSP, and the DSC.  Its default trigger
// event is K15.  A standard or site-defined response may use this trigger event or may specify a unique trigger event value
// in its Query Profile.  If a unique trigger event value is chosen for a site-defined response, that value SHALL begin with
// Z.
//
// Note:  The indicated trigger events are the default values for MSH-9-2-Trigger event.  Standard and site-defined queries
// may use these trigger events or may specify unique trigger event values in their Query Profiles.  Unique trigger event values
// for site-defined queries SHALL begin with Z.
type RDY_K15 struct {
	HL7 HL7Name `hl7:",name=RDY_K15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"7,required,display=Query Parameter Definition"`
	DSP []DSP   `hl7:"8,display=Display Data"`
	DSC *DSC    `hl7:"9,display=Continuation Pointer"`
}

// Segmentpattern
type RDY_Z80_Segmentpattern struct {
	HL7 HL7Name `hl7:",name=RDY_Z80_Segmentpattern,type=tg"`
	Hxx *Hxx    `hl7:"8,required,display=Any Hl7 Segment"`
}

// Dispense Information (Response)
//
// Returns data formatted for screen display. Data are sorted by Medication Dispensed unless otherwise specified in SortControl.
type RDY_Z80 struct {
	HL7            HL7Name                 `hl7:",name=RDY_Z80,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR            *ERR                    `hl7:"5,display=Error"`
	QAK            *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD            *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	Segmentpattern *RDY_Z80_Segmentpattern `hl7:",display=Segment_pattern"`
	DSC            *DSC                    `hl7:"9,display=Continuation Pointer"`
}

// Dispense History (Response)
//
// Returns data formatted for screen display. Data are sorted by Medication Dispensed unless otherwise specified in SortControl.
type RDY_Z98 struct {
	HL7 HL7Name `hl7:",name=RDY_Z98,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"7,required,display=Query Parameter Definition"`
	DSP []DSP   `hl7:"8,display=Display Data"`
	DSC *DSC    `hl7:"9,display=Continuation Pointer"`
}

// Authorizationcontact
type REF_I12_Authorizationcontact struct {
	HL7 HL7Name `hl7:",name=REF_I12_Authorizationcontact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Providercontact
type REF_I12_Providercontact struct {
	HL7 HL7Name `hl7:",name=REF_I12_Providercontact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I12_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I12_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I12_Procedure struct {
	HL7                   HL7Name                        `hl7:",name=REF_I12_Procedure,type=tg"`
	PR1                   *PR1                           `hl7:"19,required,display=Procedures"`
	Authorizationcontact2 *REF_I12_Authorizationcontact2 `hl7:",display=Authorization_contact2"`
}

// Authorizationcontact2
type REF_I12_Authorizationcontact2 struct {
	HL7 HL7Name `hl7:",name=REF_I12_Authorizationcontact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I12_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I12_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes And Comments"`
	Resultsnotes []REF_I12_Resultsnotes `hl7:",display=Results_notes"`
}

// Resultsnotes
type REF_I12_Resultsnotes struct {
	HL7 HL7Name `hl7:",name=REF_I12_Resultsnotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Patientvisit
type REF_I12_Patientvisit struct {
	HL7 HL7Name `hl7:",name=REF_I12_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Patient referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding a specific patient.  The referral
// message may contain patient demographic information, specific medical procedures to be performed (accompanied by previously
// obtained authorizations) and relevant clinical information pertinent to the patient's case.
type REF_I12 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I12,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	Authorizationcontact *REF_I12_Authorizationcontact `hl7:",display=Authorization_contact"`
	Providercontact      []REF_I12_Providercontact     `hl7:",required,display=Provider_contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next Of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I12_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I12_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I12_Observation         `hl7:",display=Observation"`
	Patientvisit         *REF_I12_Patientvisit         `hl7:",display=Patient_visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes And Comments"`
}

// Authorizationcontact
type REF_I13_Authorizationcontact struct {
	HL7 HL7Name `hl7:",name=REF_I13_Authorizationcontact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Providercontact
type REF_I13_Providercontact struct {
	HL7 HL7Name `hl7:",name=REF_I13_Providercontact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I13_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I13_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I13_Procedure struct {
	HL7                   HL7Name                        `hl7:",name=REF_I13_Procedure,type=tg"`
	PR1                   *PR1                           `hl7:"19,required,display=Procedures"`
	Authorizationcontact2 *REF_I13_Authorizationcontact2 `hl7:",display=Authorization_contact2"`
}

// Authorizationcontact2
type REF_I13_Authorizationcontact2 struct {
	HL7 HL7Name `hl7:",name=REF_I13_Authorizationcontact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I13_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I13_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes And Comments"`
	Resultsnotes []REF_I13_Resultsnotes `hl7:",display=Results_notes"`
}

// Resultsnotes
type REF_I13_Resultsnotes struct {
	HL7 HL7Name `hl7:",name=REF_I13_Resultsnotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Patientvisit
type REF_I13_Patientvisit struct {
	HL7 HL7Name `hl7:",name=REF_I13_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Modify patient referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding changes to an existing referral.
// Changes in a referral may include additional instructions from the referring provider, additional clinical information,
// and even additional information on patient demographics.
type REF_I13 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I13,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	Authorizationcontact *REF_I13_Authorizationcontact `hl7:",display=Authorization_contact"`
	Providercontact      []REF_I13_Providercontact     `hl7:",required,display=Provider_contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next Of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I13_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I13_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I13_Observation         `hl7:",display=Observation"`
	Patientvisit         *REF_I13_Patientvisit         `hl7:",display=Patient_visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes And Comments"`
}

// Authorizationcontact
type REF_I14_Authorizationcontact struct {
	HL7 HL7Name `hl7:",name=REF_I14_Authorizationcontact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Providercontact
type REF_I14_Providercontact struct {
	HL7 HL7Name `hl7:",name=REF_I14_Providercontact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I14_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I14_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I14_Procedure struct {
	HL7                   HL7Name                        `hl7:",name=REF_I14_Procedure,type=tg"`
	PR1                   *PR1                           `hl7:"19,required,display=Procedures"`
	Authorizationcontact2 *REF_I14_Authorizationcontact2 `hl7:",display=Authorization_contact2"`
}

// Authorizationcontact2
type REF_I14_Authorizationcontact2 struct {
	HL7 HL7Name `hl7:",name=REF_I14_Authorizationcontact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I14_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I14_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes And Comments"`
	Resultsnotes []REF_I14_Resultsnotes `hl7:",display=Results_notes"`
}

// Resultsnotes
type REF_I14_Resultsnotes struct {
	HL7 HL7Name `hl7:",name=REF_I14_Resultsnotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Patientvisit
type REF_I14_Patientvisit struct {
	HL7 HL7Name `hl7:",name=REF_I14_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Cancel patient referral
//
// This event triggers a message to be sent from one healthcare provider to another canceling a referral.  A previous referral
// may have been made in error, or perhaps the cancellation has come from the patient.
type REF_I14 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I14,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	Authorizationcontact *REF_I14_Authorizationcontact `hl7:",display=Authorization_contact"`
	Providercontact      []REF_I14_Providercontact     `hl7:",required,display=Provider_contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next Of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I14_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I14_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I14_Observation         `hl7:",display=Observation"`
	Patientvisit         *REF_I14_Patientvisit         `hl7:",display=Patient_visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes And Comments"`
}

// Authorizationcontact
type REF_I15_Authorizationcontact struct {
	HL7 HL7Name `hl7:",name=REF_I15_Authorizationcontact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Providercontact
type REF_I15_Providercontact struct {
	HL7 HL7Name `hl7:",name=REF_I15_Providercontact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I15_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I15_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I15_Procedure struct {
	HL7                   HL7Name                        `hl7:",name=REF_I15_Procedure,type=tg"`
	PR1                   *PR1                           `hl7:"19,required,display=Procedures"`
	Authorizationcontact2 *REF_I15_Authorizationcontact2 `hl7:",display=Authorization_contact2"`
}

// Authorizationcontact2
type REF_I15_Authorizationcontact2 struct {
	HL7 HL7Name `hl7:",name=REF_I15_Authorizationcontact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I15_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I15_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes And Comments"`
	Resultsnotes []REF_I15_Resultsnotes `hl7:",display=Results_notes"`
}

// Resultsnotes
type REF_I15_Resultsnotes struct {
	HL7 HL7Name `hl7:",name=REF_I15_Resultsnotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Patientvisit
type REF_I15_Patientvisit struct {
	HL7 HL7Name `hl7:",name=REF_I15_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request patient referral status
//
// This event triggers a message to be sent between healthcare providers regarding the status of a patient referral request.
// A previous referral has been made and acknowledged; however, no response has been received to indicate results and/or
// procedures performed.
type REF_I15 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I15,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	Authorizationcontact *REF_I15_Authorizationcontact `hl7:",display=Authorization_contact"`
	Providercontact      []REF_I15_Providercontact     `hl7:",required,display=Provider_contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next Of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I15_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I15_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I15_Observation         `hl7:",display=Observation"`
	Patientvisit         *REF_I15_Patientvisit         `hl7:",display=Patient_visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes And Comments"`
}

// Patient
type RGV_O15_Patient struct {
	HL7          HL7Name               `hl7:",name=RGV_O15_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	NTE          []NTE                 `hl7:"6,display=Notes And Comments"`
	AL1          []AL1                 `hl7:"7,display=Patient Allergy Information"`
	Patientvisit *RGV_O15_Patientvisit `hl7:",display=Patient_visit"`
}

// Patientvisit
type RGV_O15_Patientvisit struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"10,display=Participation Information"`
}

// Order
type RGV_O15_Order struct {
	HL7         HL7Name              `hl7:",name=RGV_O15_Order,type=tg"`
	ORC         *ORC                 `hl7:"11,required,display=Common Order"`
	Timing      []RGV_O15_Timing     `hl7:",display=Timing"`
	Orderdetail *RGV_O15_Orderdetail `hl7:",display=Order_detail"`
	PRT         []PRT                `hl7:"19,display=Participation Information"`
	Encoding    *RGV_O15_Encoding    `hl7:",display=Encoding"`
	Give        []RGV_O15_Give       `hl7:",required,display=Give"`
}

// Timing
type RGV_O15_Timing struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"12,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"13,display=Timing/quantity Relationship"`
}

// Orderdetail
type RGV_O15_Orderdetail struct {
	HL7                   HL7Name                        `hl7:",name=RGV_O15_Orderdetail,type=tg"`
	RXO                   *RXO                           `hl7:"14,required,display=Pharmacy/treatment Order"`
	Orderdetailsupplement *RGV_O15_Orderdetailsupplement `hl7:",display=Order_detail_supplement"`
}

// Orderdetailsupplement
type RGV_O15_Orderdetailsupplement struct {
	HL7        HL7Name              `hl7:",name=RGV_O15_Orderdetailsupplement,type=tg"`
	NTE        []NTE                `hl7:"15,required,display=Notes And Comments"`
	RXR        []RXR                `hl7:"16,required,display=Pharmacy/treatment Route"`
	Components []RGV_O15_Components `hl7:",display=Components"`
}

// Components
type RGV_O15_Components struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Components,type=tg"`
	RXC *RXC    `hl7:"17,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Encoding
type RGV_O15_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RGV_O15_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"20,required,display=Pharmacy/treatment Encoded Order"`
	PRT           []PRT                   `hl7:"21,display=Participation Information"`
	NTE           []NTE                   `hl7:"22,display=Notes And Comments"`
	Timingencoded []RGV_O15_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"25,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"26,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RGV_O15_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"23,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"24,display=Timing/quantity Relationship"`
}

// Give
type RGV_O15_Give struct {
	HL7         HL7Name               `hl7:",name=RGV_O15_Give,type=tg"`
	RXG         *RXG                  `hl7:"27,required,display=Pharmacy/treatment Give"`
	Timinggive  []RGV_O15_Timinggive  `hl7:",required,display=Timing_give"`
	RXR         []RXR                 `hl7:"30,required,display=Pharmacy/treatment Route"`
	RXC         []RXC                 `hl7:"31,display=Pharmacy/treatment Component Order"`
	Observation []RGV_O15_Observation `hl7:",display=Observation"`
}

// Timinggive
type RGV_O15_Timinggive struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Timinggive,type=tg"`
	TQ1 *TQ1    `hl7:"28,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"29,display=Timing/quantity Relationship"`
}

// Observation
type RGV_O15_Observation struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Observation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/result"`
	PRT []PRT   `hl7:"33,display=Participation Information"`
	NTE []NTE   `hl7:"34,display=Notes And Comments"`
}

// Pharmacy/treatment give
//
// The RDS message's RXD segment carries the dispense data for a given issuance of medication: thus it may describe a single
// dose, a half-day dose, a daily dose, a refill of a prescription, etc. It does not contain the given instructions or scheduling
// information. When this "give" (i.e., administration) information needs to be transmitted from the pharmacy or treatment
// application to another application, it is done with the RGV message.
//
// The RGV message uses the RXG segment to record drug or treatment administration instructions. It may carry information
// about a single scheduled administration on a drug or treatment, or it may carry information about multiple administrations.
// If the pharmacy or treatment application (or some other application) needs to create an unambiguous MAR report where each
// administration is matched to a particular give date/time instruction, it may use the RGV message as described in the following
// way:
//
// For each scheduled administration of the medication, the pharmacy/treatment issues either a single RGV message or a single
// RGV message with multiple RXG segments, one for each scheduled administration. The actual administrations (transmitted
// by one or more RAS messages) are matched against the scheduled ones by recording in each RXA segment the Give Sub-ID of the
// corresponding RXG segment. If more than one administration needs to be matched (as in the case of recording a change or rate
// of an IV solution) the administering application issues additional RXA segment(s) (corresponding to the same RXG segment).
// If no matching is needed, the Give Sub-ID of the RXA segments has the value zero (0).
//
// The ORC must have the filler order number and the order control code RE. The RXE and associated RXCs may be present if the receiving
// application needs any of their data. The RXG carries the scheduled administration data for either a single "give instruction"
// (single dose) of medication or for multiple "give instructions." The RXG is not a complete record of an order. Use the RXO
// and RXE segments if a complete order is needed. It is a record from the pharmacy or treatment application to the Nursing application
// (or other) with drug/treatment administration instructions.
//
// Note: The use of RGV with the trigger of O01 and RRG with the trigger O02 is maintained for backward compatibility as of v2.4
// and is withdrawn as of v2.7.
type RGV_O15 struct {
	HL7     HL7Name          `hl7:",name=RGV_O15,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential Segment"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RGV_O15_Patient `hl7:",display=Patient"`
	Order   []RGV_O15_Order  `hl7:",required,display=Order"`
}

// Authorization
type RPA_I08_Authorization struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Authorization,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I08_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I08_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I08_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I08_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I08_Authorization2 `hl7:",display=Authorization2"`
}

// Authorization2
type RPA_I08_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I08_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I08_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes And Comments"`
	Results []RPA_I08_Results `hl7:",display=Results"`
}

// Results
type RPA_I08_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/result"`
	NTE []NTE   `hl7:"26,display=Notes And Comments"`
}

// Visit
type RPA_I08_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return patient authorization
type RPA_I08 struct {
	HL7           HL7Name                `hl7:",name=RPA_I08,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,display=Message Acknowledgment"`
	RF1           *RF1                   `hl7:"5,display=Referral Information"`
	Authorization *RPA_I08_Authorization `hl7:",display=Authorization"`
	Provider      []RPA_I08_Provider     `hl7:",required,display=Provider"`
	PID           *PID                   `hl7:"10,required,display=Patient Identification"`
	NK1           []NK1                  `hl7:"11,display=Next Of Kin / Associated Parties"`
	GT1           []GT1                  `hl7:"12,display=Guarantor"`
	Insurance     []RPA_I08_Insurance    `hl7:",required,display=Insurance"`
	ACC           *ACC                   `hl7:"16,display=Accident"`
	DG1           []DG1                  `hl7:"17,display=Diagnosis"`
	DRG           []DRG                  `hl7:"18,display=Diagnosis Related Group"`
	AL1           []AL1                  `hl7:"19,display=Patient Allergy Information"`
	Procedure     []RPA_I08_Procedure    `hl7:",display=Procedure"`
	Observation   []RPA_I08_Observation  `hl7:",display=Observation"`
	Visit         *RPA_I08_Visit         `hl7:",display=Visit"`
	NTE           []NTE                  `hl7:"29,display=Notes And Comments"`
}

// Authorization1
type RPA_I09_Authorization1 struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Authorization1,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I09_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I09_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I09_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I09_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I09_Authorization2 `hl7:",display=Authorization 2"`
}

// Authorization2
type RPA_I09_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I09_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I09_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes And Comments"`
	Results []RPA_I09_Results `hl7:",display=Results"`
}

// Results
type RPA_I09_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/result"`
	NTE []NTE   `hl7:"26,display=Notes And Comments"`
}

// Visit
type RPA_I09_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return Modification to an Authorization
//
// This event triggers a message sent from a healthcare provider to a payor requesting changes to a previously referenced
// authorization.  For example, a provider may determine that a substitute testing or surgical procedure should be performed
// on a specified patient.
type RPA_I09 struct {
	HL7            HL7Name                 `hl7:",name=RPA_I09,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	RF1            *RF1                    `hl7:"5,display=Referral Information"`
	Authorization1 *RPA_I09_Authorization1 `hl7:",display=Authorization 1"`
	Provider       []RPA_I09_Provider      `hl7:",required,display=Provider"`
	PID            *PID                    `hl7:"10,required,display=Patient Identification"`
	NK1            []NK1                   `hl7:"11,display=Next Of Kin / Associated Parties"`
	GT1            []GT1                   `hl7:"12,display=Guarantor"`
	Insurance      []RPA_I09_Insurance     `hl7:",display=Insurance"`
	ACC            *ACC                    `hl7:"16,display=Accident"`
	DG1            []DG1                   `hl7:"17,display=Diagnosis"`
	DRG            []DRG                   `hl7:"18,display=Diagnosis Related Group"`
	AL1            []AL1                   `hl7:"19,display=Patient Allergy Information"`
	Procedure      []RPA_I09_Procedure     `hl7:",required,display=Procedure"`
	Observation    []RPA_I09_Observation   `hl7:",display=Observation"`
	Visit          *RPA_I09_Visit          `hl7:",display=Visit"`
	NTE            []NTE                   `hl7:"29,display=Notes And Comments"`
}

// Authorization1
type RPA_I10_Authorization1 struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Authorization1,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I10_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I10_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I10_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I10_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I10_Authorization2 `hl7:",display=Authorization 2"`
}

// Authorization2
type RPA_I10_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I10_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I10_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes And Comments"`
	Results []RPA_I10_Results `hl7:",display=Results"`
}

// Results
type RPA_I10_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/result"`
	NTE []NTE   `hl7:"26,display=Notes And Comments"`
}

// Visit
type RPA_I10_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return Resubmission of an Authorization
//
// If a previously submitted request for treatment authorization is rejected or canceled, this event could trigger a resubmission
// message for a referenced authorization.  For example, the payor may have rejected a request until additional clinical
// information is sent to support the authorization request.
type RPA_I10 struct {
	HL7            HL7Name                 `hl7:",name=RPA_I10,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	RF1            *RF1                    `hl7:"5,display=Referral Information"`
	Authorization1 *RPA_I10_Authorization1 `hl7:",display=Authorization 1"`
	Provider       []RPA_I10_Provider      `hl7:",required,display=Provider"`
	PID            *PID                    `hl7:"10,required,display=Patient Identification"`
	NK1            []NK1                   `hl7:"11,display=Next Of Kin / Associated Parties"`
	GT1            []GT1                   `hl7:"12,display=Guarantor"`
	Insurance      []RPA_I10_Insurance     `hl7:",display=Insurance"`
	ACC            *ACC                    `hl7:"16,display=Accident"`
	DG1            []DG1                   `hl7:"17,display=Diagnosis"`
	DRG            []DRG                   `hl7:"18,display=Diagnosis Related Group"`
	AL1            []AL1                   `hl7:"19,display=Patient Allergy Information"`
	Procedure      []RPA_I10_Procedure     `hl7:",required,display=Procedure"`
	Observation    []RPA_I10_Observation   `hl7:",display=Observation"`
	Visit          *RPA_I10_Visit          `hl7:",display=Visit"`
	NTE            []NTE                   `hl7:"29,display=Notes And Comments"`
}

// Authorization1
type RPA_I11_Authorization1 struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Authorization1,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I11_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I11_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I11_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I11_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I11_Authorization2 `hl7:",display=Authorization 2"`
}

// Authorization2
type RPA_I11_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I11_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I11_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes And Comments"`
	Results []RPA_I11_Results `hl7:",display=Results"`
}

// Results
type RPA_I11_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/result"`
	NTE []NTE   `hl7:"26,display=Notes And Comments"`
}

// Visit
type RPA_I11_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return Cancellation of an Authorization
//
// This event may trigger the cancellation of an authorization.  It may be used by the provider to indicate that an authorized
// service was not performed, or perhaps that the patient changed to another provider.  A payor may use this request to reject
// a submitted authorization request from a provider.
type RPA_I11 struct {
	HL7            HL7Name                 `hl7:",name=RPA_I11,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	RF1            *RF1                    `hl7:"5,display=Referral Information"`
	Authorization1 *RPA_I11_Authorization1 `hl7:",display=Authorization 1"`
	Provider       []RPA_I11_Provider      `hl7:",required,display=Provider"`
	PID            *PID                    `hl7:"10,required,display=Patient Identification"`
	NK1            []NK1                   `hl7:"11,display=Next Of Kin / Associated Parties"`
	GT1            []GT1                   `hl7:"12,display=Guarantor"`
	Insurance      []RPA_I11_Insurance     `hl7:",display=Insurance"`
	ACC            *ACC                    `hl7:"16,display=Accident"`
	DG1            []DG1                   `hl7:"17,display=Diagnosis"`
	DRG            []DRG                   `hl7:"18,display=Diagnosis Related Group"`
	AL1            []AL1                   `hl7:"19,display=Patient Allergy Information"`
	Procedure      []RPA_I11_Procedure     `hl7:",required,display=Procedure"`
	Observation    []RPA_I11_Observation   `hl7:",display=Observation"`
	Visit          *RPA_I11_Visit          `hl7:",display=Visit"`
	NTE            []NTE                   `hl7:"29,display=Notes And Comments"`
}

// Provider
type RPI_I01_Provider struct {
	HL7 HL7Name `hl7:",name=RPI_I01_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Guarantorinsurance
type RPI_I01_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RPI_I01_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RPI_I01_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RPI_I01_Insurance struct {
	HL7 HL7Name `hl7:",name=RPI_I01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Request for insurance information
type RPI_I01 struct {
	HL7                HL7Name                     `hl7:",name=RPI_I01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	MSA                *MSA                        `hl7:"4,display=Message Acknowledgment"`
	Provider           []RPI_I01_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"8,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RPI_I01_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	NTE                []NTE                       `hl7:"13,display=Notes And Comments"`
}

// Provider
type RPI_I04_Provider struct {
	HL7 HL7Name `hl7:",name=RPI_I04_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// GuarantorInsurance
type RPI_I04_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RPI_I04_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RPI_I04_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RPI_I04_Insurance struct {
	HL7 HL7Name `hl7:",name=RPI_I04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Return Patient Demographic Data
//
// This event triggers a request from one healthcare provider to another for patient demographic information, including
// insurance and billing information.  Typically, this transaction would occur between one provider to another, but it could
// also be directed to a payor.
type RPI_I04 struct {
	HL7                HL7Name                     `hl7:",name=RPI_I04,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	MSA                *MSA                        `hl7:"4,required,display=Message Acknowledgment"`
	Provider           []RPI_I04_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"8,display=Next Of Kin / Associated Parties"`
	GuarantorInsurance *RPI_I04_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"13,display=Notes And Comments"`
}

// Provider
type RPL_I02_Provider struct {
	HL7 HL7Name `hl7:",name=RPL_I02_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Return Patient Selection Display List
//
// This trigger event occurs when the inquirer specifies a request for a name lookup listing.  Generally, this request is used
// by the responder when insufficient data is on hand for a positive match.  In this case, the requester may ask for a list of possible
// candidates from which to make a selection.  This event code is also used by the responder to signify that the return information
// contains a list of information rather than information specific to a single patient.
type RPL_I02 struct {
	HL7      HL7Name            `hl7:",name=RPL_I02,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	MSA      *MSA               `hl7:"4,required,display=Message Acknowledgment"`
	Provider []RPL_I02_Provider `hl7:",required,display=Provider"`
	NTE      []NTE              `hl7:"7,display=Notes And Comments"`
	DSP      []DSP              `hl7:"8,display=Display Data"`
	DSC      *DSC               `hl7:"9,display=Continuation Pointer"`
}

// Provider
type RPR_I03_Provider struct {
	HL7 HL7Name `hl7:",name=RPR_I03_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Return Patient List
type RPR_I03 struct {
	HL7      HL7Name            `hl7:",name=RPR_I03,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	MSA      *MSA               `hl7:"4,display=Message Acknowledgment"`
	Provider []RPR_I03_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"7,required,display=Patient Identification"`
	NTE      []NTE              `hl7:"8,display=Notes And Comments"`
}

// Authorization
type RQA_I08_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I08_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Guarantorinsurance
type RQA_I08_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I08_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I08_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I08_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I08_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RQA_I08_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization2 *RQA_I08_Authorization2 `hl7:",display=Authorization2"`
}

// Authorization2
type RQA_I08_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I08_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I08_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes And Comments"`
	Results []RQA_I08_Results `hl7:",display=Results"`
}

// Results
type RQA_I08_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Visit
type RQA_I08_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request for treatment authorization information
//
// This event triggers a message to be sent from a healthcare provider to a payor requesting authorization to perform specific
// medical procedures or tests on a given patient.  The specific medical procedures must be filled out in the PR1 segments.
// Each repeating PR1 segment may be paired with an AUT segment so that authorization information can be given regarding dollar
// amounts, number of treatments, and perhaps the estimated length of stay for treatment.  The OBR and OBX segments should
// be used to include any relevant clinical information that may be required to support or process the authorization.
type RQA_I08 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I08,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I08_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I08_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RQA_I08_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I08_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I08_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I08_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes And Comments"`
}

// Authorization
type RQA_I09_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I09_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Guarantorinsurance
type RQA_I09_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I09_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I09_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I09_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I09_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RQA_I09_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization2 *RQA_I09_Authorization2 `hl7:",display=Authorization2"`
}

// Authorization2
type RQA_I09_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I09_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I09_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes And Comments"`
	Results []RQA_I09_Results `hl7:",display=Results"`
}

// Results
type RQA_I09_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Visit
type RQA_I09_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request for modification to an authorization
//
// This event triggers a message sent from a healthcare provider to a payor requesting changes to a previously referenced
// authorization.  For example, a provider may determine that a substitute testing or surgical procedure should be performed
// on a specified patient.
type RQA_I09 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I09,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I09_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I09_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RQA_I09_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I09_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I09_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I09_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes And Comments"`
}

// Authorization
type RQA_I10_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I10_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Guarantorinsurance
type RQA_I10_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I10_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I10_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I10_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I10_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RQA_I10_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization2 *RQA_I10_Authorization2 `hl7:",display=Authorization2"`
}

// Authorization2
type RQA_I10_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I10_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I10_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes And Comments"`
	Results []RQA_I10_Results `hl7:",display=Results"`
}

// Results
type RQA_I10_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Visit
type RQA_I10_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request for resubmission of an authorization
//
// If a previously submitted request for treatment authorization is rejected or canceled, this event could trigger a resubmission
// message for a referenced authorization.  For example, the payor may have rejected a request until additional clinical
// information is sent to support the authorization request.
type RQA_I10 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I10,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I10_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I10_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RQA_I10_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I10_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I10_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I10_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes And Comments"`
}

// Authorization
type RQA_I11_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I11_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Guarantorinsurance
type RQA_I11_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I11_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I11_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I11_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I11_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RQA_I11_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization2 *RQA_I11_Authorization2 `hl7:",display=Authorization2"`
}

// Authorization2
type RQA_I11_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I11_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I11_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes And Comments"`
	Results []RQA_I11_Results `hl7:",display=Results"`
}

// Results
type RQA_I11_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/result"`
	NTE []NTE   `hl7:"25,display=Notes And Comments"`
}

// Visit
type RQA_I11_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request for cancellation of an authorization
//
// This event may trigger the cancellation of an authorization.  It may be used by the provider to indicate that an authorized
// service was not performed, or perhaps that the patient changed to another provider.  A payor may use this request to reject
// a submitted authorization request from a provider.
type RQA_I11 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I11,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I11_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I11_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RQA_I11_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I11_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I11_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I11_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes And Comments"`
}

// Provider
type RQC_I05_Provider struct {
	HL7 HL7Name `hl7:",name=RQC_I05_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Request for patient clinical information
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5 section 5.4, "Query Response Message
// Pairs." The original mode query and the QRD/QRF segments have been replaced.
//
// This event is used to request clinical information for a specific patient. Generally, this transaction occurs between
// one provider and another (typically a laboratory or radiology, etc.). However, it may also be very useful for a payor-to-provider
// request for clinical observation information to be used in considering a request for treatment authorization.
type RQC_I05 struct {
	HL7      HL7Name            `hl7:",name=RQC_I05,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	QRD      *QRD               `hl7:"4,required,display=Withdrawn"`
	QRF      *QRF               `hl7:"5,display=Withdrawn"`
	Provider []RQC_I05_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"8,required,display=Patient Identification"`
	NK1      []NK1              `hl7:"9,display=Next Of Kin / Associated Parties"`
	GT1      []GT1              `hl7:"10,display=Guarantor"`
	NTE      []NTE              `hl7:"11,display=Notes And Comments"`
}

// Provider
type RQC_I06_Provider struct {
	HL7 HL7Name `hl7:",name=RQC_I06_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Request/receipt of clinical data listing
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5 section 5.4, "Query Response Message
// Pairs."   The original mode query and the QRD/QRF segments have been replaced.
//
// This event code is sent from one healthcare provider to another (typically a laboratory or radiology, etc.) to request
// a list of available clinical observation information.  When the provider is dealing with a community model in which remote
// requests make transmission of large amounts of data impractical, this event code will provide for interactive lists of
// transactions from which more specific selections can be made.
type RQC_I06 struct {
	HL7      HL7Name            `hl7:",name=RQC_I06,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	QRD      *QRD               `hl7:"4,required,display=Withdrawn"`
	QRF      *QRF               `hl7:"5,display=Withdrawn"`
	Provider []RQC_I06_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"8,required,display=Patient Identification"`
	NK1      []NK1              `hl7:"9,display=Next Of Kin / Associated Parties"`
	GT1      []GT1              `hl7:"10,display=Guarantor"`
	NTE      []NTE              `hl7:"11,display=Notes And Comments"`
}

// Provider
type RQI_I01_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I01_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Guarantorinsurance
type RQI_I01_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I01_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []RQI_I01_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I01_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Request for insurance information
//
// This event triggers a message to be sent from one healthcare provider to another to request insurance information for a
// specified patient.
type RQI_I01 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	Provider           []RQI_I01_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RQI_I01_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes And Comments"`
}

// Provider
type RQI_I02_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I02_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Guarantorinsurance
type RQI_I02_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I02_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []RQI_I02_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I02_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I02_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Request/receipt of patient selection display list
//
// This trigger event occurs when the inquirer specifies a request for a name lookup listing.  Generally, this request is used
// by the responder when insufficient data is on hand for a positive match.  In this case, the requester may ask for a list of possible
// candidates from which to make a selection.  This event code is also used by the responder to signify that the return information
// contains a list of information rather than information specific to a single patient.
type RQI_I02 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I02,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	Provider           []RQI_I02_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RQI_I02_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes And Comments"`
}

// Provider
type RQI_I03_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I03_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Guarantorinsurance
type RQI_I03_Guarantorinsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I03_Guarantorinsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []RQI_I03_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I03_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Request/receipt of patient selection list
//
// This trigger event occurs when the inquirer specifies a request for a listing of patient names. This event differs from
// event I02 (request/receipts of patient selection display list) in that it returns the patient list in repeating PID segments
// instead of repeating DSP segments.
type RQI_I03 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I03,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	Provider           []RQI_I03_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next Of Kin / Associated Parties"`
	Guarantorinsurance *RQI_I03_Guarantorinsurance `hl7:",display=Guarantor_insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes And Comments"`
}

// Provider
type RQP_I04_Provider struct {
	HL7 HL7Name `hl7:",name=RQP_I04_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Request for patient demographic data
//
// This event triggers a request from one healthcare provider to another for patient demographic information, including
// insurance and billing information.  Typically, this transaction would occur between one provider to another, but it could
// also be directed to a payor.
type RQP_I04 struct {
	HL7      HL7Name            `hl7:",name=RQP_I04,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential Segment"`
	Provider []RQP_I04_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"6,required,display=Patient Identification"`
	NK1      []NK1              `hl7:"7,display=Next Of Kin / Associated Parties"`
	GT1      []GT1              `hl7:"8,display=Guarantor"`
	NTE      []NTE              `hl7:"9,display=Notes And Comments"`
}

// Response
type RRA_O18_Response struct {
	HL7     HL7Name          `hl7:",name=RRA_O18_Response,type=tg"`
	Patient *RRA_O18_Patient `hl7:",display=Patient"`
	Order   []RRA_O18_Order  `hl7:",required,display=Order"`
}

// Patient
type RRA_O18_Patient struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type RRA_O18_Order struct {
	HL7            HL7Name                 `hl7:",name=RRA_O18_Order,type=tg"`
	ORC            *ORC                    `hl7:"9,required,display=Common Order"`
	PRT            []PRT                   `hl7:"10,display=Participation Information"`
	Timing         []RRA_O18_Timing        `hl7:",display=Timing"`
	Administration *RRA_O18_Administration `hl7:",display=Administration"`
}

// Timing
type RRA_O18_Timing struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Administration
type RRA_O18_Administration struct {
	HL7       HL7Name             `hl7:",name=RRA_O18_Administration,type=tg"`
	Treatment []RRA_O18_Treatment `hl7:",required,display=Treatment"`
	RXR       *RXR                `hl7:"15,required,display=Pharmacy/treatment Route"`
}

// Treatment
type RRA_O18_Treatment struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Treatment,type=tg"`
	RXA *RXA    `hl7:"13,required,display=Pharmacy/treatment Administration"`
	PRT []PRT   `hl7:"14,display=Participation Information"`
}

// Pharmacy/treatment administration acknowledgment
//
// Note: The use of RAS with the trigger of O01 and RRA with the trigger O02 is maintained for backward compatibility as of v2.4
// and is withdrawn as of v2.7.
type RRA_O18 struct {
	HL7      HL7Name           `hl7:",name=RRA_O18,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *RRA_O18_Response `hl7:",display=Response"`
}

// Response
type RRD_O14_Response struct {
	HL7     HL7Name          `hl7:",name=RRD_O14_Response,type=tg"`
	Patient *RRD_O14_Patient `hl7:",display=Patient"`
	Order   []RRD_O14_Order  `hl7:",required,display=Order"`
}

// Patient
type RRD_O14_Patient struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type RRD_O14_Order struct {
	HL7      HL7Name           `hl7:",name=RRD_O14_Order,type=tg"`
	ORC      *ORC              `hl7:"9,required,display=Common Order"`
	Timing   []RRD_O14_Timing  `hl7:",display=Timing"`
	Dispense *RRD_O14_Dispense `hl7:",display=Dispense"`
	PRT      []PRT             `hl7:"16,display=Participation Information"`
}

// Timing
type RRD_O14_Timing struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/quantity Relationship"`
}

// Dispense
type RRD_O14_Dispense struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Dispense,type=tg"`
	RXD *RXD    `hl7:"12,required,display=Pharmacy/treatment Dispense"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
	RXR []RXR   `hl7:"14,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"15,display=Pharmacy/treatment Component Order"`
}

// Pharmacy/treatment dispense acknowledgment
type RRD_O14 struct {
	HL7      HL7Name           `hl7:",name=RRD_O14,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *RRD_O14_Response `hl7:",display=Response"`
}

// Response
type RRE_O12_Response struct {
	HL7     HL7Name          `hl7:",name=RRE_O12_Response,type=tg"`
	Patient *RRE_O12_Patient `hl7:",display=Patient"`
	Order   []RRE_O12_Order  `hl7:",required,display=Order"`
}

// Patient
type RRE_O12_Patient struct {
	HL7 HL7Name `hl7:",name=RRE_O12_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type RRE_O12_Order struct {
	HL7      HL7Name           `hl7:",name=RRE_O12_Order,type=tg"`
	ORC      *ORC              `hl7:"9,required,display=Common Order"`
	Timing   []RRE_O12_Timing  `hl7:",display=Timing"`
	Encoding *RRE_O12_Encoding `hl7:",display=Encoding"`
	PRT      []PRT             `hl7:"18,display=Participation Information"`
}

// Timing
type RRE_O12_Timing struct {
	HL7 HL7Name `hl7:",name=RRE_O12_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/quantity Relationship"`
}

// Encoding
type RRE_O12_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RRE_O12_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"12,required,display=Pharmacy/treatment Encoded Order"`
	NTE           []NTE                   `hl7:"13,display=Notes And Comments"`
	Timingencoded []RRE_O12_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"16,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"17,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RRE_O12_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RRE_O12_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/quantity Relationship"`
}

// Pharmacy/treatment encoded order acknowledgment
//
// Note: The use of RDE with the trigger of O01 and RRE with the trigger O02 is maintained for backward compatibility as of v2.4
// and is withdrawn as of v2.7.
type RRE_O12 struct {
	HL7      HL7Name           `hl7:",name=RRE_O12,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *RRE_O12_Response `hl7:",display=Response"`
}

// Response
type RRE_O26_Response struct {
	HL7     HL7Name          `hl7:",name=RRE_O26_Response,type=tg"`
	Patient *RRE_O26_Patient `hl7:",display=Patient"`
	Order   []RRE_O26_Order  `hl7:",required,display=Order"`
}

// Patient
type RRE_O26_Patient struct {
	HL7 HL7Name `hl7:",name=RRE_O26_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type RRE_O26_Order struct {
	HL7      HL7Name           `hl7:",name=RRE_O26_Order,type=tg"`
	ORC      *ORC              `hl7:"9,required,display=Common Order"`
	Timing   []RRE_O26_Timing  `hl7:",display=Timing"`
	Encoding *RRE_O26_Encoding `hl7:",display=Encoding"`
	PRT      []PRT             `hl7:"18,display=Participation Information"`
}

// Timing
type RRE_O26_Timing struct {
	HL7 HL7Name `hl7:",name=RRE_O26_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/quantity Relationship"`
}

// Encoding
type RRE_O26_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RRE_O26_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"12,required,display=Pharmacy/treatment Encoded Order"`
	NTE           []NTE                   `hl7:"13,display=Notes And Comments"`
	Timingencoded []RRE_O26_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"16,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"17,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RRE_O26_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RRE_O26_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/quantity Relationship"`
}

// Pharmacy/Treatment Refill Authorization Acknowledgement
type RRE_O26 struct {
	HL7      HL7Name           `hl7:",name=RRE_O26,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *RRE_O26_Response `hl7:",display=Response"`
}

// Response
type RRG_O16_Response struct {
	HL7     HL7Name          `hl7:",name=RRG_O16_Response,type=tg"`
	Patient *RRG_O16_Patient `hl7:",display=Patient"`
	Order   []RRG_O16_Order  `hl7:",required,display=Order"`
}

// Patient
type RRG_O16_Patient struct {
	HL7 HL7Name `hl7:",name=RRG_O16_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes And Comments"`
}

// Order
type RRG_O16_Order struct {
	HL7    HL7Name          `hl7:",name=RRG_O16_Order,type=tg"`
	ORC    *ORC             `hl7:"9,required,display=Common Order"`
	PRT    []PRT            `hl7:"10,display=Participation Information"`
	Timing []RRG_O16_Timing `hl7:",display=Timing"`
	Give   *RRG_O16_Give    `hl7:",display=Give"`
}

// Timing
type RRG_O16_Timing struct {
	HL7 HL7Name `hl7:",name=RRG_O16_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/quantity Relationship"`
}

// Give
type RRG_O16_Give struct {
	HL7        HL7Name              `hl7:",name=RRG_O16_Give,type=tg"`
	RXG        *RXG                 `hl7:"13,required,display=Pharmacy/treatment Give"`
	Timinggive []RRG_O16_Timinggive `hl7:",required,display=Timing_give"`
	RXR        []RXR                `hl7:"16,required,display=Pharmacy/treatment Route"`
	RXC        []RXC                `hl7:"17,display=Pharmacy/treatment Component Order"`
}

// Timinggive
type RRG_O16_Timinggive struct {
	HL7 HL7Name `hl7:",name=RRG_O16_Timinggive,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/quantity Relationship"`
}

// Pharmacy/treatment give acknowledgment
//
// Note: The use of RGV with the trigger of O01 and RRG with the trigger O02 is maintained for backward compatibility as of v2.4
// and is withdrawn as of v2.7.
type RRG_O16 struct {
	HL7      HL7Name           `hl7:",name=RRG_O16,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential Segment"`
	NTE      []NTE             `hl7:"6,display=Notes And Comments"`
	Response *RRG_O16_Response `hl7:",display=Response"`
}

// Authorizationcontact
type RRI_I12_Authorizationcontact struct {
	HL7 HL7Name `hl7:",name=RRI_I12_Authorizationcontact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Providercontact
type RRI_I12_Providercontact struct {
	HL7 HL7Name `hl7:",name=RRI_I12_Providercontact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I12_Procedure struct {
	HL7                   HL7Name                        `hl7:",name=RRI_I12_Procedure,type=tg"`
	PR1                   *PR1                           `hl7:"15,required,display=Procedures"`
	Authorizationcontact2 *RRI_I12_Authorizationcontact2 `hl7:",display=Authorization_contact2"`
}

// Authorizationcontact2
type RRI_I12_Authorizationcontact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I12_Authorizationcontact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I12_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I12_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes And Comments"`
	Resultsnotes []RRI_I12_Resultsnotes `hl7:",display=Results_notes"`
}

// Resultsnotes
type RRI_I12_Resultsnotes struct {
	HL7 HL7Name `hl7:",name=RRI_I12_Resultsnotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/result"`
	NTE []NTE   `hl7:"21,display=Notes And Comments"`
}

// Patientvisit
type RRI_I12_Patientvisit struct {
	HL7 HL7Name `hl7:",name=RRI_I12_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Return referal information
type RRI_I12 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I12,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	Authorizationcontact *RRI_I12_Authorizationcontact `hl7:",display=Authorization_contact"`
	Providercontact      []RRI_I12_Providercontact     `hl7:",required,display=Provider_contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I12_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I12_Observation         `hl7:",display=Observation"`
	Patientvisit         *RRI_I12_Patientvisit         `hl7:",display=Patient_visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes And Comments"`
}

// AuthorizationContact
type RRI_I13_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I13_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// ProviderContact
type RRI_I13_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I13_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I13_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I13_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"15,required,display=Procedures"`
	AuthorizationContact *RRI_I13_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I13_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I13_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I13_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I13_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes And Comments"`
	ResultsNotes []RRI_I13_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I13_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I13_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/result"`
	NTE []NTE   `hl7:"21,display=Notes And Comments"`
}

// PatientVisit
type RRI_I13_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I13_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Modify Patient Referral Response
//
// This event triggers a message to be sent from one healthcare provider to another regarding changes to an existing referral.
// Changes in a referral may include additional instructions from the referring provider, additional clinical information,
// and even additional information on patient demographics.
type RRI_I13 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I13,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	AuthorizationContact *RRI_I13_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I13_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I13_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I13_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I13_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes And Comments"`
}

// AuthorizationContact
type RRI_I14_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I14_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// ProviderContact
type RRI_I14_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I14_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I14_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I14_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"15,required,display=Procedures"`
	AuthorizationContact *RRI_I14_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I14_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I14_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I14_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I14_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes And Comments"`
	ResultsNotes []RRI_I14_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I14_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I14_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/result"`
	NTE []NTE   `hl7:"21,display=Notes And Comments"`
}

// PatientVisit
type RRI_I14_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I14_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Cancel Patient Referral Response
//
// This event triggers a message to be sent from one healthcare provider to another canceling a referral.  A previous referral
// may have been made in error, or perhaps the cancellation has come from the patient.
type RRI_I14 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I14,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	AuthorizationContact *RRI_I14_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I14_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I14_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I14_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I14_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes And Comments"`
}

// AuthorizationContact
type RRI_I15_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I15_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// ProviderContact
type RRI_I15_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I15_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I15_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I15_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"15,required,display=Procedures"`
	AuthorizationContact *RRI_I15_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I15_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I15_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I15_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I15_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes And Comments"`
	ResultsNotes []RRI_I15_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I15_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I15_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/result"`
	NTE []NTE   `hl7:"21,display=Notes And Comments"`
}

// PatientVisit
type RRI_I15_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I15_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Return Request Patient Referral Status
//
// This event triggers a message to be sent between healthcare providers regarding the status of a patient referral request.
// A previous referral has been made and acknowledged; however, no response has been received to indicate results and/or
// procedures performed.
type RRI_I15 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I15,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential Segment"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	AuthorizationContact *RRI_I15_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I15_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I15_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I15_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I15_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes And Comments"`
}

// QueryAck
type RSP_E03_QueryAck struct {
	HL7                          HL7Name                                `hl7:",name=RSP_E03_QueryAck,type=tg"`
	QAK                          *QAK                                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD                          *QPD                                   `hl7:"7,required,display=Query Parameter Definition"`
	InvoiceProcessingResultsInfo []RSP_E03_InvoiceProcessingResultsInfo `hl7:",display=Invoice Processing Results Info"`
}

// InvoiceProcessingResultsInfo
type RSP_E03_InvoiceProcessingResultsInfo struct {
	HL7 HL7Name `hl7:",name=RSP_E03_InvoiceProcessingResultsInfo,type=tg"`
	IPR *IPR    `hl7:"8,required,display=Invoice Processing Results"`
}

// HealthCare Services Invoice Status Query Response
//
// This message is used to respond to a QPB^E03 – Query HealthCare Services Invoice. It provides Invoice and invoice processing
// information to a Provider.
//
// A QBP^E03 – Query HealthCare Services Invoice can be used to query against an Invoice or a specific Product/Service Line
// Item in an Invoice. The same response message, RSP^E03 – HealthCare Services Invoice Query Response, is used for both types
// of query.
type RSP_E03 struct {
	HL7      HL7Name           `hl7:",name=RSP_E03,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	SFT      []SFT             `hl7:"2,display=Software Segment"`
	UAC      []UAC             `hl7:"3,display=User Authentication Credential Segment"`
	MSA      *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"5,display=Error"`
	QueryAck *RSP_E03_QueryAck `hl7:",required,display=Query Ack"`
}

// QueryAck
type RSP_E22_QueryAck struct {
	HL7               HL7Name                    `hl7:",name=RSP_E22_QueryAck,type=tg"`
	QAK               *QAK                       `hl7:"6,required,display=Query Acknowledgment"`
	QPD               *QPD                       `hl7:"7,required,display=Query Parameter Definition"`
	AuthorizationInfo *RSP_E22_AuthorizationInfo `hl7:",display=Authorization Info"`
}

// AuthorizationInfo
type RSP_E22_AuthorizationInfo struct {
	HL7         HL7Name               `hl7:",name=RSP_E22_AuthorizationInfo,type=tg"`
	IVC         *IVC                  `hl7:"8,required,display=Invoice Segment"`
	PSG         *PSG                  `hl7:"9,required,display=Product/service Group"`
	PslItemInfo []RSP_E22_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type RSP_E22_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=RSP_E22_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"10,required,display=Product/service Line Item"`
}

// Authorization Request StatusResponse
//
// This message is used to respond to a QPB_E22 –  Query Authorization Request Status. It provides Authorization status information
// to a Provider.
type RSP_E22 struct {
	HL7      HL7Name           `hl7:",name=RSP_E22,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	SFT      []SFT             `hl7:"2,display=Software Segment"`
	UAC      []UAC             `hl7:"3,display=User Authentication Credential Segment"`
	MSA      *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"5,display=Error"`
	QueryAck *RSP_E22_QueryAck `hl7:",required,display=Query Ack"`
}

// Segmentpattern
type RSP_K11_Segmentpattern struct {
	HL7 HL7Name `hl7:",name=RSP_K11_Segmentpattern,type=tg"`
	Hxx *Hxx    `hl7:"8,required,display=Any Hl7 Segment"`
}

// Segment pattern response in response to QBP^Q11
//
// The RSP_K11 supports a Segment Pattern Response to the QBP and contains the MSH, MSA, ERR, QAK, QPD, variable content segments,
// and the DSC.  Its default trigger event is K11.  A standard or site-defined response may use this trigger event or may specify
// a unique trigger event value in its Query Profile.  If a unique trigger event value is chosen for a site-defined response,
// that value SHALL begin with Z.
//
// Note on RSP:  The Query Profile for each QBP/RSP pair shall specify an explicit segment pattern grammar in place of the ellipses
// shown above in the RSP_K11 grammar.
type RSP_K11 struct {
	HL7            HL7Name                 `hl7:",name=RSP_K11,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR            *ERR                    `hl7:"5,display=Error"`
	QAK            *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD            *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	Segmentpattern *RSP_K11_Segmentpattern `hl7:",display=Segment_pattern"`
	DSC            *DSC                    `hl7:"9,display=Continuation Pointer"`
}

// Queryresponse
type RSP_K21_Queryresponse struct {
	HL7 HL7Name `hl7:",name=RSP_K21_Queryresponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"9,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"10,display=Access Restriction"`
	NK1 []NK1   `hl7:"11,display=Next Of Kin / Associated Parties"`
	QRI *QRI    `hl7:"12,required,display=Query Response Instance"`
}

// Get person demographics response
type RSP_K21 struct {
	HL7           HL7Name                `hl7:",name=RSP_K21,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Queryresponse *RSP_K21_Queryresponse `hl7:",display=Query_response"`
	DSC           *DSC                   `hl7:"13,display=Continuation Pointer"`
}

// Queryresponse
type RSP_K22_Queryresponse struct {
	HL7 HL7Name `hl7:",name=RSP_K22_Queryresponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"9,display=Patient Additional Demographic"`
	NK1 []NK1   `hl7:"10,display=Next Of Kin / Associated Parties"`
	QRI *QRI    `hl7:"11,display=Query Response Instance"`
}

// Find candidates response
type RSP_K22 struct {
	HL7           HL7Name                 `hl7:",name=RSP_K22,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	Queryresponse []RSP_K22_Queryresponse `hl7:",display=Query_response"`
	DSC           *DSC                    `hl7:"12,display=Continuation Pointer"`
}

// Queryresponse
type RSP_K23_Queryresponse struct {
	HL7 HL7Name `hl7:",name=RSP_K23_Queryresponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
}

// Get corresponding identifiers response
type RSP_K23 struct {
	HL7           HL7Name                `hl7:",name=RSP_K23,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Queryresponse *RSP_K23_Queryresponse `hl7:",display=Query_response"`
	DSC           *DSC                   `hl7:"9,display=Continuation Pointer"`
}

// Queryresponse
type RSP_K24_Queryresponse struct {
	HL7 HL7Name `hl7:",name=RSP_K24_Queryresponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
}

// Allocate identifiers response
type RSP_K24 struct {
	HL7           HL7Name                `hl7:",name=RSP_K24,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Queryresponse *RSP_K24_Queryresponse `hl7:",display=Query_response"`
	DSC           *DSC                   `hl7:"9,display=Continuation Pointer"`
}

// Staff
type RSP_K25_Staff struct {
	HL7 HL7Name `hl7:",name=RSP_K25_Staff,type=tg"`
	STF *STF    `hl7:"9,required,display=Staff Identification"`
	PRA []PRA   `hl7:"10,display=Practitioner Detail"`
	ORG []ORG   `hl7:"11,display=Practitioner Organization Unit Segment"`
	AFF []AFF   `hl7:"12,display=Professional Affiliation"`
	LAN []LAN   `hl7:"13,display=Language Detail"`
	EDU []EDU   `hl7:"14,display=Educational Detail"`
	CER []CER   `hl7:"15,display=Certificate Detail"`
	NK1 []NK1   `hl7:"16,display=Next Of Kin / Associated Parties"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// Personnel Information by Segment Response
type RSP_K25 struct {
	HL7   HL7Name         `hl7:",name=RSP_K25,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential Segment"`
	MSA   *MSA            `hl7:"4,required,display=Message Acknowledgment"`
	ERR   []ERR           `hl7:"5,display=Error"`
	QAK   *QAK            `hl7:"6,required,display=Query Acknowledgment"`
	QPD   *QPD            `hl7:"7,required,display=Query Parameter Definition"`
	RCP   *RCP            `hl7:"8,required,display=Response Control Parameter"`
	Staff []RSP_K25_Staff `hl7:",required,display=Staff"`
	DSC   *DSC            `hl7:"18,display=Continuation Pointer"`
}

// Response
type RSP_K31_Response struct {
	HL7     HL7Name          `hl7:",name=RSP_K31_Response,type=tg"`
	Patient *RSP_K31_Patient `hl7:",display=Patient"`
	Order   []RSP_K31_Order  `hl7:",required,display=Order"`
}

// Patient
type RSP_K31_Patient struct {
	HL7                    HL7Name                         `hl7:",name=RSP_K31_Patient,type=tg"`
	PID                    *PID                            `hl7:"9,required,display=Patient Identification"`
	Additionaldemographics *RSP_K31_Additionaldemographics `hl7:",display=Additional_demographics"`
	NTE                    []NTE                           `hl7:"12,display=Notes And Comments"`
	AL1                    []AL1                           `hl7:"13,display=Patient Allergy Information"`
	Patientvisit           *RSP_K31_Patientvisit           `hl7:",display=Patient_visit"`
}

// Additionaldemographics
type RSP_K31_Additionaldemographics struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Additionaldemographics,type=tg"`
	PD1 *PD1    `hl7:"10,required,display=Patient Additional Demographic"`
	PRT []PRT   `hl7:"11,display=Participation Information"`
}

// Patientvisit
type RSP_K31_Patientvisit struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Patientvisit,type=tg"`
	PV1 *PV1    `hl7:"14,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"15,display=Patient Visit - Additional Information"`
	PRT []PRT   `hl7:"16,display=Participation Information"`
}

// Order
type RSP_K31_Order struct {
	HL7         HL7Name               `hl7:",name=RSP_K31_Order,type=tg"`
	ORC         *ORC                  `hl7:"17,required,display=Common Order"`
	Timing      []RSP_K31_Timing      `hl7:",display=Timing"`
	Orderdetail *RSP_K31_Orderdetail  `hl7:",display=Order_detail"`
	Encoding    *RSP_K31_Encoding     `hl7:",display=Encoding"`
	RXD         *RXD                  `hl7:"31,required,display=Pharmacy/treatment Dispense"`
	PRT         []PRT                 `hl7:"32,display=Participation Information"`
	RXR         []RXR                 `hl7:"33,required,display=Pharmacy/treatment Route"`
	RXC         []RXC                 `hl7:"34,display=Pharmacy/treatment Component Order"`
	Observation []RSP_K31_Observation `hl7:",display=Observation"`
}

// Timing
type RSP_K31_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"18,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"19,display=Timing/quantity Relationship"`
}

// Orderdetail
type RSP_K31_Orderdetail struct {
	HL7        HL7Name              `hl7:",name=RSP_K31_Orderdetail,type=tg"`
	RXO        *RXO                 `hl7:"20,required,display=Pharmacy/treatment Order"`
	NTE        []NTE                `hl7:"21,display=Notes And Comments"`
	RXR        []RXR                `hl7:"22,required,display=Pharmacy/treatment Route"`
	Components []RSP_K31_Components `hl7:",display=Components"`
}

// Components
type RSP_K31_Components struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Components,type=tg"`
	RXC *RXC    `hl7:"23,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"24,display=Notes And Comments"`
}

// Encoding
type RSP_K31_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RSP_K31_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"25,required,display=Pharmacy/treatment Encoded Order"`
	NTE           []NTE                   `hl7:"26,display=Notes And Comments"`
	Timingencoded []RSP_K31_Timingencoded `hl7:",required,display=Timing_encoded"`
	RXR           []RXR                   `hl7:"29,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"30,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RSP_K31_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"27,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"28,display=Timing/quantity Relationship"`
}

// Observation
type RSP_K31_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Observation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/result"`
	PRT []PRT   `hl7:"36,display=Participation Information"`
	NTE []NTE   `hl7:"37,display=Notes And Comments"`
}

// Dispense History Response
type RSP_K31 struct {
	HL7      HL7Name            `hl7:",name=RSP_K31,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR              `hl7:"3,display=Error"`
	SFT      []SFT              `hl7:"4,display=Software Segment"`
	UAC      *UAC               `hl7:"5,display=User Authentication Credential Segment"`
	QAK      *QAK               `hl7:"6,required,display=Query Acknowledgment"`
	QPD      *QPD               `hl7:"7,required,display=Query Parameter Definition"`
	RCP      *RCP               `hl7:"8,required,display=Response Control Parameter"`
	Response []RSP_K31_Response `hl7:",required,display=Response"`
	DSC      *DSC               `hl7:"38,display=Continuation Pointer"`
}

// Queryresponse
type RSP_K32_Queryresponse struct {
	HL7 HL7Name `hl7:",name=RSP_K32_Queryresponse,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"8,display=Patient Additional Demographic"`
	NK1 []NK1   `hl7:"9,display=Next Of Kin / Associated Parties"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
	QRI *QRI    `hl7:"12,display=Query Response Instance"`
}

// Find Candidates including Visit Information Response
type RSP_K32 struct {
	HL7           HL7Name                 `hl7:",name=RSP_K32,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	MSA           *MSA                    `hl7:"3,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"4,display=Error"`
	QAK           *QAK                    `hl7:"5,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"6,required,display=Query Parameter Definition"`
	Queryresponse []RSP_K32_Queryresponse `hl7:",display=Query_response"`
	DSC           *DSC                    `hl7:"13,display=Continuation Pointer"`
}

// Queryresponse
type RSP_Z82_Queryresponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z82_Queryresponse,type=tg"`
	Patient     *RSP_Z82_Patient      `hl7:",display=Patient"`
	Commonorder []RSP_Z82_Commonorder `hl7:",required,display=Common_order"`
}

// Patient
type RSP_Z82_Patient struct {
	HL7   HL7Name        `hl7:",name=RSP_Z82_Patient,type=tg"`
	PID   *PID           `hl7:"9,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"10,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"11,display=Notes And Comments"`
	Visit *RSP_Z82_Visit `hl7:",display=Visit"`
}

// Visit
type RSP_Z82_Visit struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Visit,type=tg"`
	AL1 []AL1   `hl7:"12,required,display=Patient Allergy Information"`
	PV1 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
}

// Commonorder
type RSP_Z82_Commonorder struct {
	HL7          HL7Name               `hl7:",name=RSP_Z82_Commonorder,type=tg"`
	ORC          *ORC                  `hl7:"15,required,display=Common Order"`
	Timing       []RSP_Z82_Timing      `hl7:",display=Timing"`
	Orderdetail  *RSP_Z82_Orderdetail  `hl7:",display=Order_detail"`
	Encodedorder *RSP_Z82_Encodedorder `hl7:",display=Encoded_order"`
	RXD          *RXD                  `hl7:"28,required,display=Pharmacy/treatment Dispense"`
	RXR          []RXR                 `hl7:"29,required,display=Pharmacy/treatment Route"`
	RXC          []RXC                 `hl7:"30,display=Pharmacy/treatment Component Order"`
	Observation  []RSP_Z82_Observation `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z82_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/quantity Relationship"`
}

// Orderdetail
type RSP_Z82_Orderdetail struct {
	HL7       HL7Name            `hl7:",name=RSP_Z82_Orderdetail,type=tg"`
	RXO       *RXO               `hl7:"18,required,display=Pharmacy/treatment Order"`
	NTE       []NTE              `hl7:"19,display=Notes And Comments"`
	RXR       []RXR              `hl7:"20,required,display=Pharmacy/treatment Route"`
	Treatment *RSP_Z82_Treatment `hl7:",display=Treatment"`
}

// Treatment
type RSP_Z82_Treatment struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Treatment,type=tg"`
	RXC []RXC   `hl7:"21,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Encodedorder
type RSP_Z82_Encodedorder struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z82_Encodedorder,type=tg"`
	RXE           *RXE                    `hl7:"23,required,display=Pharmacy/treatment Encoded Order"`
	Timingencoded []RSP_Z82_Timingencoded `hl7:",display=Timing_encoded"`
	RXR           []RXR                   `hl7:"26,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"27,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RSP_Z82_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Observation
type RSP_Z82_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Observation,type=tg"`
	OBX *OBX    `hl7:"31,display=Observation/result"`
	NTE []NTE   `hl7:"32,display=Notes And Comments"`
}

// Dispense History (Response)
//
// Sorted by Medication Dispensed unless otherwise specified in SortControl.
type RSP_Z82 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z82,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	RCP           *RCP                    `hl7:"8,required,display=Response Control Parameter"`
	Queryresponse []RSP_Z82_Queryresponse `hl7:",required,display=Query_response"`
	DSC           *DSC                    `hl7:"33,display=Continuation Pointer"`
}

// Segmentpattern
type RSP_Z84_Segmentpattern struct {
	HL7 HL7Name `hl7:",name=RSP_Z84_Segmentpattern,type=tg"`
	Hxx *Hxx    `hl7:"8,required,display=Any Hl7 Segment"`
}

// Who Am I (Response)
//
// Returns response sorted by PatientLastName unless otherwise specified
type RSP_Z84 struct {
	HL7            HL7Name                 `hl7:",name=RSP_Z84,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR            *ERR                    `hl7:"5,display=Error"`
	QAK            *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD            *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	Segmentpattern *RSP_Z84_Segmentpattern `hl7:",display=Segment_pattern"`
	DSC            *DSC                    `hl7:"9,display=Continuation Pointer"`
}

// Queryresponse
type RSP_Z86_Queryresponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z86_Queryresponse,type=tg"`
	Patient     *RSP_Z86_Patient      `hl7:",display=Patient"`
	Commonorder []RSP_Z86_Commonorder `hl7:",required,display=Common_order"`
}

// Patient
type RSP_Z86_Patient struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"9,display=Patient Additional Demographic"`
	NTE []NTE   `hl7:"10,display=Notes And Comments"`
	AL1 []AL1   `hl7:"11,display=Patient Allergy Information"`
}

// Commonorder
type RSP_Z86_Commonorder struct {
	HL7            HL7Name                 `hl7:",name=RSP_Z86_Commonorder,type=tg"`
	ORC            *ORC                    `hl7:"12,required,display=Common Order"`
	Timing         []RSP_Z86_Timing        `hl7:",display=Timing"`
	Orderdetail    *RSP_Z86_Orderdetail    `hl7:",display=Order_detail"`
	Encodedorder   *RSP_Z86_Encodedorder   `hl7:",display=Encoded_order"`
	Dispense       *RSP_Z86_Dispense       `hl7:",display=Dispense"`
	Give           *RSP_Z86_Give           `hl7:",display=Give"`
	Administration *RSP_Z86_Administration `hl7:",display=Administration"`
	Observation    []RSP_Z86_Observation   `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z86_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/quantity Relationship"`
}

// Orderdetail
type RSP_Z86_Orderdetail struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Orderdetail,type=tg"`
	RXO *RXO    `hl7:"15,required,display=Pharmacy/treatment Order"`
	RXR []RXR   `hl7:"16,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"17,display=Pharmacy/treatment Component Order"`
}

// Encodedorder
type RSP_Z86_Encodedorder struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z86_Encodedorder,type=tg"`
	RXE           *RXE                    `hl7:"18,required,display=Pharmacy/treatment Encoded Order"`
	Timingencoded []RSP_Z86_Timingencoded `hl7:",display=Timing_encoded"`
	RXR           []RXR                   `hl7:"21,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"22,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RSP_Z86_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"19,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"20,display=Timing/quantity Relationship"`
}

// Dispense
type RSP_Z86_Dispense struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Dispense,type=tg"`
	RXD *RXD    `hl7:"23,required,display=Pharmacy/treatment Dispense"`
	RXR []RXR   `hl7:"24,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"25,display=Pharmacy/treatment Component Order"`
}

// Give
type RSP_Z86_Give struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Give,type=tg"`
	RXG *RXG    `hl7:"26,required,display=Pharmacy/treatment Give"`
	RXR []RXR   `hl7:"27,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"28,display=Pharmacy/treatment Component Order"`
}

// Administration
type RSP_Z86_Administration struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Administration,type=tg"`
	RXA *RXA    `hl7:"29,required,display=Pharmacy/treatment Administration"`
	RXR []RXR   `hl7:"30,required,display=Pharmacy/treatment Route"`
	RXC []RXC   `hl7:"31,display=Pharmacy/treatment Component Order"`
}

// Observation
type RSP_Z86_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Observation,type=tg"`
	OBX *OBX    `hl7:"32,display=Observation/result"`
	NTE []NTE   `hl7:"33,display=Notes And Comments"`
}

// Pharmacy Information Comprehensive (Response)
//
// Sorted by Medication Dispensed unless otherwise specified in SortControl.
type RSP_Z86 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z86,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	Queryresponse []RSP_Z86_Queryresponse `hl7:",required,display=Query_response"`
	DSC           *DSC                    `hl7:"34,display=Continuation Pointer"`
}

// Queryresponse
type RSP_Z88_Queryresponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z88_Queryresponse,type=tg"`
	Patient     *RSP_Z88_Patient      `hl7:",display=Patient"`
	Commonorder []RSP_Z88_Commonorder `hl7:",required,display=Common_order"`
}

// Patient
type RSP_Z88_Patient struct {
	HL7     HL7Name          `hl7:",name=RSP_Z88_Patient,type=tg"`
	PID     *PID             `hl7:"9,required,display=Patient Identification"`
	PD1     *PD1             `hl7:"10,display=Patient Additional Demographic"`
	NTE     []NTE            `hl7:"11,display=Notes And Comments"`
	Allergy *RSP_Z88_Allergy `hl7:",display=Allergy"`
}

// Allergy
type RSP_Z88_Allergy struct {
	HL7   HL7Name        `hl7:",name=RSP_Z88_Allergy,type=tg"`
	AL1   []AL1          `hl7:"12,required,display=Patient Allergy Information"`
	Visit *RSP_Z88_Visit `hl7:",display=Visit"`
}

// Visit
type RSP_Z88_Visit struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Visit,type=tg"`
	PV1 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
}

// Commonorder
type RSP_Z88_Commonorder struct {
	HL7          HL7Name               `hl7:",name=RSP_Z88_Commonorder,type=tg"`
	ORC          *ORC                  `hl7:"15,required,display=Common Order"`
	Timing       []RSP_Z88_Timing      `hl7:",display=Timing"`
	Orderdetail  *RSP_Z88_Orderdetail  `hl7:",display=Order_detail"`
	Orderencoded *RSP_Z88_Orderencoded `hl7:",display=Order_encoded"`
	RXD          *RXD                  `hl7:"28,required,display=Pharmacy/treatment Dispense"`
	RXR          []RXR                 `hl7:"29,required,display=Pharmacy/treatment Route"`
	RXC          []RXC                 `hl7:"30,display=Pharmacy/treatment Component Order"`
	Observation  []RSP_Z88_Observation `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z88_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/quantity Relationship"`
}

// Orderdetail
type RSP_Z88_Orderdetail struct {
	HL7       HL7Name            `hl7:",name=RSP_Z88_Orderdetail,type=tg"`
	RXO       *RXO               `hl7:"18,required,display=Pharmacy/treatment Order"`
	NTE       []NTE              `hl7:"19,display=Notes And Comments"`
	RXR       []RXR              `hl7:"20,required,display=Pharmacy/treatment Route"`
	Component *RSP_Z88_Component `hl7:",display=Component"`
}

// Component
type RSP_Z88_Component struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Component,type=tg"`
	RXC []RXC   `hl7:"21,required,display=Pharmacy/treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Orderencoded
type RSP_Z88_Orderencoded struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z88_Orderencoded,type=tg"`
	RXE           *RXE                    `hl7:"23,required,display=Pharmacy/treatment Encoded Order"`
	Timingencoded []RSP_Z88_Timingencoded `hl7:",display=Timing_encoded"`
	RXR           []RXR                   `hl7:"26,required,display=Pharmacy/treatment Route"`
	RXC           []RXC                   `hl7:"27,display=Pharmacy/treatment Component Order"`
}

// Timingencoded
type RSP_Z88_Timingencoded struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Timingencoded,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/quantity Relationship"`
}

// Observation
type RSP_Z88_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Observation,type=tg"`
	OBX *OBX    `hl7:"31,display=Observation/result"`
	NTE []NTE   `hl7:"32,display=Notes And Comments"`
}

// Dispense Information (Response)
//
// Sorted by Medication Dispensed unless otherwise specified in SortControl
type RSP_Z88 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z88,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	RCP           *RCP                    `hl7:"8,required,display=Response Control Parameter"`
	Queryresponse []RSP_Z88_Queryresponse `hl7:",required,display=Query_response"`
	DSC           *DSC                    `hl7:"33,required,display=Continuation Pointer"`
}

// Queryresponse
type RSP_Z90_Queryresponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z90_Queryresponse,type=tg"`
	Patient     *RSP_Z90_Patient      `hl7:",display=Patient"`
	Commonorder []RSP_Z90_Commonorder `hl7:",required,display=Common_order"`
	Specimen    []RSP_Z90_Specimen    `hl7:",display=Specimen"`
}

// Patient
type RSP_Z90_Patient struct {
	HL7   HL7Name        `hl7:",name=RSP_Z90_Patient,type=tg"`
	PID   *PID           `hl7:"9,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"10,display=Patient Additional Demographic"`
	NK1   []NK1          `hl7:"11,display=Next Of Kin / Associated Parties"`
	NTE   []NTE          `hl7:"12,display=Notes And Comments"`
	Visit *RSP_Z90_Visit `hl7:",display=Visit"`
}

// Visit
type RSP_Z90_Visit struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Visit,type=tg"`
	PV1 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
}

// Commonorder
type RSP_Z90_Commonorder struct {
	HL7         HL7Name               `hl7:",name=RSP_Z90_Commonorder,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []RSP_Z90_Timing      `hl7:",display=Timing"`
	OBR         *OBR                  `hl7:"18,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"19,display=Notes And Comments"`
	CTD         *CTD                  `hl7:"20,display=Contact Data"`
	Observation []RSP_Z90_Observation `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z90_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/quantity Relationship"`
}

// Observation
type RSP_Z90_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Observation,type=tg"`
	OBX *OBX    `hl7:"21,display=Observation/result"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Specimen
type RSP_Z90_Specimen struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Specimen,type=tg"`
	SPM *SPM    `hl7:"23,required,display=Specimen"`
	OBX []OBX   `hl7:"24,display=Observation/result"`
}

// Lab Results History (Response)
type RSP_Z90 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z90,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	RCP           *RCP                    `hl7:"8,required,display=Response Control Parameter"`
	Queryresponse []RSP_Z90_Queryresponse `hl7:",required,display=Query_response"`
	DSC           *DSC                    `hl7:"25,required,display=Continuation Pointer"`
}

// Rowdefinition
type RTB_K13_Rowdefinition struct {
	HL7 HL7Name `hl7:",name=RTB_K13_Rowdefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular response in response to QBP^Q13
//
// The RTB_K13 supports a Tabular Response to the QBP and contains the MSH, MSA, ERR, QAK, QPD, RDF, RDT and the DSC.  Its default
// trigger event is K13.  A standard or site-defined response may use this trigger event or may specify a unique trigger event
// value in its Query Profile.  If a unique trigger event value is chosen for a site-defined response, that value SHALL begin
// with Z.
//
// The RTB_K13 structure requires that, if any RDT segments are returned, they be preceded by an RDF segment containing the
// row definition specification for the RDT segments.  If no RDF was sent in the query, the default RDF is returned in the RTB_K13.
//
//
// Note:  The indicated trigger events are the default values for MSH-9-2-Trigger event.  Standard and site-defined queries
// may use these trigger events or may specify unique trigger event values in their Query Profiles.  Unique trigger event values
// for site-defined queries SHALL begin with Z.
type RTB_K13 struct {
	HL7           HL7Name                `hl7:",name=RTB_K13,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Rowdefinition *RTB_K13_Rowdefinition `hl7:",display=Row_definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// Rowdefinition
type RTB_Z74_Rowdefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z74_Rowdefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Information about Phone Calls (Response)
type RTB_Z74 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z74,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	ERR           []ERR                  `hl7:"3,display=Error"`
	SFT           []SFT                  `hl7:"4,display=Software Segment"`
	UAC           *UAC                   `hl7:"5,display=User Authentication Credential Segment"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Rowdefinition *RTB_Z74_Rowdefinition `hl7:",display=Row_definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// Rowdefinition
type RTB_Z76_Rowdefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z76_Rowdefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular Patient List (Response)
//
// Response returns requested columns from the Virtual Table. If no columns were requested, all columns are returned
type RTB_Z76 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z76,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Rowdefinition *RTB_Z76_Rowdefinition `hl7:",display=Row_definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// Rowdefinition
type RTB_Z78_Rowdefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z78_Rowdefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular Patient List (Response)
//
// Response returns requested columns from the Virtual Table. If no columns were requested, all columns are returned.
type RTB_Z78 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z78,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Rowdefinition *RTB_Z78_Rowdefinition `hl7:",display=Row_definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// Rowdefinition
type RTB_Z92_Rowdefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z92_Rowdefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Who Am I (Response)
type RTB_Z92 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z92,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Rowdefinition *RTB_Z92_Rowdefinition `hl7:",display=Row_definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// Rowdefinition
type RTB_Z94_Rowdefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z94_Rowdefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular Dispense History (Response)
//
// Find medications dispensed between specified date range for specified medical record numbers
type RTB_Z94 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z94,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Rowdefinition *RTB_Z94_Rowdefinition `hl7:",display=Row_definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// Rowdefinition
type RTB_Z96_Rowdefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z96_Rowdefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular Dispense History (Response)
//
// Columns from the Virtual Table listed in the Input/Output Specification are specified for output in the RDF segment.
// If no columns are specified in the RDF segment, all columns will be returned.
// Response is sorted by Medication Dispensed unless otherwise specified in SortControl.
type RTB_Z96 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z96,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential Segment"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	Rowdefinition *RTB_Z96_Rowdefinition `hl7:",display=Row_definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// Notification of anti-microbial device cycle data
//
// This message is sent from a filler application to notify other applications that anti-microbial device cycle data has
// been generated.  The information in the SCN segment and the other detail segments as appropriate describe details of a sterilization
// or decontamination cycle.
type SCN_S37 struct {
	HL7 HL7Name `hl7:",name=SCN_S37,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
}

// Notification of anti-microbial device data
//
// This message is sent from a filler application to notify other applications that anti-microbial device data has been generated.
// The information in the SDN segment and the other detail segments as appropriate describe the detail of a device during a
// sterilization or decontamination cycle.
type SDN_S36 struct {
	HL7 HL7Name `hl7:",name=SDN_S36,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
}

// Request anti-microbial device data
//
// This trigger event is sent by the placer application to the filler application to request anti-microbial device data created
// during the decontamination/sterilization of medical supplies.  In the context of this message segment, the term 'device'
// refers to a sterilizer or a washer.  Sterilizers perform a sterilization process and washers perform a decontamination
// process.
type SDR_S31 struct {
	HL7 HL7Name `hl7:",name=SDR_S31,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
}

// Patient
type SIU_S12_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S12_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S12_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S12_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S12_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S12_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S12_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S12_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S12_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S12_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S12_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of new appointment booking
//
// This message is sent from a filler application to notify other applications that a new appointment has been booked.  The
// information provided in the SCH segment and the other detail segments as appropriate describe the appointment that has
// been booked by the filler application.
type SIU_S12 struct {
	HL7       HL7Name             `hl7:",name=SIU_S12,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S12_Patient   `hl7:",display=Patient"`
	Resources []SIU_S12_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S13_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S13_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S13_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S13_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S13_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S13_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S13_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S13_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S13_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S13_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S13_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of appointment rescheduling
//
// This message is sent from a filler application to notify other applications that an existing appointment has been rescheduled.
// The information in the SCH segment and the other detail segments as appropriate describe the new date(s) and time(s) to
// which the previously booked appointment has been moved.  Additionally, it describes the unchanged information in the
// previously booked appointment.
//
// This transaction should not be used to reschedule an appointment that has begun but has not been completed.  In such cases,
// and only if it logical to do so, the appointment should be discontinued and a new schedule request should be submitted.  Likewise,
// this transaction should not be used to reschedule a parent appointment, in which one or more children have begun or have
// already taken place.  Again, the parent appointment should be discontinued, and a new schedule request should be made.
// This procedure removes any ambiguity between applications that may arise with an attempt to modify an appointment that
// is in progress.
type SIU_S13 struct {
	HL7       HL7Name             `hl7:",name=SIU_S13,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S13_Patient   `hl7:",display=Patient"`
	Resources []SIU_S13_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S14_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S14_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S14_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S14_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S14_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S14_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S14_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S14_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S14_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S14_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S14_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of appointment modification
//
// This message notifies other applications that an existing appointment has been modified on the filler application.  This
// trigger event should only be used for appointments that have not been completed, or for parent appointments whose children
// have not been completed.
type SIU_S14 struct {
	HL7       HL7Name             `hl7:",name=SIU_S14,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S14_Patient   `hl7:",display=Patient"`
	Resources []SIU_S14_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S15_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S15_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S15_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S15_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S15_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S15_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S15_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S15_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S15_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S15_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S15_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of appointment cancellation
//
// A notification of appointment cancellation is sent by the filler application to other applications when an existing appointment
// has been canceled.  A cancel event is used to stop a valid appointment from taking place.  For example, if a patient scheduled
// for an exam cancels his/her appointment, then the appointment is canceled on the filler application.
//
// This trigger event can be used to cancel a parent appointment, in which none of the children of the appointment have either
// begun or been completed.  Any child appointments that exist on the filler and placer applications should be considered
// canceled.  If one or more child appointments have begun or have been completed, then this trigger event should not be used.
// Instead, the S16 (notification of appointment discontinuation) event should be used.
type SIU_S15 struct {
	HL7       HL7Name             `hl7:",name=SIU_S15,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S15_Patient   `hl7:",display=Patient"`
	Resources []SIU_S15_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S16_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S16_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S16_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S16_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S16_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S16_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S16_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S16_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S16_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S16_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S16_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of appointment discontinuation
//
// A notification of appointment discontinuation is sent by the filler application to notify other applications that an
// appointment in progress has been stopped, or that the remaining occurrences of a parent appointment will not occur.  If
// none of the child appointments of a parent appointment have taken place, then a cancel trigger event should be sent instead.
type SIU_S16 struct {
	HL7       HL7Name             `hl7:",name=SIU_S16,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S16_Patient   `hl7:",display=Patient"`
	Resources []SIU_S16_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S17_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S17_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S17_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S17_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S17_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S17_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S17_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S17_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S17_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S17_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S17_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of appointment deletion
//
// A notification of appointment deletion is sent by the filler application to other applications when an appointment that
// had been entered in error has been removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously scheduled.  It must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or that has already been completed.  Likewise, it should not be used for any parent appointment if any child appointments
// have either begun or been completed.
//
// The delete trigger event should be implemented with careful forethought, as it typically has different effects and repercussions
// in various applications.  In some applications, a delete event cannot be undone.  This means that if a delete transaction
// was sent erroneously, recovery will be difficult or impossible.  In other applications, a delete transaction will not
// result in the physical deletion of the record(s), but will set a status or a flag.  In these cases, the filler and/or placer
// appointment identifiers (the numbers or codes that uniquely identify the scheduled appointment or request to the placer
// and filler applications) probably cannot be reused.  Since these applications maintain a record of deleted appointments,
// the reuse of an identifier will likely cause a conflict in the applications' processing of transactions.
type SIU_S17 struct {
	HL7       HL7Name             `hl7:",name=SIU_S17,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S17_Patient   `hl7:",display=Patient"`
	Resources []SIU_S17_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S18_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S18_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S18_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S18_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S18_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S18_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S18_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S18_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S18_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S18_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S18_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of addition of service/resource on appointment
//
// The notification of addition of service/resource is triggered on the filler application when a new service or resource
// has been added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments
// on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been
// completed, or for parent appointments whose children have not been completed.
type SIU_S18 struct {
	HL7       HL7Name             `hl7:",name=SIU_S18,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S18_Patient   `hl7:",display=Patient"`
	Resources []SIU_S18_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S19_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S19_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S19_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S19_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S19_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S19_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S19_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S19_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S19_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S19_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S19_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of modification of service/resource on appointment
//
// The notification of modification of service/resource is triggered on the filler application when the information pertaining
// to an existing service or resource has been changed for an existing appointment.  Services and resources are represented
// by the AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used
// for appointments that have not been completed, or for parent appointments whose children have not been completed.
//
// This trigger event should not be used when an existing resource or service has been replaced in relation to an existing appointment.
// Instead, use two other trigger events: S20 (notification of cancellation of service/ resource on appointment), as well
// as S18 (notification of addition of service/resource on appointment).
type SIU_S19 struct {
	HL7       HL7Name             `hl7:",name=SIU_S19,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S19_Patient   `hl7:",display=Patient"`
	Resources []SIU_S19_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S20_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S20_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S20_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S20_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S20_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S20_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S20_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S20_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S20_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S20_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S20_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of cancellation of service/resource on appointment
//
// This trigger event notifies other applications that a service or resource has been removed from an existing scheduled
// appointment that has not yet begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.
// For example, if a portable X-ray machine scheduled for an exam is no longer needed, then the resource is canceled on the filler
// application.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.
type SIU_S20 struct {
	HL7       HL7Name             `hl7:",name=SIU_S20,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S20_Patient   `hl7:",display=Patient"`
	Resources []SIU_S20_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S21_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S21_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S21_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S21_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S21_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S21_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S21_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S21_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S21_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S21_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S21_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of discontinuation of service/resource on appointment
//
// A notification of discontinuation of service/resource is sent by the filler application to other applications when the
// remaining children of a parent appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to discontinue the performance of a service or resource in a parent appointment that has already begun.  If
// the first appointment in a set of recurring appointments has not yet taken place, then a cancel trigger event should be sent
// instead.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.
type SIU_S21 struct {
	HL7       HL7Name             `hl7:",name=SIU_S21,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S21_Patient   `hl7:",display=Patient"`
	Resources []SIU_S21_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S22_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S22_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S22_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S22_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S22_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S22_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S22_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S22_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S22_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S22_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S22_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of deletion of service/resource on appointment
//
// A notification of deletion of service/resource is sent by the filler application to other applications when a scheduled
// appointment requiring a service or resource entered in error has been removed from the system.  A delete trigger event should
// only be used in those circumstances when a service or resource has been erroneously attached to an appointment, and must
// be removed from the schedule so that it does not affect any statistical processing.  A delete trigger event differs from
// a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts to prevent a valid request from taking
// place.
type SIU_S22 struct {
	HL7       HL7Name             `hl7:",name=SIU_S22,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S22_Patient   `hl7:",display=Patient"`
	Resources []SIU_S22_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S23_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S23_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S23_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S23_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S23_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S23_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S23_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S23_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S23_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S23_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S23_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of blocked schedule time slot(s)
//
// A notification of blocked schedule time slots is sent by the filler application to other applications when a schedule has
// had one or more time slots blocked and made unavailable for reasons other than the scheduling of an appointment.  For example,
// if an exam room is unavailable for several hours because of maintenance needs or contamination, a user may block off those
// several hours on the exam room's schedule.  Similarly, if a physician is unavailable because he or she has taken vacation
// time, his or her schedule may be blocked off for the duration of the vacation.  When these types of conditions exist, the filler
// application may use this transaction to notify other applications that the resources controlled by schedules are unavailable.
type SIU_S23 struct {
	HL7       HL7Name             `hl7:",name=SIU_S23,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S23_Patient   `hl7:",display=Patient"`
	Resources []SIU_S23_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S24_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S24_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S24_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S24_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S24_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S24_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S24_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S24_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S24_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S24_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S24_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification of opened ("unblocked") schedule time slot(s)
//
// A notification of blocked schedule time slots is sent by the filler application to other applications when a schedule has
// one or more time slots open up ("un-blocked") and become available for use.  Typically, the blocked period of time on a schedule
// is simply allowed to expire, because the blocked amount of time is generally used for non-appointment activities. This
// transaction can be used either to discontinue the blocked status on the schedule, or to reverse a previous block made in
// error.  For the purposes of this transaction, discontinuing a block currently in progress (the blocked period has started,
// but not yet completed) and canceling a blocked period in the future are not significantly different.  Therefore, a separate
// discontinue block transaction is not necessary.  If this transaction is received prior to the inception of a blocked period,
// then the entire block period is simply canceled according to the data provided in the transaction.  If the transaction is
// received after the blocked period has begun, but prior to the end of the blocked period, then the blocked period is discontinued
// according to the data provided in the transactions.  Applications may decide how to handle transactions that attempt to
// open a blocked period that has both started and ended in the past; however, these transactions can generally be ignored.
//
// For example, if an exam room has been blocked for several hours because of maintenance activities or contamination, and
// if the work has been completed ahead of schedule, a user may open those several hours on the exam room's schedule.  When such
// a situation occurs, the filler application may use this transaction to notify other applications that the room is available.
type SIU_S24 struct {
	HL7       HL7Name             `hl7:",name=SIU_S24,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S24_Patient   `hl7:",display=Patient"`
	Resources []SIU_S24_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S26_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S26_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S26_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S26_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S26_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S26_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S26_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S26_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S26_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S26_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S26_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Notification that patient did not show up for schedule appointment
//
// A notification that a patient did not show up for an appointment.  For example, if a patient was scheduled for a clinic visit,
// and never arrived for that appointment, this trigger event can be used to set a status on the appointment record for statistical
// purposes, as well as to free resources assigned to the appointment (or any other application level actions that must be
// taken in the event a patient does not appear for an appointment).
//
// Patient Administration events defined in Chapter 3 can be used to indicate that a patient has arrived for an appointment,
// e.g., A01 (admit/visit notification), A04 (register a patient), A05 (pre-admit a patient), or A10 (patient arriving
// - tracking) as possible examples.  Similarly, Patient Administration transactions can be used to identify the end of an
// appointment, e.g., A03 (discharge/end visit) or A09 (patient departing - tracking) as possible examples.
type SIU_S26 struct {
	HL7       HL7Name             `hl7:",name=SIU_S26,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S26_Patient   `hl7:",display=Patient"`
	Resources []SIU_S26_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S27_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S27_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S27_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S27_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S27_Service           `hl7:",display=Service"`
	Generalresource   []SIU_S27_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SIU_S27_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SIU_S27_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SIU_S27_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S27_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SIU_S27_Generalresource struct {
	HL7 HL7Name `hl7:",name=SIU_S27_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// Locationresource
type SIU_S27_Locationresource struct {
	HL7 HL7Name `hl7:",name=SIU_S27_Locationresource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Personnelresource
type SIU_S27_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SIU_S27_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Broadcast Notification of Scheduled Appointments
type SIU_S27 struct {
	HL7       HL7Name             `hl7:",name=SIU_S27,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/quantity"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SIU_S27_Patient   `hl7:",display=Patient"`
	Resources []SIU_S27_Resources `hl7:",required,display=Resources"`
}

// Notification of sterilization lot
//
// This message is sent from a filler application to notify other applications that a new sterilization lot has been created.
// The information provided in the SLT segment describes the new sterilization lot that has been created by the filler application.
type SLN_S34 struct {
	HL7 HL7Name `hl7:",name=SLN_S34,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot"`
}

// Notification of sterilization lot deletion
//
// This message is sent from a filler application to notify other applications that a sterilization lot has been deleted.
// The information provided in the SLT segment describes the sterilization lot that has been deleted by the filler application.
type SLN_S35 struct {
	HL7 HL7Name `hl7:",name=SLN_S35,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot"`
}

// Request new sterilization lot
//
// A placer application (Sterilizer) sends a transaction with this trigger event to a filler application (Instrument-tracking
// system) to request that a new sterilization lot be added.  If it is successful, the filler application returns an application
// acknowledgment (if requested under the enhanced acknowledgment mode, or if the original acknowledgment mode is in use).
//
type SLR_S28 struct {
	HL7 HL7Name `hl7:",name=SLR_S28,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot"`
}

// Request Sterilization lot deletion
//
// A request sterilization lot deletion is sent by the placer application to the filler application to request that a lot that
// had been created in error be removed from the system.  A delete trigger event differs from a cancel trigger event in that a
// delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring.  If it is successful, an application
// acknowledgment is returned.
//
// The delete trigger event should be implemented with careful forethought, as it typically has different effects and repercussions
// in various applications.  In some applications, a delete event cannot be undone.  This means that if a delete transaction
// was sent erroneously, recovery will be difficult or impossible.  In other applications, a delete transaction will not
// result in the physical deletion of the record(s), but will set a status or a flag.  In these cases, the filler and/or placer
// appointment identifiers (the numbers or codes that uniquely identify the sterilization lot or request to the placer and
// filler applications) probably cannot be reused.  Since an application may maintain a record of deleted sterilization
// lots, the reuse of an identifier may cause a conflict in the applications' processing of transactions.
type SLR_S29 struct {
	HL7 HL7Name `hl7:",name=SLR_S29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot"`
}

// Request anti-microbial device cycle data
//
// This trigger event is sent by the placer application to the filler application to request anti-microbial device cycle
// data created during the decontamination/sterilization of medical supplies.  In the context of this message segment,
// the term 'device' refers to a sterilizer or a washer.  Sterilizers perform a sterilization process and washers perform
// a decontamination process.
type SMD_S32 struct {
	HL7 HL7Name `hl7:",name=SMD_S32,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
}

// Patient
type SRM_S01_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S01_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S01_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S01_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S01_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S01_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S01_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S01_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S01_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S01_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S01_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request new appointment booking
//
// A placer application sends a transaction with this trigger event to a filler application to request that a new appointment
// be booked.  If it is successful, the filler application returns an application acknowledgment (if requested under the
// enhanced acknowledgment mode, or if the original acknowledgment mode is in use).  The acknowledgment may optionally contain
// an SCH segment and related detail segments describing the actual appointment that was booked
type SRM_S01 struct {
	HL7       HL7Name             `hl7:",name=SRM_S01,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S01_Patient   `hl7:",display=Patient"`
	Resources []SRM_S01_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S02_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S02_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S02_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S02_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S02_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S02_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S02_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S02_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S02_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S02_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S02_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request appointment rescheduling
//
// A placer application uses this trigger event to request that an existing appointment be rescheduled.  The new Requested
// Start Date and Time, Appointment Duration, Repeating Interval, Repeating Interval Duration, and/or Priority are provided
// in the ARQ segment, along with the existing placer and filler identification numbers.  If it is successful, an application
// acknowledgment is returned, optionally containing an SCH segment and related detail segments describing the new information
// for the rescheduled appointment.
//
// This transaction should not be used to reschedule an appointment that has begun but has not been completed.  In such cases,
// and only if it is logical to do so, the appointment should be discontinued and a new schedule request should be submitted.
// Likewise, this transaction should not be used to reschedule a parent appointment, in which one or more children have begun
// or have already occurred.  Again, the parent appointment should be discontinued, and a new schedule request should be made.
// This procedure removes any ambiguity between applications that may arise with an attempt to modify an appointment that
// is in progress.
type SRM_S02 struct {
	HL7       HL7Name             `hl7:",name=SRM_S02,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S02_Patient   `hl7:",display=Patient"`
	Resources []SRM_S02_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S03_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S03_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S03_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S03_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S03_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S03_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S03_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S03_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S03_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S03_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S03_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request appointment modification
//
// This message transmits a request for modification of an existing appointment to a filler application.  This trigger event
// is used to request the modification of information on an existing appointment, outside of the need to reschedule, cancel,
// discontinue or delete the appointment, or to add, modify, cancel, discontinue, or delete services and/or resources on
// the appointment.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the new information for the modified appointment.
type SRM_S03 struct {
	HL7       HL7Name             `hl7:",name=SRM_S03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S03_Patient   `hl7:",display=Patient"`
	Resources []SRM_S03_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S04_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S04_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S04_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S04_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S04_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S04_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S04_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S04_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S04_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S04_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S04_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request appointment cancellation
//
// The request appointment cancellation trigger event is sent by the placer application to the filler application to request
// that an existing appointment be canceled.  A cancel event is used to stop a valid appointment from occurring.  For example,
// if a patient scheduled for an exam cancels his/her appointment, then a request to cancel the appointment is sent.  If it is
// successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail segments
// describing the canceled appointment.
//
// This trigger event can be used to cancel a parent appointment, in which none of the children of the appointment have either
// begun or have been completed.  Any child appointments that exist on the filler and placer applications should be considered
// canceled.  If one or more child appointments have begun or have been completed, then this trigger event should not be used.
// Instead, the S05 (request appointment discontinuation) event should be used.
type SRM_S04 struct {
	HL7       HL7Name             `hl7:",name=SRM_S04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S04_Patient   `hl7:",display=Patient"`
	Resources []SRM_S04_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S05_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S05_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S05_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S05_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S05_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S05_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S05_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S05_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S05_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S05_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S05_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request appointment discontinuation
//
// The request appointment discontinuation is sent by the placer application to the filler application to request that an
// appointment in progress be stopped, or that the remaining occurrences of a parent appointment not occur as scheduled.
// If none of the child appointments of a parent appointment have occurred, then a cancel trigger event should be sent instead.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the discontinued appointment.
type SRM_S05 struct {
	HL7       HL7Name             `hl7:",name=SRM_S05,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S05_Patient   `hl7:",display=Patient"`
	Resources []SRM_S05_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S06_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S06_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S06_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S06_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S06_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S06_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S06_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S06_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S06_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S06_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S06_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request appointment deletion
//
// A request appointment deletion is sent by the placer application to the filler application to request that an appointment
// that had been entered in error be removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously requested, and must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or has already been completed.  Likewise, it should not be used on any parent appointment if any child appointments have
// either begun or been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the deleted appointment.
//
// The delete trigger event should be implemented with careful forethought, as it typically has different effects and repercussions
// in various applications.  In some applications, a delete event cannot be undone.  This means that if a delete transaction
// was sent erroneously, recovery will be difficult or impossible.  In other applications, a delete transaction will not
// result in the physical deletion of the record(s), but will set a status or a flag.  In these cases, the filler and/or placer
// appointment identifiers (the numbers or codes that uniquely identify the scheduled appointment or request to the placer
// and filler applications) probably cannot be reused.  Since these applications maintain a record of deleted appointments,
// the reuse of an identifier will likely cause a conflict in the applications' processing of transactions.
type SRM_S06 struct {
	HL7       HL7Name             `hl7:",name=SRM_S06,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S06_Patient   `hl7:",display=Patient"`
	Resources []SRM_S06_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S07_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S07_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S07_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S07_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S07_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S07_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S07_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S07_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S07_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S07_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S07_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request addition of service/resource on appointment
//
// The request addition of service/resource is triggered by the placer application to request that a new service or resource
// be added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments on an
// HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S07 struct {
	HL7       HL7Name             `hl7:",name=SRM_S07,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S07_Patient   `hl7:",display=Patient"`
	Resources []SRM_S07_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S08_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S08_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S08_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S08_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S08_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S08_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S08_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S08_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S08_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S08_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S08_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request modification of service/resource on appointment
//
// The request modification of service/resource is triggered on the placer application to request that information pertaining
// to an existing service or resource be changed for an existing appointment.  Services and resources are represented by the
// AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments
// that have not been completed, or for parent appointments whose children have not been completed.  If it is successful, an
// application acknowledgment is returned, optionally containing an SCH segment and related detail segments describing
// the modified appointment.
//
// This trigger event should not be used when an existing resource or service must be replaced or rescheduled for an existing
// appointment.  The following fields on the indicated segments should not be changed by this trigger event: the first three
// fields of the AIS, the first four fields of the AIG, the first four fields of the AIL, and the first four fields of the AIP.  Instead,
// use two trigger events to accomplish the replacement or rescheduling of a service or resource: S09 (request cancellation
// of service/resource on appointment), as well as S07 (request addition of service/resource on appointment).
type SRM_S08 struct {
	HL7       HL7Name             `hl7:",name=SRM_S08,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S08_Patient   `hl7:",display=Patient"`
	Resources []SRM_S08_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S09_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S09_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S09_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S09_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S09_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S09_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S09_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S09_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S09_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S09_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S09_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request cancellation of service/resource on appointment
//
// This trigger event requests that a service or resource be removed from an existing scheduled appointment that has not yet
// begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.  For example, if
// a portable X-ray machine scheduled for an exam is no longer needed, then the placer application requests that the resource
// be canceled on the filler application.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S09 struct {
	HL7       HL7Name             `hl7:",name=SRM_S09,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S09_Patient   `hl7:",display=Patient"`
	Resources []SRM_S09_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S10_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S10_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S10_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S10_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S10_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S10_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S10_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S10_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S10_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S10_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S10_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request discontinuation of service/resource on appointment
//
// A request discontinuation of service/resource is sent by the placer application to the filler application when the remaining
// occurrences of a recurring appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to request that the performance of a service or resource in a recurring appointment that has already begun
// be stopped.  If the first appointment in a set of recurring appointments has not yet occurred, then a cancel trigger event
// should be sent instead.  This trigger event should only be used on appointments that have not been completed, or on parent
// appointments whose children have not been completed.  If it is successful, an application acknowledgment is returned,
// optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S10 struct {
	HL7       HL7Name             `hl7:",name=SRM_S10,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S10_Patient   `hl7:",display=Patient"`
	Resources []SRM_S10_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S11_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S11_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S11_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S11_Service           `hl7:",display=Service"`
	Generalresource   []SRM_S11_Generalresource   `hl7:",display=General_resource"`
	Locationresource  []SRM_S11_Locationresource  `hl7:",display=Location_resource"`
	Personnelresource []SRM_S11_Personnelresource `hl7:",display=Personnel_resource"`
}

// Service
type SRM_S11_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// Generalresource
type SRM_S11_Generalresource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Generalresource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Locationresource
type SRM_S11_Locationresource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Locationresource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Personnelresource
type SRM_S11_Personnelresource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Personnelresource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes And Comments"`
}

// Request deletion of service/resource on appointment
//
// A request deletion of service/resource is sent by the placer application to the filler application to request that a scheduled
// appointment requiring a service or resource entered in error be removed from the system. A delete trigger event should
// only be used when a service or resource has been erroneously attached to an appointment, and must be removed from the schedule
// so that it does not affect any statistical processing. A delete trigger event differs from a cancel trigger event in that
// a delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring. This trigger event should
// only be used on appointments that have not been completed, or on parent appointments whose children have not been completed.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the modified appointment
type SRM_S11 struct {
	HL7       HL7Name             `hl7:",name=SRM_S11,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes And Comments"`
	Patient   []SRM_S11_Patient   `hl7:",display=Patient"`
	Resources []SRM_S11_Resources `hl7:",required,display=Resources"`
}

// Schedule
type SRR_S01_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S01_Schedule,type=tg"`
	TQ1       []TQ1               `hl7:"4,display=Timing/quantity"`
	NTE       []NTE               `hl7:"5,display=Notes And Comments"`
	Patient   []SRR_S01_Patient   `hl7:",display=Patient"`
	Resources []SRR_S01_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S01_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S01_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S01_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S01_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S01_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S01_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S01_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S01_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S01_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S01_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	NTE []NTE   `hl7:"12,display=Notes And Comments"`
}

// GeneralResource
type SRR_S01_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes And Comments"`
}

// LocationResource
type SRR_S01_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S01_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes And Comments"`
}

// Scheduled Request Response
type SRR_S01 struct {
	HL7      HL7Name           `hl7:",name=SRR_S01,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S01_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S02_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S02_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S02_Patient   `hl7:",display=Patient"`
	Resources []SRR_S02_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S02_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S02_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S02_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S02_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S02_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S02_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S02_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S02_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S02_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S02_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S02_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S02_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S02_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Appointment Rescheduling
//
// A placer application uses this trigger event to request that an existing appointment be rescheduled.  The new Requested
// Start Date and Time, Appointment Duration, Repeating Interval, Repeating Interval Duration, and/or Priority are provided
// in the ARQ segment, along with the existing placer and filler identification numbers.  If it is successful, an application
// acknowledgment is returned, optionally containing an SCH segment and related detail segments describing the new information
// for the rescheduled appointment
type SRR_S02 struct {
	HL7      HL7Name           `hl7:",name=SRR_S02,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S02_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S03_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S03_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S03_Patient   `hl7:",display=Patient"`
	Resources []SRR_S03_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S03_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S03_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S03_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S03_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S03_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S03_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S03_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S03_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S03_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S03_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S03_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S03_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S03_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Appointment Modification
//
// This message transmits a request for modification of an existing appointment to a filler application.  This trigger event
// is used to request the modification of information on an existing appointment, outside of the need to reschedule, cancel,
// discontinue or delete the appointment, or to add, modify, cancel, discontinue, or delete services and/or resources on
// the appointment.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the new information for the modified appointment
type SRR_S03 struct {
	HL7      HL7Name           `hl7:",name=SRR_S03,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S03_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S04_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S04_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S04_Patient   `hl7:",display=Patient"`
	Resources []SRR_S04_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S04_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S04_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S04_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S04_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S04_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S04_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S04_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S04_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S04_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S04_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S04_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S04_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S04_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Appointment Cancellation
//
// The request appointment cancellation trigger event is sent by the placer application to the filler application to request
// that an existing appointment be canceled.  A cancel event is used to stop a valid appointment from occurring.  For example,
// if a patient scheduled for an exam cancels his/her appointment, then a request to cancel the appointment is sent.  If it is
// successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail segments
// describing the canceled appointment
type SRR_S04 struct {
	HL7      HL7Name           `hl7:",name=SRR_S04,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S04_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S05_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S05_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S05_Patient   `hl7:",display=Patient"`
	Resources []SRR_S05_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S05_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S05_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S05_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S05_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S05_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S05_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S05_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S05_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S05_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S05_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S05_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S05_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S05_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Appointment Discontinuation
//
// The request appointment discontinuation is sent by the placer application to the filler application to request that an
// appointment in progress be stopped, or that the remaining occurrences of a parent appointment not occur as scheduled.
// If none of the child appointments of a parent appointment have occurred, then a cancel trigger event should be sent instead.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the discontinued appointment
type SRR_S05 struct {
	HL7      HL7Name           `hl7:",name=SRR_S05,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S05_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S06_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S06_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S06_Patient   `hl7:",display=Patient"`
	Resources []SRR_S06_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S06_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S06_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S06_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S06_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S06_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S06_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S06_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S06_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S06_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S06_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S06_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S06_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S06_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Appointment Deletion
//
// A request appointment deletion is sent by the placer application to the filler application to request that an appointment
// that had been entered in error be removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously requested, and must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or has already been completed.  Likewise, it should not be used on any parent appointment if any child appointments have
// either begun or been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the deleted appointment
type SRR_S06 struct {
	HL7      HL7Name           `hl7:",name=SRR_S06,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S06_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S07_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S07_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S07_Patient   `hl7:",display=Patient"`
	Resources []SRR_S07_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S07_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S07_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S07_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S07_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S07_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S07_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S07_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S07_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S07_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S07_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S07_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S07_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S07_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Addition of Service/Resource on Appointment
//
// The request addition of service/resource is triggered by the placer application to request that a new service or resource
// be added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments on an
// HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment
type SRR_S07 struct {
	HL7      HL7Name           `hl7:",name=SRR_S07,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S07_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S08_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S08_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S08_Patient   `hl7:",display=Patient"`
	Resources []SRR_S08_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S08_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S08_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S08_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S08_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S08_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S08_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S08_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S08_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S08_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S08_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S08_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S08_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S08_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Modification of Service/Resource on Appointment
//
// The request modification of service/resource is triggered on the placer application to request that information pertaining
// to an existing service or resource be changed for an existing appointment.  Services and resources are represented by the
// AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments
// that have not been completed, or for parent appointments whose children have not been completed.  If it is successful, an
// application acknowledgment is returned, optionally containing an SCH segment and related detail segments describing
// the modified appointment
type SRR_S08 struct {
	HL7      HL7Name           `hl7:",name=SRR_S08,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S08_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S09_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S09_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S09_Patient   `hl7:",display=Patient"`
	Resources []SRR_S09_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S09_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S09_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S09_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S09_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S09_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S09_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S09_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S09_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S09_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S09_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S09_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S09_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S09_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Cancellation of Service/Resource on Appointment
//
// This trigger event requests that a service or resource be removed from an existing scheduled appointment that has not yet
// begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.  For example, if
// a portable X-ray machine scheduled for an exam is no longer needed, then the placer application requests that the resource
// be canceled on the filler application.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment
type SRR_S09 struct {
	HL7      HL7Name           `hl7:",name=SRR_S09,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S09_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S10_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S10_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S10_Patient   `hl7:",display=Patient"`
	Resources []SRR_S10_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S10_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S10_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S10_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S10_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S10_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S10_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S10_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S10_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S10_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S10_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S10_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S10_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S10_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Discontinuation of Service/Resource on Appointment
//
// A request discontinuation of service/resource is sent by the placer application to the filler application when the remaining
// occurrences of a recurring appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to request that the performance of a service or resource in a recurring appointment that has already begun
// be stopped.  If the first appointment in a set of recurring appointments has not yet occurred, then a cancel trigger event
// should be sent instead.  This trigger event should only be used on appointments that have not been completed, or on parent
// appointments whose children have not been completed.  If it is successful, an application acknowledgment is returned,
// optionally containing an SCH segment and related detail segments describing the modified appointment
type SRR_S10 struct {
	HL7      HL7Name           `hl7:",name=SRR_S10,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S10_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S11_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S11_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/quantity"`
	NTE       []NTE               `hl7:"6,display=Notes And Comments"`
	Patient   []SRR_S11_Patient   `hl7:",display=Patient"`
	Resources []SRR_S11_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S11_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S11_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S11_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S11_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S11_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S11_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S11_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S11_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S11_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S11_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes And Comments"`
}

// GeneralResource
type SRR_S11_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes And Comments"`
}

// LocationResource
type SRR_S11_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// PersonnelResource
type SRR_S11_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Scheduled Request Response - Request Deletion of Service/Resource on Appointment
//
// A request deletion of service/resource is sent by the placer application to the filler application to request that a scheduled
// appointment requiring a service or resource entered in error be removed from the system.  A delete trigger event should
// only be used when a service or resource has been erroneously attached to an appointment, and must be removed from the schedule
// so that it does not affect any statistical processing.  A delete trigger event differs from a cancel trigger event in that
// a delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring.  This trigger event should
// only be used on appointments that have not been completed, or on parent appointments whose children have not been completed.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the modified appointment
type SRR_S11 struct {
	HL7      HL7Name           `hl7:",name=SRR_S11,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S11_Schedule `hl7:",display=Schedule"`
}

// Specimencontainer
type SSR_U04_Specimencontainer struct {
	HL7 HL7Name `hl7:",name=SSR_U04_Specimencontainer,type=tg"`
	SAC *SAC    `hl7:"5,required,display=Specimen Container Detail"`
	SPM []SPM   `hl7:"6,display=Specimen"`
}

// Specimen status request
//
// This message is used to request information concerning the location and status of specimens from one application to another
// (e.g., Laboratory Automation System to automated equipment). The request can be addressed for a specific container,
// a specific carrier, a specific tray or a specific location, depending on the arguments set in the SAC segment. The equipment
// specified in the EQU segment should respond with the "Specimen Status Update."
type SSR_U04 struct {
	HL7               HL7Name                     `hl7:",name=SSR_U04,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	Specimencontainer []SSR_U04_Specimencontainer `hl7:",required,display=Specimen_container"`
	ROL               *ROL                        `hl7:"7,display=Role"`
}

// Specimencontainer
type SSU_U03_Specimencontainer struct {
	HL7      HL7Name            `hl7:",name=SSU_U03_Specimencontainer,type=tg"`
	SAC      *SAC               `hl7:"5,required,display=Specimen Container Detail"`
	OBX      []OBX              `hl7:"6,display=Observation/result"`
	Specimen []SSU_U03_Specimen `hl7:",display=Specimen"`
}

// Specimen
type SSU_U03_Specimen struct {
	HL7 HL7Name `hl7:",name=SSU_U03_Specimen,type=tg"`
	SPM *SPM    `hl7:"7,required,display=Specimen"`
	OBX []OBX   `hl7:"8,display=Observation/result"`
}

// Specimen status update
//
// This message is used to send information concerning the location and status of specimens from one application to another
// (e.g., automated equipment to a Laboratory Automation System). The OBX segments attached to the SAC should be used for
// transfer of information not included in the SAC segment.
type SSU_U03 struct {
	HL7               HL7Name                     `hl7:",name=SSU_U03,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	Specimencontainer []SSU_U03_Specimencontainer `hl7:",required,display=Specimen_container"`
	ROL               *ROL                        `hl7:"9,display=Role"`
}

// Notification of sterilization configuration
//
// This message is sent from a filler application to notify other applications of a new sterilization configuration.  The
// information in the STC segment describes the detail of the new sterilization configuration.
type STC_S33 struct {
	HL7 HL7Name `hl7:",name=STC_S33,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SCP []SCP   `hl7:"4,required,display=Sterilizer Configuration (anti-microbial Devices)"`
}

// Request item
//
// A request item is sent by the placer application to the filler application to request the ID and description of an item to
// be sterilized or decontaminated.  If it is successful, the filler application returns an application acknowledgment
// (if requested under the enhanced acknowledgment mode, or if the original acknowledgment mode is in use).
type STI_S30 struct {
	HL7 HL7Name `hl7:",name=STI_S30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot"`
}

// Testconfiguration
type TCR_U11_Testconfiguration struct {
	HL7 HL7Name `hl7:",name=TCR_U11_Testconfiguration,type=tg"`
	SPM *SPM    `hl7:"5,display=Specimen"`
	TCC []TCC   `hl7:"6,required,display=Test Code Configuration"`
}

// Automated equipment test code settings request
//
// This message is used to request information concerning test codes from one application to another (e.g., Laboratory Automation
// System to automated equipment).
type TCR_U11 struct {
	HL7               HL7Name                     `hl7:",name=TCR_U11,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	Testconfiguration []TCR_U11_Testconfiguration `hl7:",required,display=Test_configuration"`
	ROL               *ROL                        `hl7:"7,display=Role"`
}

// Testconfiguration
type TCU_U10_Testconfiguration struct {
	HL7 HL7Name `hl7:",name=TCU_U10_Testconfiguration,type=tg"`
	SPM *SPM    `hl7:"5,display=Specimen"`
	TCC []TCC   `hl7:"6,required,display=Test Code Configuration"`
}

// Automated equipment test code settings update
//
// This message is used to send information concerning test codes and parameters from one application to another (e.g., automated
// equipment to a Laboratory Automation System). This message transfers the current snapshot of the test parameters of the
// sending system. The sent parameter sets are supposed to replace the parameter sets existing at the receiver of this message
// before the trigger (there is no selective "Add" or "Delete").
type TCU_U10 struct {
	HL7               HL7Name                     `hl7:",name=TCU_U10,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential Segment"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	Testconfiguration []TCU_U10_Testconfiguration `hl7:",required,display=Test_configuration"`
	ROL               *ROL                        `hl7:"7,display=Role"`
}

// Unsolicited display update message
//
// There is a simple HL7 message that allows for unsolicited display update messages to be sent in HL7 format from one system
// to another.
//
// Trigger events for the unsolicited update are generally the completion of a particular action (concerning a given patient).
// For example, a lab test might be completed, generating a STAT unsolicited display message to be sent to the appropriate
// location.
type UDM_Q05 struct {
	HL7 HL7Name `hl7:",name=UDM_Q05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential Segment"`
	URD *URD    `hl7:"4,required,display=Withdrawn"`
	URS *URS    `hl7:"5,display=Withdrawn"`
	DSP []DSP   `hl7:"6,required,display=Display Data"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Patient
type VXU_V04_Patient struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Patient,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// Insurance
type VXU_V04_Insurance struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type VXU_V04_Order struct {
	HL7         HL7Name               `hl7:",name=VXU_V04_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	Timing      []VXU_V04_Timing      `hl7:",display=Timing"`
	RXA         *RXA                  `hl7:"16,required,display=Pharmacy/treatment Administration"`
	RXR         *RXR                  `hl7:"17,display=Pharmacy/treatment Route"`
	Observation []VXU_V04_Observation `hl7:",display=Observation"`
}

// Timing
type VXU_V04_Timing struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/quantity Relationship"`
}

// Observation
type VXU_V04_Observation struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/result"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Unsolicited vaccination record update
//
// When a provider wishes to update the patient's vaccination record being held in a registry, he will transmit an unsolicited
// update of the record (a V04 trigger event).
//
// An unsolicited update will follow this format. The three-letter code in the leftmost column indicates the segment that
// is included; the column on the right specifies the chapter in which that segment is fully defined.
type VXU_V04 struct {
	HL7       HL7Name             `hl7:",name=VXU_V04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential Segment"`
	PID       *PID                `hl7:"4,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"5,display=Patient Additional Demographic"`
	NK1       []NK1               `hl7:"6,display=Next Of Kin / Associated Parties"`
	Patient   *VXU_V04_Patient    `hl7:",display=Patient"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []VXU_V04_Insurance `hl7:",display=Insurance"`
	Order     []VXU_V04_Order     `hl7:",display=Order"`
}
