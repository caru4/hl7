// Code generated by "hl7fetch -pkgdir h25 -root ./genjson -version 2.5"; DO NOT EDIT.

package h25

import "time"

// Address
//
// This data type specifies the address of a person, place or organization.
type AD struct {
	HL7                        HL7Name `hl7:",name=AD,len=415,type=d"`
	StreetAddress              ST      `hl7:"1,len=120,display=This component specifies the street or mailing address of a person or institution. When referencing an institution- this first component is used to specify the institution name. When used in connection with a person- this component specifies the first line of the address."`
	OtherDesignation           ST      `hl7:"2,len=120,display=This component specifies the second line of address. In general- it qualifies address. Examples: Suite 555 or Fourth Floor. When referencing an institution- this component specifies the street address."`
	City                       ST      `hl7:"3,len=50,display=This component specifies the city- district or place where the addressee is located depending upon the national convention for formatting addresses for postal usage."`
	StateOrProvince            ST      `hl7:"4,len=50,display=This component specifies the state or province where the addressee is located. State or province should be represented by the official postal service codes for that country."`
	ZipOrPostalCode            ST      `hl7:"5,len=12,display=This component specifies the zip or postal code where the addressee is located. Zip or postal codes should be represented by the official codes for that country. In the US- the zip code takes the form 99999[-9999]- while the Canadian postal code takes the form A9A9A9 and the Australian Postcode takes the form 9999."`
	Country                    ID      `hl7:"6,len=3,table=0399,display=This component specifies the country where the addressee is located. HL7 specifies that the 3-character (alphabetic) form of ISO 3166 be used for the country code. Refer to HL7 Table 0399 - Country Code in section 2.15.9.17 for valid values."`
	AddressType                ID      `hl7:"7,len=3,table=0190,display=This component specifies the kind or type of address. Refer to HL7 Table 0190 - Address Type for valid values."`
	OtherGeographicDesignation ST      `hl7:"8,len=50,display=This component specifies any other geographic designation that may be necessary. It includes county- bioregion- SMSA- etc."`
}

// Authorization Information
//
// This data type specifies the identifier or code for an insurance authorization instance and its associated detail.
type AUI struct {
	HL7                 HL7Name `hl7:",name=AUI,len=239,type=d"`
	AuthorizationNumber ST      `hl7:"1,len=30,display=Identifier assigned to the authorization."`
	Date                DT      `hl7:"2,len=8,format=YMD,display=Date of authorization."`
	Source              ST      `hl7:"3,len=199,display=Source of authorization."`
}

// Charge Code and Date
//
// Specifies whether a charge action is based on an invocation event or is time-based.
type CCD struct {
	HL7             HL7Name `hl7:",name=CCD,len=28,type=d"`
	InvocationEvent ID      `hl7:"1,required,len=1,table=0100,display=Specifies the code for the event precipitating/triggering the charge activity. Refer to HL7 Table 0100 - Invocation event for valid values."`
	DateTime        TS      `hl7:"2,len=26,format=YMDHMS,display=The second component is used to express the exact time to charge for the ordered service; it is used only when the CCD.1 value is T. When used- it is expressed as a TS data type."`
}

// Coded Element
//
// This data type transmits codes and the text associated with the code.
type CE struct {
	HL7                         HL7Name `hl7:",name=CE,len=483,type=d"`
	Identifier                  ST      `hl7:"1,len=20,display=Sequence of characters (the code) that uniquely identifies the item being referenced. Different coding schemes will have different elements here."`
	Text                        ST      `hl7:"2,len=199,display=The descriptive or textual name of the identifier- e.g.- myocardial infarction or X-ray impression."`
	NameOfCodingSystem          ID      `hl7:"3,len=20,table=0396,display=Identifies the coding scheme being used in the identifier component. The combination of the identifier and name of coding system components will be a unique code for a data item. Each system has a unique identifier."`
	AlternateIdentifier         ST      `hl7:"4,len=20,display=An alternate sequence of characters (the code) that uniquely identifies the item being referenced. See usage note in section introduction."`
	AlternateText               ST      `hl7:"5,len=199,display=The descriptive or textual name of the alternate identifier. See usage note in section introduction."`
	NameOfAlternateCodingSystem ID      `hl7:"6,len=20,table=0396,display=Identifies the coding scheme being used in the alternate identifier component."`
}

// Coded with No Exceptions
//
// Specifies a coded element and its associated detail. The CNE data type is used when a required or mandatory coded field is
// needed. The specified HL7 or externally defined table must be used and may not be extended with local values. Text may not
// replace the code. A CNE field must have an HL7 defined or external table associated with it. It must be specified in the standard.
type CNE struct {
	HL7                            HL7Name `hl7:",name=CNE,len=705,type=d"`
	Identifier                     ST      `hl7:"1,required,len=20,display=Sequence of characters (the code) that uniquely identifies the item being referenced by the CNE.2. Different coding schemes will have different elements here."`
	Text                           ST      `hl7:"2,len=199,display=The descriptive or textual name of the identifier- e.g.- myocardial infarction or X-ray impression. Its data type is string (ST). This is the corresponding text assigned by the coding system to the identifier."`
	NameOfCodingSystem             ID      `hl7:"3,len=20,table=0396,display=Each coding system is assigned a unique identifier. This component will serve to identify the coding scheme being used in the identifier component. The combination of the identifier and name of coding system components will be a unique code for a data item. Each system has a unique identifier."`
	AlternateIdentifier            ST      `hl7:"4,len=20,display=Analogous to Identifier in component 1."`
	AlternateText                  ST      `hl7:"5,len=199,display=The descriptive or textual name of the alternate identifier. Analogous to 'Text' in component 2. See usage notes in section introduction for further description."`
	NameOfAlternateCodingSystem    ID      `hl7:"6,len=20,table=0396,display=Identifies the coding scheme being used in the alternate identifier component. Analogous to Name of Coding System in component 3. Refer to HL7 Table 0396 in section 2.17.5 for valid values."`
	CodingSystemVersionID          ST      `hl7:"7,conditional,len=10,display=the version ID for the coding system identified by component 3. It belongs conceptually to components 1-3 and appears here only for reasons of backward compatibility."`
	AlternateCodingSystemVersionID ST      `hl7:"8,len=10,display=the version ID for the coding system identified by component -6. It belongs conceptually to the group of Alternate components (see note 2.A.6.6) and appears here only for reasons of backward compatibility."`
	OriginalText                   ST      `hl7:"9,len=199,display=The original text that was available to an automated process or a human before a specific code was assigned."`
}

// Composite ID Number and Name Simplified
//
// Specifies a person using both an identifier and the persons name
type CNN struct {
	HL7                                         HL7Name `hl7:",name=CNN,len=406,type=d"`
	IDNumber                                    ST      `hl7:"1,len=15,display=Coded ID according to a user-defined table. If the first component is present- either component 8 or 9- or both 10 and 11- must be valued."`
	FamilyName                                  ST      `hl7:"2,len=50,display=This component contains the person's family name in a string format."`
	GivenName                                   ST      `hl7:"3,len=30,display=Used to specify a first name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,len=30,display=Second And Further Given Names Or Initials Thereof"`
	Suffix                                      ST      `hl7:"5,len=20,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,len=20,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"7,len=5,table=0360,display=Used to specify an educational degree (e.g.- MD). Refer to User-defined Table 0360 - Degree for suggested values."`
	SourceTable                                 IS      `hl7:"8,conditional,len=4,table=0297,display=Refer to User-defined Table 0297 - CN ID source for suggested values. Used to delineate the first component. If component 1 is valued- either component 8- or 9- or both 10 and 11- must be valued. "`
	AssigningAuthorityNamespaceID               IS      `hl7:"9,conditional,len=20,table=0363,display= Assigning Authority is normally expressed as an HD data type- but has been flattened to 3 components here (CNS.9- CNS.10 and CNS.11) in this data type so that it may be fully expressed. Also note that if additional components are added to the HD data type in the future- adjustment will need to be made accordingly to this data type.   If component 1 is valued- either component 8- or 9- or both 10 and 11- must be valued."`
	AssigningAuthorityUniversalID               ST      `hl7:"10,conditional,len=199,display=If CNN.11 is valued- this component must be valued. If component 1 is valued- either component 8- or 9- or both 10 and 11- must be valued. "`
	AssigningAuthorityUniversalIDType           ID      `hl7:"11,conditional,len=6,table=0301,display=If this component is a known UID refer to HL7 Table 0301 - Universal ID type for valid values.  If CNN.10 is valued- this component must be valued. If component 1 is valued- either component 8- or 9- or both 10 and 11- must be valued. "`
}

// Composite Price
type CP struct {
	HL7        HL7Name `hl7:",name=CP,len=543,type=d"`
	Price      MO      `hl7:"1,required,len=20,display=The only required component; usually containing a decimal point. Note that each component of the MO data type (Section 2.A.41- 'MO - money') is a subcomponent here."`
	PriceType  ID      `hl7:"2,len=2,table=0205,display=A coded value- data type ID. Refer to HL7 Table 0205 - Price type for valid values."`
	FromValue  NM      `hl7:"3,len=16,display=Each is a NM data type; together they specify the 'range'. The range can be defined as either time or quantity. For example- the range can indicate that the first 10 minutes of the procedure has one price. Another repetition of the data type can use the range to specify that the following 10 to 60 minutes of the procedure is charged at another price per; a final repetition can specify that the final 60 to N minutes of the procedure at a third price."`
	ToValue    NM      `hl7:"4,len=16,display=See <from value> above."`
	RangeUnits *CE     `hl7:"5,len=483,display=A coded value- data type CE- defined by the standard table of units for either time or quantity (see for example- the tables in Section 7.1.4- 'Coding schemes'). This describes the units associated with the range- e.g.- seconds- minutes- hours- days- quantity (i.e.- count); it is required if <from value> and <to value> are present."`
	RangeType  ID      `hl7:"6,len=1,table=0298,display=Range Type"`
}

// Composite Quantity with Units
//
// Note: CQ cannot be legally expressed when embedded within another data type. Its use is constrained to a segment field.
//
type CQ struct {
	HL7      HL7Name `hl7:",name=CQ,len=500,type=d"`
	Quantity NM      `hl7:"1,len=16,display=This component specifies the numeric quantity or amount of an entity."`
	Units    *CE     `hl7:"2,len=483,display=This component species the units in which the quantity is expressed. Field-by-field- default units may be defined within the specifications. When the quantity is measured in the default units- the units need not be transmitted. If the quantity is recorded in units different from the default- the units must be transmitted."`
}

// Coded with Exceptions
//
// Specifies a coded element and its associated detail. The CWE data type is used when 1) more than one table may be applicable
// or 2) the specified HL7 or externally defined table may be extended with local values or 3) when text is in place, the code
// may be omitted.
type CWE struct {
	HL7                            HL7Name `hl7:",name=CWE,len=705,type=d"`
	Identifier                     ST      `hl7:"1,len=20,display=Sequence of characters (the code) that uniquely identifies the item being referenced. Different coding schemes will have different elements here."`
	Text                           ST      `hl7:"2,len=199,display=The descriptive or textual name of the identifier- e.g.- myocardial infarction or X-ray impression."`
	NameOfCodingSystem             ID      `hl7:"3,len=20,table=0396,display=Identifies the coding scheme being used in the identifier component."`
	AlternateIdentifier            ST      `hl7:"4,len=20,display=An alternate sequence of characters (the code) that uniquely identifies the item being referenced. Analogous to 'Identifier' in component 1. See usage note in section introduction."`
	AlternateText                  ST      `hl7:"5,len=199,display=The descriptive or textual name of the alternate identifier. Analogous to 'Text' in component 2. See usage note in section introduction."`
	NameOfAlternateCodingSystem    ID      `hl7:"6,len=20,table=0396,display=Identifies the coding scheme being used in the alternate identifier component. Analogous to Name of Coding System above. See usage note in section introduction."`
	CodingSystemVersionID          ST      `hl7:"7,conditional,len=10,display=This is the version ID for the coding system identified by components 1-3. It belongs conceptually to the group of component 1-3 and appears here only for reasons of backward compatibility."`
	AlternateCodingSystemVersionID ST      `hl7:"8,len=10,display=This is the version ID for the coding system identified by components 4-6. It belongs conceptually to the group of alternate components (See usage note in section introduction) and appears here only for reasons of backward compatibility."`
	OriginalText                   ST      `hl7:"9,len=199,display=The original text that was available to an automated process or a human before a specific code was assigned."`
}

// Extended Composite ID with Check Digit
//
// This data type is used for specifying an identifier with its associated administrative detail.
type CX struct {
	HL7                         HL7Name `hl7:",name=CX,len=1913,type=d"`
	IDNumber                    ST      `hl7:"1,required,len=15,display=The value of the identifier itself."`
	CheckDigit                  ST      `hl7:"2,len=1,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CheckDigitScheme            ID      `hl7:"3,len=3,table=0061,display=Contains the code identifying the check digit scheme employed."`
	AssigningAuthority          *HD     `hl7:"4,len=227,table=0363,display=The assigning authority is a unique name of the system (or organization or agency or department) that creates the data. . Refer to User-defined Table 0363 - Assigning authority for suggested values."`
	IdentifierTypeCode          ID      `hl7:"5,len=5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the Assigning authority component. Refer to HL7 Table 0203 - Identifier type for suggested values."`
	AssigningFacility           *HD     `hl7:"6,len=227,display=The place or location identifier where the identifier was first assigned to the patient. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	EffectiveDate               DT      `hl7:"7,len=8,format=YMD,display=The first date- if known- on which the identifier is valid and active."`
	ExpirationDate              DT      `hl7:"8,len=8,format=YMD,display=The last date- if known- on which the identifier is valid and active."`
	AssigningJurisdiction       *CWE    `hl7:"9,len=705,display=The geo-political body that assigned the identifier in component 1."`
	AssigningAgencyOrDepartment *CWE    `hl7:"10,len=705,display=The agency or department that assigned the identifier in component 1."`
}

// Daily Deductible Information
//
// This data type specifies the detail information for the daily deductible.
type DDI struct {
	HL7            HL7Name `hl7:",name=DDI,len=25,type=d"`
	DelayDays      NM      `hl7:"1,len=3,display=The number of days after which the daily deductible begins"`
	MonetaryAmount MO      `hl7:"2,required,len=16,display=The monetary amount of the deductible"`
	NumberOfDays   NM      `hl7:"3,len=4,display=The number of days to apply the deductible. If this component is not populated- it means that the number of days is indefinite."`
}

// Date and Institution Name
//
// Specifies the date and institution information where a staff member became active or inactive.
type DIN struct {
	HL7             HL7Name `hl7:",name=DIN,len=510,type=d"`
	Date            TS      `hl7:"1,required,len=26,format=YMDHMS,display=Specifies the date when a staff member became active or inactive."`
	InstitutionName CE      `hl7:"2,required,len=483,table=0531,display=Specifies the institution where a staff member is or was active. Refer to User-Defined Table0531 - Institutions for suggested values."`
}

// Discharge Location and Date
//
// Specifies the healthcare facility to which the patient was discharged and the date.
type DLD struct {
	HL7               HL7Name `hl7:",name=DLD,len=47,type=d"`
	DischargeLocation IS      `hl7:"1,required,len=20,table=0113,display=Specifies the healthcare facility to which the patient was discharged. Refer to User-defined Table 0113 - Discharged to location for suggested values."`
	EffectiveDate     TS      `hl7:"2,len=26,format=YMDHMS,display=Specifies the date on which the patient was discharged to a healthcare facility."`
}

// Driver License Number
//
// This field contains the drivers license information. For state or province refer to official postal codes for that country;
// for country refer to ISO 3166 for codes.
type DLN struct {
	HL7                         HL7Name `hl7:",name=DLN,len=66,type=d"`
	LicenseNumber               ST      `hl7:"1,required,len=20,display=This field contains the drivers license number."`
	IssuingStateProvinceCountry IS      `hl7:"2,len=20,table=0333,display=Issuing authority for drivers license. For state or province refer to official postal codes for that country; for country refer to ISO 3166 for codes. The ISO 3166 table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code. User-defined Table 0333 - Drivers license issuing authority is used as the HL7 identifier for the user-defined table of values for this component."`
	ExpirationDate              DT      `hl7:"3,len=24,format=YMD,display=Expiration date (DT) for drivers license."`
}

// Delta
//
// Describes the information that controls delta check warnings.
type DLT struct {
	HL7               HL7Name `hl7:",name=DLT,len=0,type=d"`
	NormalRange       *NR     `hl7:"1,len=33,display=Specifies the normal interval of the reference data"`
	NumericThreshold  NM      `hl7:"2,len=4,display=The numeric threshold of the change that is detected."`
	ChangeComputation ID      `hl7:"3,len=1,table=0523,display=Specifies if the change is computed as a percent change or as an absolute change. Refer to HL7 Table 0523 - Computation type for valid values."`
	DaysRetained      NM      `hl7:"4,len=4,display=The length of time in days that the value is retained for computing delta checks."`
}

// Date/Time Range
type DR struct {
	HL7                HL7Name `hl7:",name=DR,len=53,type=d"`
	RangeStartDateTime TS      `hl7:"1,len=26,format=YMDHMS,display=The first component contains the earliest date/time (time stamp) in the specified range."`
	RangeEndDateTime   TS      `hl7:"2,len=26,format=YMDHMS,display=The second component contains the latest date/time in the specified range. Note that the TS (time stamp) data type allows the specification of precision."`
}

// Date
//
// Specifies the century and year with optional precision to month and day.
//
// As of v 2.3, the number of digits populated specifies the precision using the format specification YYYY[MM[DD]].
//
// Prior to v 2.3, this data type was specified in the format YYYYMMDD. As of v 2.3 month and days are no longer required. By site-specific
// agreement, YYYYMMDD may be used where backward compatibility must be maintained.
type DT = time.Time

// Date/Time
//
// Specifies a point in time using a 24-hour clock notation.
//
// Format: YYYY[MM[DD[HH[MM[SS[.S[S[S[S]]]]]]]]][+/-ZZZZ].
type DTM = time.Time

// Day Type and Number
//
// This data type specifies the type and number of days for which a certification is valid.
type DTN struct {
	HL7          HL7Name `hl7:",name=DTN,len=6,type=d"`
	DayType      IS      `hl7:"1,required,len=2,table=0149,display=Specifies whether the days are denied- pending- or approved."`
	NumberOfDays NM      `hl7:"2,required,len=3,display=Specifies the number of days for which the certification is valid."`
}

// Encapsulated Data
//
// This data type transmits encapsulated data from a source system to a destination system. It contains the identity of the
// source system, the type of data, the encoding method of the data, and the data itself. This data type is similar to the RP (reference
// pointer) data type of Section 2.A.65, "RP - reference pointer," except that instead of pointing to the data on another system,
// it contains the data which is to be sent to that system.
type ED struct {
	HL7               HL7Name `hl7:",name=ED,len=65536,type=d"`
	SourceApplication *HD     `hl7:"1,len=227,display=A unique name that identifies the system which was the source of the data. Identical format and restrictions as in reference pointer (see Section 2.A.65.2- 'Application ID (HD)')."`
	TypeOfData        ID      `hl7:"2,required,len=9,table=0191,display=Identical to type of data component in the reference pointer (RP) data type. See Section 2.A.65.3- 'Type of Data (ID)'."`
	DataSubtype       ID      `hl7:"3,len=18,table=0291,display=Identical to subtype component in the reference pointer (RP) data type. See Section 2.A.65.4- 'Subtype (ID)'."`
	Encoding          ID      `hl7:"4,required,len=6,table=0299,display=The type of encoding used to represent successive octets of binary data as displayable ASCII characters. Refer to HL7 Table 0299 - Encoding for valid values."`
	Data              TX      `hl7:"5,required,len=65536,display=Displayable ASCII characters which constitute the data to be sent from source application to destination application. The characters are limited to the legal characters of the ST data type- as defined in Section 2.A.74- ' ST - string data -' and- if encoded binary- are encoded according to the method of Section 2.A.24.2- 'Type of Data (ID)'."`
}

// Entity Identifier
//
// The entity identifier defines a given entity within a specified series of identifiers.
type EI struct {
	HL7              HL7Name `hl7:",name=EI,len=427,type=d"`
	EntityIdentifier ST      `hl7:"1,len=199,display=The first component- <entity identifier>- is usually defined to be unique within the series of identifiers created by the <assigning authority>- defined by a hierarchic designator- represented by components 2 through 4. See Section 2.A.33- 'HD - hierarchic designator'."`
	NamespaceID      IS      `hl7:"2,len=20,table=0363,display=The assigning authority is a unique identifier of the system (or organization or agency or department) that creates the data. Refer to User-defined Table 0363 - Assigning authority for suggested values."`
	UniversalID      ST      `hl7:"3,conditional,len=199,display=Universal Id"`
	UniversalIDType  ID      `hl7:"4,conditional,len=6,table=0301,display=Universal Id Type"`
}

// Entity Identifier Pair
//
// Specifies an identifier assigned to an entity by either the placer or the filler system. If both components are populated
// the identifiers must refer to the same entity.
type EIP struct {
	HL7                      HL7Name `hl7:",name=EIP,len=855,type=d"`
	PlacerAssignedIdentifier *EI     `hl7:"1,len=427,display=Specifies an identifier assigned to an entity by the placer system."`
	FillerAssignedIdentifier *EI     `hl7:"2,len=427,display=Specifies an identifier assigned to an entity by the filler system."`
}

// Error Location and Description
//
// Specifies the segment that contains an error and describes the nature of the error.
type ELD struct {
	HL7                  HL7Name `hl7:",name=ELD,len=493,type=d"`
	SegmentID            ST      `hl7:"1,len=3,display=The segment containing the error in another message"`
	SegmentSequence      NM      `hl7:"2,len=2,display=Specifies the specific occurrence if the segment specified in component 1 occurs more than once in the message."`
	FieldPosition        NM      `hl7:"3,len=2,display=Ordinal position of the data field within the segment. For systems that do not use the HL7 Encoding Rules- the data item number may be used for the third component."`
	CodeIdentifyingError *CE     `hl7:"4,len=483,table=0357,display=A code that describes the nature of the error. Refer to HL7 Table 0357 - Message error condition codes for valid values."`
}

// Error Location
//
// This data type identifies the segment and its constituent where an error has occurred.
type ERL struct {
	HL7                HL7Name `hl7:",name=ERL,len=18,type=d"`
	SegmentID          ST      `hl7:"1,required,len=3,display=Specifies the 3-letter name for the segment."`
	SegmentSequence    NM      `hl7:"2,required,len=2,display=Identifies the segment occurrence within the message."`
	FieldPosition      NM      `hl7:"3,len=2,display=Identifies the number of the field within the segment. The first field is assigned a number of 1. Field number should not be specified when referring to the entire segment."`
	FieldRepetition    NM      `hl7:"4,len=2,display=Identifies the repetition number of the field. The first repetition is counted as 1. If a Field Position is specified- but Field Repetition is not- Field Repetition should be assumed to be 1. If Field Position is not specified- Field Repetition should not be specified."`
	ComponentNumber    NM      `hl7:"5,len=2,display=Identifies the number of the component within the field. The first component is assigned a number of 1. Component number should not be specified when referring to the entire field."`
	SubComponentNumber NM      `hl7:"6,len=2,display=Identifies the number of the sub-component within the component. The first sub-component is assigned a number of 1. Sub-component number should not be specified when referring to the entire component."`
}

// Financial Class
type FC struct {
	HL7                HL7Name `hl7:",name=FC,len=47,type=d"`
	FinancialClassCode IS      `hl7:"1,required,len=20,table=0064,display=This component contains the financial class assigned to a person. User-defined Table 0064 - Financial class is used as the HL7 identifier for the user-defined table of values for this component."`
	EffectiveDate      TS      `hl7:"2,len=26,format=YMDHMS,display=This component contains the effective date/time of the persons assignment to the financial class specified in the first component."`
}

// Family Name
//
// This data type allows full specification of the surname of a person. Where appropriate, it differentiates the person's
// own surname from that of the person's partner or spouse, in cases where the person's name may contain elements from either
// name. It also permits messages to distinguish the surname prefix (such as "van" or "de") from the surname root.
type FN = string

// Formatted Text Data
//
// This data type is derived from the string data type by allowing the addition of embedded formatting instructions. These
// instructions are limited to those that are intrinsic and independent of the circumstances under which the field is being
// used. The actual instructions and their representation are described elsewhere in this chapter. The FT field is of arbitrary
// length (up to 64k) and may contain formatting commands enclosed in escape characters.
type FT = string

// General Timing Specification
//
// The General Timing Specification data type is used to communicate complex inter-related information Timing information.
// The value of such a field follows the formatting rules for a ST field. The string data will be structured according to the
// rules set forth in the "Version 3 Data Types Part II Unabridged Specification" for the General Timing Specification (GTS)
// data type.
type GTS = string

// Hierarchic Designator
//
// The basic definition of the HD is that it identifies an (administrative or system or application or other) entity that has
// responsibility for managing or assigning a defined set of instance identifiers (such as placer or filler number, patient
// identifiers, provider identifiers, etc.). This entity could be a particular health care application such as a registration
// system that assigns patient identifiers, a governmental entity such as a licensing authority that assigns professional
// identifiers or drivers license numbers, or a facility where such identifiers are assigned.
type HD struct {
	HL7             HL7Name `hl7:",name=HD,len=227,type=d"`
	NamespaceID     IS      `hl7:"1,len=20,table=0300,display=Namespace ID is used as the HL7 identifier for the user-defined table of values for this component."`
	UniversalID     ST      `hl7:"2,conditional,len=199,display=The HDs second component- <universal ID> (UID)- is a string formatted according to the scheme defined by the third component- <universal ID type> (UID type). The UID is intended to be unique over time within the UID type. It is rigorously defined. Each UID must belong to one of the specifically enumerated schemes for constructing UIDs (defined by the UID type). The UID (second component) must follow the syntactic rules of the particular universal identifier scheme (defined by the third component). Note that these syntactic rules are not defined within HL7 but are defined by the rules of the particular universal identifier scheme (defined by the third component)."`
	UniversalIDType ID      `hl7:"3,conditional,len=6,table=0301,display=The third component governs the interpretation of the second component of the HD. If the third component is a known UID refer to HL7 Table 0301 - Universal ID type for valid values- then the second component is a universal ID of that type."`
}

// Insurance Certification Definition
//
// This data type specifies whether insurance certification is required for particular patient types, and the time window
// for obtaining the certification.
type ICD struct {
	HL7                           HL7Name `hl7:",name=ICD,len=40,type=d"`
	CertificationPatientType      IS      `hl7:"1,len=11,table=0150,display=Specifies the category or type of patient for which this certification is requested. Refer to User-defined Table 0150 - Certification patient type for suggested values."`
	CertificationRequired         ID      `hl7:"2,required,len=1,table=0136,display=Specifies whether or not a certification is required. Refer to HL7 table 0136 - Yes/no indicator for valid values."`
	DateTimeCertificationRequired TS      `hl7:"3,len=26,format=YMDHMS,display=The date/time by which the certification must be obtained."`
}

// Coded values for HL7 tables
//
// The value of such a field follows the formatting rules for an ST field except that it is drawn from a table of legal values.
// There shall be an HL7 table number associated with ID data types. An example of an ID field is OBR-25-result status. This
// data type should be used only for HL7 tables (see Section 2.5.3.6 -Table). The reverse is not true, since in some circumstances
// it is more appropriate to use the CNE or CWE data type for HL7 tables.
type ID = string

// Coded value for user-defined tables
//
// The value of such a field follows the formatting rules for a ST field except that it is drawn from a site-defined (or user-defined)
// table of legal values. There shall be an HL7 table number associated with IS data types. An example of an IS field is the Event
// reason code defined in Section 3.3.1.4, "Event reason code". This data type should be used only for user-defined tables
// (see Section 2.5.3.6 - Table). The reverse is not true, since in some circumstances, it is more appropriate to use the CWE
// data type for user-defined tables.
type IS = string

// Job Code/Class
type JCC struct {
	HL7                HL7Name `hl7:",name=JCC,len=292,type=d"`
	JobCode            IS      `hl7:"1,len=20,table=0327,display=This component contains the persons job code. User-defined Table 0327 - Job code is used as the HL7 identifier for the user-defined table of values for this component."`
	JobClass           IS      `hl7:"2,len=20,table=0328,display=This component contains the persons employee classification. Refer to User-defined Table 0328 - Employee classification for suggested values."`
	JobDescriptionText TX      `hl7:"3,len=250,display=This component contains the text of the job description. This will accommodate systems where job descriptions are not codified."`
}

// Location with Address Variation 1
//
// Specifies a location and its address.
type LA1 struct {
	HL7                 HL7Name `hl7:",name=LA1,len=790,type=d"`
	PointOfCare         IS      `hl7:"1,len=20,table=0302,display=This component specifies the code for the point where patient care is administered. It is conditional on person location type (e.g.- nursing unit or department or clinic). After floor- it is the most general patient location designation. Refer to User-defined Table 0302 - Point of care for suggested values."`
	Room                IS      `hl7:"2,len=20,table=0303,display=This component specifies the code for the patient room. After point of care- it is the most general person location designation. Refer to User-defined Table 0303 - Room for suggested values."`
	Bed                 IS      `hl7:"3,len=20,table=0304,display=This component specifies the code for the patient bed. After room- it is the most general person location designation. Refer to User-defined Table 0304 - Bed for suggested values."`
	Facility            *HD     `hl7:"4,len=227,display=This component is subject to site interpretation but generally describes the highest level physical designation of an institution- medical center or enterprise. It is the most general person location designation."`
	LocationStatus      IS      `hl7:"5,len=20,table=0306,display=This component specifies the code for the status or availability of the location. For example- it may convey bed status. Refer to User-defined Table 0306 - Location status for suggested values."`
	PatientLocationType IS      `hl7:"6,len=20,table=0305,display=Person location type is the categorization of the persons location defined by facility- building- floor- point of care- room or bed. Although not a required field- when used- it may be the only populated field. It usually includes values such as nursing unit- department- clinic- SNF- physicians office. Refer to User-defined Table 0305 - Person location type for suggested values."`
	Building            IS      `hl7:"7,len=20,table=0307,display=This component specifies the code for the building where the person is located. After facility- it is the most general person location designation. Refer to User-defined Table 0307 - Building for suggested values."`
	Floor               IS      `hl7:"8,len=20,table=0308,display=This component specifies the code for the floor where the person is located. After building- it is the most general person location designation. Refer to User-defined Table 0308 - Floor for suggested values."`
	Address             *AD     `hl7:"9,len=415,display=This component describes the location in free text."`
}

// Location with Address Variation 2
//
// Specifies a location and its address.
type LA2 struct {
	HL7                        HL7Name `hl7:",name=LA2,len=790,type=d"`
	PointOfCare                IS      `hl7:"1,len=20,table=0302,display=This component specifies the code for the point where patient care is administered. It is conditional on LA2. 6 Person Location Type (e.g.- nursing unit or department or clinic). After floor- it is the most general patient location designation. Refer to User-defined Table 0302 - Point of care for suggested values."`
	Room                       IS      `hl7:"2,len=20,table=0303,display=This component specifies the code for the patient room. After point of care- it is the most general person location designation. Refer to User-defined Table 0303 - Room for suggested values."`
	Bed                        IS      `hl7:"3,len=20,table=0304,display=This component specifies the code for the patient's bed. After room- it is the most general person location designation. Refer to User-defined Table 0304 - Bed for suggested values."`
	Facility                   *HD     `hl7:"4,len=227,display=This component is subject to site interpretation but generally describes the highest level physical designation of an institution- medical center or enterprise. It is the most general person location designation."`
	LocationStatus             IS      `hl7:"5,len=20,table=0306,display=This component specifies the code for the status or availability of the location. For example- it may convey bed status. Refer to User-defined Table 0306 - Location status for suggested values."`
	PatientLocationType        IS      `hl7:"6,len=20,table=0305,display=Person location type is the categorization of the persons location defined by facility- building- floor- point of care- room or bed. Although not a required field- when used- it may be the only populated field. It usually includes values such as nursing unit- department- clinic- SNF- physicians office. Refer to User-defined Table 0305 - Person location type for suggested values."`
	Building                   IS      `hl7:"7,len=20,table=0307,display=This component specifies the code for the building where the person is located. After facility- it is the most general person location designation. Refer to User-defined Table 0307 - Building for suggested values."`
	Floor                      IS      `hl7:"8,len=20,table=0308,display=This component specifies the code for the floor where the person is located. After building- it is the most general person location designation. Refer to User-defined Table 0308 - Floor for suggested values."`
	StreetAddress              ST      `hl7:"9,len=120,display=This component specifies the street or mailing address of a person or institution. When referencing an institution- it is used to specify the institution name. When used in connection with a person- it specifies the first line of the address."`
	OtherDesignation           ST      `hl7:"10,len=120,display=This component specifies the second line of an address. In general- it qualifies address. Examples: Suite 555 or Fourth Floor. When referencing an institution- this component specifies the street address."`
	City                       ST      `hl7:"11,len=50,display=This component specifies the city- or district or place where the person or institution is located depending upon the national convention for formatting addresses for postal usage. City should be represented by the official postal service codes for that state."`
	StateOrProvince            ST      `hl7:"12,len=50,display=This component specifies the state or province where the person or institution is located. State or province should be represented by the official postal service codes for that country."`
	ZipOrPostalCode            ST      `hl7:"13,len=12,display=This component specifies the zip or postal code where the person or institution is located. Zip or postal codes should be represented by the official codes for that country. In the US- the zip code takes the form 99999[-9999]- while the Canadian postal code takes the form A9A9A9 and the Australian Postcode takes the form 9999."`
	Country                    ID      `hl7:"14,len=3,table=0399,display=This component specifies the country where the person or institution is located. ISO 3166 provides a list of country codes that may be used.[1] HL7 specifies that the 3-character (alphabetic) form of ISO 3166 be used for the country code. Refer to HL7 Table 0399 - Country code in section 2.15.9.17 for valid values."`
	AddressType                ID      `hl7:"15,len=3,table=0190,display=This component specifies the kind or type of address. Refer to HL7 Table 0190 - Address type for valid values."`
	OtherGeographicDesignation ST      `hl7:"16,len=50,display=This component specifies any other geographic designation that may be necessary. It includes county- bioregion- SMSA- etc."`
}

// Money
//
// This data type specifies an amount of money and the denomination in which it is expressed.
type MO struct {
	HL7          HL7Name `hl7:",name=MO,len=20,type=d"`
	Quantity     NM      `hl7:"1,len=16,display=The first component is a quantity."`
	Denomination ID      `hl7:"2,len=3,table=ISO4217,display=The second component is the denomination in which the quantity is expressed. The values for the denomination component are those specified in ISO-4217. If the denomination is not specified- MSH-17-country code is used to determine the default."`
}

// Money and Code
//
// Transmits monetary information and the associated charge code for services performed.
type MOC struct {
	HL7            HL7Name `hl7:",name=MOC,len=504,type=d"`
	MonetaryAmount *MO     `hl7:"1,len=20,display=The code identifying the charge to the ordering entity for the services performed."`
	ChargeCode     *CE     `hl7:"2,len=483,display=Charge Code"`
}

// Money or Percentage
//
// This data type specifies an amount that may be either currency or a percentage. It is a variation on the MO data type that is
// limited to currency.
type MOP struct {
	HL7                        HL7Name `hl7:",name=MOP,len=23,type=d"`
	MoneyOrPercentageIndicator ID      `hl7:"1,required,len=2,table=0148,display=Specifies whether the amount is currency or a percentage."`
	MoneyOrPercentageQuantity  NM      `hl7:"2,required,len=16,display=Specifies the currency or percentage quantity."`
	CurrencyDenomination       ID      `hl7:"3,len=3,table=ISO4217,display=the denomination in which the quantity is expressed where the amount is currency. The values for the denomination component are those specified in ISO-4217. If the denomination is not specified- the context of the message or MSH-17-country code is used to determine the default."`
}

// Message Type
//
// This field contains the message type, trigger event, and the message structure ID for the message.
type MSG struct {
	HL7              HL7Name `hl7:",name=MSG,len=0,type=d"`
	MessageCode      ID      `hl7:"1,required,len=3,table=0076,display=Specifies the message type code. Refer to HL7 Table - Message Type in section 2.17.1 for valid values."`
	TriggerEvent     ID      `hl7:"2,required,len=3,table=0003,display=Specifies the trigger event code. Refer to HL7 Table - Event Type in section 2.17.2 for valid values."`
	MessageStructure ID      `hl7:"3,required,len=7,table=0354,display=Specifies the abstract message structure code. Refer to HL7 Table 0354 - Message Structure in section 2.17.3 for valid values."`
}

func (d MSG) MessageStructureID() string {
	if len(d.MessageStructure) > 0 {
		return d.MessageStructure
	}
	if len(d.TriggerEvent) == 0 {
		return d.MessageCode
	}
	return d.MessageCode + "_" + d.TriggerEvent
}

// Numeric Array
//
// This data type is used to represent a series (array) of numeric values. A field of this type may contain a one-dimensional
// array (vector or row) of numbers. Also, by allowing the field to repeat, a two-dimensional array (table) of numbers may
// be transmitted using this format, with each row of the table represented as one repetition of the field. Arrays that have
// one or more values not present may be transmitted using this data type. "Not present" values are represented as two adjacent
// component delimiters. If the absent values occur at the end of a row, the trailing component delimiters may be omitted.
// If an entire row of a table has no values, no component delimiters are necessary (in this case, there will be two adjacent
// repetition delimiters).
type NA struct {
	HL7     HL7Name `hl7:",name=NA,len=65536,type=d"`
	Value1  NM      `hl7:"1,required,len=16,display=Value1"`
	Value2  NM      `hl7:"2,len=16,display=Value2"`
	Value3  NM      `hl7:"3,len=16,display=Value3"`
	Value4  NM      `hl7:"4,len=16,display=Value4"`
	Value5  NM      `hl7:"5,display=Value5"`
	Value6  NM      `hl7:"6,display=Value6"`
	Value7  NM      `hl7:"7,display=Value7"`
	Value8  NM      `hl7:"8,display=Value8"`
	Value9  NM      `hl7:"9,display=Value9"`
	Value10 NM      `hl7:"10,display=Value10"`
}

// Name with Date and Location
//
// Specifies the name of the person performing a service, when the person performed the service and where the person performed
// the service.
type NDL struct {
	HL7                 HL7Name `hl7:",name=NDL,len=835,type=d"`
	Name                *CNN    `hl7:"1,len=406,display=This component specifies the name of the person performing a service."`
	StartDateTime       TS      `hl7:"2,len=26,format=YMDHMS,display=This component specifies the starting date and time for when the person is performing the service."`
	EndDateTime         TS      `hl7:"3,len=26,format=YMDHMS,display=This component specifies the ending date and time for when the person is performing the service."`
	PointOfCare         IS      `hl7:"4,len=20,table=0302,display=This component specifies the code for the point where patient care is administered. It is conditional on NDL. 9 Person Location Type (e.g.- nursing unit or department or clinic). After floor- it is the most general patient location designation. Refer to User-defined Table 0302 - Point of care for suggested values"`
	Room                IS      `hl7:"5,len=20,table=0303,display=Patient room. After point of care- it is the most general location designation. Refer to User-defined Table 0303 - Room for suggested values."`
	Bed                 IS      `hl7:"6,len=20,table=0304,display=This component specifies the code for the patient's bed. After room- it is the most general location designation. Refer to User-defined Table 0304 - Bed for suggested values."`
	Facility            *HD     `hl7:"7,len=227,display=This component is subject to site interpretation but generally describes the highest level physical designation of an institution- medical center or enterprise. It is the most general location designation."`
	LocationStatus      IS      `hl7:"8,len=20,table=0306,display=This component specifies the code for the status or availability of the location. For example- it may convey bed status. Refer to User-defined Table 0306 - Location status for suggested values."`
	PatientLocationType IS      `hl7:"9,len=20,table=0305,display=Location type is the categorization of the location defined by facility- building- floor- point of care- room or bed. Although not a required field- when used- it may be the only populated field. Usually includes values such as nursing unit- department- clinic- SNF- physicians office. Refer to User-defined Table 0305 - Person location type for suggested values."`
	Building            IS      `hl7:"10,len=20,table=0307,display=This component specifies the code for the building where the person is located. After facility- it is the most general location designation. Refer to User-defined Table 0307 - Building for suggested values."`
	Floor               IS      `hl7:"11,len=20,table=0308,display=This component specifies the code for the floor where the person is located. After building- it is the most general location designation. Refer to User-defined Table 0308 - Floor for suggested values."`
}

// Numeric
//
// A number represented as a series of ASCII numeric characters consisting of an optional leading sign (+ or -), the digits
// and an optional decimal point. In the absence of a sign, the number is assumed to be positive. If there is no decimal point
// the number is assumed to be an integer.
type NM = string

// Numeric Range
//
// Specifies the interval between the lowest and the highest values in a series of data. In the case where a numeric range is
// unbounded on one side, the component of the unbounded side is null. Whether the end points are included in the range is defined
// in the usage note for the field.
type NR struct {
	HL7       HL7Name `hl7:",name=NR,len=33,type=d"`
	LowValue  NM      `hl7:"1,len=16,display=The number specifying the lower limit or boundary of the range."`
	HighValue NM      `hl7:"2,len=16,display=The number specifying the high limit or boundary of the range."`
}

// Occurrence Code and Date
//
// The code and associated date defining a significant event relating to a bill that may affect payer processing.
type OCD struct {
	HL7            HL7Name `hl7:",name=OCD,len=714,type=d"`
	OccurrenceCode CNE     `hl7:"1,required,len=705,table=0350,display=The NUBC code for the event or occurrence relating to a bill that may affect payer processing."`
	OccurrenceDate DT      `hl7:"2,required,len=8,format=YMD,display=The date the event- relating to a bill that may affect payer processing- occurred."`
}

// Order Sequence Definition
//
// This data type specifies a fully coded version for forming a relationship between an order and one or more other orders.
// The relationship may be sequential or a cyclical pattern.
type OSD struct {
	HL7                               HL7Name `hl7:",name=OSD,len=110,type=d"`
	SequenceResultsFlag               ID      `hl7:"1,required,len=1,table=0524,display=Identifies whether sequence conditions or a repeating cycle of orders is defined. Refer to HL7-defined Table 0524 - Sequence condition for valid values."`
	PlacerOrderNumberEntityIdentifier ST      `hl7:"2,required,len=15,display=Contains the first component of the placer order number- entity identifier ."`
	PlacerOrderNumberNamespaceID      IS      `hl7:"3,len=6,table=0363,display=Contains the second component of the placer order number- namespace ID. Refer to user-defined table 0363 - Assigning Authority for suggested values."`
	FillerOrderNumberEntityIdentifier ST      `hl7:"4,required,len=15,display=Contains the first component of the filler order number- entity identifier."`
	FillerOrderNumberNamespaceID      IS      `hl7:"5,len=6,table=0363,display=Contains the second component of the filler order number- namespace ID. Refer to user-defined table 0363 - Assigning Authority for suggested values"`
	SequenceConditionValue            ST      `hl7:"6,len=12,display=Defines the relationship between the start/end of the related predecessor or successor order and the current order from ORC-2- 3 or 4."`
	MaximumNumberOfRepeats            NM      `hl7:"7,len=3,display=The maximum number of repeats to be used only on cyclic groups. The total number of repeats is constrained by the end date/time of the last repeat or the end date/time of the parent- whichever is first."`
	PlacerOrderNumberUniversalID      ST      `hl7:"8,required,len=15,display=Contains the next to the last component of the placer order number- universal ID."`
	PlacerOrderNumberUniversalIDType  ID      `hl7:"9,len=6,table=0301,display=Contains the last component of the placer order number. Refer to HL7 table 0301 - Universal ID Type for valid values."`
	FillerOrderNumberUniversalID      ST      `hl7:"10,required,len=15,display=Contains the next to the last component of the filler order number- universal ID."`
	FillerOrderNumberUniversalIDType  ID      `hl7:"11,len=6,table=0301,display=Contains the last component of the placer order number. Refer to HL7 table 0301 - Universal ID Type for valid values."`
}

// Occurrence Span Code and Date
//
// A code and the related dates that identify an event that relates to the payment of the claim. For example, Prior Stay Dates
// which is the from/through dates given by the patient of any hospital stay that ended within 60 days of this hospital or SNF
// admission.
type OSP struct {
	HL7                     HL7Name `hl7:",name=OSP,len=723,type=d"`
	OccurrenceSpanCode      CNE     `hl7:"1,required,len=705,table=0351,display=The date an event started that relates to the payment of a claim."`
	OccurrenceSpanStartDate DT      `hl7:"2,conditional,len=8,format=YMD,display=The date an event ended that relates to the payment of a claim."`
	OccurrenceSpanStopDate  DT      `hl7:"3,conditional,len=8,format=YMD,display=Occurrence Span Stop Date"`
}

// Practitioner Institutional Privileges
//
// This data type specifies the institutional privileges with associated detail granted to a provider.
type PIP struct {
	HL7            HL7Name `hl7:",name=PIP,len=1413,type=d"`
	Privilege      CE      `hl7:"1,required,len=483,table=0525,display=Specifies the institutional privilege itself. Refer to user-defined table 0525 - Privilege for suggested values."`
	PrivilegeClass *CE     `hl7:"2,len=483,table=0526,display=Specifies the class category of institutional privilege. Refer to User-Defined Table 0526 - Privilege Class for suggested values."`
	ExpirationDate DT      `hl7:"3,len=8,format=YMD,display=Specifies the date the institutional privilege is/was no longer valid."`
	ActivationDate DT      `hl7:"4,len=8,format=YMD,display=Specifies the date the institutional privilege became/becomes valid."`
	Facility       *EI     `hl7:"5,len=427,display=Specifies the facility in which the institutional privilege is/was valid."`
}

// Person Location
//
// This data type is used to specify a patient location within a healthcare institution. Which components are valued depends
// on the needs of the site. For example for a patient treated at home, only the person location type is valued. It is most commonly
// used for specifying patient locations, but may refer to other types of persons within a healthcare setting.
type PL struct {
	HL7                             HL7Name `hl7:",name=PL,len=1230,type=d"`
	PointOfCare                     IS      `hl7:"1,len=20,table=0302,display=This component specifies the code for the point where patient care is administered. It is conditional on PL.6 Person Location Type (e.g.- nursing unit or department or clinic). After floor- it is the most general patient location designation. Refer to User-defined Table 0302 - Point of care for suggested values."`
	Room                            IS      `hl7:"2,len=20,table=0303,display=This component specifies the code for the patient's room. After point of care- it is the most general person location designation. Refer to User-defined Table 0303 - Room for suggested values."`
	Bed                             IS      `hl7:"3,len=20,table=0304,display=This component specifies the code for the patient's bed. After room- it is the most general person location designation. Refer to User-defined Table 0304 - Bed for suggested values."`
	Facility                        *HD     `hl7:"4,len=227,display=This component is subject to site interpretation but generally describes the highest level physical designation of an institution- medical center or enterprise. It is the most general person location designation."`
	LocationStatus                  IS      `hl7:"5,len=20,table=0306,display=This component specifies the code for the status or availability of the location. For example- it may convey bed status. Refer to User-defined Table 0306 - Location status for suggested values."`
	PersonLocationType              IS      `hl7:"6,conditional,len=20,table=0305,display=Person location type is the categorization of the persons location defined by facility- building- floor- point of care- room or bed. Although not a required field- when used- it may be the only populated field. It usually includes values such as nursing unit- department- clinic- SNF- physicians office. Refer to User-defined Table 0305 - Person location type for suggested values."`
	Building                        IS      `hl7:"7,len=20,table=0307,display=This component specifies the code for the building where the person is located. After facility- it is the most general person location designation. Refer to User-defined Table 0307 - Building for suggested values."`
	Floor                           IS      `hl7:"8,len=20,table=0308,display=This component specifies the code for the floor where the person is located. After building- it is the most general person location designation. Refer to User-defined Table 0308 - Floor for suggested values."`
	LocationDescription             ST      `hl7:"9,len=199,display=This component describes the location in free text."`
	ComprehensiveLocationIdentifier *EI     `hl7:"10,len=427,display=The unique identifier that represents the physical location as a whole without regard for the individual components. This accommodates sites that may have a different method of defining physical units or who may code at a less granular level. For example- point of care- room- and bed may be 1 indivisible code."`
	AssigningAuthorityForLocation   *HD     `hl7:"11,len=227,display=The entity that creates the data for the individual physical location components. If populated- it should be the authority for all components populated. Refer to User-defined Table 0363 - Assigning authority for suggested values for the first sub-component of the HD component- <namespace ID>."`
}

// Practitioner License or Other ID Number
//
// This data type specifies a practitioners license number, or other ID number such as UPIN, Medicare and Medicaid number,
// and associated detail.
type PLN struct {
	HL7                             HL7Name `hl7:",name=PLN,len=101,type=d"`
	IDNumber                        ST      `hl7:"1,required,len=20,display=Specifies the license number or other ID number such as UPIN- Medicare and Medicaid number."`
	TypeOfIDNumber                  IS      `hl7:"2,required,len=8,table=0338,display=Specifies the type of number."`
	StateOtherQualifyingInformation ST      `hl7:"3,len=62,display=Specifies the state or province in which the license or ID is valid- if relevant- or other qualifying information. It is recommended that state qualifications use the abbreviations from the postal service of the country."`
	ExpirationDate                  DT      `hl7:"4,len=8,format=YMD,display=Specifies the date when the license or ID is no longer valid."`
}

// Performing Person Time Stamp
//
// This data type is the equivalent of an XCN data type joined with a TS data type. However, the XCN data type has been flattened
// to allow legal expression of its embedded complex data types HD, TS, CE and CWE.
type PPN struct {
	HL7                                         HL7Name `hl7:",name=PPN,len=2993,type=d"`
	IDNumber                                    ST      `hl7:"1,len=15,display=Coded ID according to a user-defined table- defined by the 8th component. If the first component is present- either the source table or the assigning authority must be valued."`
	FamilyName                                  FN      `hl7:"2,len=194,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.A.30."`
	GivenName                                   ST      `hl7:"3,len=30,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,len=30,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"5,len=20,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,len=20,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"7,len=5,table=0360,display=Retained for backward compatibility only as of v 2.5. See Professional Suffix component."`
	SourceTable                                 IS      `hl7:"8,conditional,len=4,table=0297,display=CN ID source is used as the HL7 identifier for the user-defined table of values for this component. Used to delineate the first component."`
	AssigningAuthority                          *HD     `hl7:"9,len=227,table=0363,display=The assigning authority is a unique identifier of the system (or organization or agency of department) that creates the data. It is a HD data type. User-defined Table 0363 - Assigning authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component- <namespace ID>."`
	NameTypeCode                                ID      `hl7:"10,len=1,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name type for valid values (see Section 2.A.88-  XPN - extended person name )."`
	IdentifierCheckDigit                        ST      `hl7:"11,len=1,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CheckDigitScheme                            ID      `hl7:"12,conditional,len=3,table=0061,display=Contains the code identifying the check digit scheme employed."`
	IdentifierTypeCode                          ID      `hl7:"13,len=5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the 'Assigning authority' component. Refer to HL7 Table 0203 - Identifier type for suggested values."`
	AssigningFacility                           *HD     `hl7:"14,len=227,display=The place or location identifier where the identifier was first assigned to the patient. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	DateTimeActionPerformed                     TS      `hl7:"15,len=26,format=YMDHMS,display=This component describes when the activity was performed."`
	NameRepresentationCode                      ID      `hl7:"16,len=1,table=0465,display=Name Representation Code"`
	NameContext                                 *CE     `hl7:"17,len=483,table=0448,display=This component is used to designate the context in which a name is used. The main use case is in Australian healthcare: indigenous patients who prefer to use different names when attending different healthcare institutions. Another use case occurs in the US where health practitioners can be licensed under slightly different names and the reporting of the correct name is vital for administrative purposes. Refer to chapter 3- section 3.4.2.6 for more detailed information on how to use this table. Refer to User-defined table 0448 - Name context for suggested values."`
	NameValidityRange                           DR      `hl7:"18,len=17,display=This component contains the start and end date/times- which define the period during which this name was valid. See section 2.A.20- ' DR - date/time range ' for description of subcomponents.  Retained for backward compatibility only as of v 2.5. Refer to PPN.20 Effective Date and PPN.21Expiration Date. This component cannot be fully expressed and was identified as v 2.4 erratum"`
	NameAssemblyOrder                           ID      `hl7:"19,len=1,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 Table 0444 - Name assembly order for valid values."`
	EffectiveDate                               TS      `hl7:"20,len=26,format=YMDHMS,display=The first date- if known- on which the address is valid and active."`
	ExpirationDate                              TS      `hl7:"21,len=26,format=YMDHMS,display=The last date- if known- on which the address is valid and active."`
	ProfessionalSuffix                          ST      `hl7:"22,len=199,display=Used to specify an abbreviation- or a string of abbreviations- denoting qualifications that support the persons profession- (e.g.- licenses- certificates- degrees- affiliations with professional societies- etc.). The Professional Suffix normally follows the Family Name when the Person Name is used for display purposes. Please note that this component is an unformatted string and is used for display purposes only. Detailed information regarding the contents of Professional Suffix is obtained using appropriate segments in Chapter 15- Personnel Management."`
	AssigningJurisdiction                       *CWE    `hl7:"23,len=705,display=The geo-political body that assigned the identifier in component 1."`
	AssigningAgencyOrDepartment                 *CWE    `hl7:"24,len=705,display=The agency or department that assigned the identifier in component 1."`
}

// Parent Result Link
//
// Uniquely identifies the parent results OBX segment related to the current order, together with the information in OBR-29-parent.
type PRL struct {
	HL7                              HL7Name `hl7:",name=PRL,len=755,type=d"`
	ParentObservationIdentifier      CE      `hl7:"1,required,len=483,display=Contains the unique identifier of the parent observation as defined in the OBX-3 of the parent result. The value is the same as the OBX-3 of the parent."`
	ParentObservationSubIdentifier   ST      `hl7:"2,len=20,display=Contains the sub-ID of the parent result as defined in the OBX-4 of the parent result. The value is the same as the OBX-4 of the parent."`
	ParentObservationValueDescriptor TX      `hl7:"3,len=250,display=Contains a descriptor of the parent observation value as specified in the OBX-5 of the parent result."`
}

// Processing Type
//
// This data type indicates whether to process a message as defined in HL7 Application (level 7) Processing rules.
type PT struct {
	HL7            HL7Name `hl7:",name=PT,len=3,type=d"`
	ProcessingID   ID      `hl7:"1,len=1,table=0103,display=A value that defines whether the message is part of a production- training- or debugging system. Refer to HL7 Table 0103 - Processing ID for valid values."`
	ProcessingMode ID      `hl7:"2,len=1,table=0207,display=A value that defines whether the message is part of an archival process or an initial load. Refer to HL7 Table 0207 - Processing mode for valid values."`
}

// Policy Type and Amount
//
// This data type specifies the policy type and amount covered by the insurance.
type PTA struct {
	HL7                       HL7Name `hl7:",name=PTA,len=56,type=d"`
	PolicyType                IS      `hl7:"1,required,len=5,table=0147,display=Specifies the policy type."`
	AmountClass               IS      `hl7:"2,len=9,table=0193,display=Specifies the amount quantity class."`
	MoneyOrPercentageQuantity NM      `hl7:"3,len=16,display=Specifies the currency or percentage quantity.  Retained for backward compatibility only as of v 2.5. Refer to PTA.4 instead. "`
	MoneyOrPercentage         MOP     `hl7:"4,required,len=23,display=specifies an amount that may be either currency or a percentage."`
}

// Query Input Parameter List
//
// This data type contains a segment field name and the list of values to be passed to the query processor.
type QIP struct {
	HL7              HL7Name `hl7:",name=QIP,len=212,type=d"`
	SegmentFieldName ST      `hl7:"1,required,len=12,display=This component contains the segment field name."`
	Values           ST      `hl7:"2,required,len=199,display=This component contains the field value or values in the form 'value1& value2 & value3'"`
}

// Query Selection Criteria
//
// This field indicates the conditions that qualify the rows to be returned in the query response. Note that this field conveys
// the same information as the "WHERE" clause in the corresponding SQL expression of the query, but is formatted differently.
type QSC struct {
	HL7                   HL7Name `hl7:",name=QSC,len=219,type=d"`
	SegmentFieldName      ST      `hl7:"1,required,len=12,display=The name of the field that is participating as a qualifier (usually the 'key'). Refer to Section 2.A.59.1-  Segment Field Name (ST) - for segment field name conventions."`
	RelationalOperator    ID      `hl7:"2,len=2,table=0209,display=Relational Operator"`
	Value                 ST      `hl7:"3,len=199,display=The value to which the field will be compared."`
	RelationalConjunction ID      `hl7:"4,len=3,table=0210,display=Relational Conjunction"`
}

// Row Column Definition
//
// This specifies the format of a column in terms of a segment field name, a data type, and a maximum length.
type RCD struct {
	HL7                HL7Name `hl7:",name=RCD,len=19,type=d"`
	SegmentFieldName   ST      `hl7:"1,len=12,display=The HL7 segment field name- which identifies the field occupying the column. Refer to Section 2.A.59.1- 'Segment Field Name (ST)-' for segment field name definition conventions."`
	Hl7DataType        ID      `hl7:"2,len=3,table=0440,display=The two or three character HL7 data type. Refer to HL7 Table 0440 - Data Types in section 2.16 for valid values."`
	MaximumColumnWidth NM      `hl7:"3,len=2,display=The maximum width of the column- as dictated by the responding system. This may vary from the HL7-defined maximum field length."`
}

// Reference Range
//
// Describes a reference range and its supporting detail.
type RFR struct {
	HL7                 HL7Name `hl7:",name=RFR,len=352,type=d"`
	NumericRange        NR      `hl7:"1,required,len=33,display=This component specifies the numeric interval of the reference data. Range is taken to be inclusive (i.e.- the range includes the end points). Units are context sensitive and are defined in the usage note for the field where this data type is used."`
	AdministrativeSex   IS      `hl7:"2,len=8,table=0001,display=This component specifies which gender for which the reference range is valid. Refer to User-defined Table 0001 - Administrative Sex for suggested values."`
	AgeRange            *NR     `hl7:"3,len=33,display=This component specifies the age range for which the reference range is valid. Ages of less than one year should be specified as a fraction (e.g.- 1 month : 0.0830- 1 week : 0.01920- 1 day : 0.0027300). However- for most purposes involving infants- the gestational age (measured in weeks) is preferred. The lower end of the range is not indicated; the upper end is- assuring that series of ranges do not overlap."`
	GestationalAgeRange *NR     `hl7:"4,len=33,display=This component specifies the gestational age range for which the reference range is valid. Gestational age is relevant only when the reference range is influenced by the stage of pregnancy. The gestational age is measured in weeks from conception. For example- |1&4| implies that the normals apply to gestational ages from 1 week to 4 weeks inclusive. The lower end of the range is not included; the upper end is- assuring that series of age ranges do not overlap."`
	Species             ST      `hl7:"5,len=20,display=This component specifies the species for which the reference range is valid. Species is assumed to be human unless otherwise stated. Example values are rabbit- mouse- and rat."`
	RaceSubspecies      ST      `hl7:"6,len=20,display=This component specifies the race or subspecies for which the reference range is valid. In the case of humans (the default species)- the race is specified when race influences the reference range. When normal ranges for animals are being described- this component can be used to describe subspecies or special breeds of animals."`
	Conditions          TX      `hl7:"7,len=199,display=This component specifies any arbitrary condition for which the reference range is valid. This may include such conditions as phase of menstrual cycle or dose of a particular drug. It is provided as a way to communicate the normal ranges for special conditions. It does not allow automatic checking of these text conditions."`
}

// Repeat Interval
//
// contains the interval between repeated services.
type RI struct {
	HL7                  HL7Name `hl7:",name=RI,len=206,type=d"`
	RepeatPattern        IS      `hl7:"1,len=6,table=0335,display=The repeating frequency with which the treatment is to be administered. It is similar to the frequency and SIG code tables used in order entry systems."`
	ExplicitTimeInterval ST      `hl7:"2,len=199,display=This component explicitly lists the actual times referenced by the code in the first component- in the following format: HHMM-HHMM-HHMM-. This second component will be used to clarify the first component in cases where the actual times vary within an institution. If the time of the order spans more than a single day- this new component is only practical if the same times of administration occur for each day of the order. If the actual start time of the order (as given by the fourth component of the quantity/timing field) is after the first explicit time- the first administration is taken to be the first explicit time after the start time. In the case where the patient moves to a location having a different set of explicit times- the existing order may be updated with a new quantity/timing field showing the changed explicit times."`
}

// Room Coverage
//
// This data type specifies insurance coverage detail for a room.
type RMC struct {
	HL7               HL7Name `hl7:",name=RMC,len=82,type=d"`
	RoomType          IS      `hl7:"1,required,len=20,table=0145,display=Specifies the room type."`
	AmountType        IS      `hl7:"2,len=20,table=0146,display=Specifies amount quantity type"`
	CoverageAmount    NM      `hl7:"3,len=16,display=Specifies amount covered by the insurance as a currency or percentage quantity.  Retained for backward compatibility only as of v 2.5. Refer to Money or Percentage. "`
	MoneyOrPercentage MOP     `hl7:"4,required,len=23,display=specifies an amount that may be either currency or a percentage."`
}

// Repeat Pattern
//
// The repeat pattern data type should be used where it is necessary to define the frequency at which an event is to take place.
// This data type provides a way to define repeat pattern codes "on the fly". The repeat pattern code is equivalent to the TQ
// data type, component 2, sub-component 1 (repeat pattern). The additional components define the meaning of the repeat
// pattern code. Components 2 - 10 are used to define relatively simple repeat patterns. Component 11 is provided to define
// complex repeat patterns. This data type forms a bridge between the 2.x Repeat Pattern concept from Quantity/Timing, and
// the Version 3.0 GTS General Timing Specification. Component 1 is the 2.x concept of repeat pattern. Components 2-7 are
// derived from the version 3.0 data type PIVL. Components 8-10 are derived from the version 3.0 EIVL data type. If a repeat
// pattern cannot be defined using components 2-10, then component 11, General Timing Specification is provided. This allows
// the full literal form of the version 3.0 GTS to be specified.
type RPT struct {
	HL7                        HL7Name `hl7:",name=RPT,len=984,type=d"`
	RepeatPatternCode          CWE     `hl7:"1,required,len=705,table=0335,display=A code representing the repeat pattern defined by the other components of this data type. Refer to User-defined Table 335 - Repeat Pattern for suggested values."`
	CalendarAlignment          ID      `hl7:"2,len=2,table=0527,display=Specifies an alignment of the repetition to a calendar (e.g.- to distinguish every 30 days from the 5th of every month). Refer to HL7 Table 0527 - Calendar Alignment for valid values."`
	PhaseRangeBeginValue       NM      `hl7:"3,len=10,display=Used for Calendar aligned repeat patterns to determine the amount of time from the beginning of particular RPT-2 (Calendar Alignment) to the beginning of the phase. If Calendar Alignment is DW (days of week)- then this would be the offset from the beginning of the week."`
	PhaseRangeEndValue         NM      `hl7:"4,len=10,display=Used for Calendar aligned repeat patterns to determine the amount of time from the beginning of particular RPT-2 (Calendar Alignment) to the end of the phase."`
	PeriodQuantity             NM      `hl7:"5,len=10,display=A time duration specifying the frequency at which the periodic interval repeats. RPT-6 (Period Units) defines the units of time for this component."`
	PeriodUnits                IS      `hl7:"6,conditional,len=10,display=Defines the units used for RPT-5 (Period Quantity). Constrained to units of time. The codes for unit of measure are specified in the Unified Code for Units of Measure (UCUM) [http://aurora.rg.iupui.edu/UCUM]."`
	InstitutionSpecifiedTime   ID      `hl7:"7,len=1,table=0136,display=A code that indicates whether the exact timing is up to the party executing the schedule (e.g.- to distinguish every 8 hours from 3 times a day.) Refer to HL7 Table 0136 - Yes/No Indicator for valid values."`
	Event                      ID      `hl7:"8,len=6,table=0528,display=A code for a common (periodical) activity of daily living. Refer to HL7 Table 0528- Event-Related Period for valid values."`
	EventOffsetQuantity        NM      `hl7:"9,len=10,display=An interval that marks the offsets for the beginning- width and end of the event-related periodic interval measured from the time each such event actually occurred. A positive numeric value indicates the amount of time after the event in RPT-8. A negative numeric value indicates the amount of time prior to the event in RPT-8. RPT-10 (Event Offset Units) defines the units of time for this component."`
	EventOffsetUnits           IS      `hl7:"10,conditional,len=10,display=Defines the units used for RPT-9 (Event Offset Quantity). Constrained to units of time. The codes for unit of measure are specified in the Unified Code for Units of Measure (UCUM) [http://aurora.rg.iupui.edu/UCUM]."`
	GeneralTimingSpecification GTS     `hl7:"11,len=200,display=The General Timing Specification as defined by the Version 3 Data Types document."`
}

// Street Address
//
// This data type specifies an entity's street address and associated detail.
type SAD struct {
	HL7                    HL7Name `hl7:",name=SAD,len=184,type=d"`
	StreetOrMailingAddress ST      `hl7:"1,len=120,display=This component specifies the street or mailing address of a person or institution. When referencing an institution- this first component is used to specify the institution name. When used in connection with a person- this component specifies the first line of the address."`
	StreetName             ST      `hl7:"2,len=50,display=Street Name"`
	DwellingNumber         ST      `hl7:"3,len=12,display=Dwelling Number"`
}

// Scheduling Class Value Pair
//
// This data type is used to communicate parameters and preferences to the filler application regarding the selection of
// an appropriate time slot, resource, location, or filler override criterion for an appointment.
type SCV struct {
	HL7            HL7Name `hl7:",name=SCV,len=41,type=d"`
	ParameterClass *CWE    `hl7:"1,len=20,display=The first component of this field is a code identifying the parameter or preference being passed to the filler application. Refer to User-defined Table 0294 - Time selection criteria parameter class codes - Time selection criteria parameter class codes for suggested values."`
	ParameterValue ST      `hl7:"2,len=20,display=The second component is the actual data value for that parameter."`
}

// Sequence ID
//
// A non-negative integer in the form of a NM field. The uses of this data type are defined in the chapters defining the segments
// and messages in which it appears.
type SI = string

// Structured Numeric
//
// The structured numeric data type is used to unambiguously express numeric clinical results along with qualifications.
// This enables receiving systems to store the components separately, and facilitates the use of numeric database queries.
// The corresponding sets of values indicated with the <comparator> and <separator/suffix> components are intended to
// be the authoritative and complete set of values. If additional values are needed for the <comparator> and <separator/suffix>
// components, they should be submitted to HL7 for inclusion in the Standard.
type SN struct {
	HL7             HL7Name `hl7:",name=SN,len=36,type=d"`
	Comparator      ST      `hl7:"1,len=2,display=Defined as greater than- less than- greater than or equal- less than or equal- equal- and not equal- respectively (: '>' or '<' or '>:' or '<:' or ':' or '<>'"`
	Num1            NM      `hl7:"2,len=15,display=A number."`
	SeparatorSuffix ST      `hl7:"3,len=1,display='-' or '+' or '/' or '.' or ':'"`
	Num2            NM      `hl7:"4,len=15,display=A number or null depending on the measurement."`
}

// Specialty Description
//
// This data type specifies the practitioners specialty and related information.
type SPD struct {
	HL7                 HL7Name `hl7:",name=SPD,len=112,type=d"`
	SpecialtyName       ST      `hl7:"1,required,len=50,display=Identifies the providers specialty."`
	GoverningBoard      ST      `hl7:"2,len=50,display=Identifies the governing body providing for the specialty."`
	EligibleOrCertified ID      `hl7:"3,len=1,table=0337,display=Specifies the certification status. Refer to HL7 Table 0337 - Certification status for valid values."`
	DateOfCertification DT      `hl7:"4,len=8,format=YMD,display=Specifies when certification occurred."`
}

// Specimen Source
//
// This data type identifies the site where the specimen should be obtained or where the service should be performed.
type SPS struct {
	HL7                          HL7Name `hl7:",name=SPS,len=4436,type=d"`
	SpecimenSourceNameOrCode     *CWE    `hl7:"1,len=705,display=contains the specimen source name or code (as a CWE data type component). (Even in the case of observations whose name implies the source- a source may be required- e.g.- blood culture-heart blood.)"`
	Additives                    *CWE    `hl7:"2,len=705,table=0371,display=identifies an additive introduced to the specimen before or at the time of collection. Refer to HL7 Table0371 - Additive in chapter 7 for valid values. The tables values are taken from NCCLS AUTO4. The value set can be extended with user specific values."`
	SpecimenCollectionMethod     TX      `hl7:"3,len=200,display=describes the method of collection when that information is a part of the order. When the method of collection is logically an observation result- it should be included as a result segment (i.e.- OBX segment)."`
	BodySite                     *CWE    `hl7:"4,len=705,table=0163,display=This component specifies the body site from which the specimen was obtained. A nationally recognized coding system is to be used for this field. Valid coding sources for this field include:"`
	SiteModifier                 *CWE    `hl7:"5,len=705,table=0495,display=modifies body site. For example- the site could be antecubital fossa- and the site modifier right. Refer to HL7 Table 0495 Body Site Modifier for allowed values."`
	CollectionMethodModifierCode *CWE    `hl7:"6,len=705,display=I ndicates whether the specimen is frozen as part of the collection method. Suggested values are F (Frozen); R (Refrigerated). If the component is blank- the specimen is assumed to be at room temperature."`
	SpecimenRole                 *CWE    `hl7:"7,len=705,table=0369,display=indicates the role of the sample. Refer to User-defined Table 0369 - Specimen role for suggested values. Each of these values is normally identifiable by the systems and its components and can influence processing and data management related to the specimen."`
}

// Sort Order
//
// Specifies those parameters by which the response will be sorted and by what method.
type SRT struct {
	HL7         HL7Name `hl7:",name=SRT,len=15,type=d"`
	SortByField ST      `hl7:"1,required,len=12,display=Identifies the field by which the response will be sorted. In a tabular response- this will be the column name to sort by. In the Segment Pattern and the Display Response- this will be the segment field name to sort by. See QIP in Section 2.A.59.1- 'Segment Field Name (ST)' for segment field name definition."`
	Sequencing  ID      `hl7:"2,len=2,table=0397,display=Identifies how the field or parameter will be sorted; and- if sorted- whether the sort will be case sensitive (the default) or not. Refer to HL7 Table 0397 - Sequencing for valid values"`
}

// String Data
//
// String data is left justified with trailing blanks optional. Any displayable (printable) ACSII characters (hexadecimal
// values between 20 and 7E, inclusive, or ASCII decimal values between 32 and 126), except the defined escape characters
// and defined delimiter characters.
type ST = string

// Time
//
// Specifies the hour of the day with optional minutes, seconds, fraction of second using a 24-hour clock notation and time
// zone.
type TM = time.Time

// Timing Quantity
//
// Describes when a service should be performed and how frequently.
//
// Note: The TQ data type is retained for backward compatibility only as of v 2.5. Refer to the TQ1 and TQ2 segments defined in
// chapter 4.
type TQ struct {
	HL7                HL7Name `hl7:",name=TQ,len=1545,type=d"`
	Quantity           *CQ     `hl7:"1,len=267,display=This component specifies the quantity of the service that should be provided at each service interval. For example- if two blood cultures are to be obtained every 4 hours- the quantity would be 2. If three units of blood are to be typed and cross-matched- the quantity would be 3. The default value is 1. When units are required- they can be added- specified by a subcomponent delimiter."`
	Interval           *RI     `hl7:"2,len=206,display=Determines the interval between repeated services."`
	Duration           ST      `hl7:"3,len=6,display=This component indicates how long the service should continue after it is started. The default is INDEF (do indefinitely). This component is coded as follows:"`
	StartDateTime      TS      `hl7:"4,len=26,format=YMDHMS,display=This component may be specified by the orderer- in which case it indicates the earliest date/time at which the services should be started. In many cases- however- the start date/time will be implied or will be defined by other fields in the order record (e.g.- urgency - STAT). In such a case- this field will be empty."`
	EndDateTime        TS      `hl7:"5,len=26,format=YMDHMS,display=When filled in by the requester of the service- this component should contain the latest date/time that the service should be performed. If it has not been performed by the specified time- it should not be performed at all. The requester may not always fill in this value- yet the filling service may fill it in on the basis of the instruction it receives and the actual start time."`
	Priority           ST      `hl7:"6,len=6,display=This component describes the urgency of the request. The following values are suggested (the default for Priority is R):"`
	Condition          ST      `hl7:"7,len=199,display=This is a free text component that describes the conditions under which the drug is to be given. For example- PRN pain - or to keep blood pressure below 110. The presence of text in this field should be taken to mean that human review is needed to determine the how and/or when this drug should be given."`
	Text               TX      `hl7:"8,len=200,display=This component is a full text version of the instruction (optional)."`
	Conjunction        ID      `hl7:"9,len=1,table=0472,display=This non-null component indicates that a second timing specification is to follow using the repeat delimiter. Refer to HL7 table 0472 - TQ Conjunction ID for valid values"`
	OrderSequencing    *OSD    `hl7:"10,len=110,display=Order Sequencing"`
	OccurrenceDuration *CE     `hl7:"11,len=483,display=This component contains the duration for a single performance of a service- e.g.- whirlpool twenty minutes three times per day for three days. It is optional within TQ and does not repeat."`
	TotalOccurrences   NM      `hl7:"12,len=4,display=This component contains the total number of occurrences of a service that should result from this order. It is optional within TQ and does not repeat. If both the end date/time and the total occurrences are valued and the occurrences would extend beyond the end date/time- then the end date/time takes precedence. Otherwise the number of occurrences takes precedence."`
}

// Time Stamp
//
// Specifies a point in time.
//
//
// Format: YYYY[MM[DD[HH[MM[SS[.S[S[S[S]]]]]]]]][+/-ZZZZ]^<degree of precision>
type TS = time.Time

// Text Data
//
// String data meant for user display (on a terminal or printer). Such data would not necessarily be left justified since leading
// spaces may contribute greatly to the clarity of the presentation to the user. Because this type of data is intended for display,
// it may contain certain escape character sequences designed to control the display. Escape sequence formatting is defined
// in Section 2.7 "Use of escape sequences in text fields ". Leading spaces should be included. Trailing spaces should be removed.
type TX = string

// UB Value Code and Amount
//
// A code structure to relate amounts or values to identified data elements necessary to process this claim as qualified by
// the payer organization.
type UVC struct {
	HL7         HL7Name `hl7:",name=UVC,len=41,type=d"`
	ValueCode   CNE     `hl7:"1,required,len=20,table=0153,display=Specifies the National Uniform Billing Committee (NUBC) code itself."`
	ValueAmount *MO     `hl7:"2,len=20,display=Specifies the numeric amount when needed to pair with the value."`
}

// Variable Datatype
type VARIES = CE

// Visiting Hours
//
// This data type contains the hours when a patient location is open for visiting. Refer to HL7 Table 0267 - Days of the week for
// valid values for the first two components.
type VH struct {
	HL7            HL7Name `hl7:",name=VH,len=41,type=d"`
	StartDayRange  ID      `hl7:"1,len=3,table=0267,display=Starting day of visiting hours range. See HL7 Table 0267 - Days of the week for valid values."`
	EndDayRange    ID      `hl7:"2,len=3,table=0267,display=Ending day of visiting hours range. Starting day of visiting hours range. See HL7 Table 0267 - Days of the week for valid values"`
	StartHourRange TM      `hl7:"3,len=16,format=HM,display=Starting hour on starting day of visiting hours range. See first component- 2.A.80.1- 'Start Day Range (ID)'."`
	EndHourRange   TM      `hl7:"4,len=16,format=HM,display=Ending hour on ending day of visiting hours range See second component- 2.A.80.2- 'End Day Range (ID)'."`
}

// Version Identifier
type VID struct {
	HL7                      HL7Name `hl7:",name=VID,len=973,type=d"`
	VersionID                ID      `hl7:"1,len=5,table=0104,display=Used to identify the HL7 version. Refer to HL7 Table 0104 - Version ID in section 2.15.9.12 for valid values."`
	InternationalizationCode *CE     `hl7:"2,len=483,table=0399,display=Used to identify the international affiliate country code. The values to be used are those of ISO 3166 -1:1977. The ISO 3166 table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code."`
	InternationalVersionID   *CE     `hl7:"3,len=483,display=This field component identifies international affiliates version; it is especially important when the international affiliate has more than a single local version associated with a single US version."`
}

// Value Range
//
// This data type contains the lower bound value and upper bound values that constitute a range. Either or both components
// may be populated.
type VR struct {
	HL7                HL7Name `hl7:",name=VR,len=0,type=d"`
	FirstDataCodeValue ST      `hl7:"1,len=6,display=Specifies the lower bound value."`
	LastDataCodeValue  ST      `hl7:"2,len=6,display=Specifies the upper bound value."`
}

// Extended Address
//
// This data type specifies the address of a person, place or organization plus associated information.
type XAD struct {
	HL7                        HL7Name `hl7:",name=XAD,len=631,type=d"`
	StreetAddress              *SAD    `hl7:"1,len=184,table=Street,display=Street Address"`
	OtherDesignation           ST      `hl7:"2,len=120,display=Second line of address. In US usage- it qualifies address. Examples: Suite 555 or Fourth Floor. When referencing an institution- this component specifies the street address."`
	City                       ST      `hl7:"3,len=50,table=City,display=This component specifies the city- or district or place where the addressee is located depending upon the national convention for formatting addresses for postal usage."`
	StateOrProvince            ST      `hl7:"4,len=50,table=State,display=This component specifies the state or province where the addressee is located. State or province should be represented by the official postal service codes for that country."`
	ZipOrPostalCode            ST      `hl7:"5,len=12,table=ZipCode,display=This component specifies the zip or postal code where the addressee is located. Zip or postal codes should be represented by the official codes for that country. In the US- the zip code takes the form 99999[-9999]- while the Canadian postal code takes the form A9A9A9- and the Australian Postcode takes the form 9999."`
	Country                    ID      `hl7:"6,len=3,table=0399,display=This component specifies the country where the addressee is locatedHL7 specifies that the 3-character (alphabetic) form of ISO 3166 be used for the country code. Refer to HL7 Table 0399 - Country code in section 2.15.9.17 for valid values."`
	AddressType                ID      `hl7:"7,len=3,table=0190,display=This component specifies the kind or type of address. Refer to HL7 Table 0190 - Address type for valid values."`
	OtherGeographicDesignation ST      `hl7:"8,len=50,display=This component specifies any other geographic designation. It includes county- bioregion- SMSA- etc."`
	CountyParishCode           IS      `hl7:"9,len=20,table=0289,display=A code that represents the county in which the specified address resides. User-defined Table 0289 - County/parish is used as the HL7 identifier for the user-defined table of values for this component. When this component is used to represent the county (or parish)- component 8 <other geographic designation> should not duplicate it (i.e.- the use of <other geographic designation> to represent the county is allowed only for the purpose of backward compatibility- and should be discouraged in this and future versions of HL7)."`
	CensusTract                IS      `hl7:"10,len=20,table=0288,display=A code that represents the census tract in which the specified address resides. User-defined Table 0288 - Census tract is used as the HL7 identifier for the user-defined table of values for this component."`
	AddressRepresentationCode  ID      `hl7:"11,len=1,table=0465,display=Different <name/address types> and representations of the same name/address should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
	AddressValidityRange       DR      `hl7:"12,len=53,display=This component cannot be fully expressed. Identified as v 2.4 erratum. Retained for backward compatibility only as of v 2.5. Refer to Effective Date and Expiration Date components."`
	EffectiveDate              TS      `hl7:"13,len=26,format=YMDHMS,display=The first date- if known- on which the address is valid and active."`
	ExpirationDate             TS      `hl7:"14,len=26,format=YMDHMS,display=The last date- if known- on which the address is valid and active."`
}

// Extended Composite ID Number and Name for Persons
type XCN struct {
	HL7                                         HL7Name `hl7:",name=XCN,len=3002,type=d"`
	IDNumber                                    ST      `hl7:"1,len=15,display=This string refers to the coded ID according to a user-defined table- defined by the 9th component. If the first component is present- either the source table or the assigning authority must be valued."`
	FamilyName                                  FN      `hl7:"2,len=194,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.A.30- ' FN - family name'."`
	GivenName                                   ST      `hl7:"3,len=30,table=FirstName,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,len=30,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"5,len=20,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,len=20,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"7,len=5,table=0360,display=Retained for backward compatibility only as of v 2.5. See Professional Suffix component."`
	SourceTable                                 IS      `hl7:"8,conditional,len=4,table=0297,display=CN ID source is used as the HL7 identifier for the user-defined table of values for this component. Used to delineate the first component."`
	AssigningAuthority                          *HD     `hl7:"9,len=227,table=0363,display=The assigning authority is a unique identifier of the system (or organization or agency of department) that creates the data. User-defined Table 0363 - Assigning authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component- <namespace ID>."`
	NameTypeCode                                ID      `hl7:"10,len=1,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name type for valid values. See Section 2.A.88.7- ' Name Type Code (ID) '."`
	IdentifierCheckDigit                        ST      `hl7:"11,len=1,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CheckDigitScheme                            ID      `hl7:"12,conditional,len=3,table=0061,display=Contains the code identifying the check digit scheme employed."`
	IdentifierTypeCode                          ID      `hl7:"13,len=5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the <assigning authority> component. Refer to HL7 Table 0203 - Identifier type for suggested values."`
	AssigningFacility                           *HD     `hl7:"14,len=227,display=The place or location identifier where the identifier was first assigned to the person. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	NameRepresentationCode                      ID      `hl7:"15,len=1,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
	NameContext                                 *CE     `hl7:"16,len=483,table=0448,display=This component is used to designate the context in which a name is used. The main use case is in Australian healthcare for indigenous patients who prefer to use different names when attending different healthcare institutions. Another use case occurs in the US where health practitioners can be licensed under slightly different names and the reporting of the correct name is vital for administrative purposes. Refer to User-defined Table 0448 - Name context for suggested values."`
	NameValidityRange                           DR      `hl7:"17,len=53,display=Retained for backward compatibility only as of v 2.5. Refer to XCN.19 Effective Date and XCN.20 Expiration Date instead. This component cannot be fully expressed and has been identified as v 2.4 erratum.  This component contains the start and end date/times that define the period during which this name was valid. See section 2.A.20- ' DR - date/time range ' for description of subcomponents."`
	NameAssemblyOrder                           ID      `hl7:"18,len=1,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 Table 0444 - Name Assembly Order for valid values."`
	EffectiveDate                               TS      `hl7:"19,len=26,format=YMDHMS,display=The first date- if known- on which the address is valid and active."`
	ExpirationDate                              TS      `hl7:"20,len=26,format=YMDHMS,display=The last date- if known- on which the address is valid and active."`
	ProfessionalSuffix                          ST      `hl7:"21,len=199,display=Used to specify an abbreviation- or a string of abbreviations denoting qualifications that support the persons profession- (e.g.- licenses- certificates- degrees- affiliations with professional societies- etc.). The Professional Suffix normally follows the Family Name when the Person Name is used for display purposes. Please note that this component is an unformatted string and is used for display purposes only. Detailed information regarding the contents of Professional Suffix is obtained using appropriate segments in Chapter 15- Personnel Management."`
	AssigningJurisdiction                       *CWE    `hl7:"22,len=705,display=The geo-political body that assigned the identifier in component 1."`
	AssigningAgencyOrDepartment                 *CWE    `hl7:"23,len=705,display=The agency or department that assigned the identifier in component 1."`
}

// Extended Composite Name and Identification Number for Organizations
//
// This data type is used in fields (e.g., PV2-23, NK1-13, PD1-3, OBR-44) to specify the name and ID number of an organization.
type XON struct {
	HL7                      HL7Name `hl7:",name=XON,len=567,type=d"`
	OrganizationName         ST      `hl7:"1,len=50,display=The name of the specified organization."`
	OrganizationNameTypeCode IS      `hl7:"2,len=20,table=0204,display=A code that represents the type of name i.e.- legal name- display name. Refer to User-defined Table 0204 - Organizational Name Type for suggested values."`
	IDNumber                 NM      `hl7:"3,len=4,display=This component has been retained for backward compatibility only as of v 2.5. It is recommended to use component 10 Organization identifier that accommodates alphanumeric identifiers."`
	CheckDigit               NM      `hl7:"4,len=1,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CheckDigitScheme         ID      `hl7:"5,len=3,table=0061,display=Contains the code identifying the check digit scheme employed."`
	AssigningAuthority       *HD     `hl7:"6,len=227,table=0363,display=The assigning authority is a unique identifier of the system (or organization or agency or department) that creates the data. Assigning authorities are unique across a given HL7 implementation. Refer to User-defined Table 0363 - Assigning Authority for suggested values."`
	IdentifierTypeCode       ID      `hl7:"7,len=5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the 'Assigning authority' component. Refer to HL7 Table 0203 - Identifier type for suggested values."`
	AssigningFacility        *HD     `hl7:"8,len=227,display=The place or location identifier where the identifier was first assigned to the person. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	NameRepresentationCode   ID      `hl7:"9,len=1,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
	OrganizationIdentifier   ST      `hl7:"10,len=20,display=This component contains the sequence of characters (the code) that uniquely identifies the item being referenced by XON.1 Organization Name. This component replaces XON.3 ID Number as of v 2.5."`
}

// Extended Person Name
type XPN struct {
	HL7                                         HL7Name `hl7:",name=XPN,len=1103,type=d"`
	FamilyName                                  FN      `hl7:"1,len=194,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.A.30- 'FN - family name'."`
	GivenName                                   ST      `hl7:"2,len=30,table=FirstName,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"3,len=30,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"4,len=20,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"5,len=20,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"6,len=6,table=0360,display=Retained for backward compatibility only as of v 2.5. See Professional Suffix component."`
	NameTypeCode                                ID      `hl7:"7,len=1,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name type for valid values."`
	NameRepresentationCode                      ID      `hl7:"8,len=1,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
	NameContext                                 *CE     `hl7:"9,len=483,table=0448,display=This component is used to designate the context in which a name is used. The main use case is in Australian healthcare for indigenous patients who prefer to use different names when attending different healthcare institutions. Another use case occurs in the US where health practitioners can be licensed under slightly different names and the reporting of the correct name is vital for administrative purposes. Refer to User-defined Table 0448 - Name context for suggested values."`
	NameValidityRange                           DR      `hl7:"10,len=53,display=This component cannot be fully expressed. Identified as v 2.4 erratum. Retained for backward compatibility only as of v 2.5. Refer to Effective Date and Expiration Date components."`
	NameAssemblyOrder                           ID      `hl7:"11,len=1,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 0444 - Name assembly order for valid values."`
	EffectiveDate                               TS      `hl7:"12,len=26,format=YMDHMS,display=The first date- if known- on which the person name is valid and active."`
	ExpirationDate                              TS      `hl7:"13,len=26,format=YMDHMS,display=The last date- if known- on which the person name is valid and active."`
	ProfessionalSuffix                          ST      `hl7:"14,len=199,display=Used to specify an abbreviation- or a string of abbreviations denoting qualifications that support the persons profession- (e.g.- licenses- certificates- degrees- affiliations with professional societies- etc.). The Professional Suffix normally follows the Family Name when the Person Name is used for display purposes. Please note that this component is an unformatted string and is used for display purposes only. Detailed information regarding the contents of Professional Suffix is obtained using appropriate segments in Chapter 15- Personnel Management."`
}

// Extended Telecommunication Number
type XTN struct {
	HL7                            HL7Name `hl7:",name=XTN,len=850,type=d"`
	TelephoneNumber                ST      `hl7:"1,len=199,table=PhoneNumber,display=This component has been retained for backward compatibility only as of version 2.3.   Specifies the telephone number in a predetermined format that includes an optional extension- beeper number and comment."`
	TelecommunicationUseCode       ID      `hl7:"2,len=3,table=0201,display=A code that represents a specific use of a telecommunicationnumber. Refer to HL7 Table 0201 - Telecommunication use code for valid values."`
	TelecommunicationEquipmentType ID      `hl7:"3,len=8,table=0202,display=A code that represents the type of telecommunicationequipment. Refer to HL7 Table 0202 - Telecommunication equipment type for valid values."`
	EmailAddress                   ST      `hl7:"4,len=199,display=Email Address"`
	CountryCode                    NM      `hl7:"5,len=3,display=Country Code"`
	AreaCityCode                   NM      `hl7:"6,len=5,display=Area/City Code"`
	LocalNumber                    NM      `hl7:"7,len=9,display=Local Number"`
	Extension                      NM      `hl7:"8,len=5,display=Contains comments with respect to the telephone number."`
	AnyText                        ST      `hl7:"9,len=199,display=The characters established within a companys internal telephone system network used as a prefix to the Extension component for internal dialing. Note that the use of Extension Prefix requires that the Extension component be valued and that digits- as well as special characters (e.g.- *- #) may be used."`
	ExtensionPrefix                ST      `hl7:"10,len=4,display=The characters established within a companys internal telephone system used in place of the (external) telephone number to facilitate calling because its length is shorter than that of the telephone number. Note that digits- as well as special characters (e.g.- *- #) may be used."`
	SpeedDialCode                  ST      `hl7:"11,len=6,display=An expression of the telephone number as an unparsible string."`
	UnformattedTelephoneNumber     ST      `hl7:"12,conditional,len=199,display= An expression of the telephone number as an unparsible string  Example: |^^^^^^^^^^^1-800-Dentist| "`
}
