// Code generated by "hl7fetch -pkgdir h260 -root ./genjson -version 2.6 -network"; DO NOT EDIT.

package h260

// General Acknowledgment Message
//
// The simple general acknowledgment (ACK) can be used where the application does not define a special application level
// acknowledgment message or where there has been an error that precludes application processing. It is also used for accept
// level acknowledgments.
type ACK struct {
	HL7 HL7Name `hl7:",name=ACK,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
}

// QueryResponse
type ADR_A19_QueryResponse struct {
	HL7       HL7Name             `hl7:",name=ADR_A19_QueryResponse,type=tg"`
	EVN       *EVN                `hl7:"9,display=Event Type"`
	PID       *PID                `hl7:"10,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"11,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"12,display=Access Restrictions"`
	ROL       []ROL               `hl7:"13,display=Role"`
	NK1       []NK1               `hl7:"14,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"15,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"16,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"17,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"18,display=Role"`
	DB1       []DB1               `hl7:"19,display=Disability"`
	OBX       []OBX               `hl7:"20,display=Observation/Result"`
	AL1       []AL1               `hl7:"21,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"22,display=Diagnosis"`
	DRG       *DRG                `hl7:"23,display=Diagnosis Related Group"`
	Procedure []ADR_A19_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"26,display=Guarantor"`
	Insurance []ADR_A19_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"31,display=Accident"`
	UB1       *UB1                `hl7:"32,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"33,display=UB92 Data"`
}

// Procedure
type ADR_A19_Procedure struct {
	HL7 HL7Name `hl7:",name=ADR_A19_Procedure,type=tg"`
	PR1 *PR1    `hl7:"24,required,display=Procedures"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Insurance
type ADR_A19_Insurance struct {
	HL7 HL7Name `hl7:",name=ADR_A19_Insurance,type=tg"`
	IN1 *IN1    `hl7:"27,required,display=Insurance"`
	IN2 *IN2    `hl7:"28,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"29,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"30,display=Role"`
}

// Patient Response
//
// The Original Mode Query was retained for backward compatibility only as of version 2.4.
//
// Another application determines a need for Patient Administration data about a patient and sends a query to the Patient
// Administration system.  The Who Filter in the QRD can identify the patient or account number upon which the query is defined
// and can contain a format code of "R" (record-oriented).  If the query is based on the Patient ID and there are data associated
// with multiple accounts, the problem of which account data should be returned becomes an implementation issue.  The ADT
// event-type segment, if included in the response, describes the last event for which the Patient Administration system
// initiated an unsolicited update.
type ADR_A19 struct {
	HL7           HL7Name                 `hl7:",name=ADR_A19,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,display=Query Acknowledgment"`
	QRD           *QRD                    `hl7:"7,required,display=Original-Style Query Definition"`
	QRF           *QRF                    `hl7:"8,display=Original style query filter"`
	QueryResponse []ADR_A19_QueryResponse `hl7:",required,display=Query Response"`
	DSC           *DSC                    `hl7:"34,display=Continuation Pointer"`
}

// Procedure
type ADT_A01_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A01_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Admit/Visit Notification
//
// An A01 event is intended to be used for "Admitted" patients only.  An A01 event is sent as a result of a patient undergoing the
// admission process which assigns the patient to a bed.  It signals the beginning of a patient's stay in a healthcare facility.
// Normally, this information is entered in the primary Patient Administration system and broadcast to the nursing units
// and ancillary systems.  It includes short stay and "Adam Everyman" (e.g., patient name is unknown) admissions.  For example,
// an A01 event can be used to notify: the pharmacy system that a patient has been admitted and may be legitimately prescribed
// drugs; the nursing system that the patient has been admitted and needs a care plan prepared; the finance system of the start
// of the billing period; the dietary system that a new patient has been installed and requires dietary services; the laboratory,
// pathology, and radiology systems that a patient has been admitted and is entitled to receive services; the clinical repository
// that an admission has taken place for the EMR (electronic medical record).
type ADT_A01 struct {
	HL7       HL7Name             `hl7:",name=ADT_A01,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A01_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death and Autopsy"`
}

// Transfer a Patient
//
// An A02 event is issued as a result of the patient changing his or her assigned physical location.
type ADT_A02 struct {
	HL7  HL7Name `hl7:",name=ADT_A02,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV  []ARV   `hl7:"7,display=Access Restrictions"`
	ROL  []ROL   `hl7:"8,display=Role"`
	PV1  *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	ARV2 []ARV   `hl7:"11,display=Access Restrictions"`
	ROL2 []ROL   `hl7:"12,display=Role"`
	DB1  []DB1   `hl7:"13,display=Disability"`
	OBX  []OBX   `hl7:"14,display=Observation/Result"`
	PDA  *PDA    `hl7:"15,display=Patient Death and Autopsy"`
}

// Procedure
type ADT_A03_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A03_Procedure,type=tg"`
	PR1 *PR1    `hl7:"18,required,display=Procedures"`
	ROL []ROL   `hl7:"19,display=Role"`
}

// Insurance
type ADT_A03_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Discharge/End Visit
//
// An A03 event signals the end of a patient's stay in a healthcare facility.  It signals that the patient's status has changed
// to "discharged" and that a discharge date has been recorded.  The patient is no longer in the facility.  The patient's location
// prior to discharge should be entered in PV1-3 - Assigned Patient Location.
type ADT_A03 struct {
	HL7       HL7Name             `hl7:",name=ADT_A03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	AL1       []AL1               `hl7:"15,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"16,display=Diagnosis"`
	DRG       *DRG                `hl7:"17,display=Diagnosis Related Group"`
	Procedure []ADT_A03_Procedure `hl7:",display=Procedure"`
	OBX       []OBX               `hl7:"20,display=Observation/Result"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A03_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	PDA       *PDA                `hl7:"27,display=Patient Death and Autopsy"`
}

// Procedure
type ADT_A04_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A04_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A04_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Register a Patient
//
// An A04 event signals that the patient has arrived or checked in as a one-time, or recurring outpatient, and is not assigned
// to a bed.  One example might be its use to signal the beginning of a visit to the Emergency Room (= Casualty, etc.).  Note that
// some systems refer to these events as outpatient registrations or emergency admissions.  PV1-44 - Admit Date/Time is used
// for the visit start date/time.
type ADT_A04 struct {
	HL7       HL7Name             `hl7:",name=ADT_A04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A04_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A04_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death and Autopsy"`
}

// Procedure
type ADT_A05_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A05_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A05_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Pre-Admit a Patient
//
// An A05 event is sent when a patient undergoes the pre-admission process.  During this process, episode-related data is
// collected in preparation for a patient's visit or stay in a healthcare facility.  For example, a pre-admit may be performed
// prior to inpatient or outpatient surgery so that lab tests can be performed prior to the surgery.  This event can also be used
// to pre-register a non-admitted patient.
type ADT_A05 struct {
	HL7       HL7Name             `hl7:",name=ADT_A05,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A05_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A05_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
}

// Procedure
type ADT_A06_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A06_Procedure,type=tg"`
	PR1 *PR1    `hl7:"20,required,display=Procedures"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Insurance
type ADT_A06_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A06_Insurance,type=tg"`
	IN1 *IN1    `hl7:"23,required,display=Insurance"`
	IN2 *IN2    `hl7:"24,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"25,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"26,display=Role"`
}

// Change an Outpatient to an Inpatient
//
// An A06 event is sent when a patient who was present for a non-admitted visit is being admitted after an evaluation of the seriousness
// of the patient's condition.  This event changes a patient's status from non-admitted to admitted.  The new patient location
// should appear in PV1-3 - Assigned Patient Location, while the old patient location (if different) should appear in PV1-6
// - Prior Patient Location.  The new patient class should appear in PV1-2 - Patient Class.
type ADT_A06 struct {
	HL7       HL7Name             `hl7:",name=ADT_A06,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	MRG       *MRG                `hl7:"9,display=Merge Patient Information"`
	NK1       []NK1               `hl7:"10,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"11,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"12,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"13,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"14,display=Role"`
	DB1       []DB1               `hl7:"15,display=Disability"`
	OBX       []OBX               `hl7:"16,display=Observation/Result"`
	AL1       []AL1               `hl7:"17,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"18,display=Diagnosis"`
	DRG       *DRG                `hl7:"19,display=Diagnosis Related Group"`
	Procedure []ADT_A06_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"22,display=Guarantor"`
	Insurance []ADT_A06_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"27,display=Accident"`
	UB1       *UB1                `hl7:"28,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"29,display=UB92 Data"`
}

// Procedure
type ADT_A07_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A07_Procedure,type=tg"`
	PR1 *PR1    `hl7:"20,required,display=Procedures"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Insurance
type ADT_A07_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"23,required,display=Insurance"`
	IN2 *IN2    `hl7:"24,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"25,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"26,display=Role"`
}

// Change an Inpatient to an Outpatient
//
// An A07 event is sent when a patient who was admitted changes his/her status to "no longer admitted" but is still being seen
// for this episode of care.  This event changes a patient from an "admitted" to a "non-admitted" status.  The new patient location
// should appear in PV1-3 - Assigned Patient Location, while the old patient location (if different) should appear in PV1-6
// - Prior Patient Location.
type ADT_A07 struct {
	HL7       HL7Name             `hl7:",name=ADT_A07,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	MRG       *MRG                `hl7:"9,display=Merge Patient Information"`
	NK1       []NK1               `hl7:"10,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"11,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"12,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"13,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"14,display=Role"`
	DB1       []DB1               `hl7:"15,display=Disability"`
	OBX       []OBX               `hl7:"16,display=Observation/Result"`
	AL1       []AL1               `hl7:"17,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"18,display=Diagnosis"`
	DRG       *DRG                `hl7:"19,display=Diagnosis Related Group"`
	Procedure []ADT_A07_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"22,display=Guarantor"`
	Insurance []ADT_A07_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"27,display=Accident"`
	UB1       *UB1                `hl7:"28,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"29,display=UB92 Data"`
}

// Procedure
type ADT_A08_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A08_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A08_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Update Patient Information
//
// This trigger event is used when any patient information has changed but when no other trigger event has occurred.  For example,
// an A08 event can be used to notify the receiving systems of a change of address or a name change.  We strongly recommend that
// the A08 transaction be used to update fields that are not updated by any of the other trigger events.  If there are specific
// trigger events for this update, these trigger events should be used. For example, if a patient's address and location are
// to be changed, then an A08 is used to change the patient address and the appropriate patient location trigger event is used
// to change the patient location. The A08 event can include information specific to an episode of care, but it can also be used
// for demographic information only.
type ADT_A08 struct {
	HL7       HL7Name             `hl7:",name=ADT_A08,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A08_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A08_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death and Autopsy"`
}

// Patient Departing - Tracking
//
// The A09 and A10 - patient arriving-tracking events are used when there is a change in a patient's physical location (inpatient
// or outpatient) and when this is NOT a change in the official census bed location, as in the case of an outpatient setting.
// There are three situations that qualify as non-census location changes:  (a) patient tracking, (b) the patient is in transit
// between locations for some time, (c) a notification of temporary location change.
type ADT_A09 struct {
	HL7 HL7Name `hl7:",name=ADT_A09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
	DG1 []DG1   `hl7:"11,display=Diagnosis"`
}

// Patient Arriving - Tracking
//
// The A10 event is sent when a patient arrives at a new location in the healthcare facility (inpatient or outpatient).  The
// A09 - patient departing-tracking and A10 events are used when there is a change in a patient's physical location and when
// this is NOT a change in the official census bed location, as in the case of an outpatient setting.  There are three varieties
// of these non-census location changes involving three different kinds of notification:  (a) an unofficial notification
// of location change prior to the official notification of patient tracking, (b) the patient is in transit between locations
// for some time, (c) a notification of a temporary location change.
type ADT_A10 struct {
	HL7 HL7Name `hl7:",name=ADT_A10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
	DG1 []DG1   `hl7:"11,display=Diagnosis"`
}

// Cancel Admit/Visit Notification
//
// For "admitted" patients, the A11 event is sent when an A01 (admit/visit notification) event is cancelled, either because
// of an erroneous entry of the A01 event, or because of a decision not to admit the patient after all.
//
// For "non-admitted" patients, the A11 event is sent when an A04 (register a patient) event is cancelled, either because
// of an erroneous entry of the A04 event, or because of a decision not to check the patient in for the visit after all.  To cancel
// an A05 (pre-admit a patient) event, use the A38 (cancel pre-admit), which was new for Version 2.3 of this Standard.
type ADT_A11 struct {
	HL7 HL7Name `hl7:",name=ADT_A11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
	DG1 []DG1   `hl7:"11,display=Diagnosis"`
}

// Cancel Transfer
//
// The A12 event is sent when an A02 (transfer a patient) event is cancelled, either because of erroneous entry of the A02 event
// or because of a decision not to transfer the patient after all.  PV1-3 - Assigned Patient Location must show the location
// of the patient prior to the original transfer.
//
// The DG1 segment remains in this message for backward compatibility only.
type ADT_A12 struct {
	HL7 HL7Name `hl7:",name=ADT_A12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
	DG1 *DG1    `hl7:"11,display=Diagnosis"`
}

// Procedure
type ADT_A13_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A13_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A13_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A13_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Cancel Discharge/End Visit
//
// The A13 event is sent when an A03 (discharge/end visit) event is cancelled, either because of erroneous entry of the A03
// event or because of a decision not to discharge or end the visit of the patient after all.  PV1-3 - Assigned Patient Location
// should reflect the location of the patient after the cancellation has been processed.  Note that this location may be different
// from the patient's location prior to the erroneous discharge.  Prior Location could be used to show the location of the patient
// prior to the erroneous discharge.
//
// Note from the Caristix team: ADT_A13.7 (ARV) does not exist in the documentation for HL7 v2.6, but it should exist given
// the structure of ADT_A01.
type ADT_A13 struct {
	HL7       HL7Name             `hl7:",name=ADT_A13,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A13_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A13_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
	PDA       *PDA                `hl7:"29,display=Patient Death and Autopsy"`
}

// Procedure
type ADT_A14_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A14_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A14_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A14_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Pending Admit
//
// An A14 event notifies other systems of a planned admission, when there is a reservation or when patient admission is to occur
// imminently.  The A14 event is similar to a pre-admit, but without the implication that an account should be opened for the
// purposes of tests prior to admission.  It is used when advanced notification of an admit is required in order to prepare for
// the patient's arrival.
type ADT_A14 struct {
	HL7       HL7Name             `hl7:",name=ADT_A14,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A14_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A14_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
}

// Pending Transfer
//
// An A15 event notifies other systems of a plan to transfer a patient to a new location when the patient has not yet left the old
// location.  It is used when advanced notification of a transfer is required in order to prepare for the patient's location
// change.  For example, this transaction could be sent so that staff will be on hand to move the patient or so that dietary services
// can route the next meal to the new location.
//
// The DG1 segment remains in this message for backward compatibility only
type ADT_A15 struct {
	HL7  HL7Name `hl7:",name=ADT_A15,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV  []ARV   `hl7:"7,display=Access Restrictions"`
	ROL  []ROL   `hl7:"8,display=Role"`
	PV1  *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	ARV2 []ARV   `hl7:"11,display=Access Restrictions"`
	ROL2 []ROL   `hl7:"12,display=Role"`
	DB1  []DB1   `hl7:"13,display=Disability"`
	OBX  []OBX   `hl7:"14,display=Observation/Result"`
	DG1  []DG1   `hl7:"15,display=Diagnosis"`
}

// Procedure
type ADT_A16_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A16_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A16_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A16_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Pending Discharge
//
// An A16 event notifies other systems of a plan to discharge a patient when the patient has not yet left the healthcare facility.
// It is used when advanced notification of a discharge is required in order to prepare for the patient's change in location.
// For example, it is used to notify the pharmacy of the possible need for discharge drugs or to notify psychotherapy of the
// possible need for post-discharge appointments or to notify the extended care or home health system that the patient will
// be discharged and that the new extended care and home health admission assessment can be scheduled.
type ADT_A16 struct {
	HL7       HL7Name             `hl7:",name=ADT_A16,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A16_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A16_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
}

// Swap Patients
//
// The A17 is used when it is decided that two patients will exchange beds.  The patient ID and visit data are repeated for the
// two patients changing places.  See section 3.6.1, "Swapping a patient," for a discussion of issues related to implementing
// this trigger event. When other important fields change, it is recommended that the A08 (update patient information) event
// be used in addition.
type ADT_A17 struct {
	HL7  HL7Name `hl7:",name=ADT_A17,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1  []DB1   `hl7:"9,display=Disability"`
	OBX  []OBX   `hl7:"10,display=Observation/Result"`
	PID2 *PID    `hl7:"11,required,display=Patient Identification"`
	PD12 *PD1    `hl7:"12,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV22 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
	DB12 []DB1   `hl7:"15,display=Disability"`
	OBX2 []OBX   `hl7:"16,display=Observation/Result"`
}

// Merge Patient Information
//
// Event A18 has been retained for backward compatibility only in version 2.3.1.  The A18 event was used to merge current and
// previous patient identification numbers: PID-3 - Patient Identifier List, PID-2 - Patient ID, PID-4 - Alternate Patient
// ID-PID, and PID-18 - Patient Account Number.  This procedure is required, for example, when a previous patient is registered
// under a new patient identification number because of an error, or because there was insufficient time to determine the
// actual patient identification number.  The merge event occurs when a decision is made to combine the information under
// either the new or the old identifier(s).  The PID segment contains the surviving patient ID information.  The MRG segment
// contains the non-surviving information.
//
// From V2.3.1 onwards events A40 (merge patient-patient identifier list), A41 (merge account-patient account number),
// and A42 (merge visit-visit number) should be utilized in place of the A18 event.
type ADT_A18 struct {
	HL7 HL7Name `hl7:",name=ADT_A18,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	EVN *EVN    `hl7:"3,required,display=Event Type"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"6,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
}

// Bed Status Update
//
// Certain nursing/census applications need to be able to update the Patient Administration system's bed status.
type ADT_A20 struct {
	HL7 HL7Name `hl7:",name=ADT_A20,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	NPU *NPU    `hl7:"5,required,display=Bed Status Update"`
}

// Patient Goes on a Leave of Absence
//
// An A21 event is sent to notify systems that an admitted patient has left the healthcare institution temporarily.  It is used
// for systems in which a bed is still assigned to the patient, and it puts the current admitted patient activities on hold.
// For example, it is used to notify dietary services and laboratory systems when the patient goes home for the weekend.
type ADT_A21 struct {
	HL7 HL7Name `hl7:",name=ADT_A21,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Patient Returns From a Leave of Absence
//
// An A22 event is sent to notify systems that an admitted patient has returned to the healthcare institution after a temporary
// "leave of absence."  It is used for systems in which a bed is still assigned to the patient, and it takes their current admitted
// patient activities off of "hold" status.  For example, it is used to notify dietary services and laboratory systems when
// the patient returns from a weekend trip to his/her home.
type ADT_A22 struct {
	HL7 HL7Name `hl7:",name=ADT_A22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Delete a Patient Record
//
// The A23 event is used to delete visit or episode-specific information from the patient record.  For example, it is used to
// remove old data from a database that cannot hold all historical patient visit data.  When an event was entered erroneously,
// use one of the cancel transactions.  This event can be used to purge account-level data while retaining the person in the
// database.
type ADT_A23 struct {
	HL7 HL7Name `hl7:",name=ADT_A23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Link Patient Information
//
// The A24 event is used when the first PID segment needs to be linked to the second PID segment and when both patient identifiers
// identify the same patient.  Linking two or more patients does not require the actual merging of patient information; following
// a link event, the affected patient data records should remain distinct.  For example, this event could be used in a hospital
// network environment in which there are multiple campuses and in which records need to be linked.  For example, hospital
// A, hospital B, and hospital C would each keep their own records on a patient, but an A24 link event would be sent to a corporate-wide
// MPI to enable the coupling of ID information with the corporate ID number.  It is used for corporate data repositories, etc.
// This event is not meant to link mothers and babies since a field exists (PID-21 - Mother's Identifier) for that purpose.
// See section 3.6.3, "Patient record links," for a discussion of issues related to implementing patient link messages and
// MPI issues.
type ADT_A24 struct {
	HL7  HL7Name `hl7:",name=ADT_A24,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"7,display=Patient Visit"`
	DB1  []DB1   `hl7:"8,display=Disability"`
	PID2 *PID    `hl7:"9,required,display=Patient Identification"`
	PD12 *PD1    `hl7:"10,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"11,display=Patient Visit"`
	DB12 []DB1   `hl7:"12,display=Disability"`
}

// Cancel Pending Discharge
//
// The A25 event is sent when an A16 (pending discharge) event is cancelled, either because of erroneous entry of the A16 event
// or because of a decision not to discharge the patient after all.
type ADT_A25 struct {
	HL7 HL7Name `hl7:",name=ADT_A25,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Cancel Pending Transfer
//
// The A26 event is sent when an A15 (pending transfer) event is cancelled, either because of erroneous entry of the A15 event
// or because of a decision not to transfer the patient after all.
type ADT_A26 struct {
	HL7 HL7Name `hl7:",name=ADT_A26,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Cancel Pending Admit
//
// The A27 event is sent when an A14 (pending admit) event is cancelled, either because of erroneous entry of the A14 event or
// because of a decision not to admit the patient after all.
type ADT_A27 struct {
	HL7 HL7Name `hl7:",name=ADT_A27,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Procedure
type ADT_A28_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A28_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A28_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A28_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Add Person Information
//
// The purpose of this and the three following messages was to allow sites with multiple systems and respective master patient
// databases to communicate activity related to a person regardless of whether that person is currently a patient on each
// system.  Each system has an interest in the database activity of the others in order to maintain data integrity across an
// institution.  Though they are defined within the ADT message set, these messages differ in that they are not patient-specific.
// To a certain registry, the person may be a person of interest, a potential future patient, or a potential guarantor.  For
// example, these events can be used to maintain an MPI (master patient index), a cancer registry, members of a managed care
// plan, an HIV database, etc.
type ADT_A28 struct {
	HL7       HL7Name             `hl7:",name=ADT_A28,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A28_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A28_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
}

// Delete Person Information
//
// An A29 event can be used to delete all demographic information related to a given person.  This event "undoes" an A28 (add
// person information) event.  The information from the A28 event is deleted.  This event is used, for example, when adding
// the information was performed in error, or when another record already exists for the person, or when one wants to purge
// the person from the database.  When this event occurs, all visit and account level data for this person is also purged.
//
// To maintain backward compatibility with previous releases, the PV1 segment is required.  However, a "pseudo-optional"
// PV1 can be achieved by valuing PV1-2 - Patient Class to N - not applicable.
type ADT_A29 struct {
	HL7 HL7Name `hl7:",name=ADT_A29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Merge Person Information
//
// Event A30 has been retained for backward compatibility only.  An A30 event was used to merge person information on an MPI.
// From V 2.3.1 onwards, the A40 (merge patient-patient identifier list) events should be used to merge patient information
// for a current episode.  The "incorrect MRN" identified on the MRG segment (MRG-1 - Prior Patient Identifier List) is to be
// merged with the "correct MRN" identified on the PID segment (PID-3 - Patient Identifier List).  The "incorrect MRN" then
// no longer exists.  All PID data associated with the "correct MRN" are treated as updated information.
type ADT_A30 struct {
	HL7 HL7Name `hl7:",name=ADT_A30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
}

// Procedure
type ADT_A31_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A31_Procedure,type=tg"`
	PR1 *PR1    `hl7:"19,required,display=Procedures"`
	ROL []ROL   `hl7:"20,display=Role"`
}

// Insurance
type ADT_A31_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A31_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Update Person Information
//
// An A31 event can be used to update person information on an MPI.  It is similar to an A08 (update patient information) event,
// but an A08 (update patient information) event should be used to update patient information for a current episode.  An A28
// (add person information) or A31 can also be used for backloading MPI information for the person, or for backloading person
// and historical information.
type ADT_A31 struct {
	HL7       HL7Name             `hl7:",name=ADT_A31,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	ARV       []ARV               `hl7:"7,display=Access Restrictions"`
	ROL       []ROL               `hl7:"8,display=Role"`
	NK1       []NK1               `hl7:"9,display=Next of Kin / Associated Parties"`
	PV1       *PV1                `hl7:"10,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"11,display=Patient Visit - Additional Information"`
	ARV2      []ARV               `hl7:"12,display=Access Restrictions"`
	ROL2      []ROL               `hl7:"13,display=Role"`
	DB1       []DB1               `hl7:"14,display=Disability"`
	OBX       []OBX               `hl7:"15,display=Observation/Result"`
	AL1       []AL1               `hl7:"16,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"17,display=Diagnosis"`
	DRG       *DRG                `hl7:"18,display=Diagnosis Related Group"`
	Procedure []ADT_A31_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"21,display=Guarantor"`
	Insurance []ADT_A31_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"26,display=Accident"`
	UB1       *UB1                `hl7:"27,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"28,display=UB92 Data"`
}

// Cancel Patient Arriving - Tracking
//
// The A32 event is sent when an A10 (patient arriving-tracking) event is cancelled, either because of erroneous entry of
// the A10 event or because of a decision not to receive the patient after all.
//
// If the patient was in a non-temporary location, then the PV1-3 - Assigned Patient Location may contain (if known) the original
// patient location prior to the erroneous A10 (patient arriving-tracking) event.  If the patient was in a temporary location,
// then PV1-11 - Temporary Location may contain (if known) the original patient location prior to the erroneous A10 (patient
// arriving-tracking) event.
type ADT_A32 struct {
	HL7 HL7Name `hl7:",name=ADT_A32,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Cancel Patient Departing - Tracking
//
// The A33 event is sent when an A09 (patient departing-tracking) event is cancelled, either because of erroneous entry of
// the A09 event or because of a decision not to send the patient after all.
//
// If the patient was in a non-temporary location, then PV1-3 - Assigned Patient location must contain the original patient
// location prior to the erroneous A09 (patient departing-tracking) event.  If the patient was in a temporary location, then
// PV1-11 - Temporary Location must contain the original patient location prior to the erroneous A09 (patient departing-tracking)
// event.
type ADT_A33 struct {
	HL7 HL7Name `hl7:",name=ADT_A33,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Merge Patient Information - Patient ID Only
//
// From V2.3.1, event A34 has been retained for backward compatibility only; event A40 (Merge patient - patient identifier
// list) should be used instead. Only the patient identifier list has changed as a result of the merge.
//
// An A34 (merge patient information-patient ID only) event was intended for merging or changing patient identifiers.  It
// was used to change patient identifiers on all of this patient's existing accounts.
type ADT_A34 struct {
	HL7 HL7Name `hl7:",name=ADT_A34,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"7,display=Access Restrictions"`
	MRG *MRG    `hl7:"8,required,display=Merge Patient Information"`
}

// Merge Patient Information - Account Number Only
//
// From V2.3.1, event A35 has been retained for backward compatibility only; event A41 (Merge patient - patient account number)
// should be used instead. Only the patient account number has changed as a result of the merge.
//
// An A35 (merge patient information-account number only) event was intended for merging or changing an account number only.
type ADT_A35 struct {
	HL7 HL7Name `hl7:",name=ADT_A35,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
}

// Merge Patient Information - Patient ID & Account Number
//
// From V2.3.1, event A36 has been retained for backward compatibility only; events A40 (merge patient - patient identifier
// list) and A41 (merge patient - patient account number) should be used instead. Both patient identifier list and the patient
// account number have changed as a result of the merge.
type ADT_A36 struct {
	HL7 HL7Name `hl7:",name=ADT_A36,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"7,display=Access Restrictions"`
	MRG *MRG    `hl7:"8,required,display=Merge Patient Information"`
}

// Unlink Patient Information
//
// The A37 event unlinks two patient identifiers.
type ADT_A37 struct {
	HL7  HL7Name `hl7:",name=ADT_A37,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"7,display=Patient Visit"`
	DB1  []DB1   `hl7:"8,display=Disability"`
	PID2 *PID    `hl7:"9,required,display=Patient Identification"`
	PD12 *PD1    `hl7:"10,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"11,display=Patient Visit"`
	DB12 []DB1   `hl7:"12,display=Disability"`
}

// Cancel Pre-Admit
//
// The A38 event is sent when an A05 (pre-admit a patient) event is cancelled, either because of erroneous entry of the A05 event
// or because of a decision not to pre-admit the patient after all.
type ADT_A38 struct {
	HL7 HL7Name `hl7:",name=ADT_A38,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	DB1 []DB1   `hl7:"9,display=Disability"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
	DG1 []DG1   `hl7:"11,display=Diagnosis"`
	DRG *DRG    `hl7:"12,display=Diagnosis Related Group"`
}

// Patient
type ADT_A39_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A39_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
}

// Merge Person - Patient Id
//
// From V2.3.1, Event A39 has been retained for backward compatibility only; event A40 (merge patient - patient identifier
// list) should be used instead. A merge has been done at the patient identifier level.  That is, two PID-2 - Patient ID identifiers
// have been merged into one.
//
// An A39 event is used to signal a merge of records for a person that was incorrectly filed under two different PID-2 - Patient
// IDs.  The "incorrect source patient ID" identified in the MRG segment (MRG-4 - Prior Patient ID) is to be merged with the required
// "correct target patient ID" identified in the PID segment (PID-2 - Patient ID).  The "incorrect source patient ID" would
// then logically never be referenced in future transactions.  It is noted that some systems may still physically keep this
// "incorrect identifier" for audit trail purposes or other reasons associated with database index implementation requirements.
type ADT_A39 struct {
	HL7     HL7Name           `hl7:",name=ADT_A39,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A39_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A40_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A40_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
}

// Merge patient - Patient Identifier List
//
// A merge has been done at the patient identifier list level.  That is, two PID-3 - Patient Identifier List identifiers have
// been merged into one.
//
// An A40 event is used to signal a merge of records for a patient that was incorrectly filed under two different identifiers.
// The "incorrect source identifier" identified in the MRG segment (MRG-1 - Prior Patient Identifier List) is to be merged
// with the required "correct target identifier" of the same "identifier type code" component identified in the PID segment
// (PID-3 - Patient Identifier List). The "incorrect source identifier" would then logically never be referenced in future
// transactions.  It is noted that some systems may still physically keep this "incorrect identifier" for audit trail purposes
// or other reasons associated with database index implementation requirements.
type ADT_A40 struct {
	HL7     HL7Name           `hl7:",name=ADT_A40,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A40_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A41_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A41_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
}

// Merge Account - Patient Account Number
//
// A merge has been done at the account identifier level.  That is, two PID-18 - Patient Account Number identifiers have been
// merged into one.
//
// An A41 event is used to signal a merge of records for an account that was incorrectly filed under two different account numbers.
// The "incorrect source patient account number" identified in the MRG segment (MRG-3 - Prior Patient Account Number) is
// to be merged with the "correct target patient account number" identified in the PID segment (PID-18 - Patient Account Number).
// The "incorrect source patient account number" would then logically never be referenced in future transactions.  It is
// noted that some systems may still physically keep this "incorrect identifier" for audit trail purposes or other reasons
// associated with database index implementation requirements.
type ADT_A41 struct {
	HL7     HL7Name           `hl7:",name=ADT_A41,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A41_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A42_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A42_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
}

// Merge Visit - Visit Number
//
// A merge has been done at the visit identifier level.  That is, two PV1-19 - Visit Number identifiers have been merged into
// one.
//
// An A42 event is used to signal a merge of records for a visit that was incorrectly filed under two different visit numbers.
// The "incorrect source visit number" identified in the MRG segment (MRG-5 - Prior Visit Number) is to be merged with the required
// "correct target visit number" identified in the PV1 segment (PV1-19 - Visit Number).  The "incorrect source visit number"
// would then logically never be referenced in future transactions.  It is noted that some systems may still physically keep
// this "incorrect identifier" for audit trail purposes or other reasons associated with database index implementation
// requirements.
type ADT_A42 struct {
	HL7     HL7Name           `hl7:",name=ADT_A42,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A42_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A43_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A43_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
}

// Move Patient Information - Patient Identifier List
//
// A move has been done at the patient identifier list level.  Identifier to be moved in the PID-3 - Patient Identifier List and
// MRG-1 - Prior Patient Identifier List will have the same value. The "from" (incorrect source patient ID) and "to" (correct
// target patient ID) identifiers have different values. The identifiers involved in identifying the patient to be moved
// (MRG-1 - Prior Patient Identifier List) may or may not have accounts, which may or may not have visits.  In any case, all subordinate
// data sets associated with the identifier in MRG-1 - Prior Patient Identifier List are moved along with the identifier,
// from the "incorrect source patient ID" to the "correct target patient ID."
type ADT_A43 struct {
	HL7     HL7Name           `hl7:",name=ADT_A43,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A43_Patient `hl7:",required,display=Patient"`
}

// Patient
type ADT_A44_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A44_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"7,display=Access Restrictions"`
	MRG *MRG    `hl7:"8,required,display=Merge Patient Information"`
}

// Move Account Information - Patient Account Number
//
// A move has been done at the account identifier level.  That is, a PID-18 - Patient Account Number associated with one PID-3
// - Patient Identifier List has been moved to another patient identifier list.
//
// An A44 event is used to signal a move of records identified by the MRG-3 - Prior Patient Account Number from the "incorrect
// source patient identifier list" identified in the MRG segment (MRG-1 - Prior Patient Identifier List) to the "correct
// target patient identifier list" identified in the PID segment (PID-3 - Patient Identifier List).
type ADT_A44 struct {
	HL7     HL7Name           `hl7:",name=ADT_A44,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []ADT_A44_Patient `hl7:",required,display=Patient"`
}

// MergeInfo
type ADT_A45_MergeInfo struct {
	HL7 HL7Name `hl7:",name=ADT_A45_MergeInfo,type=tg"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
}

// Move Visit Information - Visit Number
//
// A move has been done at the visit identifier level.  That is, a PV1-19 - Visit Number or PV1-50 - Alternate Visit ID associated
// with one account identifier (PID-18 - Patient Account Number) has been moved to another account identifier.
//
// An A45 event is used to signal a move of records identified by the MRG-5 - Prior Visit Number or the MRG-6 - Prior Alternate
// Visit ID from the "incorrect source account identifier" identified in the MRG segment (MRG-3 - Prior Patient Account Number)
// to the "correct target account identifier" identified in the PID segment (PID-18 - Patient Account Number).
type ADT_A45 struct {
	HL7       HL7Name             `hl7:",name=ADT_A45,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"6,display=Patient Additional Demographic"`
	MergeInfo []ADT_A45_MergeInfo `hl7:",required,display=Merge Info"`
}

// Change Patient ID
//
// From V2.3.1, Event A46 has been retained for backward compatibility only, corresponding with PID-2 - Patient ID, which
// is also retained for backward compatibility; event A47 (change patient identifier list) should be used instead. A change
// has been done at the patient identifier level.  That is, a PID-2 - Patient ID has been found to be incorrect and has been changed.
//
// An A46 event is used to signal a change of an incorrectly assigned PID-2 - Patient ID value.  The "incorrect source patient
// ID" value is stored in the MRG segment (MRG-4 - Prior Patient ID) and is to be changed to the "correct target patient ID" value
// stored in the PID segment (PID-2 - Patient ID).
type ADT_A46 struct {
	HL7 HL7Name `hl7:",name=ADT_A46,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"7,display=Access Restrictions"`
	MRG *MRG    `hl7:"8,required,display=Merge Patient Information"`
}

// Change Patient Identifier List
//
// A change has been done at the patient identifier list level.  That is, a single PID-3 - patient identifier list value has been
// found to be incorrect and has been changed.
//
// An A47 event is used to signal a change of an incorrectly assigned PID-3 - Patient Identifier List value.  The "incorrect
// source identifier" value is stored in the MRG segment (MRG-1 - Prior Patient Identifier List) and is to be changed to the
// "correct target patient ID" value stored in the PID segment (PID-3 - Patient Identifier List).
type ADT_A47 struct {
	HL7 HL7Name `hl7:",name=ADT_A47,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"7,display=Access Restrictions"`
	MRG *MRG    `hl7:"8,required,display=Merge Patient Information"`
}

// Change Alternate Patient ID
//
// From V2.3.1, Event A48 has been retained for backward compatibility only, corresponding with PID-4 - Alternate Patient
// ID-PID, which is also retained for backward compatibility; event A47 (change patient identifier list) should be used
// instead.  A change has been done at the alternate patient identifier level.  That is, a PID-4 - Alternate Patient ID-PID has
// been found to be incorrect and has been changed.
//
// An A48 event is used to signal a change of an incorrectly assigned alternate patient identifier value.  The "incorrect source
// alternate patient ID" value is stored in the MRG segment (MRG-2 - Prior Alternate Patient ID) and is to be changed to the "correct
// target alternate patient ID" value stored in the PID segment (PID-4 - Alternate Patient ID-PID).
type ADT_A48 struct {
	HL7 HL7Name `hl7:",name=ADT_A48,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
}

// Change Patient Account Number
//
// A change has been done at the account identifier level.  That is, a PID-18 - patient account number has been found to be incorrect
// and has been changed.
//
// An A49 event is used to signal a change of an incorrectly assigned account number value.  The "incorrect source account number"
// value is stored in the MRG segment (MRG-3 - Prior Patient Account Number) and is to be changed to the "correct target account
// number" value stored in the PID segment (PID-18 - Patient Account Number).
type ADT_A49 struct {
	HL7 HL7Name `hl7:",name=ADT_A49,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
}

// Change Visit Number
//
// A change has been done at the visit identifier level.  That is, a PV1-19 - Visit Number has been found to be incorrect and has
// been changed.
//
// An A50 event is used to signal a change of an incorrectly assigned visit number value.  The "incorrect source visit number"
// value is stored in the MRG segment (MRG-5 - Prior Visit Number) and is to be changed to the "correct target visit number" value
// stored in the PV1 segment (PV1-19 - Visit Number).
type ADT_A50 struct {
	HL7 HL7Name `hl7:",name=ADT_A50,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
}

// Change Alternate Visit ID
//
// A change has been done at the alternate visit identifier level.  That is, a PV1-50 - Alternate Visit ID has been found to be
// incorrect and has been changed.
//
// An A51 event is used to signal a change of an incorrectly assigned alternate visit ID value.  The "incorrect source alternate
// visit ID" value is stored in the MRG segment (MRG-6 - Prior Alternate Visit ID) and is to be changed to the "correct target
// alternate visit ID" value stored in the PV1 segment (PV1-50 - Alternate Visit ID).
type ADT_A51 struct {
	HL7 HL7Name `hl7:",name=ADT_A51,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"7,required,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
}

// Cancel Leave of Absence for a Patient
//
// The A52 event is sent when an A21 (patient goes on "leave of absence") event is cancelled, either because of erroneous entry
// of the A21 event or because of a decision not to put the patient on "leave of absence" after all.
type ADT_A52 struct {
	HL7 HL7Name `hl7:",name=ADT_A52,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// Cancel Patient Returns from a Leave of Absence
//
// The A53 event is sent when an A22 (patient returns from "leave of absence") event is cancelled, either because of erroneous
// entry of the A22 event or because of a decision not to return the patient from "leave of absence" after all.
type ADT_A53 struct {
	HL7 HL7Name `hl7:",name=ADT_A53,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// Change Attending Doctor
//
// An A54 event is issued as a result of a change in the attending doctor responsible for the treatment of a patient.
type ADT_A54 struct {
	HL7  HL7Name `hl7:",name=ADT_A54,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2 []ROL   `hl7:"10,display=Role"`
}

// Cancel Change Attending Doctor
//
// The A55 event is sent when an A54 (change attending doctor) event is cancelled, either because of erroneous entry of the
// A54 event or because of a decision not to change the attending doctor after all.  PV1-7 - Attending Doctor must contain the
// patient's doctor prior to the change of attending doctor.
type ADT_A55 struct {
	HL7  HL7Name `hl7:",name=ADT_A55,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2 []ROL   `hl7:"10,display=Role"`
}

// Update Adverse Reaction Information
//
// This trigger event is used when person/patient allergy information has changed.  It is used in conjunction with a new allergy
// segment, the IAM - Patient Allergy Information Segment-Unique Identifier, which supports Action code/unique identifier
// mode update for repeating segments as defined in 2.10.4, "Protocol for interpreting repeating segments or segment groups
// in an update Message."
type ADT_A60 struct {
	HL7  HL7Name `hl7:",name=ADT_A60,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	ARV  []ARV   `hl7:"6,display=Access Restrictions"`
	PV1  *PV1    `hl7:"7,display=Patient Visit"`
	PV2  *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	ARV2 []ARV   `hl7:"9,display=Access Restrictions"`
	IAM  []IAM   `hl7:"10,display=Patient Adverse Reaction Information"`
}

// Change Consulting Doctor
//
// An A61 event is used as a result of a change in the consulting physician(s) for the treatment of a patient.
type ADT_A61 struct {
	HL7  HL7Name `hl7:",name=ADT_A61,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	ROL2 []ROL   `hl7:"9,display=Role"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Cancel Change Consulting Doctor
//
// The A62 event is sent when an A61 (change consulting doctor) event is cancelled, either because of erroneous entry of the
// A61 event or because of a decision not to change the consulting physician(s) after all.  PV1-9 - Consulting Doctor must show
// the patient's doctor prior to the change being cancelled.
type ADT_A62 struct {
	HL7  HL7Name `hl7:",name=ADT_A62,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	SFT  []SFT   `hl7:"2,display=Software Segment"`
	UAC  *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN  *EVN    `hl7:"4,required,display=Event Type"`
	PID  *PID    `hl7:"5,required,display=Patient Identification"`
	PD1  *PD1    `hl7:"6,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"7,display=Role"`
	PV1  *PV1    `hl7:"8,required,display=Patient Visit"`
	ROL2 []ROL   `hl7:"9,display=Role"`
	PV2  *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Visit
type BAR_P01_Visit struct {
	HL7       HL7Name             `hl7:",name=BAR_P01_Visit,type=tg"`
	PV1       *PV1                `hl7:"8,display=Patient Visit"`
	PV2       *PV2                `hl7:"9,display=Patient Visit - Additional Information"`
	ROL       []ROL               `hl7:"10,display=Role"`
	DB1       []DB1               `hl7:"11,display=Disability"`
	OBX       []OBX               `hl7:"12,display=Observation/Result"`
	AL1       []AL1               `hl7:"13,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"14,display=Diagnosis"`
	DRG       *DRG                `hl7:"15,display=Diagnosis Related Group"`
	Procedure []BAR_P01_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"18,display=Guarantor"`
	NK1       []NK1               `hl7:"19,display=Next of Kin / Associated Parties"`
	Insurance []BAR_P01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"24,display=Accident"`
	UB1       *UB1                `hl7:"25,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"26,display=UB92 Data"`
}

// Procedure
type BAR_P01_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"16,required,display=Procedures"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// Insurance
type BAR_P01_Insurance struct {
	HL7 HL7Name `hl7:",name=BAR_P01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"20,required,display=Insurance"`
	IN2 *IN2    `hl7:"21,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"22,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"23,display=Role"`
}

// Add Patient Account
//
// Data are sent from some application (usually a Registration or an ADT system, for example) to the patient accounting or
// financial system to establish an account for a patient’s billing/accounts receivable record.  Many of the segments associated
// with this event are optional.
//
// From Standard Version 2.3 onward, the P01 event should only be used to add a new account that did not exist before, not to update
// an existing account.  The new P05 (update account) event should be used to update an existing account.  The new P06 (end account)
// event should be used to close an account.  With the P01 event, EVN-2 - Recorded Date/Time should contain the account start
// date.
type BAR_P01 struct {
	HL7   HL7Name         `hl7:",name=BAR_P01,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential"`
	EVN   *EVN            `hl7:"4,required,display=Event Type"`
	PID   *PID            `hl7:"5,required,display=Patient Identification"`
	PD1   *PD1            `hl7:"6,display=Patient Additional Demographic"`
	ROL   []ROL           `hl7:"7,display=Role"`
	Visit []BAR_P01_Visit `hl7:",required,display=Visit"`
}

// Patient
type BAR_P02_Patient struct {
	HL7 HL7Name `hl7:",name=BAR_P02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	DB1 []DB1   `hl7:"8,display=Disability"`
}

// Purge Patient Accounts
//
// Generally, the elimination of all billing/accounts receivable records will be an internal function controlled, for
// example, by the patient accounting or financial system.  However, on occasion, there will be a need to correct an account,
// or a series of accounts, that may require that a notice of account deletion be sent from another sub-system and processed,
// for example, by the patient accounting or financial system.  Although a series of accounts may be purged within this one
// event, we recommend that only one PID segment be sent per event.
type BAR_P02 struct {
	HL7     HL7Name           `hl7:",name=BAR_P02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []BAR_P02_Patient `hl7:",required,display=Patient"`
}

// Visit
type BAR_P05_Visit struct {
	HL7       HL7Name             `hl7:",name=BAR_P05_Visit,type=tg"`
	PV1       *PV1                `hl7:"8,display=Patient Visit"`
	PV2       *PV2                `hl7:"9,display=Patient Visit - Additional Information"`
	ROL       []ROL               `hl7:"10,display=Role"`
	DB1       []DB1               `hl7:"11,display=Disability"`
	OBX       []OBX               `hl7:"12,display=Observation/Result"`
	AL1       []AL1               `hl7:"13,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"14,display=Diagnosis"`
	DRG       *DRG                `hl7:"15,display=Diagnosis Related Group"`
	Procedure []BAR_P05_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"18,display=Guarantor"`
	NK1       []NK1               `hl7:"19,display=Next of Kin / Associated Parties"`
	Insurance []BAR_P05_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"24,display=Accident"`
	UB1       *UB1                `hl7:"25,display=Uniform Billing 1"`
	UB2       *UB2                `hl7:"26,display=UB92 Data"`
	ABS       *ABS                `hl7:"27,display=Abstract"`
	BLC       []BLC               `hl7:"28,display=Blood Code"`
	RMI       *RMI                `hl7:"29,display=Risk Management Incident"`
}

// Procedure
type BAR_P05_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P05_Procedure,type=tg"`
	PR1 *PR1    `hl7:"16,required,display=Procedures"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// Insurance
type BAR_P05_Insurance struct {
	HL7 HL7Name `hl7:",name=BAR_P05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"20,required,display=Insurance"`
	IN2 *IN2    `hl7:"21,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"22,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"23,display=Role"`
}

// Update Account
//
// The P05 event is sent when an existing account is being updated.  From version 2.3 onward, the P01 (add account) event should
// no longer be used for updating an existing account, but only for creating a new account.  With the addition of P10 (transmit
// ambulatory payment classification [APC] groups) in version 2.4, it is expected that the P05 (update account) will be used
// to send inpatient coding information and the P10 (transmit ambulatory payment classification [APC] groups) will be used
// to send outpatient coding information.
type BAR_P05 struct {
	HL7   HL7Name         `hl7:",name=BAR_P05,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential"`
	EVN   *EVN            `hl7:"4,required,display=Event Type"`
	PID   *PID            `hl7:"5,required,display=Patient Identification"`
	PD1   *PD1            `hl7:"6,display=Patient Additional Demographic"`
	ROL   []ROL           `hl7:"7,display=Role"`
	Visit []BAR_P05_Visit `hl7:",required,display=Visit"`
}

// Patient
type BAR_P06_Patient struct {
	HL7 HL7Name `hl7:",name=BAR_P06_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
}

// End Account
//
// The P06 event is a notification that the account is no longer open, that is, no new charges can accrue to this account.  This
// notification is not related to whether or not the account is paid in full.  EVN-2 - Recorded Date/Time must contain the account
// end date.
type BAR_P06 struct {
	HL7     HL7Name           `hl7:",name=BAR_P06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EVN     *EVN              `hl7:"4,required,display=Event Type"`
	Patient []BAR_P06_Patient `hl7:",required,display=Patient"`
}

// Procedure
type BAR_P10_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P10_Procedure,type=tg"`
	PR1 *PR1    `hl7:"9,required,display=Procedures"`
	GP2 *GP2    `hl7:"10,display=Grouping/Reimbursement - Procedure Line Item"`
}

// Transmit Ambulatory Payment Classification (APC)
//
// The P10 event is used to communicate Ambulatory Payment Classification (APC) grouping.  The grouping can be estimated
// or actual, based on the APC status indictor in GP1-1.  This information is mandated in the USA by the Centers for Medicare
// and Medicaid Services (CMS)  for reimbursement of outpatient services.  The PID and PV1 segments are included for identification
// purposes only. When other patient or visit related fields change, use the A08 (update patient information) event.
type BAR_P10 struct {
	HL7       HL7Name             `hl7:",name=BAR_P10,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PV1       *PV1                `hl7:"6,required,display=Patient Visit"`
	DG1       []DG1               `hl7:"7,display=Diagnosis"`
	GP1       *GP1                `hl7:"8,required,display=Grouping/Reimbursement - Visit"`
	Procedure []BAR_P10_Procedure `hl7:",display=Procedure"`
}

// Procedure
type BAR_P12_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P12_Procedure,type=tg"`
	PR1 *PR1    `hl7:"9,required,display=Procedures"`
	ROL []ROL   `hl7:"10,display=Role"`
}

// Update Diagnosis/Procedure
//
// The P12 event is used to communicate diagnosis and/or procedures in update mode.  The newly created fields in DG1 and PR1,
// i.e., identifiers and action codes, must be populated to indicate which change should be applied.  When other patient or
// visit related fields change, use the A08 (update patient information) event.
type BAR_P12 struct {
	HL7       HL7Name             `hl7:",name=BAR_P12,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	EVN       *EVN                `hl7:"4,required,display=Event Type"`
	PID       *PID                `hl7:"5,required,display=Patient Identification"`
	PV1       *PV1                `hl7:"6,required,display=Patient Visit"`
	DG1       []DG1               `hl7:"7,display=Diagnosis"`
	DRG       *DRG                `hl7:"8,display=Diagnosis Related Group"`
	Procedure []BAR_P12_Procedure `hl7:",display=Procedure"`
}

// Patient
type BPS_O29_Patient struct {
	HL7          HL7Name               `hl7:",name=BPS_O29_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *BPS_O29_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type BPS_O29_PatientVisit struct {
	HL7 HL7Name `hl7:",name=BPS_O29_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Order
type BPS_O29_Order struct {
	HL7     HL7Name           `hl7:",name=BPS_O29_Order,type=tg"`
	ORC     *ORC              `hl7:"10,required,display=Common Order"`
	Timing  []BPS_O29_Timing  `hl7:",display=Timing"`
	BPO     *BPO              `hl7:"13,required,display=Blood product order"`
	NTE     []NTE             `hl7:"14,display=Notes and Comments"`
	Product []BPS_O29_Product `hl7:",display=Product"`
}

// Timing
type BPS_O29_Timing struct {
	HL7 HL7Name `hl7:",name=BPS_O29_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/Quantity Relationship"`
}

// Product
type BPS_O29_Product struct {
	HL7 HL7Name `hl7:",name=BPS_O29_Product,type=tg"`
	BPX *BPX    `hl7:"15,required,display=Blood product dispense status"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Blood Product Dispense Status
//
// In the pre-transfusion processing of blood products, it is necessary for the transfusion service and the placer system
// to communicate information that is not included in the current HL7 order/observation model. Examples of pre-transfusion
// processing include performing a crossmatch test to ensure compatibility with the patient, or irradiation of the blood
// product due to a special transfusion requirement for the patient. The blood product dispense status messages need to contain
// additional information regarding the blood products requested, such as the Donation ID, product code, blood type, expiration
// date/time and current status of the blood product.
//
// In the processing of commercial blood products, such as Rh Immune Globulin, Factor Concentrate, or Albumin Products,
// the status messages need to contain additional information, such as the lot number and manufacturer, expiration date
// and status of the commercial product.
//
// Blood product dispense status messages use the BPS and BRP messages as described below
type BPS_O29 struct {
	HL7     HL7Name          `hl7:",name=BPS_O29,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *BPS_O29_Patient `hl7:",display=Patient"`
	Order   []BPS_O29_Order  `hl7:",required,display=Order"`
}

// Response
type BRP_O30_Response struct {
	HL7     HL7Name          `hl7:",name=BRP_O30_Response,type=tg"`
	Patient *BRP_O30_Patient `hl7:",display=Patient"`
}

// Patient
type BRP_O30_Patient struct {
	HL7   HL7Name         `hl7:",name=BRP_O30_Patient,type=tg"`
	PID   *PID            `hl7:"7,required,display=Patient Identification"`
	Order []BRP_O30_Order `hl7:",display=Order"`
}

// Order
type BRP_O30_Order struct {
	HL7    HL7Name          `hl7:",name=BRP_O30_Order,type=tg"`
	ORC    *ORC             `hl7:"8,required,display=Common Order"`
	Timing []BRP_O30_Timing `hl7:",display=Timing"`
	BPO    *BPO             `hl7:"11,display=Blood product order"`
	BPX    []BPX            `hl7:"12,display=Blood product dispense status"`
}

// Timing
type BRP_O30_Timing struct {
	HL7 HL7Name `hl7:",name=BRP_O30_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"9,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"10,display=Timing/Quantity Relationship"`
}

// Blood Product Dispense Status Acknowledgment
//
// In the pre-transfusion processing of blood products, it is necessary for the transfusion service and the placer system
// to communicate information that is not included in the current HL7 order/observation model. Examples of pre-transfusion
// processing include performing a crossmatch test to ensure compatibility with the patient, or irradiation of the blood
// product due to a special transfusion requirement for the patient. The blood product dispense status messages need to contain
// additional information regarding the blood products requested, such as the Donation ID, product code, blood type, expiration
// date/time and current status of the blood product.
//
// In the processing of commercial blood products, such as Rh Immune Globulin, Factor Concentrate, or Albumin Products,
// the status messages need to contain additional information, such as the lot number and manufacturer, expiration date
// and status of the commercial product.
//
// Blood product dispense status messages use the BPS and BRP messages as described below
type BRP_O30 struct {
	HL7      HL7Name           `hl7:",name=BRP_O30,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *BRP_O30_Response `hl7:",display=Response"`
}

// Response
type BRT_O32_Response struct {
	HL7   HL7Name         `hl7:",name=BRT_O32_Response,type=tg"`
	PID   *PID            `hl7:"7,display=Patient Identification"`
	Order []BRT_O32_Order `hl7:",display=Order"`
}

// Order
type BRT_O32_Order struct {
	HL7    HL7Name          `hl7:",name=BRT_O32_Order,type=tg"`
	ORC    *ORC             `hl7:"8,required,display=Common Order"`
	Timing []BRT_O32_Timing `hl7:",display=Timing"`
	BPO    *BPO             `hl7:"11,display=Blood product order"`
	BTX    []BTX            `hl7:"12,display=Blood Product Transfusion/Disposition"`
}

// Timing
type BRT_O32_Timing struct {
	HL7 HL7Name `hl7:",name=BRT_O32_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"9,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"10,display=Timing/Quantity Relationship"`
}

// Blood Product Transfusion/Disposition Acknowledgment
//
// Blood product transfusion/disposition messages use the BTS and BRT messages.
type BRT_O32 struct {
	HL7      HL7Name           `hl7:",name=BRT_O32,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *BRT_O32_Response `hl7:",display=Response"`
}

// Patient
type BTS_O31_Patient struct {
	HL7          HL7Name               `hl7:",name=BTS_O31_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *BTS_O31_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type BTS_O31_PatientVisit struct {
	HL7 HL7Name `hl7:",name=BTS_O31_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Order
type BTS_O31_Order struct {
	HL7           HL7Name                 `hl7:",name=BTS_O31_Order,type=tg"`
	ORC           *ORC                    `hl7:"10,required,display=Common Order"`
	Timing        []BTS_O31_Timing        `hl7:",display=Timing"`
	BPO           *BPO                    `hl7:"13,required,display=Blood product order"`
	NTE           []NTE                   `hl7:"14,display=Notes and Comments"`
	ProductStatus []BTS_O31_ProductStatus `hl7:",display=Product Status"`
}

// Timing
type BTS_O31_Timing struct {
	HL7 HL7Name `hl7:",name=BTS_O31_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/Quantity Relationship"`
}

// ProductStatus
type BTS_O31_ProductStatus struct {
	HL7 HL7Name `hl7:",name=BTS_O31_ProductStatus,type=tg"`
	BTX *BTX    `hl7:"15,required,display=Blood Product Transfusion/Disposition"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Blood Product Transfusion/Disposition
//
// Blood product transfusion/disposition messages use the BTS and BRT messages.
type BTS_O31 struct {
	HL7     HL7Name          `hl7:",name=BTS_O31,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *BTS_O31_Patient `hl7:",display=Patient"`
	Order   []BTS_O31_Order  `hl7:",required,display=Order"`
}

// Patient
type CRM_C01_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C01_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Register a Patient on a Clinical Trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C01 struct {
	HL7     HL7Name           `hl7:",name=CRM_C01,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C01_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C02_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C02_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Cancel a Patient Registration on Clinical Trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C02 struct {
	HL7     HL7Name           `hl7:",name=CRM_C02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C02_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C03_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C03_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Correct/Update Registration Information
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C03 struct {
	HL7     HL7Name           `hl7:",name=CRM_C03,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C03_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C04_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C04_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Patient Has Gone off a Clinical Trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C04 struct {
	HL7     HL7Name           `hl7:",name=CRM_C04,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C04_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C05_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C05_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Patient Enters Phase of Clinical Trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C05 struct {
	HL7     HL7Name           `hl7:",name=CRM_C05,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C05_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C06_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C06_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Cancel Patient Entering a Phase
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C06 struct {
	HL7     HL7Name           `hl7:",name=CRM_C06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C06_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C07_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C07_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Correct/Update Phase Information
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C07 struct {
	HL7     HL7Name           `hl7:",name=CRM_C07,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C07_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C08_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C08_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"5,display=Patient Visit"`
	CSR *CSR    `hl7:"6,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"7,display=Clinical Study Phase"`
}

// Patient Has Gone off Phase of Clinical Trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems.  It is assumed that proper routing and security
// mechanisms are in place.
type CRM_C08 struct {
	HL7     HL7Name           `hl7:",name=CRM_C08,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CRM_C08_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C09_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C09_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"6,display=Notes and Comments"`
	Visit      *CSU_C09_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"9,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C09_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C09_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C09_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// StudyPhase
type CSU_C09_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C09_StudyPhase,type=tg"`
	CSP           *CSP                    `hl7:"10,display=Clinical Study Phase"`
	StudySchedule []CSU_C09_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C09_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C09_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"11,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C09_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C09_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C09_StudyObservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C09_StudyObservation,type=tg"`
	ORC       *ORC                `hl7:"12,display=Common Order"`
	OBR       *OBR                `hl7:"13,required,display=Observation Request"`
	ROL       []ROL               `hl7:"14,display=Role"`
	TimingQty []CSU_C09_TimingQty `hl7:",display=Timing Qty"`
	OBX       []OBX               `hl7:"17,required,display=Observation/Result"`
}

// TimingQty
type CSU_C09_TimingQty struct {
	HL7 HL7Name `hl7:",name=CSU_C09_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// StudyPharm
type CSU_C09_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C09_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"18,display=Common Order"`
	RxAdmin []CSU_C09_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C09_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C09_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"19,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"20,required,display=Pharmacy/Treatment Route"`
}

// Automated Time Intervals for Reporting, Like Monthly
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data   clinical observations and study variables   will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
type CSU_C09 struct {
	HL7     HL7Name           `hl7:",name=CSU_C09,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CSU_C09_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C10_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C10_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"6,display=Notes and Comments"`
	Visit      *CSU_C10_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"9,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C10_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C10_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C10_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// StudyPhase
type CSU_C10_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C10_StudyPhase,type=tg"`
	CSP           *CSP                    `hl7:"10,display=Clinical Study Phase"`
	StudySchedule []CSU_C10_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C10_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C10_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"11,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C10_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C10_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C10_StudyObservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C10_StudyObservation,type=tg"`
	ORC       *ORC                `hl7:"12,display=Common Order"`
	OBR       *OBR                `hl7:"13,required,display=Observation Request"`
	ROL       []ROL               `hl7:"14,display=Role"`
	TimingQty []CSU_C10_TimingQty `hl7:",display=Timing Qty"`
	OBX       []OBX               `hl7:"17,required,display=Observation/Result"`
}

// TimingQty
type CSU_C10_TimingQty struct {
	HL7 HL7Name `hl7:",name=CSU_C10_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// StudyPharm
type CSU_C10_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C10_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"18,display=Common Order"`
	RxAdmin []CSU_C10_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C10_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C10_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"19,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"20,required,display=Pharmacy/Treatment Route"`
}

// Patient Completes the Clinical Trial
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data   clinical observations and study variables   will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
type CSU_C10 struct {
	HL7     HL7Name           `hl7:",name=CSU_C10,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CSU_C10_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C11_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C11_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"6,display=Notes and Comments"`
	Visit      *CSU_C11_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"9,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C11_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C11_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C11_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// StudyPhase
type CSU_C11_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C11_StudyPhase,type=tg"`
	CSP           *CSP                    `hl7:"10,display=Clinical Study Phase"`
	StudySchedule []CSU_C11_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C11_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C11_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"11,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C11_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C11_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C11_StudyObservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C11_StudyObservation,type=tg"`
	ORC       *ORC                `hl7:"12,display=Common Order"`
	OBR       *OBR                `hl7:"13,required,display=Observation Request"`
	ROL       []ROL               `hl7:"14,display=Role"`
	TimingQty []CSU_C11_TimingQty `hl7:",display=Timing Qty"`
	OBX       []OBX               `hl7:"17,required,display=Observation/Result"`
}

// TimingQty
type CSU_C11_TimingQty struct {
	HL7 HL7Name `hl7:",name=CSU_C11_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// StudyPharm
type CSU_C11_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C11_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"18,display=Common Order"`
	RxAdmin []CSU_C11_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C11_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C11_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"19,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"20,required,display=Pharmacy/Treatment Route"`
}

// Patient Completes a Phase of the Clinical Trial
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data   clinical observations and study variables   will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
type CSU_C11 struct {
	HL7     HL7Name           `hl7:",name=CSU_C11,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CSU_C11_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C12_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C12_Patient,type=tg"`
	PID        *PID                 `hl7:"4,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"5,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"6,display=Notes and Comments"`
	Visit      *CSU_C12_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"9,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C12_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C12_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C12_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// StudyPhase
type CSU_C12_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C12_StudyPhase,type=tg"`
	CSP           *CSP                    `hl7:"10,display=Clinical Study Phase"`
	StudySchedule []CSU_C12_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C12_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C12_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"11,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C12_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C12_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C12_StudyObservation struct {
	HL7       HL7Name             `hl7:",name=CSU_C12_StudyObservation,type=tg"`
	ORC       *ORC                `hl7:"12,display=Common Order"`
	OBR       *OBR                `hl7:"13,required,display=Observation Request"`
	ROL       []ROL               `hl7:"14,display=Role"`
	TimingQty []CSU_C12_TimingQty `hl7:",display=Timing Qty"`
	OBX       []OBX               `hl7:"17,required,display=Observation/Result"`
}

// TimingQty
type CSU_C12_TimingQty struct {
	HL7 HL7Name `hl7:",name=CSU_C12_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// StudyPharm
type CSU_C12_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C12_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"18,display=Common Order"`
	RxAdmin []CSU_C12_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C12_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C12_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"19,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"20,required,display=Pharmacy/Treatment Route"`
}

// Update/Correction of Patient Order/Result Information
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data   clinical observations and study variables   will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies.
type CSU_C12 struct {
	HL7     HL7Name           `hl7:",name=CSU_C12,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	Patient []CSU_C12_Patient `hl7:",required,display=Patient"`
}

// CommonOrder
type DFT_P03_CommonOrder struct {
	HL7            HL7Name                  `hl7:",name=DFT_P03_CommonOrder,type=tg"`
	ORC            *ORC                     `hl7:"12,display=Common Order"`
	TimingQuantity []DFT_P03_TimingQuantity `hl7:",display=Timing Quantity"`
	Order          *DFT_P03_Order           `hl7:",display=Order"`
	Observation    []DFT_P03_Observation    `hl7:",display=Observation"`
}

// TimingQuantity
type DFT_P03_TimingQuantity struct {
	HL7 HL7Name `hl7:",name=DFT_P03_TimingQuantity,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// Order
type DFT_P03_Order struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Order,type=tg"`
	OBR *OBR    `hl7:"15,required,display=Observation Request"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Observation
type DFT_P03_Observation struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Observation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Financial
type DFT_P03_Financial struct {
	HL7                  HL7Name                        `hl7:",name=DFT_P03_Financial,type=tg"`
	FT1                  *FT1                           `hl7:"19,required,display=Financial Transaction"`
	NTE                  *NTE                           `hl7:"20,display=Notes and Comments"`
	FinancialProcedure   []DFT_P03_FinancialProcedure   `hl7:",display=Financial Procedure"`
	FinancialCommonOrder []DFT_P03_FinancialCommonOrder `hl7:",display=Financial Common Order"`
}

// FinancialProcedure
type DFT_P03_FinancialProcedure struct {
	HL7 HL7Name `hl7:",name=DFT_P03_FinancialProcedure,type=tg"`
	PR1 *PR1    `hl7:"21,required,display=Procedures"`
	ROL []ROL   `hl7:"22,display=Role"`
}

// FinancialCommonOrder
type DFT_P03_FinancialCommonOrder struct {
	HL7                     HL7Name                           `hl7:",name=DFT_P03_FinancialCommonOrder,type=tg"`
	ORC                     *ORC                              `hl7:"23,display=Common Order"`
	FinancialTimingQuantity []DFT_P03_FinancialTimingQuantity `hl7:",display=Financial Timing Quantity"`
	FinancialOrder          *DFT_P03_FinancialOrder           `hl7:",display=Financial Order"`
	FinancialObservation    []DFT_P03_FinancialObservation    `hl7:",display=Financial Observation"`
}

// FinancialTimingQuantity
type DFT_P03_FinancialTimingQuantity struct {
	HL7 HL7Name `hl7:",name=DFT_P03_FinancialTimingQuantity,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// FinancialOrder
type DFT_P03_FinancialOrder struct {
	HL7 HL7Name `hl7:",name=DFT_P03_FinancialOrder,type=tg"`
	OBR *OBR    `hl7:"26,required,display=Observation Request"`
	NTE []NTE   `hl7:"27,display=Notes and Comments"`
}

// FinancialObservation
type DFT_P03_FinancialObservation struct {
	HL7 HL7Name `hl7:",name=DFT_P03_FinancialObservation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/Result"`
	NTE []NTE   `hl7:"29,display=Notes and Comments"`
}

// Insurance
type DFT_P03_Insurance struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"33,required,display=Insurance"`
	IN2 *IN2    `hl7:"34,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"35,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"36,display=Role"`
}

// Post Detail Financial Transaction
//
// The Detail Financial Transaction (DFT) message is used to describe a finan¬cial transaction transmitted between systems,
// that is, to the billing system for ancillary charges, ADT to billing system for patient deposits, etc
//
// Note:  There is an information overlap between the FT1, DG1 and PR1 segments.  If diagnosis information is sent in an FT1 segment,
// it should be consistent with the information contained in any DG1 segments present within its hierarchy. Since the procedure
// code field within the FT1 does not repeat, if procedure information is sent on an FT1 it is recommended that the single occurrence
// of the code in FT1 equates to the primary procedure (PR1-14 - Procedure Priority code value 1).
//
// Note:  The extra set of DG1/DRG/GT1/IN1/IN2/IN3/ROL segments added in V2.4 have been withdrawn as a technical correction.
type DFT_P03 struct {
	HL7         HL7Name               `hl7:",name=DFT_P03,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1         *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	ROL         []ROL                 `hl7:"7,display=Role"`
	PV1         *PV1                  `hl7:"8,display=Patient Visit"`
	PV2         *PV2                  `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2        []ROL                 `hl7:"10,display=Role"`
	DB1         []DB1                 `hl7:"11,display=Disability"`
	CommonOrder []DFT_P03_CommonOrder `hl7:",display=Common Order"`
	Financial   []DFT_P03_Financial   `hl7:",required,display=Financial"`
	DG1         []DG1                 `hl7:"30,display=Diagnosis"`
	DRG         *DRG                  `hl7:"31,display=Diagnosis Related Group"`
	GT1         []GT1                 `hl7:"32,display=Guarantor"`
	Insurance   []DFT_P03_Insurance   `hl7:",display=Insurance"`
	ACC         *ACC                  `hl7:"37,display=Accident"`
}

// CommonOrder
type DFT_P11_CommonOrder struct {
	HL7            HL7Name                  `hl7:",name=DFT_P11_CommonOrder,type=tg"`
	ORC            *ORC                     `hl7:"12,display=Common Order"`
	TimingQuantity []DFT_P11_TimingQuantity `hl7:",display=Timing Quantity"`
	Order          *DFT_P11_Order           `hl7:",display=Order"`
	Observation    []DFT_P11_Observation    `hl7:",display=Observation"`
}

// TimingQuantity
type DFT_P11_TimingQuantity struct {
	HL7 HL7Name `hl7:",name=DFT_P11_TimingQuantity,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// Order
type DFT_P11_Order struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Order,type=tg"`
	OBR *OBR    `hl7:"15,required,display=Observation Request"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Observation
type DFT_P11_Observation struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Observation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Insurance
type DFT_P11_Insurance struct {
	HL7 HL7Name `hl7:",name=DFT_P11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"22,required,display=Insurance"`
	IN2 *IN2    `hl7:"23,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"24,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"25,display=Role"`
}

// Financial
type DFT_P11_Financial struct {
	HL7                  HL7Name                        `hl7:",name=DFT_P11_Financial,type=tg"`
	FT1                  *FT1                           `hl7:"27,required,display=Financial Transaction"`
	FinancialProcedure   []DFT_P11_FinancialProcedure   `hl7:",display=Financial Procedure"`
	FinancialCommonOrder []DFT_P11_FinancialCommonOrder `hl7:",display=Financial Common Order"`
	DG1                  []DG1                          `hl7:"37,display=Diagnosis"`
	DRG                  *DRG                           `hl7:"38,display=Diagnosis Related Group"`
	GT1                  []GT1                          `hl7:"39,display=Guarantor"`
	FinancialInsurance   []DFT_P11_FinancialInsurance   `hl7:",display=Financial Insurance"`
}

// FinancialProcedure
type DFT_P11_FinancialProcedure struct {
	HL7 HL7Name `hl7:",name=DFT_P11_FinancialProcedure,type=tg"`
	PR1 *PR1    `hl7:"28,required,display=Procedures"`
	ROL []ROL   `hl7:"29,display=Role"`
}

// FinancialCommonOrder
type DFT_P11_FinancialCommonOrder struct {
	HL7                     HL7Name                           `hl7:",name=DFT_P11_FinancialCommonOrder,type=tg"`
	ORC                     *ORC                              `hl7:"30,display=Common Order"`
	FinancialTimingQuantity []DFT_P11_FinancialTimingQuantity `hl7:",display=Financial Timing Quantity"`
	FinancialOrder          *DFT_P11_FinancialOrder           `hl7:",display=Financial Order"`
	FinancialObservation    []DFT_P11_FinancialObservation    `hl7:",display=Financial Observation"`
}

// FinancialTimingQuantity
type DFT_P11_FinancialTimingQuantity struct {
	HL7 HL7Name `hl7:",name=DFT_P11_FinancialTimingQuantity,type=tg"`
	TQ1 *TQ1    `hl7:"31,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"32,display=Timing/Quantity Relationship"`
}

// FinancialOrder
type DFT_P11_FinancialOrder struct {
	HL7 HL7Name `hl7:",name=DFT_P11_FinancialOrder,type=tg"`
	OBR *OBR    `hl7:"33,required,display=Observation Request"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
}

// FinancialObservation
type DFT_P11_FinancialObservation struct {
	HL7 HL7Name `hl7:",name=DFT_P11_FinancialObservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/Result"`
	NTE []NTE   `hl7:"36,display=Notes and Comments"`
}

// FinancialInsurance
type DFT_P11_FinancialInsurance struct {
	HL7 HL7Name `hl7:",name=DFT_P11_FinancialInsurance,type=tg"`
	IN1 *IN1    `hl7:"40,required,display=Insurance"`
	IN2 *IN2    `hl7:"41,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"42,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"43,display=Role"`
}

// Post Detail Financial Transactions - Expanded
//
// The Detail Financial Transaction (DFT) - Expanded message is used to describe a finan¬cial transaction transmitted between
// systems, that is, to the billing system for ancillary charges, ADT to billing system for patient deposits, etc.  It serves
// the same function as the Post Detail Financial Transactions (event P03) message, but also supports the use cases described
// below.
//
// Note:  There is an information overlap between the FT1, DG1 and PR1 segments.  If diagnosis information is sent in an FT1 segment,
// it should be consistent with the information contained in any DG1 segments present within its hierarchy. Since the procedure
// code field within the FT1 does not repeat, if procedure information is sent on an FT1 it is recommended that the single occurrence
// of the code in FT1 equates to the primary procedure (PR1-14 - Procedure Priority code value 1).
type DFT_P11 struct {
	HL7         HL7Name               `hl7:",name=DFT_P11,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1         *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	ROL         []ROL                 `hl7:"7,display=Role"`
	PV1         *PV1                  `hl7:"8,display=Patient Visit"`
	PV2         *PV2                  `hl7:"9,display=Patient Visit - Additional Information"`
	ROL2        []ROL                 `hl7:"10,display=Role"`
	DB1         []DB1                 `hl7:"11,display=Disability"`
	CommonOrder []DFT_P11_CommonOrder `hl7:",display=Common Order"`
	DG1         []DG1                 `hl7:"19,display=Diagnosis"`
	DRG         *DRG                  `hl7:"20,display=Diagnosis Related Group"`
	GT1         []GT1                 `hl7:"21,display=Guarantor"`
	Insurance   []DFT_P11_Insurance   `hl7:",display=Insurance"`
	ACC         *ACC                  `hl7:"26,display=Accident"`
	Financial   []DFT_P11_Financial   `hl7:",required,display=Financial"`
}

// Result
type DOC_T12_Result struct {
	HL7 HL7Name `hl7:",name=DOC_T12_Result,type=tg"`
	EVN *EVN    `hl7:"6,display=Event Type"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	TXA *TXA    `hl7:"9,required,display=Transcription Document Header"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Document Response
//
// Retained for backwards compatibility only in version 2.4 and later
type DOC_T12 struct {
	HL7    HL7Name          `hl7:",name=DOC_T12,type=t"`
	MSH    *MSH             `hl7:"1,required,display=Message Header"`
	MSA    *MSA             `hl7:"2,required,display=Message Acknowledgment"`
	ERR    *ERR             `hl7:"3,display=Error"`
	QAK    *QAK             `hl7:"4,display=Query Acknowledgment"`
	QRD    *QRD             `hl7:"5,required,display=Original-Style Query Definition"`
	Result []DOC_T12_Result `hl7:",required,display=Result"`
	DSC    *DSC             `hl7:"11,display=Continuation Pointer"`
}

// Original Mode Display Immediate Response
//
// This section is retained for backward compatibility as of V2.4.
type DSR_Q01 struct {
	HL7 HL7Name `hl7:",name=DSR_Q01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,display=Query Acknowledgment"`
	QRD *QRD    `hl7:"7,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"8,display=Original style query filter"`
	DSP []DSP   `hl7:"9,required,display=Display Data"`
	DSC *DSC    `hl7:"10,display=Continuation Pointer"`
}

// Deferred Response to a Query
//
// This section is retained for backward compatibility as of V2.4.
type DSR_Q03 struct {
	HL7 HL7Name `hl7:",name=DSR_Q03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,display=Query Acknowledgment"`
	QRD *QRD    `hl7:"7,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"8,display=Original style query filter"`
	DSP []DSP   `hl7:"9,required,display=Display Data"`
	DSC *DSC    `hl7:"10,display=Continuation Pointer"`
}

// Command
type EAC_U07_Command struct {
	HL7               HL7Name                    `hl7:",name=EAC_U07_Command,type=tg"`
	ECD               *ECD                       `hl7:"5,required,display=Equipment Command"`
	TQ1               *TQ1                       `hl7:"6,display=Timing/Quantity"`
	SpecimenContainer *EAC_U07_SpecimenContainer `hl7:",display=Specimen Container"`
	CNS               *CNS                       `hl7:"9,display=Clear Notification"`
}

// SpecimenContainer
type EAC_U07_SpecimenContainer struct {
	HL7 HL7Name `hl7:",name=EAC_U07_SpecimenContainer,type=tg"`
	SAC *SAC    `hl7:"7,required,display=Specimen Container Detail"`
	SPM []SPM   `hl7:"8,display=Specimen"`
}

// Automated Equipment Command
//
// This message is used to send equipment commands from one application to another (e.g., a Laboratory Automation System
// to automated Equipment).
type EAC_U07 struct {
	HL7     HL7Name           `hl7:",name=EAC_U07,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	EQU     *EQU              `hl7:"4,required,display=Equipment Detail"`
	Command []EAC_U07_Command `hl7:",required,display=Command"`
	ROL     *ROL              `hl7:"10,display=Role"`
}

// Notification
type EAN_U09_Notification struct {
	HL7 HL7Name `hl7:",name=EAN_U09_Notification,type=tg"`
	NDS *NDS    `hl7:"5,required,display=Notification Detail"`
	NTE *NTE    `hl7:"6,display=Notes and Comments"`
}

// Automated Equipment Notification
//
// This message is used to send equipment notifications from one application to another (e.g., alerts sent by automated equipment
// to a Laboratory Automation System).
type EAN_U09 struct {
	HL7          HL7Name                `hl7:",name=EAN_U09,type=t"`
	MSH          *MSH                   `hl7:"1,required,display=Message Header"`
	SFT          []SFT                  `hl7:"2,display=Software Segment"`
	UAC          *UAC                   `hl7:"3,display=User Authentication Credential"`
	EQU          *EQU                   `hl7:"4,required,display=Equipment Detail"`
	Notification []EAN_U09_Notification `hl7:",required,display=Notification"`
	ROL          *ROL                   `hl7:"7,display=Role"`
}

// CommandResponse
type EAR_U08_CommandResponse struct {
	HL7               HL7Name                    `hl7:",name=EAR_U08_CommandResponse,type=tg"`
	ECD               *ECD                       `hl7:"5,required,display=Equipment Command"`
	SpecimenContainer *EAR_U08_SpecimenContainer `hl7:",display=Specimen Container"`
	ECR               *ECR                       `hl7:"8,required,display=Equipment Command Response"`
}

// SpecimenContainer
type EAR_U08_SpecimenContainer struct {
	HL7 HL7Name `hl7:",name=EAR_U08_SpecimenContainer,type=tg"`
	SAC *SAC    `hl7:"6,required,display=Specimen Container Detail"`
	SPM []SPM   `hl7:"7,display=Specimen"`
}

// Automated Equipment Response
//
// This message is used to send equipment responses to previously issued commands from one application to another (e.g.,
// automated Equipment to a Laboratory Automation System).
type EAR_U08 struct {
	HL7             HL7Name                   `hl7:",name=EAR_U08,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential"`
	EQU             *EQU                      `hl7:"4,required,display=Equipment Detail"`
	CommandResponse []EAR_U08_CommandResponse `hl7:",required,display=Command Response"`
	ROL             *ROL                      `hl7:"9,display=Role"`
}

// Enhanced Display Response
//
// This section is retained for backward compatibility as of V2.4.
type EDR_R07 struct {
	HL7 HL7Name `hl7:",name=EDR_R07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	MSA *MSA    `hl7:"3,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"4,display=Error"`
	QAK *QAK    `hl7:"5,required,display=Query Acknowledgment"`
	DSP []DSP   `hl7:"6,required,display=Display Data"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// InvoiceInformation
type EHC_E01_InvoiceInformation struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E01_InvoiceInformation,type=tg"`
	IVC                   *IVC                            `hl7:"4,required,display=Invoice"`
	PYE                   *PYE                            `hl7:"5,display=Payee Information"`
	CTD                   []CTD                           `hl7:"6,display=Contact Data"`
	AUT                   *AUT                            `hl7:"7,display=Authorization Information"`
	LOC                   []LOC                           `hl7:"8,display=Location Identification"`
	ROL                   []ROL                           `hl7:"9,display=Role"`
	ProductServiceSection []EHC_E01_ProductServiceSection `hl7:",required,display=Product Service Section"`
}

// ProductServiceSection
type EHC_E01_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E01_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"10,required,display=Product/Service Section"`
	ProductServiceGroup []EHC_E01_ProductServiceGroup `hl7:",required,display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E01_ProductServiceGroup struct {
	HL7                    HL7Name                          `hl7:",name=EHC_E01_ProductServiceGroup,type=tg"`
	PSG                    *PSG                             `hl7:"11,required,display=Product/Service Group"`
	LOC                    []LOC                            `hl7:"12,display=Location Identification"`
	ROL                    []ROL                            `hl7:"13,display=Role"`
	PatientInfo            []EHC_E01_PatientInfo            `hl7:",display=Patient Info"`
	ProductServiceLineItem []EHC_E01_ProductServiceLineItem `hl7:",required,display=Product Service Line Item"`
	Procedure              []EHC_E01_Procedure              `hl7:",display=Procedure"`
	InvoiceProcessing      []EHC_E01_InvoiceProcessing      `hl7:",display=Invoice Processing"`
}

// PatientInfo
type EHC_E01_PatientInfo struct {
	HL7       HL7Name             `hl7:",name=EHC_E01_PatientInfo,type=tg"`
	PID       *PID                `hl7:"14,required,display=Patient Identification"`
	PV1       *PV1                `hl7:"15,display=Patient Visit"`
	PV2       *PV2                `hl7:"16,display=Patient Visit - Additional Information"`
	ACC       []ACC               `hl7:"17,display=Accident"`
	Insurance []EHC_E01_Insurance `hl7:",required,display=Insurance"`
	Diagnosis []EHC_E01_Diagnosis `hl7:",display=Diagnosis"`
	OBX       []OBX               `hl7:"22,display=Observation/Result"`
}

// Insurance
type EHC_E01_Insurance struct {
	HL7 HL7Name `hl7:",name=EHC_E01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
}

// Diagnosis
type EHC_E01_Diagnosis struct {
	HL7 HL7Name `hl7:",name=EHC_E01_Diagnosis,type=tg"`
	DG1 *DG1    `hl7:"20,required,display=Diagnosis"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// ProductServiceLineItem
type EHC_E01_ProductServiceLineItem struct {
	HL7 HL7Name `hl7:",name=EHC_E01_ProductServiceLineItem,type=tg"`
	PSL *PSL    `hl7:"23,required,display=Product/Service Line Item"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
	ADJ []ADJ   `hl7:"25,display=Adjustment"`
	AUT *AUT    `hl7:"26,display=Authorization Information"`
	LOC []LOC   `hl7:"27,display=Location Identification"`
	ROL []ROL   `hl7:"28,display=Role"`
}

// Procedure
type EHC_E01_Procedure struct {
	HL7 HL7Name `hl7:",name=EHC_E01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"29,required,display=Procedures"`
	NTE []NTE   `hl7:"30,display=Notes and Comments"`
	ROL []ROL   `hl7:"31,display=Role"`
}

// InvoiceProcessing
type EHC_E01_InvoiceProcessing struct {
	HL7 HL7Name `hl7:",name=EHC_E01_InvoiceProcessing,type=tg"`
	IPR *IPR    `hl7:"32,required,display=Invoice Processing Results"`
}

// Submit HealthCare Services Invoice
//
// This message is used to submit a HealthCare Services Invoice to a TPA/Payer for processing and payment. A HealthCare Services
// Invoice may have 1 or more Product/Service Line Items (detail lines), grouped as a Product/Service Group. Each Product/Service
// Line Item represents a specific fee item. Refer to the beginning of this section for more information on the structure of
// a HealthCare Services Invoice.
type EHC_E01 struct {
	HL7                HL7Name                     `hl7:",name=EHC_E01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                []UAC                       `hl7:"3,display=User Authentication Credential"`
	InvoiceInformation *EHC_E01_InvoiceInformation `hl7:",required,display=Invoice Information"`
}

// InvoiceInformation
type EHC_E02_InvoiceInformation struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E02_InvoiceInformation,type=tg"`
	IVC                   *IVC                            `hl7:"4,required,display=Invoice"`
	PYE                   *PYE                            `hl7:"5,required,display=Payee Information"`
	CTD                   []CTD                           `hl7:"6,display=Contact Data"`
	NTE                   []NTE                           `hl7:"7,display=Notes and Comments"`
	ProductServiceSection []EHC_E02_ProductServiceSection `hl7:",display=Product Service Section"`
}

// ProductServiceSection
type EHC_E02_ProductServiceSection struct {
	HL7 HL7Name       `hl7:",name=EHC_E02_ProductServiceSection,type=tg"`
	PSS *PSS          `hl7:"8,required,display=Product/Service Section"`
	Psg []EHC_E02_Psg `hl7:",display=Psg"`
}

// Psg
type EHC_E02_Psg struct {
	HL7 HL7Name `hl7:",name=EHC_E02_Psg,type=tg"`
	PSG *PSG    `hl7:"9,required,display=Product/Service Group"`
	PSL []PSL   `hl7:"10,display=Product/Service Line Item"`
}

// Cancel HealthCare Services Invoice
//
// This message is used to cancel one HealthCare Services Invoices or one Product/Service Group in an Invoice or one Product/Service
// Line Item in an Invoice that have previously been submitted to a TPA/Payer for processing and payment.  Invoice Control
// codes are used to indicate the specific action being requested of the Payer (CN for Cancel Invoice, CG for Cancel Product/Service
// Group and CI for Cancel Product/Service Line Item). An Invoice that is cancelled must be marked as cancel only and not purged
// from the Payer Application's database.
type EHC_E02 struct {
	HL7                HL7Name                     `hl7:",name=EHC_E02,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                []UAC                       `hl7:"3,display=User Authentication Credential"`
	InvoiceInformation *EHC_E02_InvoiceInformation `hl7:",required,display=Invoice Information"`
}

// ReassessmentRequestInfo
type EHC_E04_ReassessmentRequestInfo struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E04_ReassessmentRequestInfo,type=tg"`
	IVC                   *IVC                            `hl7:"4,required,display=Invoice"`
	NTE                   []NTE                           `hl7:"5,display=Notes and Comments"`
	ProductServiceSection []EHC_E04_ProductServiceSection `hl7:",display=Product Service Section"`
}

// ProductServiceSection
type EHC_E04_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E04_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"6,required,display=Product/Service Section"`
	ProductServiceGroup []EHC_E04_ProductServiceGroup `hl7:",display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E04_ProductServiceGroup struct {
	HL7 HL7Name `hl7:",name=EHC_E04_ProductServiceGroup,type=tg"`
	PSG *PSG    `hl7:"7,required,display=Product/Service Group"`
	PSL []PSL   `hl7:"8,display=Product/Service Line Item"`
}

// Re-Assess HealthCare Services Invoice Request
//
// This message is used to submit a single Re-Assess HealthCare Services Invoice Request to a TPA/Payer for processing. The
// Re-Assess HealthCare Services Invoice Request is used by a Provider, to request review of a previously adjudicated HealthCare
// Services Invoice, with optional specification of a Product/Service Line Item within that Invoice. Note that the HealthCare
// Services Invoice need not necessarily be sent to a TPA/Payer using the EHC^E01 – Submit HealthCare Services Invoice: it
// may be manually submitted.
type EHC_E04 struct {
	HL7                     HL7Name                          `hl7:",name=EHC_E04,type=t"`
	MSH                     *MSH                             `hl7:"1,required,display=Message Header"`
	SFT                     []SFT                            `hl7:"2,display=Software Segment"`
	UAC                     []UAC                            `hl7:"3,display=User Authentication Credential"`
	ReassessmentRequestInfo *EHC_E04_ReassessmentRequestInfo `hl7:",required,display=Reassessment Request Info"`
}

// InvoiceProcessingResultsInfo
type EHC_E10_InvoiceProcessingResultsInfo struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E10_InvoiceProcessingResultsInfo,type=tg"`
	IPR                   *IPR                            `hl7:"6,required,display=Invoice Processing Results"`
	NTE                   []NTE                           `hl7:"7,display=Notes and Comments"`
	PYE                   *PYE                            `hl7:"8,required,display=Payee Information"`
	IN1                   *IN1                            `hl7:"9,required,display=Insurance"`
	IN2                   *IN2                            `hl7:"10,display=Insurance Additional Information"`
	IVC                   *IVC                            `hl7:"11,required,display=Invoice"`
	ProductServiceSection []EHC_E10_ProductServiceSection `hl7:",required,display=Product Service Section"`
}

// ProductServiceSection
type EHC_E10_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E10_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"12,required,display=Product/Service Section"`
	ProductServiceGroup []EHC_E10_ProductServiceGroup `hl7:",required,display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E10_ProductServiceGroup struct {
	HL7                    HL7Name                          `hl7:",name=EHC_E10_ProductServiceGroup,type=tg"`
	PSG                    *PSG                             `hl7:"13,required,display=Product/Service Group"`
	ProductServiceLineInfo []EHC_E10_ProductServiceLineInfo `hl7:",required,display=Product Service Line Info"`
}

// ProductServiceLineInfo
type EHC_E10_ProductServiceLineInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E10_ProductServiceLineInfo,type=tg"`
	PSL *PSL    `hl7:"14,required,display=Product/Service Line Item"`
	ADJ []ADJ   `hl7:"15,display=Adjustment"`
}

// Edit/Adjudication Results
//
// This message is used to send edit and/or adjudication results for a HealthCare Services Invoice. Edit/Adjudication results
// are sent to the same Network Application ID that originated the Invoice, which was specified as the Sending Application
// on MSH on the original HealthCare Services Invoice.
type EHC_E10 struct {
	HL7                          HL7Name                                `hl7:",name=EHC_E10,type=t"`
	MSH                          *MSH                                   `hl7:"1,required,display=Message Header"`
	SFT                          []SFT                                  `hl7:"2,display=Software Segment"`
	UAC                          []UAC                                  `hl7:"3,display=User Authentication Credential"`
	MSA                          *MSA                                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR                          []ERR                                  `hl7:"5,display=Error"`
	InvoiceProcessingResultsInfo []EHC_E10_InvoiceProcessingResultsInfo `hl7:",required,display=Invoice Processing Results Info"`
}

// Request
type EHC_E12_Request struct {
	HL7 HL7Name `hl7:",name=EHC_E12_Request,type=tg"`
	CTD *CTD    `hl7:"11,display=Contact Data"`
	OBR *OBR    `hl7:"12,required,display=Observation Request"`
	NTE *NTE    `hl7:"13,display=Notes and Comments"`
	OBX []OBX   `hl7:"14,display=Observation/Result"`
}

// Request Additional Information
//
// A Payer or TPA uses this message to request additional information in support of an Invoice or a (Pre) Authorization Request.
// Normally, this request would be sent following receipt of an E01 or E20 message.  However, it can also be sent following receipt
// of an E04 Re-Assess HealthCare Services Invoice Request.  In this latter case the request for additional information still
// has as its object the original invoice (which is now under review) rather than the Re-assessment request per se.
//
// The E12 can only be used to initiate a request for information and cannot be used to modify, place on hold or cancel an earlier
// request.  This message cannot be used to convey information on the status of a claim and/or adjudication results (i.e.,
// cannot be used in place of an E10 Edit/Adjudication Results message).
type EHC_E12 struct {
	HL7     HL7Name           `hl7:",name=EHC_E12,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     []UAC             `hl7:"3,display=User Authentication Credential"`
	RFI     *RFI              `hl7:"4,required,display=Request for Information"`
	CTD     []CTD             `hl7:"5,display=Contact Data"`
	IVC     *IVC              `hl7:"6,required,display=Invoice"`
	PSS     *PSS              `hl7:"7,required,display=Product/Service Section"`
	PSG     *PSG              `hl7:"8,required,display=Product/Service Group"`
	PID     *PID              `hl7:"9,display=Patient Identification"`
	PSL     []PSL             `hl7:"10,display=Product/Service Line Item"`
	Request []EHC_E12_Request `hl7:",required,display=Request"`
}

// Request
type EHC_E13_Request struct {
	HL7      HL7Name            `hl7:",name=EHC_E13_Request,type=tg"`
	CTD      *CTD               `hl7:"13,display=Contact Data"`
	OBR      *OBR               `hl7:"14,required,display=Observation Request"`
	NTE      *NTE               `hl7:"15,display=Notes and Comments"`
	Response []EHC_E13_Response `hl7:",required,display=Response"`
}

// Response
type EHC_E13_Response struct {
	HL7 HL7Name `hl7:",name=EHC_E13_Response,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/Result"`
	NTE *NTE    `hl7:"17,display=Notes and Comments"`
	TXA *TXA    `hl7:"18,display=Transcription Document Header"`
}

// Additional Information Response
//
// This message is used by a Provider to immediately respond to an EHC_E12 Request for Additional Information, in other words
// an automated response.  The EHC_E13 message cannot be sent unsolicited.
type EHC_E13 struct {
	HL7     HL7Name           `hl7:",name=EHC_E13,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     []UAC             `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	RFI     *RFI              `hl7:"6,required,display=Request for Information"`
	CTD     []CTD             `hl7:"7,display=Contact Data"`
	IVC     *IVC              `hl7:"8,required,display=Invoice"`
	PSS     *PSS              `hl7:"9,required,display=Product/Service Section"`
	PSG     *PSG              `hl7:"10,required,display=Product/Service Group"`
	PID     *PID              `hl7:"11,display=Patient Identification"`
	PSL     *PSL              `hl7:"12,display=Product/Service Line Item"`
	Request []EHC_E13_Request `hl7:",required,display=Request"`
}

// PaymentRemittanceHeaderInfo
type EHC_E15_PaymentRemittanceHeaderInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E15_PaymentRemittanceHeaderInfo,type=tg"`
	PMT *PMT    `hl7:"4,required,display=Payment Information"`
	PYE *PYE    `hl7:"5,required,display=Payee Information"`
}

// PaymentRemittanceDetailInfo
type EHC_E15_PaymentRemittanceDetailInfo struct {
	HL7                   HL7Name                         `hl7:",name=EHC_E15_PaymentRemittanceDetailInfo,type=tg"`
	IPR                   *IPR                            `hl7:"6,required,display=Invoice Processing Results"`
	IVC                   *IVC                            `hl7:"7,required,display=Invoice"`
	ProductServiceSection []EHC_E15_ProductServiceSection `hl7:",required,display=Product Service Section"`
}

// ProductServiceSection
type EHC_E15_ProductServiceSection struct {
	HL7                 HL7Name                       `hl7:",name=EHC_E15_ProductServiceSection,type=tg"`
	PSS                 *PSS                          `hl7:"8,required,display=Product/Service Section"`
	ProductServiceGroup []EHC_E15_ProductServiceGroup `hl7:",required,display=Product Service Group"`
}

// ProductServiceGroup
type EHC_E15_ProductServiceGroup struct {
	HL7         HL7Name               `hl7:",name=EHC_E15_ProductServiceGroup,type=tg"`
	PSG         *PSG                  `hl7:"9,required,display=Product/Service Group"`
	PslItemInfo []EHC_E15_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type EHC_E15_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E15_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"10,required,display=Product/Service Line Item"`
	ADJ []ADJ   `hl7:"11,display=Adjustment"`
}

// AdjustmentPayee
type EHC_E15_AdjustmentPayee struct {
	HL7 HL7Name `hl7:",name=EHC_E15_AdjustmentPayee,type=tg"`
	ADJ *ADJ    `hl7:"12,required,display=Adjustment"`
	ROL *ROL    `hl7:"13,display=Role"`
}

// Payment/Remittance Advice
//
// This message is used to send a payment/ remittance advice to a Payee for the payment of HealthCare Services Invoices and/or
// other adjustments.   The Payment/Remittance Advice can be sent to the originating Provider Application (Network Application
// ID) or alternately to the Payee's Network Application ID, depending on how the Payee has been configured by the Payer. If
// a Payment/Remittance Advice is paid by check, it typically has a 1 to 1 correspondence with a check number. However, there
// are occasions when one check number covers multiple Payment/Remittance Advices. This message does not enforce a 1 to 1
// relationship between check number and Payment/Remittance Advice. That is, the same check number (Check Number on PMT)
// can be used on multiple Payment/Remittance Advices.
type EHC_E15 struct {
	HL7                         HL7Name                               `hl7:",name=EHC_E15,type=t"`
	MSH                         *MSH                                  `hl7:"1,required,display=Message Header"`
	SFT                         []SFT                                 `hl7:"2,display=Software Segment"`
	UAC                         []UAC                                 `hl7:"3,display=User Authentication Credential"`
	PaymentRemittanceHeaderInfo *EHC_E15_PaymentRemittanceHeaderInfo  `hl7:",required,display=Payment Remittance Header Info"`
	PaymentRemittanceDetailInfo []EHC_E15_PaymentRemittanceDetailInfo `hl7:",display=Payment Remittance Detail Info"`
	AdjustmentPayee             []EHC_E15_AdjustmentPayee             `hl7:",display=Adjustment Payee"`
}

// AuthorizationRequest
type EHC_E20_AuthorizationRequest struct {
	HL7         HL7Name               `hl7:",name=EHC_E20_AuthorizationRequest,type=tg"`
	IVC         *IVC                  `hl7:"4,required,display=Invoice"`
	CTD         []CTD                 `hl7:"5,required,display=Contact Data"`
	LOC         []LOC                 `hl7:"6,display=Location Identification"`
	ROL         []ROL                 `hl7:"7,display=Role"`
	PatInfo     []EHC_E20_PatInfo     `hl7:",required,display=Pat Info"`
	PslItemInfo []EHC_E20_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PatInfo
type EHC_E20_PatInfo struct {
	HL7       HL7Name             `hl7:",name=EHC_E20_PatInfo,type=tg"`
	PID       *PID                `hl7:"8,required,display=Patient Identification"`
	ACC       []ACC               `hl7:"9,display=Accident"`
	Insurance []EHC_E20_Insurance `hl7:",required,display=Insurance"`
	Diagnosis []EHC_E20_Diagnosis `hl7:",display=Diagnosis"`
	OBX       []OBX               `hl7:"14,display=Observation/Result"`
}

// Insurance
type EHC_E20_Insurance struct {
	HL7 HL7Name `hl7:",name=EHC_E20_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
}

// Diagnosis
type EHC_E20_Diagnosis struct {
	HL7 HL7Name `hl7:",name=EHC_E20_Diagnosis,type=tg"`
	DG1 *DG1    `hl7:"12,required,display=Diagnosis"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// PslItemInfo
type EHC_E20_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E20_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"15,required,display=Product/Service Line Item"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
	ADJ []ADJ   `hl7:"17,display=Adjustment"`
	LOC []LOC   `hl7:"18,display=Location Identification"`
	ROL []ROL   `hl7:"19,display=Role"`
}

// Submit Authorization Request
//
// This message is used to submit a single Authorization Request to a TPA/Payer for authorization (for payment). An Authorization
// Request is made for one or more patients and may include 1 or more Product/Service Line Items (detail lines), each of which
// represents a specific, billable item or Payer allowed Treatment Plan.
type EHC_E20 struct {
	HL7                  HL7Name                       `hl7:",name=EHC_E20,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  []UAC                         `hl7:"3,display=User Authentication Credential"`
	AuthorizationRequest *EHC_E20_AuthorizationRequest `hl7:",required,display=Authorization Request"`
}

// AuthorizationRequest
type EHC_E21_AuthorizationRequest struct {
	HL7         HL7Name               `hl7:",name=EHC_E21_AuthorizationRequest,type=tg"`
	IVC         *IVC                  `hl7:"4,required,display=Invoice"`
	PslItemInfo []EHC_E21_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type EHC_E21_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=EHC_E21_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"5,required,display=Product/Service Line Item"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
	AUT *AUT    `hl7:"7,display=Authorization Information"`
}

// Cancel Authorization Request
//
// This message is used to cancel an Authorization Request, as a result of a previously submitted EHC^E20 – Submit Authorization
// Request message.
type EHC_E21 struct {
	HL7                  HL7Name                       `hl7:",name=EHC_E21,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  []UAC                         `hl7:"3,display=User Authentication Credential"`
	AuthorizationRequest *EHC_E21_AuthorizationRequest `hl7:",required,display=Authorization Request"`
}

// AuthorizationResponseInfo
type EHC_E24_AuthorizationResponseInfo struct {
	HL7         HL7Name               `hl7:",name=EHC_E24_AuthorizationResponseInfo,type=tg"`
	IVC         *IVC                  `hl7:"6,required,display=Invoice"`
	PslItemInfo []EHC_E24_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type EHC_E24_PslItemInfo struct {
	HL7             HL7Name                   `hl7:",name=EHC_E24_PslItemInfo,type=tg"`
	PSL             *PSL                      `hl7:"7,required,display=Product/Service Line Item"`
	AUT             *AUT                      `hl7:"8,display=Authorization Information"`
	PayerAdjustment []EHC_E24_PayerAdjustment `hl7:",display=Payer Adjustment"`
}

// PayerAdjustment
type EHC_E24_PayerAdjustment struct {
	HL7 HL7Name `hl7:",name=EHC_E24_PayerAdjustment,type=tg"`
	ADJ *ADJ    `hl7:"9,required,display=Adjustment"`
}

// Authorization Response
//
// This message is used to send results of an Authorization Request to a Provider Application. Authorization results are
// sent to the same Network Application ID that originated the Authorization Request, which was specified as the Sending
// Application on MSH on the original Authorization Request.
type EHC_E24 struct {
	HL7                       HL7Name                            `hl7:",name=EHC_E24,type=t"`
	MSH                       *MSH                               `hl7:"1,required,display=Message Header"`
	SFT                       []SFT                              `hl7:"2,display=Software Segment"`
	UAC                       []UAC                              `hl7:"3,display=User Authentication Credential"`
	MSA                       *MSA                               `hl7:"4,required,display=Message Acknowledgment"`
	ERR                       []ERR                              `hl7:"5,display=Error"`
	AuthorizationResponseInfo *EHC_E24_AuthorizationResponseInfo `hl7:",required,display=Authorization Response Info"`
}

// Embedded Query Language Query
//
// This section is retained for backward compatibility as of V2.4.
//
// This query provides an envelope with which a query expressed in a language (e.g., SQL) is packaged and sent to the responding
// system. It is meant to provide the maximum query function without reinventing the wheel.
//
// The EQQ with its EQL query defining segment supports free-form select statements, based on the query language of choice
// (e.g., SQL).
type EQQ_Q04 struct {
	HL7 HL7Name `hl7:",name=EQQ_Q04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	EQL *EQL    `hl7:"3,required,display=Embedded Query Language"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Event Replay Response
//
// This section is retained for backward compatibility as of V2.4.
type ERP_R09 struct {
	HL7 HL7Name `hl7:",name=ERP_R09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	MSA *MSA    `hl7:"3,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"4,display=Error"`
	QAK *QAK    `hl7:"5,required,display=Query Acknowledgment"`
	ERQ *ERQ    `hl7:"6,required,display=Event replay query"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Automated Equipment Status Request
//
// This message is used to send information concerning the location and status of specimens from one application to another
// (e.g., automated equipment to a Laboratory Automation System). The OBX segments attached to the SAC should be used for
// transfer of information not included in the SAC segment.
type ESR_U02 struct {
	HL7 HL7Name `hl7:",name=ESR_U02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	ROL *ROL    `hl7:"5,display=Role"`
}

// Automated Equipment Status Update
//
// This message is used to send information about the status of a device or equipment from one application to another (e.g.,
// automated device to a Laboratory Automation System). The status update can be sent unsolicited or as a response to the trigger
// "Automated Equipment Status Request."
type ESU_U01 struct {
	HL7 HL7Name `hl7:",name=ESU_U01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	ISD []ISD   `hl7:"5,display=Interaction Status Detail"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated Equipment Inventory Request
//
// This message is used to request information about inventory items from one application to another (e.g., Laboratory Automation
// System to automated equipment). The equipment specified in the EQU segment should respond with the information about
// inventory item requested in the INV segment (or all items).
type INR_U06 struct {
	HL7 HL7Name `hl7:",name=INR_U06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	INV []INV   `hl7:"5,required,display=Inventory Detail"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated Equipment Inventory Update
//
// This message is used to send information about inventory items from one application to another (e.g., automated Equipment
// to a Laboratory Automation System).
type INU_U05 struct {
	HL7 HL7Name `hl7:",name=INU_U05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	INV []INV   `hl7:"5,required,display=Inventory Detail"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated Equipment Log/Service Request
//
// This message is used to request log and/or service events from one application to another (e.g., Laboratory Automation
// System to automated equipment).
type LSR_U13 struct {
	HL7 HL7Name `hl7:",name=LSR_U13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	EQP []EQP   `hl7:"5,required,display=Equipment/log Service"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Automated Equipment Log/Service Update
//
// This message is used to send log and/or service events from one application to another (e.g., automated equipment to Laboratory
// Automation System).
type LSU_U12 struct {
	HL7 HL7Name `hl7:",name=LSU_U12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EQU *EQU    `hl7:"4,required,display=Equipment Detail"`
	EQP []EQP   `hl7:"5,required,display=Equipment/log Service"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// CommonOrder
type MDM_T01_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T01_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T01_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T01_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T01_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Original Document Notification
//
// This is a notification of the creation of a document without the accompanying content.
type MDM_T01 struct {
	HL7         HL7Name               `hl7:",name=MDM_T01,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T01_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
}

// CommonOrder
type MDM_T02_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T02_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T02_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T02_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T02_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Obxnte
type MDM_T02_Obxnte struct {
	HL7 HL7Name `hl7:",name=MDM_T02_Obxnte,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Original Document Notification and Content
//
// This is a notification of the creation of a document with the accompanying content.
type MDM_T02 struct {
	HL7         HL7Name               `hl7:",name=MDM_T02,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T02_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	Obxnte      []MDM_T02_Obxnte      `hl7:",required,display=Obxnte"`
}

// CommonOrder
type MDM_T03_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T03_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T03_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T03_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T03_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Document Status Change Notification
//
// This is a notification of a change in a status of a document without the accompanying content.
type MDM_T03 struct {
	HL7         HL7Name               `hl7:",name=MDM_T03,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T03_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
}

// CommonOrder
type MDM_T04_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T04_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T04_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T04_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T04_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Obxnte
type MDM_T04_Obxnte struct {
	HL7 HL7Name `hl7:",name=MDM_T04_Obxnte,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Document Status Change Notification and Content
//
// This is a notification of a change in a status of a document with the accompanying content.
type MDM_T04 struct {
	HL7         HL7Name               `hl7:",name=MDM_T04,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T04_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	Obxnte      []MDM_T04_Obxnte      `hl7:",required,display=Obxnte"`
}

// CommonOrder
type MDM_T05_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T05_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T05_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T05_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T05_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Document Addendum Notification
//
// This is a notification of an addendum to a document without the accompanying content.
type MDM_T05 struct {
	HL7         HL7Name               `hl7:",name=MDM_T05,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T05_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
}

// CommonOrder
type MDM_T06_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T06_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T06_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T06_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T06_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Obxnte
type MDM_T06_Obxnte struct {
	HL7 HL7Name `hl7:",name=MDM_T06_Obxnte,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Document Addendum Notification and Content
//
// This is a notification of an addendum to a document with the accompanying content.
type MDM_T06 struct {
	HL7         HL7Name               `hl7:",name=MDM_T06,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T06_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	Obxnte      []MDM_T06_Obxnte      `hl7:",required,display=Obxnte"`
}

// CommonOrder
type MDM_T07_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T07_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T07_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T07_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T07_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Document Edit Notification
//
// This is a notification of an edit to a document without the accompanying content
//
// Note: The only valid use of this trigger event is for documents whose availability status is “Unavailable,” i.e., the document
// has not been made available for patient care.
type MDM_T07 struct {
	HL7         HL7Name               `hl7:",name=MDM_T07,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T07_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
}

// CommonOrder
type MDM_T08_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T08_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T08_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T08_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T08_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Obxnte
type MDM_T08_Obxnte struct {
	HL7 HL7Name `hl7:",name=MDM_T08_Obxnte,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Document Edit Notification and Content
//
// This is a notification of an edit to a document with the accompanying content.
//
// Note: The only valid use of this trigger event is for documents whose availability status is "Unavailable," i.e., the document
// has not been made available for patient care.
type MDM_T08 struct {
	HL7         HL7Name               `hl7:",name=MDM_T08,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T08_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	Obxnte      []MDM_T08_Obxnte      `hl7:",required,display=Obxnte"`
}

// CommonOrder
type MDM_T09_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T09_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T09_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T09_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T09_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Document Replacement Notification
//
// This is a notification of replacement to a document without the accompanying content.
//
// Note: This trigger event is generally used when the original document availability status is “Available.”
type MDM_T09 struct {
	HL7         HL7Name               `hl7:",name=MDM_T09,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T09_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
}

// CommonOrder
type MDM_T10_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T10_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T10_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T10_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T10_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Obxnte
type MDM_T10_Obxnte struct {
	HL7 HL7Name `hl7:",name=MDM_T10_Obxnte,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Document Replacement Notification and Content
//
// This is a notification of replacement to a document with the accompanying content.
type MDM_T10 struct {
	HL7         HL7Name               `hl7:",name=MDM_T10,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T10_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
	Obxnte      []MDM_T10_Obxnte      `hl7:",required,display=Obxnte"`
}

// CommonOrder
type MDM_T11_CommonOrder struct {
	HL7    HL7Name          `hl7:",name=MDM_T11_CommonOrder,type=tg"`
	ORC    *ORC             `hl7:"7,required,display=Common Order"`
	Timing []MDM_T11_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"10,required,display=Observation Request"`
	NTE    []NTE            `hl7:"11,display=Notes and Comments"`
}

// Timing
type MDM_T11_Timing struct {
	HL7 HL7Name `hl7:",name=MDM_T11_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"8,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"9,display=Timing/Quantity Relationship"`
}

// Document Cancel Notification
//
// This is a notification of a cancellation of a document.   This trigger event should be used only for an original document with
// an availability status of “Unavailable.”  When a document has been made available for patient care, the process should
// be to replace the original document, which then becomes obsolete.  The replacement document describes why the erroneous
// information exists.
type MDM_T11 struct {
	HL7         HL7Name               `hl7:",name=MDM_T11,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	PID         *PID                  `hl7:"5,required,display=Patient Identification"`
	PV1         *PV1                  `hl7:"6,required,display=Patient Visit"`
	CommonOrder []MDM_T11_CommonOrder `hl7:",display=Common Order"`
	TXA         *TXA                  `hl7:"12,required,display=Transcription Document Header"`
}

// Master File Application Acknowledgment
//
// MFN_M01/MFK_M01 is retained for backward compatibility only as of v2.5 and later.  It is recommended that the specific
// non-deprecated master file messages that follow be used as they apply to new implementations (such as MFN_M02, MFN_M08,
// MFN_M09, etc.).
type MFK_M01 struct {
	HL7 HL7Name `hl7:",name=MFK_M01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	MSA *MSA    `hl7:"3,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"4,display=Error"`
	MFI *MFI    `hl7:"5,required,display=Master File Identification"`
	MFA []MFA   `hl7:"6,display=Master File Acknowledgment"`
}

// Staff/Practitioner Master File Application Acknowledgment
//
// The staff identification (STF), practitioner detail (PRA), practitioner organization unit segment (ORG), professional
// affiliation (AFF), language detail (LAN), educational detail (EDU), and certificate detail (CER) segments can be used
// to transmit master files information between systems. The STF segment provides general information about personnel;
// the PRA, ORG, AFF, LAN, EDU, CER and NTE segments provide detailed information for a staff member.
type MFK_M02 struct {
	HL7 HL7Name `hl7:",name=MFK_M02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Observation Master File Application Acknowledgment
//
// MFN_M03/MFK_M03 is retained for backward compatibility only as of v2.4 and later.  It is recommended that the specific
// master file messages which follow (MFN_M08, MFN_M09, MFN_M10, MFN_M11, and MFN_M12) be used as they apply to new implementations.
type MFK_M03 struct {
	HL7 HL7Name `hl7:",name=MFK_M03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	MSA *MSA    `hl7:"3,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"4,display=Error"`
	MFI *MFI    `hl7:"5,required,display=Master File Identification"`
	MFA []MFA   `hl7:"6,display=Master File Acknowledgment"`
}

// Charge Description Master File Application Acknowledgment
//
// The charge description (CDM) master file segment should be used in conjunction with the general master file segments.
// Interfacing systems often need not only to communicate data about a patient's detailed charges, but also to communicate
// the charge identification entries by which an application knows how to handle a particular charge code.  The charge description
// master is a master file.  The CDM segment below is a specially designed master file segment for interfacing charge description
// masters.  In the following message, the MFI-master file identifier should equal "CDM."  When the CDM segment is used in an
// MFN message, the abstract definition is as follows.
type MFK_M04 struct {
	HL7 HL7Name `hl7:",name=MFK_M04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Patient Location Master File Application Acknowledgment
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the inventory of healthcare patient locations, such as nursing units, rooms, beds, clinics, exam rooms,
// etc.  In a network environment, this segment can be used to define patient locations to other applications.  The segment
// also includes the readiness states and support locations for the patient locations.
type MFK_M05 struct {
	HL7 HL7Name `hl7:",name=MFK_M05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Clinical Study with Phases and Schedules Master File Application Acknowledgment
//
// MFK message for Clinical Study with phases and schedules
type MFK_M06 struct {
	HL7 HL7Name `hl7:",name=MFK_M06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Clinical Study without Phases but with Schedules Master File Application Acknowledgment
//
// MFK message for Clinical Study without phases but with schedules
type MFK_M07 struct {
	HL7 HL7Name `hl7:",name=MFK_M07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Observation (Numeric) Master File Application Acknowledgment
type MFK_M08 struct {
	HL7 HL7Name `hl7:",name=MFK_M08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Observation (Categorical) Master File Application Acknowledgment
type MFK_M09 struct {
	HL7 HL7Name `hl7:",name=MFK_M09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Observation Batteries Master File Application Acknowledgment
type MFK_M10 struct {
	HL7 HL7Name `hl7:",name=MFK_M10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Test/Calculated Observations Master File Application Acknowledgment
type MFK_M11 struct {
	HL7 HL7Name `hl7:",name=MFK_M11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
}

// Additional Basic Observation/Service Attributes Master File Application Acknowledgment
type MFK_M12 struct {
	HL7 HL7Name `hl7:",name=MFK_M12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// General Master File Application Acknowledgment
//
// The MFN General master file notification transaction is used where the master file is a simple one that contains only a key
// and the text value of that key.  Both values are carried in MFE-4 - Primary Key Value - MFE.  The specific master file being updated
// is identified by MFI-1 - Master File Identifier and MFI-2 - Master Files Application Identifier.
//
// The MFA segment carries acknowledgment information for the corresponding MFE segment (identified by MFA-5 - Primary
// Key Value - MFA).  Fields MFE-4 - Primary Key Value - MFE and MFA-5 - Primary Key Value - MFA provide the link between the corresponding
// segments.
type MFK_M13 struct {
	HL7 HL7Name `hl7:",name=MFK_M13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Site Defined Master File Application Acknowledgment
//
// The MFN Site defined master file notification transaction is used where the master file is not a simple one (as defined for
// MFN^M13) and is not a transaction type currently defined by HL7, but rather requires one or more HL7 and/or 'Z' segments
// to carry the master file information.
//
// The master file record identified by the MFE segment is contained in Z-segments immediately following the MFE segment,
// and is denoted by "..." in the MFN abstract message definition given above.  This record may be either a flat record contained
// in a single segment, or a complex record needing more than a single segment to carry its data and (usually hierarchical)
// structure.
//
// The definition of this transaction and the associated abstract message structure code (as defined in MSH-9 - Message Type,
// denoted by MFN_Znn above) are subject to site negotiation.  Refer to Chapter 2, section 2.17, "Local Extension" for additional
// information on 'Z' abstract message structure code definition.
type MFK_M14 struct {
	HL7 HL7Name `hl7:",name=MFK_M14,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Inventory Item Master File Application Acknowledgment
//
// This section is concerned with describing a master file message that should be used to communicate information that relates
// to the inventory of items that can be used to perform an ordered service.  While an order specifies a service that is represented
// in an Other Observation/Service Item master file, this message is concerned with communicating attributes of those orderable
// items (for example lot number and expiration date) that are represented in the Other Observation/Service Item master
// file.  These attributes are more granular than can be represented in the Other Observation/Service Item master file as
// there may be multiple items in inventory that meet the characteristics of the Service Item but have different specific
// characteristics, e.g., multiple lots of a vaccine.
type MFK_M15 struct {
	HL7 HL7Name `hl7:",name=MFK_M15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Enhanced Inventory Item Master File Application Acknowledgment
//
// This section describes a master file message designed to communicate information that relates to the sharing of material
// item master catalog and material item-inventory information between materials management systems and other systems
// such as surgical and immunization systems.  The synchronization of the "item master" between systems and across the enterprise
// enables the success of the subsequent interfacing of transactions such as: material item requisitions (pre and post case),
// accounts payable invoices for the payment of material items, journal entries generated from the issue of items to departments
// or other inventory locations, and patient charges that allow a customer to improve patient care through the better management
// of materials.  To face budget challenges, healthcare organizations need materials management systems that integrate
// with finance to automate logistics, eliminate paperwork and analyze data to improve efficiency and reduce overall costs.
// This process is a major contributor to improving the customers' bottom line by helping to eliminate materials waste, streamline
// ordering, ensure accurate payment of materials purchased, ensure accurate billing for materials used, and an accurate
// presentation of the financial statements of a healthcare facility.
type MFK_M16 struct {
	HL7 HL7Name `hl7:",name=MFK_M16,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// DRG Master File Application Acknowledgment
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the DRG basic information, such as relative weight, lower and upper trim points, etc.
type MFK_M17 struct {
	HL7 HL7Name `hl7:",name=MFK_M17,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR []ERR   `hl7:"5,display=Error"`
	MFI *MFI    `hl7:"6,required,display=Master File Identification"`
	MFA []MFA   `hl7:"7,display=Master File Acknowledgment"`
}

// Mf
type MFN_M01_Mf struct {
	HL7 HL7Name `hl7:",name=MFN_M01_Mf,type=tg"`
	MFE *MFE    `hl7:"4,required,display=Master File Entry"`
}

// Master File Notification
//
// MFN_M01 is retained for backward compatibility only as of v2.5 and later.  It is recommended that the specific non-deprecated
// master file messages that follow be used as they apply to new implementations (such as MFN_M02, MFN_M08, MFN_M09, etc.).
type MFN_M01 struct {
	HL7 HL7Name      `hl7:",name=MFN_M01,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	SFT []SFT        `hl7:"2,display=Software Segment"`
	MFI *MFI         `hl7:"3,required,display=Master File Identification"`
	Mf  []MFN_M01_Mf `hl7:",required,display=Mf"`
}

// MfStaff
type MFN_M02_MfStaff struct {
	HL7 HL7Name `hl7:",name=MFN_M02_MfStaff,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	STF *STF    `hl7:"6,required,display=Staff Identification"`
	PRA []PRA   `hl7:"7,display=Practitioner Detail"`
	ORG []ORG   `hl7:"8,display=Practitioner Organization Unit"`
	AFF []AFF   `hl7:"9,display=Professional Affiliation"`
	LAN []LAN   `hl7:"10,display=Language Detail"`
	EDU []EDU   `hl7:"11,display=Educational Detail"`
	CER []CER   `hl7:"12,display=Certificate Detail"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Staff/Practitioner Master File Notification
//
// The staff identification (STF), practitioner detail (PRA), practitioner organization unit segment (ORG), professional
// affiliation (AFF), language detail (LAN), educational detail (EDU), and certificate detail (CER) segments can be used
// to transmit master files information between systems. The STF segment provides general information about personnel;
// the PRA, ORG, AFF, LAN, EDU, CER and NTE segments provide detailed information for a staff member.
type MFN_M02 struct {
	HL7     HL7Name           `hl7:",name=MFN_M02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MFI     *MFI              `hl7:"4,required,display=Master File Identification"`
	MfStaff []MFN_M02_MfStaff `hl7:",required,display=Mf Staff"`
}

// MfTest
type MFN_M03_MfTest struct {
	HL7 HL7Name `hl7:",name=MFN_M03_MfTest,type=tg"`
	MFE *MFE    `hl7:"4,required,display=Master File Entry"`
	OM1 *OM1    `hl7:"5,required,display=General Segment"`
}

// Test/Observation Master File Notification
//
// MFN_M03 is retained for backward compatibility only as of v2.4 and later.  It is recommended that the specific master file
// messages which follow (MFN_M08, MFN_M09, MFN_M10, MFN_M11, and MFN_M12) be used as they apply to new implementations.
type MFN_M03 struct {
	HL7    HL7Name          `hl7:",name=MFN_M03,type=t"`
	MSH    *MSH             `hl7:"1,required,display=Message Header"`
	SFT    []SFT            `hl7:"2,display=Software Segment"`
	MFI    *MFI             `hl7:"3,required,display=Master File Identification"`
	MfTest []MFN_M03_MfTest `hl7:",required,display=Mf Test"`
}

// MfCdm
type MFN_M04_MfCdm struct {
	HL7 HL7Name `hl7:",name=MFN_M04_MfCdm,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	CDM *CDM    `hl7:"6,required,display=Charge Description Master"`
	PRC []PRC   `hl7:"7,display=Pricing"`
}

// Charge Description Master File Notification
//
// The charge description (CDM) master file segment should be used in conjunction with the general master file segments.
// Interfacing systems often need not only to communicate data about a patient's detailed charges, but also to communicate
// the charge identification entries by which an application knows how to handle a particular charge code.  The charge description
// master is a master file.  The CDM segment below is a specially designed master file segment for interfacing charge description
// masters.  In the following message, the MFI-master file identifier should equal "CDM."  When the CDM segment is used in an
// MFN message, the abstract definition is as follows.
type MFN_M04 struct {
	HL7   HL7Name         `hl7:",name=MFN_M04,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential"`
	MFI   *MFI            `hl7:"4,required,display=Master File Identification"`
	MfCdm []MFN_M04_MfCdm `hl7:",required,display=Mf Cdm"`
}

// MfLocation
type MFN_M05_MfLocation struct {
	HL7       HL7Name             `hl7:",name=MFN_M05_MfLocation,type=tg"`
	MFE       *MFE                `hl7:"5,required,display=Master File Entry"`
	LOC       *LOC                `hl7:"6,required,display=Location Identification"`
	LCH       []LCH               `hl7:"7,display=Location Characteristic"`
	LRL       []LRL               `hl7:"8,display=Location Relationship"`
	MfLocDept []MFN_M05_MfLocDept `hl7:",required,display=Mf Loc Dept"`
}

// MfLocDept
type MFN_M05_MfLocDept struct {
	HL7 HL7Name `hl7:",name=MFN_M05_MfLocDept,type=tg"`
	LDP *LDP    `hl7:"9,required,display=Location Department"`
	LCH []LCH   `hl7:"10,display=Location Characteristic"`
	LCC []LCC   `hl7:"11,display=Location Charge Code"`
}

// Patient Location Master File Notification
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the inventory of healthcare patient locations, such as nursing units, rooms, beds, clinics, exam rooms,
// etc.  In a network environment, this segment can be used to define patient locations to other applications.  The segment
// also includes the readiness states and support locations for the patient locations.
//
// The LOC, LCH, LRL, LDP, and LCC segments must be preceded by the MFI and MFE segments, as described in Section 8.5, "GENERAL
// MASTER FILE SEGMENTS."  In the following message, the MFI-1 - Master File Identifier field should equal "LOC"
type MFN_M05 struct {
	HL7        HL7Name              `hl7:",name=MFN_M05,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	SFT        []SFT                `hl7:"2,display=Software Segment"`
	UAC        *UAC                 `hl7:"3,display=User Authentication Credential"`
	MFI        *MFI                 `hl7:"4,required,display=Master File Identification"`
	MfLocation []MFN_M05_MfLocation `hl7:",required,display=Mf Location"`
}

// MfClinStudy
type MFN_M06_MfClinStudy struct {
	HL7                HL7Name                      `hl7:",name=MFN_M06_MfClinStudy,type=tg"`
	MFE                *MFE                         `hl7:"5,required,display=Master File Entry"`
	CM0                *CM0                         `hl7:"6,required,display=Clinical Study Master"`
	MfPhaseSchedDetail []MFN_M06_MfPhaseSchedDetail `hl7:",display=Mf Phase Sched Detail"`
}

// MfPhaseSchedDetail
type MFN_M06_MfPhaseSchedDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M06_MfPhaseSchedDetail,type=tg"`
	CM1 *CM1    `hl7:"7,required,display=Clinical Study Phase Master"`
	CM2 []CM2   `hl7:"8,display=Clinical Study Schedule Master"`
}

// Clinical Study with Phases and Schedules Master File Notification
//
// MFN message for Clinical Study with phases and schedules
type MFN_M06 struct {
	HL7         HL7Name               `hl7:",name=MFN_M06,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	MFI         *MFI                  `hl7:"4,required,display=Master File Identification"`
	MfClinStudy []MFN_M06_MfClinStudy `hl7:",required,display=Mf Clin Study"`
}

// MfClinStudySched
type MFN_M07_MfClinStudySched struct {
	HL7 HL7Name `hl7:",name=MFN_M07_MfClinStudySched,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	CM0 *CM0    `hl7:"6,required,display=Clinical Study Master"`
	CM2 []CM2   `hl7:"7,display=Clinical Study Schedule Master"`
}

// Clinical Study Without Phases But With Schedules Master File Notification
//
// MFN message for Clinical Study without phases but with schedules
type MFN_M07 struct {
	HL7              HL7Name                    `hl7:",name=MFN_M07,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	SFT              []SFT                      `hl7:"2,display=Software Segment"`
	UAC              *UAC                       `hl7:"3,display=User Authentication Credential"`
	MFI              *MFI                       `hl7:"4,required,display=Master File Identification"`
	MfClinStudySched []MFN_M07_MfClinStudySched `hl7:",required,display=Mf Clin Study Sched"`
}

// MfTestNumeric
type MFN_M08_MfTestNumeric struct {
	HL7 HL7Name `hl7:",name=MFN_M08_MfTestNumeric,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	OM1 *OM1    `hl7:"6,required,display=General Segment"`
	OM2 *OM2    `hl7:"7,display=Numeric Observation"`
	OM3 *OM3    `hl7:"8,display=Categorical Service/Test/Observation"`
	OM4 *OM4    `hl7:"9,display=Observations That Require Specimens"`
}

// Test/Observation (Numeric) Master File Notification
type MFN_M08 struct {
	HL7           HL7Name                 `hl7:",name=MFN_M08,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MFI           *MFI                    `hl7:"4,required,display=Master File Identification"`
	MfTestNumeric []MFN_M08_MfTestNumeric `hl7:",required,display=Mf Test Numeric"`
}

// MfTestCategorical
type MFN_M09_MfTestCategorical struct {
	HL7             HL7Name                  `hl7:",name=MFN_M09_MfTestCategorical,type=tg"`
	MFE             *MFE                     `hl7:"5,required,display=Master File Entry"`
	OM1             *OM1                     `hl7:"6,required,display=General Segment"`
	MfTestCatDetail *MFN_M09_MfTestCatDetail `hl7:",display=Mf Test Cat Detail"`
}

// MfTestCatDetail
type MFN_M09_MfTestCatDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M09_MfTestCatDetail,type=tg"`
	OM3 *OM3    `hl7:"7,required,display=Categorical Service/Test/Observation"`
	OM4 []OM4   `hl7:"8,display=Observations That Require Specimens"`
}

// Test/Observation (Categorical) Master File Notification
type MFN_M09 struct {
	HL7               HL7Name                     `hl7:",name=MFN_M09,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential"`
	MFI               *MFI                        `hl7:"4,required,display=Master File Identification"`
	MfTestCategorical []MFN_M09_MfTestCategorical `hl7:",required,display=Mf Test Categorical"`
}

// MfTestBatteries
type MFN_M10_MfTestBatteries struct {
	HL7              HL7Name                   `hl7:",name=MFN_M10_MfTestBatteries,type=tg"`
	MFE              *MFE                      `hl7:"5,required,display=Master File Entry"`
	OM1              *OM1                      `hl7:"6,required,display=General Segment"`
	MfTestBattDetail *MFN_M10_MfTestBattDetail `hl7:",display=Mf Test Batt Detail"`
}

// MfTestBattDetail
type MFN_M10_MfTestBattDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M10_MfTestBattDetail,type=tg"`
	OM5 *OM5    `hl7:"7,required,display=Observation Batteries (Sets)"`
	OM4 []OM4   `hl7:"8,display=Observations That Require Specimens"`
}

// Test/Observation Batteries Master File Notification
type MFN_M10 struct {
	HL7             HL7Name                   `hl7:",name=MFN_M10,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential"`
	MFI             *MFI                      `hl7:"4,required,display=Master File Identification"`
	MfTestBatteries []MFN_M10_MfTestBatteries `hl7:",required,display=Mf Test Batteries"`
}

// MfTestCalculated
type MFN_M11_MfTestCalculated struct {
	HL7              HL7Name                   `hl7:",name=MFN_M11_MfTestCalculated,type=tg"`
	MFE              *MFE                      `hl7:"5,required,display=Master File Entry"`
	OM1              *OM1                      `hl7:"6,required,display=General Segment"`
	MfTestCalcDetail *MFN_M11_MfTestCalcDetail `hl7:",display=Mf Test Calc Detail"`
}

// MfTestCalcDetail
type MFN_M11_MfTestCalcDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M11_MfTestCalcDetail,type=tg"`
	OM6 *OM6    `hl7:"7,required,display=Observations that are Calculated from Other Observations"`
	OM2 *OM2    `hl7:"8,required,display=Numeric Observation"`
}

// Test/Calculated Observations Master File Notification
type MFN_M11 struct {
	HL7              HL7Name                    `hl7:",name=MFN_M11,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	SFT              []SFT                      `hl7:"2,display=Software Segment"`
	UAC              *UAC                       `hl7:"3,display=User Authentication Credential"`
	MFI              *MFI                       `hl7:"4,required,display=Master File Identification"`
	MfTestCalculated []MFN_M11_MfTestCalculated `hl7:",required,display=Mf Test Calculated"`
}

// MfObsAttributes
type MFN_M12_MfObsAttributes struct {
	HL7 HL7Name `hl7:",name=MFN_M12_MfObsAttributes,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	OM1 *OM1    `hl7:"6,required,display=General Segment"`
	OM7 *OM7    `hl7:"7,display=Additional Basic Attributes"`
}

// Additional Basic Observation/Service Attributes Master File Notification
type MFN_M12 struct {
	HL7             HL7Name                   `hl7:",name=MFN_M12,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential"`
	MFI             *MFI                      `hl7:"4,required,display=Master File Identification"`
	MfObsAttributes []MFN_M12_MfObsAttributes `hl7:",required,display=Mf Obs Attributes"`
}

// General Master File Notification
//
// The MFN General master file notification transaction is used where the master file is a simple one that contains only a key
// and the text value of that key.  Both values are carried in MFE-4 - Primary Key Value - MFE.  The specific master file being updated
// is identified by MFI-1 - Master File Identifier and MFI-2 - Master Files Application Identifier.
type MFN_M13 struct {
	HL7 HL7Name `hl7:",name=MFN_M13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MFI *MFI    `hl7:"4,required,display=Master File Identification"`
	MFE []MFE   `hl7:"5,required,display=Master File Entry"`
}

// MfSiteDefined
type MFN_M14_MfSiteDefined struct {
	HL7 HL7Name `hl7:",name=MFN_M14_MfSiteDefined,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
}

// Site Defined Master File Notification
//
// The MFN Site defined master file notification transaction is used where the master file is not a simple one (as defined for
// MFN_M13) and is not a transaction type currently defined by HL7, but rather requires one or more HL7 and/or 'Z' segments
// to carry the master file information.
type MFN_M14 struct {
	HL7           HL7Name                 `hl7:",name=MFN_M14,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MFI           *MFI                    `hl7:"4,required,display=Master File Identification"`
	MfSiteDefined []MFN_M14_MfSiteDefined `hl7:",required,display=Mf Site Defined"`
}

// MfInvItem
type MFN_M15_MfInvItem struct {
	HL7 HL7Name `hl7:",name=MFN_M15_MfInvItem,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	IIM *IIM    `hl7:"6,required,display=Inventory Item Master"`
}

// Inventory Item Master File Notification
//
// This section is concerned with describing a master file message that should be used to communicate information that relates
// to the inventory of items that can be used to perform an ordered service.  While an order specifies a service that is represented
// in an Other Observation/Service Item master file, this message is concerned with communicating attributes of those orderable
// items (for example lot number and expiration date) that are represented in the Other Observation/Service Item master
// file.  These attributes are more granular than can be represented in the Other Observation/Service Item master file as
// there may be multiple items in inventory that meet the characteristics of the Service Item but have different specific
// characteristics, e.g., multiple lots of a vaccine.
type MFN_M15 struct {
	HL7       HL7Name             `hl7:",name=MFN_M15,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	MFI       *MFI                `hl7:"4,required,display=Master File Identification"`
	MfInvItem []MFN_M15_MfInvItem `hl7:",required,display=Mf Inv Item"`
}

// MaterialItemRecord
type MFN_M16_MaterialItemRecord struct {
	HL7              HL7Name                    `hl7:",name=MFN_M16_MaterialItemRecord,type=tg"`
	MFE              *MFE                       `hl7:"5,required,display=Master File Entry"`
	ITM              *ITM                       `hl7:"6,required,display=Material Item"`
	NTE              []NTE                      `hl7:"7,display=Notes and Comments"`
	Sterilization    []MFN_M16_Sterilization    `hl7:",display=Sterilization"`
	PurchasingVendor []MFN_M16_PurchasingVendor `hl7:",display=Purchasing Vendor"`
	MaterialLocation []MFN_M16_MaterialLocation `hl7:",display=Material Location"`
}

// Sterilization
type MFN_M16_Sterilization struct {
	HL7 HL7Name `hl7:",name=MFN_M16_Sterilization,type=tg"`
	STZ *STZ    `hl7:"8,required,display=Sterilization Parameter"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// PurchasingVendor
type MFN_M16_PurchasingVendor struct {
	HL7       HL7Name             `hl7:",name=MFN_M16_PurchasingVendor,type=tg"`
	VND       *VND                `hl7:"10,required,display=Purchasing Vendor"`
	Packaging []MFN_M16_Packaging `hl7:",display=Packaging"`
}

// Packaging
type MFN_M16_Packaging struct {
	HL7 HL7Name `hl7:",name=MFN_M16_Packaging,type=tg"`
	PKG *PKG    `hl7:"11,required,display=Packaging Segment"`
	PCE []PCE   `hl7:"12,display=Patient Charge Cost Center Exception"`
}

// MaterialLocation
type MFN_M16_MaterialLocation struct {
	HL7 HL7Name `hl7:",name=MFN_M16_MaterialLocation,type=tg"`
	IVT *IVT    `hl7:"13,required,display=Material Location"`
	ILT []ILT   `hl7:"14,display=Material Lot Segment"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Enhanced Inventory Item Master File Notification
//
// This section describes a master file message designed to communicate information that relates to the sharing of material
// item master catalog and material item-inventory information between materials management systems and other systems
// such as surgical and immunization systems.  The synchronization of the "item master" between systems and across the enterprise
// enables the success of the subsequent interfacing of transactions such as: material item requisitions (pre and post case),
// accounts payable invoices for the payment of material items, journal entries generated from the issue of items to departments
// or other inventory locations, and patient charges that allow a customer to improve patient care through the better management
// of materials.  To face budget challenges, healthcare organizations need materials management systems that integrate
// with finance to automate logistics, eliminate paperwork and analyze data to improve efficiency and reduce overall costs.
// This process is a major contributor to improving the customers' bottom line by helping to eliminate materials waste, streamline
// ordering, ensure accurate payment of materials purchased, ensure accurate billing for materials used, and an accurate
// presentation of the financial statements of a healthcare facility.
type MFN_M16 struct {
	HL7                HL7Name                      `hl7:",name=MFN_M16,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential"`
	MFI                *MFI                         `hl7:"4,required,display=Master File Identification"`
	MaterialItemRecord []MFN_M16_MaterialItemRecord `hl7:",required,display=Material Item Record"`
}

// MfDrg
type MFN_M17_MfDrg struct {
	HL7 HL7Name `hl7:",name=MFN_M17_MfDrg,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	DMI *DMI    `hl7:"6,required,display=DRG Master File Information"`
}

// DRG Master File
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the DRG basic information, such as relative weight, lower and upper trim points, etc.
//
// The DMI segment must be preceded by the MFI and MFE segments, as described in Section 8.5, GENERAL MASTER FILE SEGMENTS.
// In the following message, the MFI-1 - Master File Identifier field should equal "DMI".
type MFN_M17 struct {
	HL7   HL7Name         `hl7:",name=MFN_M17,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential"`
	MFI   *MFI            `hl7:"4,required,display=Master File Identification"`
	MfDrg []MFN_M17_MfDrg `hl7:",required,display=Mf Drg"`
}

// Query for master file record
//
// The MFQ/MFR transaction is retained for backward compatibility as of v2.5 and later.
type MFQ_M01 struct {
	HL7 HL7Name `hl7:",name=MFQ_M01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// MfQuery
type MFR_M01_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M01_MfQuery,type=tg"`
	MFE *MFE    `hl7:"10,required,display=Master File Entry"`
}

// Master files response
//
// The MFQ/MFR transaction is retained for backward compatibility as of v2.5 and later. See conformance based queries as
// defined in Chapter 5. Refer to Section 8.4.5 for an example of a master file conformance based query.
type MFR_M01 struct {
	HL7     HL7Name           `hl7:",name=MFR_M01,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"8,display=Original style query filter"`
	MFI     *MFI              `hl7:"9,required,display=Master File Identification"`
	MfQuery []MFR_M01_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"11,display=Continuation Pointer"`
}

// MfQuery
type MFR_M04_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M04_MfQuery,type=tg"`
	MFE *MFE    `hl7:"10,required,display=Master File Entry"`
	CDM *CDM    `hl7:"11,required,display=Charge Description Master"`
	PRC []PRC   `hl7:"12,display=Pricing"`
}

// Master files response
//
// Master Files Query Response: The MFQ//MFR transaction is retained for backward compatibility as of v2.5.
type MFR_M04 struct {
	HL7     HL7Name           `hl7:",name=MFR_M04,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"8,display=Original style query filter"`
	MFI     *MFI              `hl7:"9,required,display=Master File Identification"`
	MfQuery []MFR_M04_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"13,display=Continuation Pointer"`
}

// MfQuery
type MFR_M05_MfQuery struct {
	HL7        HL7Name              `hl7:",name=MFR_M05_MfQuery,type=tg"`
	MFE        *MFE                 `hl7:"10,required,display=Master File Entry"`
	LOC        *LOC                 `hl7:"11,required,display=Location Identification"`
	LCH        []LCH                `hl7:"12,display=Location Characteristic"`
	LRL        []LRL                `hl7:"13,display=Location Relationship"`
	MfLocation []MFR_M05_MfLocation `hl7:",required,display=Mf Location"`
}

// MfLocation
type MFR_M05_MfLocation struct {
	HL7 HL7Name `hl7:",name=MFR_M05_MfLocation,type=tg"`
	LDP *LDP    `hl7:"14,required,display=Location Department"`
	LCH []LCH   `hl7:"15,display=Location Characteristic"`
	LCC []LCC   `hl7:"16,display=Location Charge Code"`
}

// Master files response
//
// The MFQ//MFR transactiomfrn is retained for backward compatibility as of v2.5.
type MFR_M05 struct {
	HL7     HL7Name           `hl7:",name=MFR_M05,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"8,display=Original style query filter"`
	MFI     *MFI              `hl7:"9,required,display=Master File Identification"`
	MfQuery []MFR_M05_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"17,display=Continuation Pointer"`
}

// MfQuery
type MFR_M06_MfQuery struct {
	HL7             HL7Name                   `hl7:",name=MFR_M06_MfQuery,type=tg"`
	MFE             *MFE                      `hl7:"9,required,display=Master File Entry"`
	CM0             *CM0                      `hl7:"10,required,display=Clinical Study Master"`
	MfClinicalStudy []MFR_M06_MfClinicalStudy `hl7:",display=Mf Clinical Study"`
}

// MfClinicalStudy
type MFR_M06_MfClinicalStudy struct {
	HL7 HL7Name `hl7:",name=MFR_M06_MfClinicalStudy,type=tg"`
	CM1 *CM1    `hl7:"11,required,display=Clinical Study Phase Master"`
	CM2 []CM2   `hl7:"12,display=Clinical Study Schedule Master"`
}

// Master files response
//
// The MFQ//MFR transactiomfrn is retained for backward compatibility as of v2.5.
type MFR_M06 struct {
	HL7     HL7Name           `hl7:",name=MFR_M06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	MSA     *MSA              `hl7:"3,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"4,display=Error"`
	QAK     *QAK              `hl7:"5,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"6,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"7,display=Original style query filter"`
	MFI     *MFI              `hl7:"8,required,display=Master File Identification"`
	MfQuery []MFR_M06_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"13,display=Continuation Pointer"`
}

// MfQuery
type MFR_M07_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M07_MfQuery,type=tg"`
	MFE *MFE    `hl7:"9,required,display=Master File Entry"`
	CM0 *CM0    `hl7:"10,required,display=Clinical Study Master"`
	CM2 []CM2   `hl7:"11,display=Clinical Study Schedule Master"`
}

// Master files response
//
// Master Files Query Response: The MFQ//MFR transaction is retained for backward compatibility as of v2.5.
type MFR_M07 struct {
	HL7     HL7Name           `hl7:",name=MFR_M07,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	MSA     *MSA              `hl7:"3,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"4,display=Error"`
	QAK     *QAK              `hl7:"5,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"6,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"7,display=Original style query filter"`
	MFI     *MFI              `hl7:"8,required,display=Master File Identification"`
	MfQuery []MFR_M07_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"12,display=Continuation Pointer"`
}

// ClockAndStatsWithNotes
type NMD_N02_ClockAndStatsWithNotes struct {
	HL7       HL7Name            `hl7:",name=NMD_N02_ClockAndStatsWithNotes,type=tg"`
	Clock     *NMD_N02_Clock     `hl7:",display=Clock"`
	AppStats  *NMD_N02_AppStats  `hl7:",display=App Stats"`
	AppStatus *NMD_N02_AppStatus `hl7:",display=App Status"`
}

// Clock
type NMD_N02_Clock struct {
	HL7 HL7Name `hl7:",name=NMD_N02_Clock,type=tg"`
	NCK *NCK    `hl7:"4,required,display=System Clock"`
	NTE []NTE   `hl7:"5,display=Notes and Comments"`
}

// AppStats
type NMD_N02_AppStats struct {
	HL7 HL7Name `hl7:",name=NMD_N02_AppStats,type=tg"`
	NST *NST    `hl7:"6,required,display=Application control level statistics"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// AppStatus
type NMD_N02_AppStatus struct {
	HL7 HL7Name `hl7:",name=NMD_N02_AppStatus,type=tg"`
	NSC *NSC    `hl7:"8,required,display=Application Status Change"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// Application Management Data
//
// The N02 event signifies when an unsolicited update (UU) Application Management Data message (NMD) is created by on application
// to transmit application management information to other applications.  In this case, the initiating application sends
// an NMD message as an unsolicited update (UU) containing application management information to a receiving application,
// which responds with a generic acknowledgement message (ACK).
type NMD_N02 struct {
	HL7                    HL7Name                          `hl7:",name=NMD_N02,type=t"`
	MSH                    *MSH                             `hl7:"1,required,display=Message Header"`
	SFT                    []SFT                            `hl7:"2,display=Software Segment"`
	UAC                    *UAC                             `hl7:"3,display=User Authentication Credential"`
	ClockAndStatsWithNotes []NMD_N02_ClockAndStatsWithNotes `hl7:",required,display=Clock And Stats With Notes"`
}

// QryWithDetail
type NMQ_N01_QryWithDetail struct {
	HL7 HL7Name `hl7:",name=NMQ_N01_QryWithDetail,type=tg"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
}

// ClockAndStatistics
type NMQ_N01_ClockAndStatistics struct {
	HL7 HL7Name `hl7:",name=NMQ_N01_ClockAndStatistics,type=tg"`
	NCK *NCK    `hl7:"6,display=System Clock"`
	NST *NST    `hl7:"7,display=Application control level statistics"`
	NSC *NSC    `hl7:"8,display=Application Status Change"`
}

// Application Management Query
//
// Note: The MFQ/MFR transaction is retained for backward compatibility as of v2.5.
//
// The N01 event signifies when the NMQ (Application Management Query) message is used by one application to make application
// control-level requests for information or action to another application.  It has three segments, the NCK segment (system
// clock), the NST segment (application control-level statistics), and the NSC segment (application control-level status
// change). At least one of these three segments must be present in the NMQ message. If a segment is present in the NMQ message,
// the corresponding segment needs to be present in the NMR message to return the requested data or status.
type NMQ_N01 struct {
	HL7                HL7Name                      `hl7:",name=NMQ_N01,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	SFT                []SFT                        `hl7:"2,display=Software Segment"`
	UAC                *UAC                         `hl7:"3,display=User Authentication Credential"`
	QryWithDetail      *NMQ_N01_QryWithDetail       `hl7:",display=Qry With Detail"`
	ClockAndStatistics []NMQ_N01_ClockAndStatistics `hl7:",required,display=Clock And Statistics"`
}

// ClockAndStatsWithNotesAlt
type NMR_N01_ClockAndStatsWithNotesAlt struct {
	HL7  HL7Name `hl7:",name=NMR_N01_ClockAndStatsWithNotesAlt,type=tg"`
	NCK  *NCK    `hl7:"7,display=System Clock"`
	NTE  []NTE   `hl7:"8,display=Notes and Comments"`
	NST  *NST    `hl7:"9,display=Application control level statistics"`
	NTE2 []NTE   `hl7:"10,display=Notes and Comments"`
	NSC  *NSC    `hl7:"11,display=Application Status Change"`
	NTE3 []NTE   `hl7:"12,display=Notes and Comments"`
}

// Application Management Response
//
// Note: The MFQ/MFR transaction is retained for backward compatibility as of v2.5.
//
// The N01 event signifies when the NMQ (Application Management Query) message is used by one application to make application
// control-level requests for information or action to another application.  It has three segments, the NCK segment (system
// clock), the NST segment (application control-level statistics), and the NSC segment (application control-level status
// change). At least one of these three segments must be present in the NMQ message. If a segment is present in the NMQ message,
// the corresponding segment needs to be present in the NMR message to return the requested data or status.
type NMR_N01 struct {
	HL7                       HL7Name                             `hl7:",name=NMR_N01,type=t"`
	MSH                       *MSH                                `hl7:"1,required,display=Message Header"`
	SFT                       []SFT                               `hl7:"2,display=Software Segment"`
	UAC                       *UAC                                `hl7:"3,display=User Authentication Credential"`
	MSA                       *MSA                                `hl7:"4,required,display=Message Acknowledgment"`
	ERR                       []ERR                               `hl7:"5,display=Error"`
	QRD                       *QRD                                `hl7:"6,display=Original-Style Query Definition"`
	ClockAndStatsWithNotesAlt []NMR_N01_ClockAndStatsWithNotesAlt `hl7:",required,display=Clock And Stats With Notes Alt"`
}

// Patient
type OMB_O27_Patient struct {
	HL7          HL7Name               `hl7:",name=OMB_O27_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *OMB_O27_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMB_O27_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type OMB_O27_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMB_O27_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type OMB_O27_Insurance struct {
	HL7 HL7Name `hl7:",name=OMB_O27_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type OMB_O27_Order struct {
	HL7         HL7Name               `hl7:",name=OMB_O27_Order,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []OMB_O27_Timing      `hl7:",display=Timing"`
	BPO         *BPO                  `hl7:"18,required,display=Blood product order"`
	SPM         *SPM                  `hl7:"19,display=Specimen"`
	NTE         []NTE                 `hl7:"20,display=Notes and Comments"`
	DG1         []DG1                 `hl7:"21,display=Diagnosis"`
	Observation []OMB_O27_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"24,display=Financial Transaction"`
	BLG         *BLG                  `hl7:"25,display=Billing"`
}

// Timing
type OMB_O27_Timing struct {
	HL7 HL7Name `hl7:",name=OMB_O27_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Observation
type OMB_O27_Observation struct {
	HL7 HL7Name `hl7:",name=OMB_O27_Observation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Blood Product Order
//
// Blood product order messages present the need for additional information that is not included in standard HL7 order messages.
// Order messages must contain accompanying details regarding the blood product component, such as special processing
// requirements (e.g., irradiation and leukoreduction), and the amount of the blood product to be administered.  Additionally,
// specific relevant clinical information can be included to allow the prospective review of the appropriateness of the
// blood product order.
//
// Blood product orders use the OMB message with the BPO segment for the detail segment and the acknowledgment message.
type OMB_O27 struct {
	HL7     HL7Name          `hl7:",name=OMB_O27,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *OMB_O27_Patient `hl7:",display=Patient"`
	Order   []OMB_O27_Order  `hl7:",required,display=Order"`
}

// Patient
type OMD_O03_Patient struct {
	HL7          HL7Name               `hl7:",name=OMD_O03_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *OMD_O03_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMD_O03_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type OMD_O03_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMD_O03_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type OMD_O03_Insurance struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// OrderDiet
type OMD_O03_OrderDiet struct {
	HL7        HL7Name              `hl7:",name=OMD_O03_OrderDiet,type=tg"`
	ORC        *ORC                 `hl7:"15,required,display=Common Order"`
	TimingDiet []OMD_O03_TimingDiet `hl7:",display=Timing Diet"`
	Diet       *OMD_O03_Diet        `hl7:",display=Diet"`
}

// TimingDiet
type OMD_O03_TimingDiet struct {
	HL7 HL7Name `hl7:",name=OMD_O03_TimingDiet,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Diet
type OMD_O03_Diet struct {
	HL7         HL7Name               `hl7:",name=OMD_O03_Diet,type=tg"`
	ODS         []ODS                 `hl7:"18,required,display=Dietary Orders- Supplements- and Preferences"`
	NTE         []NTE                 `hl7:"19,display=Notes and Comments"`
	Observation []OMD_O03_Observation `hl7:",display=Observation"`
}

// Observation
type OMD_O03_Observation struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Observation,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/Result"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// OrderTray
type OMD_O03_OrderTray struct {
	HL7        HL7Name              `hl7:",name=OMD_O03_OrderTray,type=tg"`
	ORC        *ORC                 `hl7:"22,required,display=Common Order"`
	TimingTray []OMD_O03_TimingTray `hl7:",display=Timing Tray"`
	ODT        []ODT                `hl7:"25,required,display=Diet Tray Instructions"`
	NTE        []NTE                `hl7:"26,display=Notes and Comments"`
}

// TimingTray
type OMD_O03_TimingTray struct {
	HL7 HL7Name `hl7:",name=OMD_O03_TimingTray,type=tg"`
	TQ1 *TQ1    `hl7:"23,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"24,display=Timing/Quantity Relationship"`
}

// Dietary Order
//
// A diet office needs to receive specific information, the most important being the diet order itself.  Diet restrictions
// (often called diet codes) are the basic building blocks of a diet order.  The diet order segments may be sent as part of the
// ORM and ORR message structure to support backwards compatibility, or may be sent as part of the OMD and ORD messages.
type OMD_O03 struct {
	HL7       HL7Name             `hl7:",name=OMD_O03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   *OMD_O03_Patient    `hl7:",display=Patient"`
	OrderDiet []OMD_O03_OrderDiet `hl7:",required,display=Order Diet"`
	OrderTray []OMD_O03_OrderTray `hl7:",display=Order Tray"`
}

// Patient
type OMG_O19_Patient struct {
	HL7          HL7Name               `hl7:",name=OMG_O19_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	NK1          []NK1                 `hl7:"8,display=Next of Kin / Associated Parties"`
	PatientVisit *OMG_O19_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMG_O19_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// PatientVisit
type OMG_O19_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMG_O19_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OMG_O19_Insurance struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Order
type OMG_O19_Order struct {
	HL7         HL7Name               `hl7:",name=OMG_O19_Order,type=tg"`
	ORC         *ORC                  `hl7:"16,required,display=Common Order"`
	Timing      []OMG_O19_Timing      `hl7:",display=Timing"`
	OBR         *OBR                  `hl7:"19,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"20,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"21,display=Role"`
	CTD         *CTD                  `hl7:"22,display=Contact Data"`
	DG1         []DG1                 `hl7:"23,display=Diagnosis"`
	Observation []OMG_O19_Observation `hl7:",display=Observation"`
	Specimen    []OMG_O19_Specimen    `hl7:",display=Specimen"`
	PriorResult []OMG_O19_PriorResult `hl7:",display=Prior Result"`
	FT1         []FT1                 `hl7:"44,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"45,display=Clinical Trial Identification"`
	BLG         *BLG                  `hl7:"46,display=Billing"`
}

// Timing
type OMG_O19_Timing struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/Quantity Relationship"`
}

// Observation
type OMG_O19_Observation struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Observation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Specimen
type OMG_O19_Specimen struct {
	HL7       HL7Name             `hl7:",name=OMG_O19_Specimen,type=tg"`
	SPM       *SPM                `hl7:"26,required,display=Specimen"`
	OBX       []OBX               `hl7:"27,display=Observation/Result"`
	Container []OMG_O19_Container `hl7:",display=Container"`
}

// Container
type OMG_O19_Container struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Container,type=tg"`
	SAC *SAC    `hl7:"28,required,display=Specimen Container Detail"`
	OBX []OBX   `hl7:"29,display=Observation/Result"`
}

// PriorResult
type OMG_O19_PriorResult struct {
	HL7               HL7Name                    `hl7:",name=OMG_O19_PriorResult,type=tg"`
	PatientPrior      *OMG_O19_PatientPrior      `hl7:",display=Patient Prior"`
	PatientVisitPrior *OMG_O19_PatientVisitPrior `hl7:",display=Patient Visit Prior"`
	AL1               []AL1                      `hl7:"34,display=Patient Allergy Information"`
	OrderPrior        []OMG_O19_OrderPrior       `hl7:",required,display=Order Prior"`
}

// PatientPrior
type OMG_O19_PatientPrior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_PatientPrior,type=tg"`
	PID *PID    `hl7:"30,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"31,display=Patient Additional Demographic"`
}

// PatientVisitPrior
type OMG_O19_PatientVisitPrior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_PatientVisitPrior,type=tg"`
	PV1 *PV1    `hl7:"32,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"33,display=Patient Visit - Additional Information"`
}

// OrderPrior
type OMG_O19_OrderPrior struct {
	HL7              HL7Name                    `hl7:",name=OMG_O19_OrderPrior,type=tg"`
	ORC              *ORC                       `hl7:"35,display=Common Order"`
	OBR              *OBR                       `hl7:"36,required,display=Observation Request"`
	TimingPrior      []OMG_O19_TimingPrior      `hl7:",display=Timing Prior"`
	NTE              []NTE                      `hl7:"39,display=Notes and Comments"`
	ROL              []ROL                      `hl7:"40,display=Role"`
	CTD              *CTD                       `hl7:"41,display=Contact Data"`
	ObservationPrior []OMG_O19_ObservationPrior `hl7:",required,display=Observation Prior"`
}

// TimingPrior
type OMG_O19_TimingPrior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_TimingPrior,type=tg"`
	TQ1 *TQ1    `hl7:"37,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"38,display=Timing/Quantity Relationship"`
}

// ObservationPrior
type OMG_O19_ObservationPrior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_ObservationPrior,type=tg"`
	OBX *OBX    `hl7:"42,required,display=Observation/Result"`
	NTE []NTE   `hl7:"43,display=Notes and Comments"`
}

// General Clinical Order
//
// The function of this message is to initiate the transmission of information about a general clinical order that uses the
// OBR segment.  Messages using the ORM message with the OBR segment are supported for backward compatibility.  This includes
// placing new orders, cancellation of existing orders, discontinuation, holding, etc.  OMG messages can originate also
// with a placer, filler, or an interested third party.
type OMG_O19 struct {
	HL7     HL7Name          `hl7:",name=OMG_O19,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *OMG_O19_Patient `hl7:",display=Patient"`
	Order   []OMG_O19_Order  `hl7:",required,display=Order"`
}

// Patient
type OMI_O23_Patient struct {
	HL7          HL7Name               `hl7:",name=OMI_O23_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *OMI_O23_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMI_O23_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type OMI_O23_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMI_O23_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type OMI_O23_Insurance struct {
	HL7 HL7Name `hl7:",name=OMI_O23_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type OMI_O23_Order struct {
	HL7         HL7Name               `hl7:",name=OMI_O23_Order,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []OMI_O23_Timing      `hl7:",display=Timing"`
	OBR         *OBR                  `hl7:"18,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"19,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"20,display=Role"`
	CTD         *CTD                  `hl7:"21,display=Contact Data"`
	DG1         []DG1                 `hl7:"22,display=Diagnosis"`
	Observation []OMI_O23_Observation `hl7:",display=Observation"`
	IPC         []IPC                 `hl7:"25,required,display=Imaging Procedure Control Segment"`
}

// Timing
type OMI_O23_Timing struct {
	HL7 HL7Name `hl7:",name=OMI_O23_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Observation
type OMI_O23_Observation struct {
	HL7 HL7Name `hl7:",name=OMI_O23_Observation,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Imaging Order
//
// This message is used in communication between the information systems involved in the fulfillment of the request directed
// to the imaging department, such as a Radiology Information System (RIS) and a Picture Archiving and Communication System
// (PACS).  For the purpose of the following discussion these systems will be identified as Imaging Department Information
// Systems (IDIS).  Information contained in the Imaging Procedure Control (IPC) segment allows multiple IDIS to share the
// context of Imaging Studies (collections of images acquired, processed, stored, and interpreted) in Image Management
// tasks.
type OMI_O23 struct {
	HL7     HL7Name          `hl7:",name=OMI_O23,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *OMI_O23_Patient `hl7:",display=Patient"`
	Order   []OMI_O23_Order  `hl7:",required,display=Order"`
}

// Patient
type OML_O21_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O21_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	NK1          []NK1                 `hl7:"8,display=Next of Kin / Associated Parties"`
	PatientVisit *OML_O21_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OML_O21_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// PatientVisit
type OML_O21_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OML_O21_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OML_O21_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O21_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Order
type OML_O21_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O21_Order,type=tg"`
	ORC                *ORC                        `hl7:"16,required,display=Common Order"`
	Timing             []OML_O21_Timing            `hl7:",display=Timing"`
	ObservationRequest *OML_O21_ObservationRequest `hl7:",display=Observation Request"`
	FT1                []FT1                       `hl7:"45,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"46,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"47,display=Billing"`
}

// Timing
type OML_O21_Timing struct {
	HL7 HL7Name `hl7:",name=OML_O21_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/Quantity Relationship"`
}

// ObservationRequest
type OML_O21_ObservationRequest struct {
	HL7         HL7Name               `hl7:",name=OML_O21_ObservationRequest,type=tg"`
	OBR         *OBR                  `hl7:"19,required,display=Observation Request"`
	TCD         *TCD                  `hl7:"20,display=Test Code Detail"`
	NTE         []NTE                 `hl7:"21,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"22,display=Role"`
	CTD         *CTD                  `hl7:"23,display=Contact Data"`
	DG1         []DG1                 `hl7:"24,display=Diagnosis"`
	Observation []OML_O21_Observation `hl7:",display=Observation"`
	Specimen    []OML_O21_Specimen    `hl7:",display=Specimen"`
	PriorResult []OML_O21_PriorResult `hl7:",display=Prior Result"`
}

// Observation
type OML_O21_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O21_Observation,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/Result"`
	TCD *TCD    `hl7:"26,display=Test Code Detail"`
	NTE []NTE   `hl7:"27,display=Notes and Comments"`
}

// Specimen
type OML_O21_Specimen struct {
	HL7       HL7Name             `hl7:",name=OML_O21_Specimen,type=tg"`
	SPM       *SPM                `hl7:"28,required,display=Specimen"`
	OBX       []OBX               `hl7:"29,display=Observation/Result"`
	Container []OML_O21_Container `hl7:",display=Container"`
}

// Container
type OML_O21_Container struct {
	HL7 HL7Name `hl7:",name=OML_O21_Container,type=tg"`
	SAC *SAC    `hl7:"30,required,display=Specimen Container Detail"`
	OBX []OBX   `hl7:"31,display=Observation/Result"`
}

// PriorResult
type OML_O21_PriorResult struct {
	HL7               HL7Name                    `hl7:",name=OML_O21_PriorResult,type=tg"`
	PatientPrior      *OML_O21_PatientPrior      `hl7:",display=Patient Prior"`
	PatientVisitPrior *OML_O21_PatientVisitPrior `hl7:",display=Patient Visit Prior"`
	AL1               []AL1                      `hl7:"36,display=Patient Allergy Information"`
	OrderPrior        []OML_O21_OrderPrior       `hl7:",required,display=Order Prior"`
}

// PatientPrior
type OML_O21_PatientPrior struct {
	HL7 HL7Name `hl7:",name=OML_O21_PatientPrior,type=tg"`
	PID *PID    `hl7:"32,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"33,display=Patient Additional Demographic"`
}

// PatientVisitPrior
type OML_O21_PatientVisitPrior struct {
	HL7 HL7Name `hl7:",name=OML_O21_PatientVisitPrior,type=tg"`
	PV1 *PV1    `hl7:"34,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"35,display=Patient Visit - Additional Information"`
}

// OrderPrior
type OML_O21_OrderPrior struct {
	HL7              HL7Name                    `hl7:",name=OML_O21_OrderPrior,type=tg"`
	ORC              *ORC                       `hl7:"37,display=Common Order"`
	OBR              *OBR                       `hl7:"38,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"39,display=Notes and Comments"`
	ROL              []ROL                      `hl7:"40,display=Role"`
	TimingPrior      []OML_O21_TimingPrior      `hl7:",display=Timing Prior"`
	ObservationPrior []OML_O21_ObservationPrior `hl7:",required,display=Observation Prior"`
}

// TimingPrior
type OML_O21_TimingPrior struct {
	HL7 HL7Name `hl7:",name=OML_O21_TimingPrior,type=tg"`
	TQ1 *TQ1    `hl7:"41,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"42,display=Timing/Quantity Relationship"`
}

// ObservationPrior
type OML_O21_ObservationPrior struct {
	HL7 HL7Name `hl7:",name=OML_O21_ObservationPrior,type=tg"`
	OBX *OBX    `hl7:"43,required,display=Observation/Result"`
	NTE []NTE   `hl7:"44,display=Notes and Comments"`
}

// Laboratory Order
//
// The following message structure may be used for the communication of laboratory and other order messages and must be used
// for lab automation messages where it is required that the Specimen/Container information is within the ORC/OBR segment
// group.  While the ORM message with the OBR segment can be used for backwards compatibility for general lab messages, only
// the OML message should be used to take advantage of the specimen and container extensions required in laboratory automation.
//
// The trigger event for this message is any change to a laboratory order.  Such changes include submission of new orders, cancellations,
// updates, etc.  OML messages can originate also with a placer, filler, or an interested third party.
//
// In relationship to triggers O21, O33, and O35, this message/trigger (O21) should be used where an order with multiple samples
// and optionally multiple containers per order item are to be communicated.
type OML_O21 struct {
	HL7     HL7Name          `hl7:",name=OML_O21,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *OML_O21_Patient `hl7:",display=Patient"`
	Order   []OML_O21_Order  `hl7:",required,display=Order"`
}

// Patient
type OML_O33_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O33_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	NK1          []NK1                 `hl7:"8,display=Next of Kin / Associated Parties"`
	PatientVisit *OML_O33_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OML_O33_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// PatientVisit
type OML_O33_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OML_O33_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OML_O33_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O33_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Specimen
type OML_O33_Specimen struct {
	HL7   HL7Name         `hl7:",name=OML_O33_Specimen,type=tg"`
	SPM   *SPM            `hl7:"16,required,display=Specimen"`
	OBX   []OBX           `hl7:"17,display=Observation/Result"`
	SAC   []SAC           `hl7:"18,display=Specimen Container Detail"`
	Order []OML_O33_Order `hl7:",required,display=Order"`
}

// Order
type OML_O33_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O33_Order,type=tg"`
	ORC                *ORC                        `hl7:"19,required,display=Common Order"`
	Timing             []OML_O33_Timing            `hl7:",display=Timing"`
	ObservationRequest *OML_O33_ObservationRequest `hl7:",display=Observation Request"`
	FT1                []FT1                       `hl7:"43,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"44,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"45,display=Billing"`
}

// Timing
type OML_O33_Timing struct {
	HL7 HL7Name `hl7:",name=OML_O33_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/Quantity Relationship"`
}

// ObservationRequest
type OML_O33_ObservationRequest struct {
	HL7         HL7Name               `hl7:",name=OML_O33_ObservationRequest,type=tg"`
	OBR         *OBR                  `hl7:"22,required,display=Observation Request"`
	TCD         *TCD                  `hl7:"23,display=Test Code Detail"`
	NTE         []NTE                 `hl7:"24,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"25,display=Role"`
	DG1         []DG1                 `hl7:"26,display=Diagnosis"`
	Observation []OML_O33_Observation `hl7:",display=Observation"`
	PriorResult []OML_O33_PriorResult `hl7:",display=Prior Result"`
}

// Observation
type OML_O33_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O33_Observation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/Result"`
	TCD *TCD    `hl7:"28,display=Test Code Detail"`
	NTE []NTE   `hl7:"29,display=Notes and Comments"`
}

// PriorResult
type OML_O33_PriorResult struct {
	HL7               HL7Name                    `hl7:",name=OML_O33_PriorResult,type=tg"`
	PatientPrior      *OML_O33_PatientPrior      `hl7:",display=Patient Prior"`
	PatientVisitPrior *OML_O33_PatientVisitPrior `hl7:",display=Patient Visit Prior"`
	AL1               []AL1                      `hl7:"34,display=Patient Allergy Information"`
	OrderPrior        []OML_O33_OrderPrior       `hl7:",required,display=Order Prior"`
}

// PatientPrior
type OML_O33_PatientPrior struct {
	HL7 HL7Name `hl7:",name=OML_O33_PatientPrior,type=tg"`
	PID *PID    `hl7:"30,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"31,display=Patient Additional Demographic"`
}

// PatientVisitPrior
type OML_O33_PatientVisitPrior struct {
	HL7 HL7Name `hl7:",name=OML_O33_PatientVisitPrior,type=tg"`
	PV1 *PV1    `hl7:"32,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"33,display=Patient Visit - Additional Information"`
}

// OrderPrior
type OML_O33_OrderPrior struct {
	HL7              HL7Name                    `hl7:",name=OML_O33_OrderPrior,type=tg"`
	ORC              *ORC                       `hl7:"35,display=Common Order"`
	OBR              *OBR                       `hl7:"36,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"37,display=Notes and Comments"`
	ROL              []ROL                      `hl7:"38,display=Role"`
	TimingPrior      []OML_O33_TimingPrior      `hl7:",display=Timing Prior"`
	ObservationPrior []OML_O33_ObservationPrior `hl7:",required,display=Observation Prior"`
}

// TimingPrior
type OML_O33_TimingPrior struct {
	HL7 HL7Name `hl7:",name=OML_O33_TimingPrior,type=tg"`
	TQ1 *TQ1    `hl7:"39,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"40,display=Timing/Quantity Relationship"`
}

// ObservationPrior
type OML_O33_ObservationPrior struct {
	HL7 HL7Name `hl7:",name=OML_O33_ObservationPrior,type=tg"`
	OBX *OBX    `hl7:"41,required,display=Observation/Result"`
	NTE []NTE   `hl7:"42,display=Notes and Comments"`
}

// Laboratory Order for Multiple Orders Related to a Single Specimen
//
// The trigger event for this message is any change to a laboratory order.  Such changes include submission of new orders, cancellations,
// updates, etc., where multiple orders are associated with a single sample which may be carried in multiple containers.
// OML messages can originate also with a placer, filler, or an interested third party.
//
// This allows for a Specimen-centric message with multiple orders per specimen grouped by the specimen.
//
// The following message structure may be used for the communication of laboratory and other order messages and must be used
// for lab automation messages where the message requires Specimen/container information to group a number of orders.  While
// the ORM message with the OBR segment can be used for backwards compatibility for general lab messages, only the OML message
// should be used to take advantage of the specimen and container extensions required in laboratory automation.
//
// In relationship to triggers O21, O33, and O35, this message/trigger (O33) should be used where a specimen, with optional
// multiple containers, may have multiple orders to be communicated.
type OML_O33 struct {
	HL7      HL7Name            `hl7:",name=OML_O33,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	NTE      []NTE              `hl7:"4,display=Notes and Comments"`
	Patient  *OML_O33_Patient   `hl7:",display=Patient"`
	Specimen []OML_O33_Specimen `hl7:",required,display=Specimen"`
}

// Patient
type OML_O35_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O35_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	NK1          []NK1                 `hl7:"8,display=Next of Kin / Associated Parties"`
	PatientVisit *OML_O35_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OML_O35_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"14,display=Guarantor"`
	AL1          []AL1                 `hl7:"15,display=Patient Allergy Information"`
}

// PatientVisit
type OML_O35_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OML_O35_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Insurance
type OML_O35_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O35_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Specimen
type OML_O35_Specimen struct {
	HL7               HL7Name                     `hl7:",name=OML_O35_Specimen,type=tg"`
	SPM               *SPM                        `hl7:"16,required,display=Specimen"`
	OBX               []OBX                       `hl7:"17,display=Observation/Result"`
	SpecimenContainer []OML_O35_SpecimenContainer `hl7:",required,display=Specimen Container"`
}

// SpecimenContainer
type OML_O35_SpecimenContainer struct {
	HL7   HL7Name         `hl7:",name=OML_O35_SpecimenContainer,type=tg"`
	SAC   *SAC            `hl7:"18,required,display=Specimen Container Detail"`
	Order []OML_O35_Order `hl7:",required,display=Order"`
}

// Order
type OML_O35_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O35_Order,type=tg"`
	ORC                *ORC                        `hl7:"19,required,display=Common Order"`
	Timing             []OML_O35_Timing            `hl7:",display=Timing"`
	ObservationRequest *OML_O35_ObservationRequest `hl7:",display=Observation Request"`
	FT1                []FT1                       `hl7:"43,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"44,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"45,display=Billing"`
}

// Timing
type OML_O35_Timing struct {
	HL7 HL7Name `hl7:",name=OML_O35_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/Quantity Relationship"`
}

// ObservationRequest
type OML_O35_ObservationRequest struct {
	HL7         HL7Name               `hl7:",name=OML_O35_ObservationRequest,type=tg"`
	OBR         *OBR                  `hl7:"22,required,display=Observation Request"`
	TCD         *TCD                  `hl7:"23,display=Test Code Detail"`
	NTE         []NTE                 `hl7:"24,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"25,display=Role"`
	DG1         []DG1                 `hl7:"26,display=Diagnosis"`
	Observation []OML_O35_Observation `hl7:",display=Observation"`
	PriorResult []OML_O35_PriorResult `hl7:",display=Prior Result"`
}

// Observation
type OML_O35_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O35_Observation,type=tg"`
	OBX *OBX    `hl7:"27,required,display=Observation/Result"`
	TCD *TCD    `hl7:"28,display=Test Code Detail"`
	NTE []NTE   `hl7:"29,display=Notes and Comments"`
}

// PriorResult
type OML_O35_PriorResult struct {
	HL7               HL7Name                    `hl7:",name=OML_O35_PriorResult,type=tg"`
	PatientPrior      *OML_O35_PatientPrior      `hl7:",display=Patient Prior"`
	PatientVisitPrior *OML_O35_PatientVisitPrior `hl7:",display=Patient Visit Prior"`
	AL1               []AL1                      `hl7:"34,display=Patient Allergy Information"`
	OrderPrior        []OML_O35_OrderPrior       `hl7:",required,display=Order Prior"`
}

// PatientPrior
type OML_O35_PatientPrior struct {
	HL7 HL7Name `hl7:",name=OML_O35_PatientPrior,type=tg"`
	PID *PID    `hl7:"30,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"31,display=Patient Additional Demographic"`
}

// PatientVisitPrior
type OML_O35_PatientVisitPrior struct {
	HL7 HL7Name `hl7:",name=OML_O35_PatientVisitPrior,type=tg"`
	PV1 *PV1    `hl7:"32,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"33,display=Patient Visit - Additional Information"`
}

// OrderPrior
type OML_O35_OrderPrior struct {
	HL7              HL7Name                    `hl7:",name=OML_O35_OrderPrior,type=tg"`
	ORC              *ORC                       `hl7:"35,display=Common Order"`
	OBR              *OBR                       `hl7:"36,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"37,display=Notes and Comments"`
	ROL              []ROL                      `hl7:"38,display=Role"`
	TimingPrior      *OML_O35_TimingPrior       `hl7:",required,display=Timing Prior"`
	ObservationPrior []OML_O35_ObservationPrior `hl7:",required,display=Observation Prior"`
}

// TimingPrior
type OML_O35_TimingPrior struct {
	HL7 HL7Name `hl7:",name=OML_O35_TimingPrior,type=tg"`
	TQ1 *TQ1    `hl7:"39,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"40,display=Timing/Quantity Relationship"`
}

// ObservationPrior
type OML_O35_ObservationPrior struct {
	HL7 HL7Name `hl7:",name=OML_O35_ObservationPrior,type=tg"`
	OBX *OBX    `hl7:"41,required,display=Observation/Result"`
	NTE []NTE   `hl7:"42,display=Notes and Comments"`
}

// Laboratory Order for Multiple Orders Related to a Single Container of a Specimen
//
// The trigger event for this message is any change to a laboratory order.  Such changes include submission of new orders, cancellations,
// updates, etc., where multiple orders are associated with a single sample which may be carried in multiple containers.
// OML messages can originate also with a placer, filler, or an interested third party.
//
// This allows for a Specimen-centric message with multiple orders per specimen grouped by the specimen.
// The following message structure may be used for the communication of laboratory and other order messages and must be used
// for lab automation messages where the message requires Specimen/container information to group a number of orders.  While
// the ORM message with the OBR segment can be used for backwards compatibility for general lab messages, only the OML message
// should be used to take advantage of the specimen and container extensions required in laboratory automation.
//
// In relationship to triggers O21, O33, and O35, this message/trigger (O35) should be used for laboratory orders where there
// is 1 or more Specimens with 1 to many containers and each container may have 1 to many orders with previous result(s) per container.
type OML_O35 struct {
	HL7      HL7Name            `hl7:",name=OML_O35,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	NTE      []NTE              `hl7:"4,display=Notes and Comments"`
	Patient  *OML_O35_Patient   `hl7:",display=Patient"`
	Specimen []OML_O35_Specimen `hl7:",required,display=Specimen"`
}

// Patient
type OMN_O07_Patient struct {
	HL7          HL7Name               `hl7:",name=OMN_O07_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *OMN_O07_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMN_O07_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type OMN_O07_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMN_O07_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type OMN_O07_Insurance struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type OMN_O07_Order struct {
	HL7         HL7Name               `hl7:",name=OMN_O07_Order,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []OMN_O07_Timing      `hl7:",display=Timing"`
	RQD         *RQD                  `hl7:"18,required,display=Requisition Detail"`
	RQ1         *RQ1                  `hl7:"19,display=Requisition Detail-1"`
	NTE         []NTE                 `hl7:"20,display=Notes and Comments"`
	Observation []OMN_O07_Observation `hl7:",display=Observation"`
	BLG         *BLG                  `hl7:"23,display=Billing"`
}

// Timing
type OMN_O07_Timing struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Observation
type OMN_O07_Observation struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Observation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Non-Stock Requisition Order
//
// Non-stock requisitions can use the ORM message with the RQD and RQ1 segments as the detail segment, or use the OMN and ORN
// messages.
type OMN_O07 struct {
	HL7     HL7Name          `hl7:",name=OMN_O07,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *OMN_O07_Patient `hl7:",display=Patient"`
	Order   []OMN_O07_Order  `hl7:",required,display=Order"`
}

// Patient
type OMP_O09_Patient struct {
	HL7          HL7Name               `hl7:",name=OMP_O09_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *OMP_O09_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMP_O09_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type OMP_O09_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMP_O09_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type OMP_O09_Insurance struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type OMP_O09_Order struct {
	HL7         HL7Name               `hl7:",name=OMP_O09_Order,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []OMP_O09_Timing      `hl7:",display=Timing"`
	RXO         *RXO                  `hl7:"18,required,display=Pharmacy/Treatment Order"`
	NTE         []NTE                 `hl7:"19,display=Notes and Comments"`
	RXR         []RXR                 `hl7:"20,required,display=Pharmacy/Treatment Route"`
	Component   []OMP_O09_Component   `hl7:",display=Component"`
	Observation []OMP_O09_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"25,display=Financial Transaction"`
	BLG         *BLG                  `hl7:"26,display=Billing"`
}

// Timing
type OMP_O09_Timing struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Component
type OMP_O09_Component struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Component,type=tg"`
	RXC *RXC    `hl7:"21,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Observation
type OMP_O09_Observation struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Observation,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Pharmacy/Treatment Order
//
// Pharmacy/Treatment Orders should use OMP from V2.4 and onwards for pharmacy orders instead of ORM.
type OMP_O09 struct {
	HL7     HL7Name          `hl7:",name=OMP_O09,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *OMP_O09_Patient `hl7:",display=Patient"`
	Order   []OMP_O09_Order  `hl7:",required,display=Order"`
}

// Patient
type OMS_O05_Patient struct {
	HL7          HL7Name               `hl7:",name=OMS_O05_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *OMS_O05_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMS_O05_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type OMS_O05_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMS_O05_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type OMS_O05_Insurance struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type OMS_O05_Order struct {
	HL7         HL7Name               `hl7:",name=OMS_O05_Order,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []OMS_O05_Timing      `hl7:",display=Timing"`
	RQD         *RQD                  `hl7:"18,required,display=Requisition Detail"`
	RQ1         *RQ1                  `hl7:"19,display=Requisition Detail-1"`
	NTE         []NTE                 `hl7:"20,display=Notes and Comments"`
	Observation []OMS_O05_Observation `hl7:",display=Observation"`
	BLG         *BLG                  `hl7:"23,display=Billing"`
}

// Timing
type OMS_O05_Timing struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Observation
type OMS_O05_Observation struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Observation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Stock Requisition Order
//
// Stock requisition orders use the ORM where RQD is the detail segment for backward compatibility or can use the OMS and ORS
// messages.
type OMS_O05 struct {
	HL7     HL7Name          `hl7:",name=OMS_O05,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *OMS_O05_Patient `hl7:",display=Patient"`
	Order   []OMS_O05_Order  `hl7:",required,display=Order"`
}

// Guarantor
type OPL_O37_Guarantor struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Guarantor,type=tg"`
	GT1 *GT1    `hl7:"6,required,display=Guarantor"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// Order
type OPL_O37_Order struct {
	HL7         HL7Name              `hl7:",name=OPL_O37_Order,type=tg"`
	NK1         []NK1                `hl7:"8,required,display=Next of Kin / Associated Parties"`
	Patient     *OPL_O37_Patient     `hl7:",display=Patient"`
	Specimen    []OPL_O37_Specimen   `hl7:",required,display=Specimen"`
	PriorResult *OPL_O37_PriorResult `hl7:",display=Prior Result"`
	FT1         []FT1                `hl7:"40,display=Financial Transaction"`
	CTI         []CTI                `hl7:"41,display=Clinical Trial Identification"`
	BLG         *BLG                 `hl7:"42,display=Billing"`
}

// Patient
type OPL_O37_Patient struct {
	HL7       HL7Name             `hl7:",name=OPL_O37_Patient,type=tg"`
	PID       *PID                `hl7:"9,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"10,display=Patient Additional Demographic"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	Insurance []OPL_O37_Insurance `hl7:",display=Insurance"`
	AL1       []AL1               `hl7:"15,display=Patient Allergy Information"`
}

// Insurance
type OPL_O37_Insurance struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Specimen
type OPL_O37_Specimen struct {
	HL7                HL7Name                      `hl7:",name=OPL_O37_Specimen,type=tg"`
	SPM                *SPM                         `hl7:"16,required,display=Specimen"`
	OBX                []OBX                        `hl7:"17,display=Observation/Result"`
	Container          []OPL_O37_Container          `hl7:",display=Container"`
	ObservationRequest []OPL_O37_ObservationRequest `hl7:",required,display=Observation Request"`
}

// Container
type OPL_O37_Container struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Container,type=tg"`
	SAC *SAC    `hl7:"18,required,display=Specimen Container Detail"`
	OBX []OBX   `hl7:"19,display=Observation/Result"`
}

// ObservationRequest
type OPL_O37_ObservationRequest struct {
	HL7    HL7Name          `hl7:",name=OPL_O37_ObservationRequest,type=tg"`
	ORC    *ORC             `hl7:"20,required,display=Common Order"`
	OBR    *OBR             `hl7:"21,required,display=Observation Request"`
	ROL    []ROL            `hl7:"22,display=Role"`
	Timing []OPL_O37_Timing `hl7:",display=Timing"`
	TCD    *TCD             `hl7:"25,display=Test Code Detail"`
	DG1    []DG1            `hl7:"26,display=Diagnosis"`
	OBX    []OBX            `hl7:"27,display=Observation/Result"`
}

// Timing
type OPL_O37_Timing struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"23,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"24,display=Timing/Quantity Relationship"`
}

// PriorResult
type OPL_O37_PriorResult struct {
	HL7               HL7Name                    `hl7:",name=OPL_O37_PriorResult,type=tg"`
	NK1               []NK1                      `hl7:"28,required,display=Next of Kin / Associated Parties"`
	PatientPrior      *OPL_O37_PatientPrior      `hl7:",display=Patient Prior"`
	PatientVisitPrior *OPL_O37_PatientVisitPrior `hl7:",display=Patient Visit Prior"`
	AL1               *AL1                       `hl7:"33,display=Patient Allergy Information"`
	OrderPrior        []OPL_O37_OrderPrior       `hl7:",required,display=Order Prior"`
}

// PatientPrior
type OPL_O37_PatientPrior struct {
	HL7 HL7Name `hl7:",name=OPL_O37_PatientPrior,type=tg"`
	PID *PID    `hl7:"29,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"30,display=Patient Additional Demographic"`
}

// PatientVisitPrior
type OPL_O37_PatientVisitPrior struct {
	HL7 HL7Name `hl7:",name=OPL_O37_PatientVisitPrior,type=tg"`
	PV1 *PV1    `hl7:"31,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"32,display=Patient Visit - Additional Information"`
}

// OrderPrior
type OPL_O37_OrderPrior struct {
	HL7    HL7Name          `hl7:",name=OPL_O37_OrderPrior,type=tg"`
	OBR    *OBR             `hl7:"34,required,display=Observation Request"`
	ORC    *ORC             `hl7:"35,display=Common Order"`
	ROL    []ROL            `hl7:"36,display=Role"`
	Timing *OPL_O37_Timing2 `hl7:",display=Timing"`
	OBX    []OBX            `hl7:"39,required,display=Observation/Result"`
}

// Timing
type OPL_O37_Timing2 struct {
	HL7 HL7Name `hl7:",name=OPL_O37_Timing2,type=tg"`
	TQ1 *TQ1    `hl7:"37,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"38,display=Timing/Quantity Relationship"`
}

// Population/Location-Based Laboratory Order
//
// This message supports the use-case for submission of field level specimen and order data to diagnostic laboratories.
type OPL_O37 struct {
	HL7       HL7Name            `hl7:",name=OPL_O37,type=t"`
	MSH       *MSH               `hl7:"1,required,display=Message Header"`
	SFT       []SFT              `hl7:"2,display=Software Segment"`
	UAC       *UAC               `hl7:"3,display=User Authentication Credential"`
	NTE       []NTE              `hl7:"4,display=Notes and Comments"`
	ROL       []ROL              `hl7:"5,required,display=Role"`
	Guarantor *OPL_O37_Guarantor `hl7:",display=Guarantor"`
	Order     []OPL_O37_Order    `hl7:",required,display=Order"`
}

// Response
type OPR_O38_Response struct {
	HL7   HL7Name         `hl7:",name=OPR_O38_Response,type=tg"`
	Order []OPR_O38_Order `hl7:",required,display=Order"`
}

// Order
type OPR_O38_Order struct {
	HL7      HL7Name            `hl7:",name=OPR_O38_Order,type=tg"`
	NK1      []NK1              `hl7:"7,required,display=Next of Kin / Associated Parties"`
	PID      *PID               `hl7:"8,display=Patient Identification"`
	Specimen []OPR_O38_Specimen `hl7:",display=Specimen"`
}

// Specimen
type OPR_O38_Specimen struct {
	HL7                HL7Name                      `hl7:",name=OPR_O38_Specimen,type=tg"`
	SPM                *SPM                         `hl7:"9,required,display=Specimen"`
	OBX                []OBX                        `hl7:"10,display=Observation/Result"`
	SAC                []SAC                        `hl7:"11,display=Specimen Container Detail"`
	ObservationRequest []OPR_O38_ObservationRequest `hl7:",display=Observation Request"`
	Timing             []OPR_O38_Timing             `hl7:",display=Timing"`
}

// ObservationRequest
type OPR_O38_ObservationRequest struct {
	HL7 HL7Name `hl7:",name=OPR_O38_ObservationRequest,type=tg"`
	ORC *ORC    `hl7:"12,required,display=Common Order"`
	OBR *OBR    `hl7:"13,required,display=Observation Request"`
	ROL []ROL   `hl7:"14,display=Role"`
}

// Timing
type OPR_O38_Timing struct {
	HL7 HL7Name `hl7:",name=OPR_O38_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// Population/Location-Based Laboratory Order Acknowledgment
//
// The function of this message is to respond to an OPL message.  An OPR message is the application acknowledgment to an OPL message.
type OPR_O38 struct {
	HL7      HL7Name           `hl7:",name=OPR_O38,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *OPR_O38_Response `hl7:",display=Response"`
}

// AccessionDetail
type OPU_R25_AccessionDetail struct {
	HL7      HL7Name            `hl7:",name=OPU_R25_AccessionDetail,type=tg"`
	NK1      []NK1              `hl7:"10,required,display=Next of Kin / Associated Parties"`
	Patient  *OPU_R25_Patient   `hl7:",display=Patient"`
	Specimen []OPU_R25_Specimen `hl7:",required,display=Specimen"`
}

// Patient
type OPU_R25_Patient struct {
	HL7                HL7Name                      `hl7:",name=OPU_R25_Patient,type=tg"`
	PID                *PID                         `hl7:"11,required,display=Patient Identification"`
	PD1                *PD1                         `hl7:"12,display=Patient Additional Demographic"`
	PatientObservation []OPU_R25_PatientObservation `hl7:",display=Patient Observation"`
}

// PatientObservation
type OPU_R25_PatientObservation struct {
	HL7 HL7Name `hl7:",name=OPU_R25_PatientObservation,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Specimen
type OPU_R25_Specimen struct {
	HL7                 HL7Name                       `hl7:",name=OPU_R25_Specimen,type=tg"`
	SPM                 *SPM                          `hl7:"15,required,display=Specimen"`
	SpecimenObservation []OPU_R25_SpecimenObservation `hl7:",display=Specimen Observation"`
	Container           []OPU_R25_Container           `hl7:",display=Container"`
	Order               []OPU_R25_Order               `hl7:",required,display=Order"`
}

// SpecimenObservation
type OPU_R25_SpecimenObservation struct {
	HL7 HL7Name `hl7:",name=OPU_R25_SpecimenObservation,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/Result"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// Container
type OPU_R25_Container struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Container,type=tg"`
	SAC *SAC    `hl7:"18,required,display=Specimen Container Detail"`
	INV *INV    `hl7:"19,display=Inventory Detail"`
}

// Order
type OPU_R25_Order struct {
	HL7       HL7Name             `hl7:",name=OPU_R25_Order,type=tg"`
	OBR       *OBR                `hl7:"20,required,display=Observation Request"`
	ORC       *ORC                `hl7:"21,display=Common Order"`
	NTE       []NTE               `hl7:"22,display=Notes and Comments"`
	ROL       []ROL               `hl7:"23,display=Role"`
	TimingQty []OPU_R25_TimingQty `hl7:",display=Timing Qty"`
	Result    []OPU_R25_Result    `hl7:",required,display=Result"`
}

// TimingQty
type OPU_R25_TimingQty struct {
	HL7 HL7Name `hl7:",name=OPU_R25_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// Result
type OPU_R25_Result struct {
	HL7 HL7Name `hl7:",name=OPU_R25_Result,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/Result"`
	NTE []NTE   `hl7:"27,display=Notes and Comments"`
}

// Unsolicited Population/Location-Based Laboratory Observation
//
// This message supports unsolicited population or location-based surveillance reporting to a central repository where
// the accession / visit may contain references to multiple patients, multiple specimens, non-patient specimens, and multiple
// orders per specimen.
type OPU_R25 struct {
	HL7             HL7Name                   `hl7:",name=OPU_R25,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	SFT             []SFT                     `hl7:"2,display=Software Segment"`
	UAC             *UAC                      `hl7:"3,display=User Authentication Credential"`
	NTE             *NTE                      `hl7:"4,display=Notes and Comments"`
	PV1             *PV1                      `hl7:"5,required,display=Patient Visit"`
	PV2             *PV2                      `hl7:"6,display=Patient Visit - Additional Information"`
	OBX             []OBX                     `hl7:"7,display=Observation/Result"`
	NTE2            []NTE                     `hl7:"8,display=Notes and Comments"`
	ROL             []ROL                     `hl7:"9,required,display=Role"`
	AccessionDetail []OPU_R25_AccessionDetail `hl7:",required,display=Accession Detail"`
}

// Response
type ORB_O28_Response struct {
	HL7     HL7Name          `hl7:",name=ORB_O28_Response,type=tg"`
	Patient *ORB_O28_Patient `hl7:",display=Patient"`
}

// Patient
type ORB_O28_Patient struct {
	HL7   HL7Name        `hl7:",name=ORB_O28_Patient,type=tg"`
	PID   *PID           `hl7:"7,required,display=Patient Identification"`
	Order *ORB_O28_Order `hl7:",required,display=Order"`
}

// Order
type ORB_O28_Order struct {
	HL7    HL7Name         `hl7:",name=ORB_O28_Order,type=tg"`
	ORC    *ORC            `hl7:"8,required,display=Common Order"`
	Timing *ORB_O28_Timing `hl7:",required,display=Timing"`
	BPO    *BPO            `hl7:"11,display=Blood product order"`
}

// Timing
type ORB_O28_Timing struct {
	HL7 HL7Name `hl7:",name=ORB_O28_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"9,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"10,display=Timing/Quantity Relationship"`
}

// Blood Product Order Acknowledgment
//
// Blood product order messages present the need for additional information that is not included in standard HL7 order messages.
// Order messages must contain accompanying details regarding the blood product component, such as special processing
// requirements (e.g., irradiation and leukoreduction), and the amount of the blood product to be administered.  Additionally,
// specific relevant clinical information can be included to allow the prospective review of the appropriateness of the
// blood product order.
//
// Blood product orders use the OMB message with the BPO segment for the detail segment and the acknowledgment message.
type ORB_O28 struct {
	HL7      HL7Name           `hl7:",name=ORB_O28,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORB_O28_Response `hl7:",display=Response"`
}

// Response
type ORD_O04_Response struct {
	HL7       HL7Name             `hl7:",name=ORD_O04_Response,type=tg"`
	Patient   *ORD_O04_Patient    `hl7:",display=Patient"`
	OrderDiet []ORD_O04_OrderDiet `hl7:",required,display=Order Diet"`
	OrderTray []ORD_O04_OrderTray `hl7:",display=Order Tray"`
}

// Patient
type ORD_O04_Patient struct {
	HL7 HL7Name `hl7:",name=ORD_O04_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// OrderDiet
type ORD_O04_OrderDiet struct {
	HL7        HL7Name              `hl7:",name=ORD_O04_OrderDiet,type=tg"`
	ORC        *ORC                 `hl7:"9,required,display=Common Order"`
	TimingDiet []ORD_O04_TimingDiet `hl7:",display=Timing Diet"`
	ODS        []ODS                `hl7:"12,display=Dietary Orders- Supplements- and Preferences"`
	NTE        []NTE                `hl7:"13,display=Notes and Comments"`
}

// TimingDiet
type ORD_O04_TimingDiet struct {
	HL7 HL7Name `hl7:",name=ORD_O04_TimingDiet,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// OrderTray
type ORD_O04_OrderTray struct {
	HL7        HL7Name              `hl7:",name=ORD_O04_OrderTray,type=tg"`
	ORC        *ORC                 `hl7:"14,required,display=Common Order"`
	TimingTray []ORD_O04_TimingTray `hl7:",display=Timing Tray"`
	ODT        []ODT                `hl7:"17,display=Diet Tray Instructions"`
	NTE        []NTE                `hl7:"18,display=Notes and Comments"`
}

// TimingTray
type ORD_O04_TimingTray struct {
	HL7 HL7Name `hl7:",name=ORD_O04_TimingTray,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// Dietary Order Acknowledgement
//
// A diet office needs to receive specific information, the most important being the diet order itself.  Diet restrictions
// (often called diet codes) are the basic building blocks of a diet order.  The diet order segments may be sent as part of the
// ORM and ORR message structure to support backwards compatibility, or may be sent as part of the OMD and ORD messages.
type ORD_O04 struct {
	HL7      HL7Name           `hl7:",name=ORD_O04,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORD_O04_Response `hl7:",display=Response"`
}

// QueryResponse
type ORF_R04_QueryResponse struct {
	HL7     HL7Name          `hl7:",name=ORF_R04_QueryResponse,type=tg"`
	Patient *ORF_R04_Patient `hl7:",display=Patient"`
	Order   []ORF_R04_Order  `hl7:",required,display=Order"`
}

// Patient
type ORF_R04_Patient struct {
	HL7 HL7Name `hl7:",name=ORF_R04_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
}

// Order
type ORF_R04_Order struct {
	HL7         HL7Name               `hl7:",name=ORF_R04_Order,type=tg"`
	ORC         *ORC                  `hl7:"10,display=Common Order"`
	OBR         *OBR                  `hl7:"11,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"12,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"13,display=Role"`
	TimingQty   []ORF_R04_TimingQty   `hl7:",display=Timing Qty"`
	CTD         *CTD                  `hl7:"16,display=Contact Data"`
	Observation []ORF_R04_Observation `hl7:",required,display=Observation"`
	CTI         []CTI                 `hl7:"19,display=Clinical Trial Identification"`
}

// TimingQty
type ORF_R04_TimingQty struct {
	HL7 HL7Name `hl7:",name=ORF_R04_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/Quantity Relationship"`
}

// Observation
type ORF_R04_Observation struct {
	HL7 HL7Name `hl7:",name=ORF_R04_Observation,type=tg"`
	OBX *OBX    `hl7:"17,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Results of Observation Response
//
// Retained for backwards compatibility only in version 2.4 and later
type ORF_R04 struct {
	HL7           HL7Name                 `hl7:",name=ORF_R04,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	QRD           *QRD                    `hl7:"5,required,display=Original-Style Query Definition"`
	QRF           *QRF                    `hl7:"6,display=Original style query filter"`
	QueryResponse []ORF_R04_QueryResponse `hl7:",required,display=Query Response"`
	ERR           []ERR                   `hl7:"20,display=Error"`
	QAK           *QAK                    `hl7:"21,display=Query Acknowledgment"`
	DSC           *DSC                    `hl7:"22,display=Continuation Pointer"`
}

// QueryResponse
type ORF_W02_QueryResponse struct {
	HL7     HL7Name          `hl7:",name=ORF_W02_QueryResponse,type=tg"`
	Patient *ORF_W02_Patient `hl7:",display=Patient"`
	Order   []ORF_W02_Order  `hl7:",required,display=Order"`
}

// Patient
type ORF_W02_Patient struct {
	HL7 HL7Name `hl7:",name=ORF_W02_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
}

// Order
type ORF_W02_Order struct {
	HL7         HL7Name               `hl7:",name=ORF_W02_Order,type=tg"`
	ORC         *ORC                  `hl7:"10,display=Common Order"`
	OBR         *OBR                  `hl7:"11,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"12,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"13,display=Role"`
	TimingQty   []ORF_W02_TimingQty   `hl7:",display=Timing Qty"`
	CTD         *CTD                  `hl7:"16,display=Contact Data"`
	Observation []ORF_W02_Observation `hl7:",required,display=Observation"`
	CTI         []CTI                 `hl7:"19,display=Clinical Trial Identification"`
}

// TimingQty
type ORF_W02_TimingQty struct {
	HL7 HL7Name `hl7:",name=ORF_W02_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/Quantity Relationship"`
}

// Observation
type ORF_W02_Observation struct {
	HL7 HL7Name `hl7:",name=ORF_W02_Observation,type=tg"`
	OBX *OBX    `hl7:"17,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Waveform Result, Response to Query
//
// The W02 trigger event identifies QRF messages which are a response to a QRY message specifying an immediate mode query for
// waveform results/observations with record-oriented format.
type ORF_W02 struct {
	HL7           HL7Name                 `hl7:",name=ORF_W02,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	QRD           *QRD                    `hl7:"5,required,display=Original-Style Query Definition"`
	QRF           *QRF                    `hl7:"6,display=Original style query filter"`
	QueryResponse []ORF_W02_QueryResponse `hl7:",required,display=Query Response"`
	ERR           []ERR                   `hl7:"20,display=Error"`
	QAK           *QAK                    `hl7:"21,display=Query Acknowledgment"`
	DSC           *DSC                    `hl7:"22,display=Continuation Pointer"`
}

// Response
type ORG_O20_Response struct {
	HL7     HL7Name          `hl7:",name=ORG_O20_Response,type=tg"`
	Patient *ORG_O20_Patient `hl7:",display=Patient"`
	Order   []ORG_O20_Order  `hl7:",required,display=Order"`
}

// Patient
type ORG_O20_Patient struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type ORG_O20_Order struct {
	HL7              HL7Name                   `hl7:",name=ORG_O20_Order,type=tg"`
	ORC              *ORC                      `hl7:"9,required,display=Common Order"`
	Timing           []ORG_O20_Timing          `hl7:",display=Timing"`
	ObservationGroup *ORG_O20_ObservationGroup `hl7:",display=Observation Group"`
	NTE              []NTE                     `hl7:"14,display=Notes and Comments"`
	CTI              []CTI                     `hl7:"15,display=Clinical Trial Identification"`
	Specimen         []ORG_O20_Specimen        `hl7:",display=Specimen"`
}

// Timing
type ORG_O20_Timing struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// ObservationGroup
type ORG_O20_ObservationGroup struct {
	HL7 HL7Name `hl7:",name=ORG_O20_ObservationGroup,type=tg"`
	OBR *OBR    `hl7:"12,required,display=Observation Request"`
	ROL []ROL   `hl7:"13,display=Role"`
}

// Specimen
type ORG_O20_Specimen struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Specimen,type=tg"`
	SPM *SPM    `hl7:"16,required,display=Specimen"`
	SAC []SAC   `hl7:"17,display=Specimen Container Detail"`
}

// General Clinical Order Acknowledgement Response
//
// The function of this message is to respond to an OMG message.  An ORG message is the application acknowledgment to an OMG message.
type ORG_O20 struct {
	HL7      HL7Name           `hl7:",name=ORG_O20,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORG_O20_Response `hl7:",display=Response"`
}

// Response
type ORI_O24_Response struct {
	HL7     HL7Name          `hl7:",name=ORI_O24_Response,type=tg"`
	Patient *ORI_O24_Patient `hl7:",display=Patient"`
	Order   []ORI_O24_Order  `hl7:",required,display=Order"`
}

// Patient
type ORI_O24_Patient struct {
	HL7 HL7Name `hl7:",name=ORI_O24_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type ORI_O24_Order struct {
	HL7    HL7Name          `hl7:",name=ORI_O24_Order,type=tg"`
	ORC    *ORC             `hl7:"9,required,display=Common Order"`
	Timing []ORI_O24_Timing `hl7:",display=Timing"`
	OBR    *OBR             `hl7:"12,required,display=Observation Request"`
	NTE    []NTE            `hl7:"13,display=Notes and Comments"`
	ROL    []ROL            `hl7:"14,display=Role"`
	IPC    []IPC            `hl7:"15,required,display=Imaging Procedure Control Segment"`
}

// Timing
type ORI_O24_Timing struct {
	HL7 HL7Name `hl7:",name=ORI_O24_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// General Imaging Order Response
//
// The function of this message is to respond to an OMI message.  An ORI message is the application acknowledgment to an OMI message.
//
type ORI_O24 struct {
	HL7      HL7Name           `hl7:",name=ORI_O24,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORI_O24_Response `hl7:",display=Response"`
}

// Response
type ORL_O22_Response struct {
	HL7   HL7Name         `hl7:",name=ORL_O22_Response,type=tg"`
	PID   *PID            `hl7:"7,required,display=Patient Identification"`
	Order []ORL_O22_Order `hl7:",display=Order"`
}

// Order
type ORL_O22_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O22_Order,type=tg"`
	ORC                *ORC                        `hl7:"8,required,display=Common Order"`
	Timing             []ORL_O22_Timing            `hl7:",display=Timing"`
	ObservationRequest *ORL_O22_ObservationRequest `hl7:",display=Observation Request"`
}

// Timing
type ORL_O22_Timing struct {
	HL7 HL7Name `hl7:",name=ORL_O22_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"9,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"10,display=Timing/Quantity Relationship"`
}

// ObservationRequest
type ORL_O22_ObservationRequest struct {
	HL7      HL7Name            `hl7:",name=ORL_O22_ObservationRequest,type=tg"`
	OBR      *OBR               `hl7:"11,required,display=Observation Request"`
	ROL      []ROL              `hl7:"12,display=Role"`
	Specimen []ORL_O22_Specimen `hl7:",display=Specimen"`
}

// Specimen
type ORL_O22_Specimen struct {
	HL7 HL7Name `hl7:",name=ORL_O22_Specimen,type=tg"`
	SPM *SPM    `hl7:"13,required,display=Specimen"`
	SAC []SAC   `hl7:"14,display=Specimen Container Detail"`
}

// General Laboratory Order Response
//
// The function of this message is to respond to an OML message.  An ORL message is the application acknowledgment to an OML message.
type ORL_O22 struct {
	HL7      HL7Name           `hl7:",name=ORL_O22,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORL_O22_Response `hl7:",display=Response"`
}

// Response
type ORL_O34_Response struct {
	HL7      HL7Name            `hl7:",name=ORL_O34_Response,type=tg"`
	PID      *PID               `hl7:"7,required,display=Patient Identification"`
	Specimen []ORL_O34_Specimen `hl7:",required,display=Specimen"`
}

// Specimen
type ORL_O34_Specimen struct {
	HL7   HL7Name         `hl7:",name=ORL_O34_Specimen,type=tg"`
	SPM   *SPM            `hl7:"8,required,display=Specimen"`
	OBX   []OBX           `hl7:"9,display=Observation/Result"`
	SAC   []SAC           `hl7:"10,display=Specimen Container Detail"`
	Order []ORL_O34_Order `hl7:",display=Order"`
}

// Order
type ORL_O34_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O34_Order,type=tg"`
	ORC                *ORC                        `hl7:"11,required,display=Common Order"`
	Timing             []ORL_O34_Timing            `hl7:",display=Timing"`
	ObservationRequest *ORL_O34_ObservationRequest `hl7:",display=Observation Request"`
}

// Timing
type ORL_O34_Timing struct {
	HL7 HL7Name `hl7:",name=ORL_O34_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"12,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"13,display=Timing/Quantity Relationship"`
}

// ObservationRequest
type ORL_O34_ObservationRequest struct {
	HL7 HL7Name `hl7:",name=ORL_O34_ObservationRequest,type=tg"`
	OBR *OBR    `hl7:"14,required,display=Observation Request"`
	ROL []ROL   `hl7:"15,display=Role"`
}

// Multiple Laboratory Orders Related to Single Specimen Response
//
// The function of this message is to respond to an OML message where the original trigger event produced an OML with the Specimen
// Group segment above the ORC.  An ORL message is the application acknowledgment to an OML message.
type ORL_O34 struct {
	HL7      HL7Name           `hl7:",name=ORL_O34,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORL_O34_Response `hl7:",display=Response"`
}

// Response
type ORL_O36_Response struct {
	HL7      HL7Name            `hl7:",name=ORL_O36_Response,type=tg"`
	PID      *PID               `hl7:"7,required,display=Patient Identification"`
	Specimen []ORL_O36_Specimen `hl7:",required,display=Specimen"`
}

// Specimen
type ORL_O36_Specimen struct {
	HL7               HL7Name                     `hl7:",name=ORL_O36_Specimen,type=tg"`
	SPM               *SPM                        `hl7:"8,required,display=Specimen"`
	OBX               []OBX                       `hl7:"9,display=Observation/Result"`
	NTE               []NTE                       `hl7:"10,display=Notes and Comments"`
	SpecimenContainer []ORL_O36_SpecimenContainer `hl7:",required,display=Specimen Container"`
}

// SpecimenContainer
type ORL_O36_SpecimenContainer struct {
	HL7   HL7Name         `hl7:",name=ORL_O36_SpecimenContainer,type=tg"`
	SAC   *SAC            `hl7:"11,required,display=Specimen Container Detail"`
	Order []ORL_O36_Order `hl7:",display=Order"`
}

// Order
type ORL_O36_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O36_Order,type=tg"`
	ORC                *ORC                        `hl7:"12,required,display=Common Order"`
	Timing             []ORL_O36_Timing            `hl7:",display=Timing"`
	ObservationRequest *ORL_O36_ObservationRequest `hl7:",display=Observation Request"`
}

// Timing
type ORL_O36_Timing struct {
	HL7 HL7Name `hl7:",name=ORL_O36_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// ObservationRequest
type ORL_O36_ObservationRequest struct {
	HL7 HL7Name `hl7:",name=ORL_O36_ObservationRequest,type=tg"`
	OBR *OBR    `hl7:"15,required,display=Observation Request"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Single Container of a Specimen Response
//
// The function of this message is to respond to an OML message where the original trigger event produced an OML with the Specimen
// Group segment above the ORC.  An ORL message is the application acknowledgment to an OML message.
type ORL_O36 struct {
	HL7      HL7Name           `hl7:",name=ORL_O36,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORL_O36_Response `hl7:",display=Response"`
}

// Patient
type ORM_O01_Patient struct {
	HL7          HL7Name               `hl7:",name=ORM_O01_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *ORM_O01_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []ORM_O01_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient Allergy Information"`
}

// PatientVisit
type ORM_O01_PatientVisit struct {
	HL7 HL7Name `hl7:",name=ORM_O01_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
}

// Insurance
type ORM_O01_Insurance struct {
	HL7 HL7Name `hl7:",name=ORM_O01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type ORM_O01_Order struct {
	HL7         HL7Name              `hl7:",name=ORM_O01_Order,type=tg"`
	ORC         *ORC                 `hl7:"13,required,display=Common Order"`
	OrderDetail *ORM_O01_OrderDetail `hl7:",display=Order Detail"`
	FT1         []FT1                `hl7:"25,display=Financial Transaction"`
	CTI         []CTI                `hl7:"26,display=Clinical Trial Identification"`
	BLG         *BLG                 `hl7:"27,display=Billing"`
}

// OrderDetail
type ORM_O01_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=ORM_O01_OrderDetail,type=tg"`
	OrderDetailSegment *ORM_O01_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"20,display=Notes and Comments"`
	CTD                *CTD                        `hl7:"21,display=Contact Data"`
	DG1                []DG1                       `hl7:"22,display=Diagnosis"`
	Observation        []ORM_O01_Observation       `hl7:",display=Observation"`
}

// OrderDetailSegment
type ORM_O01_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=ORM_O01_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"14,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"15,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"16,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"17,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"18,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"19,conditional,display=Diet Tray Instructions"`
}

// Observation
type ORM_O01_Observation struct {
	HL7 HL7Name `hl7:",name=ORM_O01_Observation,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// General Order Message
//
// Retained for backwards compatibility only as of v2.4. Refer to OMG, OML, OMD, OMS, OMN, OMI, and OMP instead.
//
// The function of this message is to initiate the transmission of information about an order.  This includes placing new orders,
// cancellation of existing orders, discontinuation, holding, etc.  ORM messages can originate also with a placer, filler,
// or an interested third party.
type ORM_O01 struct {
	HL7     HL7Name          `hl7:",name=ORM_O01,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *ORM_O01_Patient `hl7:",display=Patient"`
	Order   []ORM_O01_Order  `hl7:",required,display=Order"`
}

// Response
type ORN_O08_Response struct {
	HL7     HL7Name          `hl7:",name=ORN_O08_Response,type=tg"`
	Patient *ORN_O08_Patient `hl7:",display=Patient"`
	Order   []ORN_O08_Order  `hl7:",required,display=Order"`
}

// Patient
type ORN_O08_Patient struct {
	HL7 HL7Name `hl7:",name=ORN_O08_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type ORN_O08_Order struct {
	HL7    HL7Name          `hl7:",name=ORN_O08_Order,type=tg"`
	ORC    *ORC             `hl7:"9,required,display=Common Order"`
	Timing []ORN_O08_Timing `hl7:",display=Timing"`
	RQD    *RQD             `hl7:"12,required,display=Requisition Detail"`
	RQ1    *RQ1             `hl7:"13,display=Requisition Detail-1"`
	NTE    []NTE            `hl7:"14,display=Notes and Comments"`
}

// Timing
type ORN_O08_Timing struct {
	HL7 HL7Name `hl7:",name=ORN_O08_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// Non-Stock Requisition Order Acknowledgement
//
// Non-stock requisitions can use the ORM message with the RQD and RQ1 segments as the detail segment, or use the OMN and ORN
// messages.
type ORN_O08 struct {
	HL7      HL7Name           `hl7:",name=ORN_O08,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORN_O08_Response `hl7:",display=Response"`
}

// Response
type ORP_O10_Response struct {
	HL7     HL7Name          `hl7:",name=ORP_O10_Response,type=tg"`
	Patient *ORP_O10_Patient `hl7:",display=Patient"`
	Order   []ORP_O10_Order  `hl7:",required,display=Order"`
}

// Patient
type ORP_O10_Patient struct {
	HL7 HL7Name `hl7:",name=ORP_O10_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type ORP_O10_Order struct {
	HL7         HL7Name              `hl7:",name=ORP_O10_Order,type=tg"`
	ORC         *ORC                 `hl7:"9,required,display=Common Order"`
	Timing      []ORP_O10_Timing     `hl7:",display=Timing"`
	OrderDetail *ORP_O10_OrderDetail `hl7:",display=Order Detail"`
}

// Timing
type ORP_O10_Timing struct {
	HL7 HL7Name `hl7:",name=ORP_O10_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// OrderDetail
type ORP_O10_OrderDetail struct {
	HL7       HL7Name             `hl7:",name=ORP_O10_OrderDetail,type=tg"`
	RXO       *RXO                `hl7:"12,required,display=Pharmacy/Treatment Order"`
	NTE       []NTE               `hl7:"13,display=Notes and Comments"`
	RXR       []RXR               `hl7:"14,required,display=Pharmacy/Treatment Route"`
	Component []ORP_O10_Component `hl7:",display=Component"`
}

// Component
type ORP_O10_Component struct {
	HL7 HL7Name `hl7:",name=ORP_O10_Component,type=tg"`
	RXC *RXC    `hl7:"15,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Pharmacy/Treatment Order Acknowledgement
type ORP_O10 struct {
	HL7      HL7Name           `hl7:",name=ORP_O10,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORP_O10_Response `hl7:",display=Response"`
}

// Response
type ORR_O02_Response struct {
	HL7     HL7Name          `hl7:",name=ORR_O02_Response,type=tg"`
	Patient *ORR_O02_Patient `hl7:",display=Patient"`
	Order   []ORR_O02_Order  `hl7:",required,display=Order"`
}

// Patient
type ORR_O02_Patient struct {
	HL7 HL7Name `hl7:",name=ORR_O02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORR_O02_Order struct {
	HL7                HL7Name                     `hl7:",name=ORR_O02_Order,type=tg"`
	ORC                *ORC                        `hl7:"7,required,display=Common Order"`
	OrderDetailSegment *ORR_O02_OrderDetailSegment `hl7:",display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"14,display=Notes and Comments"`
	CTI                []CTI                       `hl7:"15,display=Clinical Trial Identification"`
}

// OrderDetailSegment
type ORR_O02_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=ORR_O02_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"8,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"9,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"10,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"11,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"12,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"13,conditional,display=Diet Tray Instructions"`
}

// General Order Response Message to any ORM
//
// Left for backward compatibility only.  It is recommended that the trigger events ORG, ORL, ORD, ORS, ORN, ORI, and ORP be
// used instead when communicating orders and order related events.
//
// The function of this message is to respond to an ORM message.  An ORR message is the application acknowledgment to an ORM message.
type ORR_O02 struct {
	HL7      HL7Name           `hl7:",name=ORR_O02,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *ORR_O02_Response `hl7:",display=Response"`
}

// Response
type ORS_O06_Response struct {
	HL7     HL7Name          `hl7:",name=ORS_O06_Response,type=tg"`
	Patient *ORS_O06_Patient `hl7:",display=Patient"`
	Order   []ORS_O06_Order  `hl7:",required,display=Order"`
}

// Patient
type ORS_O06_Patient struct {
	HL7 HL7Name `hl7:",name=ORS_O06_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type ORS_O06_Order struct {
	HL7    HL7Name          `hl7:",name=ORS_O06_Order,type=tg"`
	ORC    *ORC             `hl7:"9,required,display=Common Order"`
	Timing []ORS_O06_Timing `hl7:",display=Timing"`
	RQD    *RQD             `hl7:"12,required,display=Requisition Detail"`
	RQ1    *RQ1             `hl7:"13,display=Requisition Detail-1"`
	NTE    []NTE            `hl7:"14,display=Notes and Comments"`
}

// Timing
type ORS_O06_Timing struct {
	HL7 HL7Name `hl7:",name=ORS_O06_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// Stock Requisition Order Acknowledgement
//
// Stock requisition orders use the ORM where RQD is the detail segment for backward compatibility or can use the OMS and ORS
// messages.
type ORS_O06 struct {
	HL7      HL7Name           `hl7:",name=ORS_O06,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *ORS_O06_Response `hl7:",display=Response"`
}

// PatientResult
type ORU_R01_PatientResult struct {
	HL7              HL7Name                    `hl7:",name=ORU_R01_PatientResult,type=tg"`
	Patient          *ORU_R01_Patient           `hl7:",display=Patient"`
	OrderObservation []ORU_R01_OrderObservation `hl7:",required,display=Order Observation"`
}

// Patient
type ORU_R01_Patient struct {
	HL7   HL7Name        `hl7:",name=ORU_R01_Patient,type=tg"`
	PID   *PID           `hl7:"4,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"5,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"6,display=Notes and Comments"`
	NK1   []NK1          `hl7:"7,display=Next of Kin / Associated Parties"`
	OBX   []OBX          `hl7:"8,display=Observation/Result"`
	Visit *ORU_R01_Visit `hl7:",display=Visit"`
}

// Visit
type ORU_R01_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// OrderObservation
type ORU_R01_OrderObservation struct {
	HL7         HL7Name               `hl7:",name=ORU_R01_OrderObservation,type=tg"`
	ORC         *ORC                  `hl7:"11,display=Common Order"`
	OBR         *OBR                  `hl7:"12,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"13,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"14,display=Role"`
	TimingQty   []ORU_R01_TimingQty   `hl7:",display=Timing Qty"`
	CTD         *CTD                  `hl7:"17,display=Contact Data"`
	Observation []ORU_R01_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"20,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"21,display=Clinical Trial Identification"`
	Specimen    []ORU_R01_Specimen    `hl7:",display=Specimen"`
}

// TimingQty
type ORU_R01_TimingQty struct {
	HL7 HL7Name `hl7:",name=ORU_R01_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// Observation
type ORU_R01_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Specimen
type ORU_R01_Specimen struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Specimen,type=tg"`
	SPM *SPM    `hl7:"22,required,display=Specimen"`
	OBX []OBX   `hl7:"23,display=Observation/Result"`
}

// Unsolicited transmission of an observation message
//
// The ORU message is for transmitting laboratory results to other systems.  The OUL message is designed to accommodate the
// laboratory processes of laboratory automation systems.
type ORU_R01 struct {
	HL7           HL7Name                 `hl7:",name=ORU_R01,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	PatientResult []ORU_R01_PatientResult `hl7:",required,display=Patient Result"`
	DSC           *DSC                    `hl7:"24,display=Continuation Pointer"`
}

// Visit
type ORU_R30_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R30_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// TimingQty
type ORU_R30_TimingQty struct {
	HL7 HL7Name `hl7:",name=ORU_R30_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// Observation
type ORU_R30_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R30_Observation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Unsolicited Point-Of-Care Observation Message without Existing Order – Place an Order
//
// This event trigger instructs the receiving system to create a new order for the observation(s) contained in the message.
type ORU_R30 struct {
	HL7         HL7Name               `hl7:",name=ORU_R30,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID         *PID                  `hl7:"4,required,display=Patient Identification"`
	PD1         *PD1                  `hl7:"5,display=Patient Additional Demographic"`
	OBX         []OBX                 `hl7:"6,display=Observation/Result"`
	Visit       *ORU_R30_Visit        `hl7:",display=Visit"`
	ORC         *ORC                  `hl7:"9,required,display=Common Order"`
	OBR         *OBR                  `hl7:"10,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"11,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"12,display=Role"`
	TimingQty   []ORU_R30_TimingQty   `hl7:",display=Timing Qty"`
	Observation []ORU_R30_Observation `hl7:",required,display=Observation"`
}

// Visit
type ORU_R31_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R31_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// TimingQty
type ORU_R31_TimingQty struct {
	HL7 HL7Name `hl7:",name=ORU_R31_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// Observation
type ORU_R31_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R31_Observation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Unsolicited New Point-Of-Care Observation Message – Search for an Order
//
// This event trigger instructs the receiving system to search for an existing order for the observation(s) contained in
// the message.
type ORU_R31 struct {
	HL7         HL7Name               `hl7:",name=ORU_R31,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID         *PID                  `hl7:"4,required,display=Patient Identification"`
	PD1         *PD1                  `hl7:"5,display=Patient Additional Demographic"`
	OBX         []OBX                 `hl7:"6,display=Observation/Result"`
	Visit       *ORU_R31_Visit        `hl7:",display=Visit"`
	ORC         *ORC                  `hl7:"9,required,display=Common Order"`
	OBR         *OBR                  `hl7:"10,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"11,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"12,display=Role"`
	TimingQty   []ORU_R31_TimingQty   `hl7:",display=Timing Qty"`
	Observation []ORU_R31_Observation `hl7:",required,display=Observation"`
}

// Visit
type ORU_R32_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R32_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// TimingQty
type ORU_R32_TimingQty struct {
	HL7 HL7Name `hl7:",name=ORU_R32_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// Observation
type ORU_R32_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R32_Observation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Unsolicited Pre-Ordered Point-Of-Care Observation
//
// This event trigger instructs the receiver to place the result with the order information included in the message.
type ORU_R32 struct {
	HL7         HL7Name               `hl7:",name=ORU_R32,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID         *PID                  `hl7:"4,required,display=Patient Identification"`
	PD1         *PD1                  `hl7:"5,display=Patient Additional Demographic"`
	OBX         []OBX                 `hl7:"6,display=Observation/Result"`
	Visit       *ORU_R32_Visit        `hl7:",display=Visit"`
	ORC         *ORC                  `hl7:"9,required,display=Common Order"`
	OBR         *OBR                  `hl7:"10,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"11,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"12,display=Role"`
	TimingQty   []ORU_R32_TimingQty   `hl7:",display=Timing Qty"`
	Observation []ORU_R32_Observation `hl7:",required,display=Observation"`
}

// PatientResult
type ORU_W01_PatientResult struct {
	HL7              HL7Name                    `hl7:",name=ORU_W01_PatientResult,type=tg"`
	Patient          *ORU_W01_Patient           `hl7:",display=Patient"`
	OrderObservation []ORU_W01_OrderObservation `hl7:",required,display=Order Observation"`
}

// Patient
type ORU_W01_Patient struct {
	HL7   HL7Name        `hl7:",name=ORU_W01_Patient,type=tg"`
	PID   *PID           `hl7:"4,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"5,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"6,display=Notes and Comments"`
	NK1   []NK1          `hl7:"7,display=Next of Kin / Associated Parties"`
	OBX   []OBX          `hl7:"8,display=Observation/Result"`
	Visit *ORU_W01_Visit `hl7:",display=Visit"`
}

// Visit
type ORU_W01_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_W01_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// OrderObservation
type ORU_W01_OrderObservation struct {
	HL7         HL7Name               `hl7:",name=ORU_W01_OrderObservation,type=tg"`
	ORC         *ORC                  `hl7:"11,display=Common Order"`
	OBR         *OBR                  `hl7:"12,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"13,display=Notes and Comments"`
	ROL         []ROL                 `hl7:"14,display=Role"`
	TimingQty   []ORU_W01_TimingQty   `hl7:",display=Timing Qty"`
	CTD         *CTD                  `hl7:"17,display=Contact Data"`
	Observation []ORU_W01_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"20,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"21,display=Clinical Trial Identification"`
	Specimen    []ORU_W01_Specimen    `hl7:",display=Specimen"`
}

// TimingQty
type ORU_W01_TimingQty struct {
	HL7 HL7Name `hl7:",name=ORU_W01_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"15,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"16,display=Timing/Quantity Relationship"`
}

// Observation
type ORU_W01_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_W01_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Specimen
type ORU_W01_Specimen struct {
	HL7 HL7Name `hl7:",name=ORU_W01_Specimen,type=tg"`
	SPM *SPM    `hl7:"22,required,display=Specimen"`
	OBX []OBX   `hl7:"23,display=Observation/Result"`
}

// Waveform Result, Unsolicited Transmission Of Requested Information
//
// The waveform response unsolicited trigger event identifies ORU messages used to transmit waveform data which are results
// of an ordered test or series of observations. The W01 trigger event may also be used to identify ORU messages sent as the eventual
// response to a QRY message specifying a deferred mode query for waveform results/observations with record-oriented format
// (similar to the deferred response display mode DSR message type described in Chapter 2).  One or more ORU messages with the
// W01 trigger event may result from this type of QRY message.
type ORU_W01 struct {
	HL7           HL7Name                 `hl7:",name=ORU_W01,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	PatientResult []ORU_W01_PatientResult `hl7:",required,display=Patient Result"`
	DSC           *DSC                    `hl7:"24,display=Continuation Pointer"`
}

// Query for Order Status
//
// The OSQ message is a record-oriented query that has the structure as the regular QRY message.  OSQ is included here for the
// convenience of implementers.
type OSQ_Q06 struct {
	HL7 HL7Name `hl7:",name=OSQ_Q06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Response
type OSR_Q06_Response struct {
	HL7     HL7Name          `hl7:",name=OSR_Q06_Response,type=tg"`
	Patient *OSR_Q06_Patient `hl7:",display=Patient"`
	Order   []OSR_Q06_Order  `hl7:",required,display=Order"`
}

// Patient
type OSR_Q06_Patient struct {
	HL7 HL7Name `hl7:",name=OSR_Q06_Patient,type=tg"`
	PID *PID    `hl7:"9,required,display=Patient Identification"`
	NTE []NTE   `hl7:"10,display=Notes and Comments"`
}

// Order
type OSR_Q06_Order struct {
	HL7                HL7Name                     `hl7:",name=OSR_Q06_Order,type=tg"`
	ORC                *ORC                        `hl7:"11,required,display=Common Order"`
	Timing             []OSR_Q06_Timing            `hl7:",display=Timing"`
	OrderDetailSegment *OSR_Q06_OrderDetailSegment `hl7:",display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"20,display=Notes and Comments"`
	CTI                []CTI                       `hl7:"21,display=Clinical Trial Identification"`
}

// Timing
type OSR_Q06_Timing struct {
	HL7 HL7Name `hl7:",name=OSR_Q06_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"12,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"13,display=Timing/Quantity Relationship"`
}

// OrderDetailSegment
type OSR_Q06_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=OSR_Q06_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"14,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"15,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"16,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"17,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"18,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"19,conditional,display=Diet Tray Instructions"`
}

// Query Response for Order Status
//
// The function of this message is to respond to an OSQ message.  The OSQ message is a record-oriented query that has the structure
// as the regular QRY message.  OSQ is included here for the convenience of implementers.
type OSR_Q06 struct {
	HL7      HL7Name           `hl7:",name=OSR_Q06,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	QRD      *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	QRF      *QRF              `hl7:"8,display=Original style query filter"`
	Response *OSR_Q06_Response `hl7:",display=Response"`
	DSC      *DSC              `hl7:"22,display=Continuation Pointer"`
}

// Patient
type OUL_R21_Patient struct {
	HL7   HL7Name        `hl7:",name=OUL_R21_Patient,type=tg"`
	PID   *PID           `hl7:"4,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"5,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"6,display=Notes and Comments"`
	Visit *OUL_R21_Visit `hl7:",display=Visit"`
}

// Visit
type OUL_R21_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R21_Visit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// OrderObservation
type OUL_R21_OrderObservation struct {
	HL7         HL7Name               `hl7:",name=OUL_R21_OrderObservation,type=tg"`
	Container   *OUL_R21_Container    `hl7:",display=Container"`
	ORC         *ORC                  `hl7:"11,display=Common Order"`
	OBR         *OBR                  `hl7:"12,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"13,display=Notes and Comments"`
	TimingQty   []OUL_R21_TimingQty   `hl7:",display=Timing Qty"`
	Observation []OUL_R21_Observation `hl7:",required,display=Observation"`
	CTI         []CTI                 `hl7:"20,display=Clinical Trial Identification"`
}

// Container
type OUL_R21_Container struct {
	HL7 HL7Name `hl7:",name=OUL_R21_Container,type=tg"`
	SAC *SAC    `hl7:"9,required,display=Specimen Container Detail"`
	SID *SID    `hl7:"10,display=Substance Identifier"`
}

// TimingQty
type OUL_R21_TimingQty struct {
	HL7 HL7Name `hl7:",name=OUL_R21_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/Quantity Relationship"`
}

// Observation
type OUL_R21_Observation struct {
	HL7 HL7Name `hl7:",name=OUL_R21_Observation,type=tg"`
	OBX *OBX    `hl7:"16,display=Observation/Result"`
	TCD *TCD    `hl7:"17,display=Test Code Detail"`
	SID []SID   `hl7:"18,display=Substance Identifier"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Unsolicited laboratory observation
//
// This message is kept here for backward compatibility reasons only. The new OUL messages with additional triggers should
// be used, when the Specimen information (segment SPM) with or without Container information (segment SAC) is required.
//
// This message was designed to accommodate laboratory automation systems.
type OUL_R21 struct {
	HL7              HL7Name                    `hl7:",name=OUL_R21,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	SFT              []SFT                      `hl7:"2,display=Software Segment"`
	NTE              *NTE                       `hl7:"3,display=Notes and Comments"`
	Patient          *OUL_R21_Patient           `hl7:",display=Patient"`
	OrderObservation []OUL_R21_OrderObservation `hl7:",required,display=Order Observation"`
	DSC              *DSC                       `hl7:"21,display=Continuation Pointer"`
}

// Patient
type OUL_R22_Patient struct {
	HL7   HL7Name        `hl7:",name=OUL_R22_Patient,type=tg"`
	PID   *PID           `hl7:"5,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"6,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"7,display=Notes and Comments"`
	OBX   []OBX          `hl7:"8,display=Observation/Result"`
	Visit *OUL_R22_Visit `hl7:",display=Visit"`
}

// Visit
type OUL_R22_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Specimen
type OUL_R22_Specimen struct {
	HL7       HL7Name             `hl7:",name=OUL_R22_Specimen,type=tg"`
	SPM       *SPM                `hl7:"12,required,display=Specimen"`
	OBX       []OBX               `hl7:"13,display=Observation/Result"`
	Container []OUL_R22_Container `hl7:",display=Container"`
	Order     []OUL_R22_Order     `hl7:",required,display=Order"`
}

// Container
type OUL_R22_Container struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Container,type=tg"`
	SAC *SAC    `hl7:"14,required,display=Specimen Container Detail"`
	INV *INV    `hl7:"15,display=Inventory Detail"`
}

// Order
type OUL_R22_Order struct {
	HL7       HL7Name             `hl7:",name=OUL_R22_Order,type=tg"`
	OBR       *OBR                `hl7:"16,required,display=Observation Request"`
	ORC       *ORC                `hl7:"17,display=Common Order"`
	NTE       []NTE               `hl7:"18,display=Notes and Comments"`
	ROL       []ROL               `hl7:"19,display=Role"`
	TimingQty []OUL_R22_TimingQty `hl7:",display=Timing Qty"`
	Result    []OUL_R22_Result    `hl7:",display=Result"`
	CTI       []CTI               `hl7:"26,display=Clinical Trial Identification"`
}

// TimingQty
type OUL_R22_TimingQty struct {
	HL7 HL7Name `hl7:",name=OUL_R22_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/Quantity Relationship"`
}

// Result
type OUL_R22_Result struct {
	HL7 HL7Name `hl7:",name=OUL_R22_Result,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	TCD *TCD    `hl7:"23,display=Test Code Detail"`
	SID []SID   `hl7:"24,display=Substance Identifier"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Unsolicited Specimen Oriented Observation
//
// This message was designed to accommodate specimen oriented testing. It should be applicable to container-less testing
// (e.g., elephant on a table) and laboratory automation systems requiring container.
//
// Generally this construct allows transfer of multiple results related to a specimen from a patient, where this specimen
// has been in none, one, or multiple containers.
type OUL_R22 struct {
	HL7      HL7Name            `hl7:",name=OUL_R22,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	NTE      *NTE               `hl7:"4,display=Notes and Comments"`
	Patient  *OUL_R22_Patient   `hl7:",display=Patient"`
	NK1      []NK1              `hl7:"11,display=Next of Kin / Associated Parties"`
	Specimen []OUL_R22_Specimen `hl7:",required,display=Specimen"`
	DSC      *DSC               `hl7:"27,display=Continuation Pointer"`
}

// Patient
type OUL_R23_Patient struct {
	HL7   HL7Name        `hl7:",name=OUL_R23_Patient,type=tg"`
	PID   *PID           `hl7:"5,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"6,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"7,display=Notes and Comments"`
	OBX   []OBX          `hl7:"8,display=Observation/Result"`
	Visit *OUL_R23_Visit `hl7:",display=Visit"`
}

// Visit
type OUL_R23_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R23_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Specimen
type OUL_R23_Specimen struct {
	HL7       HL7Name             `hl7:",name=OUL_R23_Specimen,type=tg"`
	SPM       *SPM                `hl7:"12,required,display=Specimen"`
	OBX       []OBX               `hl7:"13,display=Observation/Result"`
	Container []OUL_R23_Container `hl7:",required,display=Container"`
}

// Container
type OUL_R23_Container struct {
	HL7   HL7Name         `hl7:",name=OUL_R23_Container,type=tg"`
	SAC   *SAC            `hl7:"14,required,display=Specimen Container Detail"`
	INV   *INV            `hl7:"15,display=Inventory Detail"`
	Order []OUL_R23_Order `hl7:",required,display=Order"`
}

// Order
type OUL_R23_Order struct {
	HL7       HL7Name             `hl7:",name=OUL_R23_Order,type=tg"`
	OBR       *OBR                `hl7:"16,required,display=Observation Request"`
	ORC       *ORC                `hl7:"17,display=Common Order"`
	NTE       []NTE               `hl7:"18,display=Notes and Comments"`
	ROL       []ROL               `hl7:"19,display=Role"`
	TimingQty []OUL_R23_TimingQty `hl7:",display=Timing Qty"`
	Result    []OUL_R23_Result    `hl7:",display=Result"`
	CTI       []CTI               `hl7:"26,display=Clinical Trial Identification"`
}

// TimingQty
type OUL_R23_TimingQty struct {
	HL7 HL7Name `hl7:",name=OUL_R23_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/Quantity Relationship"`
}

// Result
type OUL_R23_Result struct {
	HL7 HL7Name `hl7:",name=OUL_R23_Result,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	TCD *TCD    `hl7:"23,display=Test Code Detail"`
	SID []SID   `hl7:"24,display=Substance Identifier"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Unsolicited Specimen Container Oriented Observation
//
// This message was designed to accommodate specimen oriented testing. It should be applicable to, for example, laboratory
// automation systems requiring container.
//
// Generally this construct allows transfer of multiple results related to one or more specific containers with one or more
// specimens from a patient.
type OUL_R23 struct {
	HL7      HL7Name            `hl7:",name=OUL_R23,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	NTE      *NTE               `hl7:"4,display=Notes and Comments"`
	Patient  *OUL_R23_Patient   `hl7:",display=Patient"`
	NK1      []NK1              `hl7:"11,display=Next of Kin / Associated Parties"`
	Specimen []OUL_R23_Specimen `hl7:",required,display=Specimen"`
	DSC      *DSC               `hl7:"27,display=Continuation Pointer"`
}

// Patient
type OUL_R24_Patient struct {
	HL7   HL7Name        `hl7:",name=OUL_R24_Patient,type=tg"`
	PID   *PID           `hl7:"5,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"6,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"7,display=Notes and Comments"`
	OBX   []OBX          `hl7:"8,display=Observation/Result"`
	Visit *OUL_R24_Visit `hl7:",display=Visit"`
}

// Visit
type OUL_R24_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Visit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Order
type OUL_R24_Order struct {
	HL7       HL7Name             `hl7:",name=OUL_R24_Order,type=tg"`
	OBR       *OBR                `hl7:"12,required,display=Observation Request"`
	ORC       *ORC                `hl7:"13,display=Common Order"`
	NTE       []NTE               `hl7:"14,display=Notes and Comments"`
	ROL       []ROL               `hl7:"15,display=Role"`
	TimingQty []OUL_R24_TimingQty `hl7:",display=Timing Qty"`
	Specimen  []OUL_R24_Specimen  `hl7:",display=Specimen"`
	Result    []OUL_R24_Result    `hl7:",display=Result"`
	CTI       []CTI               `hl7:"26,display=Clinical Trial Identification"`
}

// TimingQty
type OUL_R24_TimingQty struct {
	HL7 HL7Name `hl7:",name=OUL_R24_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Specimen
type OUL_R24_Specimen struct {
	HL7       HL7Name             `hl7:",name=OUL_R24_Specimen,type=tg"`
	SPM       *SPM                `hl7:"18,required,display=Specimen"`
	OBX       []OBX               `hl7:"19,display=Observation/Result"`
	Container []OUL_R24_Container `hl7:",display=Container"`
}

// Container
type OUL_R24_Container struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Container,type=tg"`
	SAC *SAC    `hl7:"20,required,display=Specimen Container Detail"`
	INV *INV    `hl7:"21,display=Inventory Detail"`
}

// Result
type OUL_R24_Result struct {
	HL7 HL7Name `hl7:",name=OUL_R24_Result,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	TCD *TCD    `hl7:"23,display=Test Code Detail"`
	SID []SID   `hl7:"24,display=Substance Identifier"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Unsolicited Order Oriented Observation
//
// This message was designed to accommodate multi-specimen oriented testing. It should be applicable to, e.g., laboratory
// automation systems requiring container.
//
// Generally this construct allows transfer of multiple results, each one related to none, one or more specific containers
// with one or more specimens from a patient.
type OUL_R24 struct {
	HL7     HL7Name          `hl7:",name=OUL_R24,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     *NTE             `hl7:"4,display=Notes and Comments"`
	Patient *OUL_R24_Patient `hl7:",display=Patient"`
	NK1     []NK1            `hl7:"11,display=Next of Kin / Associated Parties"`
	Order   []OUL_R24_Order  `hl7:",required,display=Order"`
	DSC     *DSC             `hl7:"27,display=Continuation Pointer"`
}

// Visit
type PEX_P07_Visit struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Visit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Experience
type PEX_P07_Experience struct {
	HL7            HL7Name                  `hl7:",name=PEX_P07_Experience,type=tg"`
	PES            *PES                     `hl7:"10,required,display=Product Experience Sender"`
	PexObservation []PEX_P07_PexObservation `hl7:",required,display=Pex Observation"`
}

// PexObservation
type PEX_P07_PexObservation struct {
	HL7      HL7Name            `hl7:",name=PEX_P07_PexObservation,type=tg"`
	PEO      *PEO               `hl7:"11,required,display=Product Experience Observation"`
	PexCause []PEX_P07_PexCause `hl7:",required,display=Pex Cause"`
}

// PexCause
type PEX_P07_PexCause struct {
	HL7              HL7Name                    `hl7:",name=PEX_P07_PexCause,type=tg"`
	PCR              *PCR                       `hl7:"12,required,display=Possible Causal Relationship"`
	RxOrder          *PEX_P07_RxOrder           `hl7:",display=Rx Order"`
	RxAdministration []PEX_P07_RxAdministration `hl7:",display=Rx Administration"`
	PRB              []PRB                      `hl7:"19,display=Problem Details"`
	OBX              []OBX                      `hl7:"20,display=Observation/Result"`
	NTE              []NTE                      `hl7:"21,display=Notes and Comments"`
	AssociatedPerson *PEX_P07_AssociatedPerson  `hl7:",display=Associated Person"`
	Study            []PEX_P07_Study            `hl7:",display=Study"`
}

// RxOrder
type PEX_P07_RxOrder struct {
	HL7       HL7Name             `hl7:",name=PEX_P07_RxOrder,type=tg"`
	RXE       *RXE                `hl7:"13,required,display=Pharmacy/Treatment Encoded Order"`
	TimingQty []PEX_P07_TimingQty `hl7:",required,display=Timing Qty"`
	RXR       []RXR               `hl7:"16,display=Pharmacy/Treatment Route"`
}

// TimingQty
type PEX_P07_TimingQty struct {
	HL7 HL7Name `hl7:",name=PEX_P07_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/Quantity Relationship"`
}

// RxAdministration
type PEX_P07_RxAdministration struct {
	HL7 HL7Name `hl7:",name=PEX_P07_RxAdministration,type=tg"`
	RXA *RXA    `hl7:"17,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"18,display=Pharmacy/Treatment Route"`
}

// AssociatedPerson
type PEX_P07_AssociatedPerson struct {
	HL7               HL7Name                     `hl7:",name=PEX_P07_AssociatedPerson,type=tg"`
	NK1               *NK1                        `hl7:"22,required,display=Next of Kin / Associated Parties"`
	AssociatedRxOrder *PEX_P07_AssociatedRxOrder  `hl7:",display=Associated Rx Order"`
	AssociatedRxAdmin []PEX_P07_AssociatedRxAdmin `hl7:",display=Associated Rx Admin"`
	PRB               []PRB                       `hl7:"29,display=Problem Details"`
	OBX               []OBX                       `hl7:"30,display=Observation/Result"`
}

// AssociatedRxOrder
type PEX_P07_AssociatedRxOrder struct {
	HL7          HL7Name                `hl7:",name=PEX_P07_AssociatedRxOrder,type=tg"`
	RXE          *RXE                   `hl7:"23,required,display=Pharmacy/Treatment Encoded Order"`
	Nk1TimingQty []PEX_P07_Nk1TimingQty `hl7:",required,display=Nk1 Timing Qty"`
	RXR          []RXR                  `hl7:"26,display=Pharmacy/Treatment Route"`
}

// Nk1TimingQty
type PEX_P07_Nk1TimingQty struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Nk1TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// AssociatedRxAdmin
type PEX_P07_AssociatedRxAdmin struct {
	HL7 HL7Name `hl7:",name=PEX_P07_AssociatedRxAdmin,type=tg"`
	RXA *RXA    `hl7:"27,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"28,display=Pharmacy/Treatment Route"`
}

// Study
type PEX_P07_Study struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Study,type=tg"`
	CSR *CSR    `hl7:"31,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"32,display=Clinical Study Phase"`
}

// Unsolicited Initial Individual Product Experience Report
//
// The primary application of this message is to transfer information related to an adverse event occurring while a patient
// was exposed to a product.
type PEX_P07 struct {
	HL7        HL7Name              `hl7:",name=PEX_P07,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	SFT        []SFT                `hl7:"2,display=Software Segment"`
	UAC        *UAC                 `hl7:"3,display=User Authentication Credential"`
	EVN        *EVN                 `hl7:"4,required,display=Event Type"`
	PID        *PID                 `hl7:"5,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"6,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"7,display=Notes and Comments"`
	Visit      *PEX_P07_Visit       `hl7:",display=Visit"`
	Experience []PEX_P07_Experience `hl7:",required,display=Experience"`
}

// Visit
type PEX_P08_Visit struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Visit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Experience
type PEX_P08_Experience struct {
	HL7            HL7Name                  `hl7:",name=PEX_P08_Experience,type=tg"`
	PES            *PES                     `hl7:"10,required,display=Product Experience Sender"`
	PexObservation []PEX_P08_PexObservation `hl7:",required,display=Pex Observation"`
}

// PexObservation
type PEX_P08_PexObservation struct {
	HL7      HL7Name            `hl7:",name=PEX_P08_PexObservation,type=tg"`
	PEO      *PEO               `hl7:"11,required,display=Product Experience Observation"`
	PexCause []PEX_P08_PexCause `hl7:",required,display=Pex Cause"`
}

// PexCause
type PEX_P08_PexCause struct {
	HL7              HL7Name                    `hl7:",name=PEX_P08_PexCause,type=tg"`
	PCR              *PCR                       `hl7:"12,required,display=Possible Causal Relationship"`
	RxOrder          *PEX_P08_RxOrder           `hl7:",display=Rx Order"`
	RxAdministration []PEX_P08_RxAdministration `hl7:",display=Rx Administration"`
	PRB              []PRB                      `hl7:"19,display=Problem Details"`
	OBX              []OBX                      `hl7:"20,display=Observation/Result"`
	NTE              []NTE                      `hl7:"21,display=Notes and Comments"`
	AssociatedPerson *PEX_P08_AssociatedPerson  `hl7:",display=Associated Person"`
	Study            []PEX_P08_Study            `hl7:",display=Study"`
}

// RxOrder
type PEX_P08_RxOrder struct {
	HL7       HL7Name             `hl7:",name=PEX_P08_RxOrder,type=tg"`
	RXE       *RXE                `hl7:"13,required,display=Pharmacy/Treatment Encoded Order"`
	TimingQty []PEX_P08_TimingQty `hl7:",required,display=Timing Qty"`
	RXR       []RXR               `hl7:"16,display=Pharmacy/Treatment Route"`
}

// TimingQty
type PEX_P08_TimingQty struct {
	HL7 HL7Name `hl7:",name=PEX_P08_TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/Quantity Relationship"`
}

// RxAdministration
type PEX_P08_RxAdministration struct {
	HL7 HL7Name `hl7:",name=PEX_P08_RxAdministration,type=tg"`
	RXA *RXA    `hl7:"17,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"18,display=Pharmacy/Treatment Route"`
}

// AssociatedPerson
type PEX_P08_AssociatedPerson struct {
	HL7               HL7Name                     `hl7:",name=PEX_P08_AssociatedPerson,type=tg"`
	NK1               *NK1                        `hl7:"22,required,display=Next of Kin / Associated Parties"`
	AssociatedRxOrder *PEX_P08_AssociatedRxOrder  `hl7:",display=Associated Rx Order"`
	AssociatedRxAdmin []PEX_P08_AssociatedRxAdmin `hl7:",display=Associated Rx Admin"`
	PRB               []PRB                       `hl7:"29,display=Problem Details"`
	OBX               []OBX                       `hl7:"30,display=Observation/Result"`
}

// AssociatedRxOrder
type PEX_P08_AssociatedRxOrder struct {
	HL7          HL7Name                `hl7:",name=PEX_P08_AssociatedRxOrder,type=tg"`
	RXE          *RXE                   `hl7:"23,required,display=Pharmacy/Treatment Encoded Order"`
	Nk1TimingQty []PEX_P08_Nk1TimingQty `hl7:",required,display=Nk1 Timing Qty"`
	RXR          []RXR                  `hl7:"26,display=Pharmacy/Treatment Route"`
}

// Nk1TimingQty
type PEX_P08_Nk1TimingQty struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Nk1TimingQty,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// AssociatedRxAdmin
type PEX_P08_AssociatedRxAdmin struct {
	HL7 HL7Name `hl7:",name=PEX_P08_AssociatedRxAdmin,type=tg"`
	RXA *RXA    `hl7:"27,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"28,display=Pharmacy/Treatment Route"`
}

// Study
type PEX_P08_Study struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Study,type=tg"`
	CSR *CSR    `hl7:"31,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"32,display=Clinical Study Phase"`
}

// Unsolicited Updatel Individual Product Experience Report
//
// The primary application of this message is to transfer information related to an adverse event occurring while a patient
// was exposed to a product.
type PEX_P08 struct {
	HL7        HL7Name              `hl7:",name=PEX_P08,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	SFT        []SFT                `hl7:"2,display=Software Segment"`
	UAC        *UAC                 `hl7:"3,display=User Authentication Credential"`
	EVN        *EVN                 `hl7:"4,required,display=Event Type"`
	PID        *PID                 `hl7:"5,required,display=Patient Identification"`
	PD1        *PD1                 `hl7:"6,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"7,display=Notes and Comments"`
	Visit      *PEX_P08_Visit       `hl7:",display=Visit"`
	Experience []PEX_P08_Experience `hl7:",required,display=Experience"`
}

// PatientVisit
type PGL_PC6_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Goal
type PGL_PC6_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC6_Goal,type=tg"`
	GOL         *GOL                  `hl7:"7,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	GoalRole    []PGL_PC6_GoalRole    `hl7:",display=Goal Role"`
	Pathway     []PGL_PC6_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC6_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC6_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC6_Order       `hl7:",display=Order"`
}

// GoalRole
type PGL_PC6_GoalRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_GoalRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PGL_PC6_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Observation
type PGL_PC6_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/Result"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Problem
type PGL_PC6_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC6_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	ProblemRole        []PGL_PC6_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PGL_PC6_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PGL_PC6_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// ProblemObservation
type PGL_PC6_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Order
type PGL_PC6_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC6_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	OrderDetail *PGL_PC6_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PGL_PC6_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PGL_PC6_OrderDetail,type=tg"`
	OrderDetailSegment *PGL_PC6_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"30,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"31,display=Variance"`
	OrderObservation   []PGL_PC6_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PGL_PC6_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"24,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"25,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"26,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"27,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"28,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"29,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PGL_PC6_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/Result"`
	NTE []NTE   `hl7:"33,display=Notes and Comments"`
	VAR []VAR   `hl7:"34,display=Variance"`
}

// Patient Goal Add
//
// This message is used to send goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.P
type PGL_PC6 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC6,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PGL_PC6_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PGL_PC6_Goal        `hl7:",required,display=Goal"`
}

// PatientVisit
type PGL_PC7_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Goal
type PGL_PC7_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC7_Goal,type=tg"`
	GOL         *GOL                  `hl7:"7,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	GoalRole    []PGL_PC7_GoalRole    `hl7:",display=Goal Role"`
	Pathway     []PGL_PC7_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC7_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC7_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC7_Order       `hl7:",display=Order"`
}

// GoalRole
type PGL_PC7_GoalRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_GoalRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PGL_PC7_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Observation
type PGL_PC7_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/Result"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Problem
type PGL_PC7_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC7_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	ProblemRole        []PGL_PC7_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PGL_PC7_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PGL_PC7_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// ProblemObservation
type PGL_PC7_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Order
type PGL_PC7_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC7_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	OrderDetail *PGL_PC7_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PGL_PC7_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PGL_PC7_OrderDetail,type=tg"`
	OrderDetailSegment *PGL_PC7_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"30,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"31,display=Variance"`
	OrderObservation   []PGL_PC7_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PGL_PC7_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"24,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"25,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"26,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"27,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"28,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"29,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PGL_PC7_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/Result"`
	NTE []NTE   `hl7:"33,display=Notes and Comments"`
	VAR []VAR   `hl7:"34,display=Variance"`
}

// Patient Goal Update
//
// This message is used to send goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.P
type PGL_PC7 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC7,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PGL_PC7_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PGL_PC7_Goal        `hl7:",required,display=Goal"`
}

// PatientVisit
type PGL_PC8_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Goal
type PGL_PC8_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC8_Goal,type=tg"`
	GOL         *GOL                  `hl7:"7,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	GoalRole    []PGL_PC8_GoalRole    `hl7:",display=Goal Role"`
	Pathway     []PGL_PC8_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC8_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC8_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC8_Order       `hl7:",display=Order"`
}

// GoalRole
type PGL_PC8_GoalRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_GoalRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PGL_PC8_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Observation
type PGL_PC8_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/Result"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Problem
type PGL_PC8_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC8_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	ProblemRole        []PGL_PC8_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PGL_PC8_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PGL_PC8_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// ProblemObservation
type PGL_PC8_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Order
type PGL_PC8_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC8_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	OrderDetail *PGL_PC8_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PGL_PC8_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PGL_PC8_OrderDetail,type=tg"`
	OrderDetailSegment *PGL_PC8_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"30,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"31,display=Variance"`
	OrderObservation   []PGL_PC8_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PGL_PC8_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"24,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"25,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"26,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"27,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"28,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"29,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PGL_PC8_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/Result"`
	NTE []NTE   `hl7:"33,display=Notes and Comments"`
	VAR []VAR   `hl7:"34,display=Variance"`
}

// Patient Goal Delete
//
// This message is used to send goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.P
type PGL_PC8 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC8,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PGL_PC8_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PGL_PC8_Goal        `hl7:",required,display=Goal"`
}

// Provider
type PIN_I07_Provider struct {
	HL7 HL7Name `hl7:",name=PIN_I07_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// GuarantorInsurance
type PIN_I07_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=PIN_I07_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []PIN_I07_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type PIN_I07_Insurance struct {
	HL7 HL7Name `hl7:",name=PIN_I07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Unsolicited Insurance Information
//
// This trigger event is used by an entity or organization to transmit to a healthcare provider the insurance information
// on a specific patient.  Typically, the healthcare provider will be a primary care provider.
type PIN_I07 struct {
	HL7                HL7Name                     `hl7:",name=PIN_I07,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	Provider           []PIN_I07_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *PIN_I07_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes and Comments"`
}

// Add Personnel Record
//
// An event B01 signals to add a new record for healthcare administration information about an individual healthcare practitioner
// establishing a relationship between that practitioner and the institution.
//
// The EVN segment is used to indicate the effective or planned date.
type PMU_B01 struct {
	HL7 HL7Name `hl7:",name=PMU_B01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit"`
	AFF []AFF   `hl7:"8,display=Professional Affiliation"`
	LAN []LAN   `hl7:"9,display=Language Detail"`
	EDU []EDU   `hl7:"10,display=Educational Detail"`
	CER []CER   `hl7:"11,display=Certificate Detail"`
}

// Update Personnel Record
//
// An event B02 signals to update the record with the healthcare administration information about an individual healthcare
// practitioner.  This event should not be used to grant/revoke a certificate.
//
// The EVN segment is used to indicate the effective or planned date.
type PMU_B02 struct {
	HL7 HL7Name `hl7:",name=PMU_B02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit"`
	AFF []AFF   `hl7:"8,display=Professional Affiliation"`
	LAN []LAN   `hl7:"9,display=Language Detail"`
	EDU []EDU   `hl7:"10,display=Educational Detail"`
	CER []CER   `hl7:"11,display=Certificate Detail"`
}

// Delete Personnel Record
//
// An event B03 signals to delete the record with the healthcare administration information about an individual healthcare
// practitioner to correct erroneous entries.
//
// The EVN segment is used to indicate the effective or planned date.
type PMU_B03 struct {
	HL7 HL7Name `hl7:",name=PMU_B03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
}

// Active Practicing Person
//
// An event B04 signals that a staff member is available for work (e.g., schedules can be created) and has a relationship with
// the institution.  This message applies to STF-7.
type PMU_B04 struct {
	HL7 HL7Name `hl7:",name=PMU_B04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit"`
}

// Deactivate Practicing Person
//
// An event B05 indicates that a staff member is temporarily unavailable for work, while maintaining a relationship with
// the institution.  This message applies to STF-7.
type PMU_B05 struct {
	HL7 HL7Name `hl7:",name=PMU_B05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit"`
}

// Terminate Practicing Person
//
// An event B06 signals that the formal relationship between a staff member and the institution has ended (i.e., upon termination).
type PMU_B06 struct {
	HL7 HL7Name `hl7:",name=PMU_B06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA []PRA   `hl7:"6,display=Practitioner Detail"`
	ORG []ORG   `hl7:"7,display=Practitioner Organization Unit"`
}

// Certificate
type PMU_B07_Certificate struct {
	HL7 HL7Name `hl7:",name=PMU_B07_Certificate,type=tg"`
	CER *CER    `hl7:"7,required,display=Certificate Detail"`
	ROL []ROL   `hl7:"8,display=Role"`
}

// Grant Certificate/Permission
//
// An event B07 indicates that a health professional is granted a certificate/permission for a special purpose.
//
// A permission is issued by an organization and documented in form of a certificate.  An update of a role results in an issuing
// of a new certificate.
//
// The EVN segment is used to indicate the effective or planned date.
type PMU_B07 struct {
	HL7         HL7Name               `hl7:",name=PMU_B07,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	EVN         *EVN                  `hl7:"4,required,display=Event Type"`
	STF         *STF                  `hl7:"5,required,display=Staff Identification"`
	PRA         *PRA                  `hl7:"6,display=Practitioner Detail"`
	Certificate []PMU_B07_Certificate `hl7:",display=Certificate"`
}

// Revoke Certificate/Permission
//
// An event B08 indicates that a certificate/permission for a health professional is revoked.
//
// The EVN segment is used to indicate the effective or planned date.
type PMU_B08 struct {
	HL7 HL7Name `hl7:",name=PMU_B08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,required,display=Event Type"`
	STF *STF    `hl7:"5,required,display=Staff Identification"`
	PRA *PRA    `hl7:"6,display=Practitioner Detail"`
	CER []CER   `hl7:"7,display=Certificate Detail"`
}

// PatientVisit
type PPG_PCG_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPG_PCG_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCG_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	PathwayRole []PPG_PCG_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPG_PCG_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPG_PCG_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Goal
type PPG_PCG_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCG_Goal,type=tg"`
	GOL             *GOL                      `hl7:"12,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"13,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"14,display=Variance"`
	GoalRole        []PPG_PCG_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPG_PCG_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPG_PCG_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCG_Order           `hl7:",display=Order"`
}

// GoalRole
type PPG_PCG_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_GoalRole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// GoalObservation
type PPG_PCG_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Problem
type PPG_PCG_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCG_Problem,type=tg"`
	PRB                *PRB                         `hl7:"19,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"20,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"21,display=Variance"`
	ProblemRole        []PPG_PCG_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPG_PCG_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPG_PCG_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// ProblemObservation
type PPG_PCG_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Order
type PPG_PCG_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCG_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	OrderDetail *PPG_PCG_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPG_PCG_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPG_PCG_OrderDetail,type=tg"`
	OrderDetailSegment *PPG_PCG_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"33,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"34,display=Variance"`
	OrderObservation   []PPG_PCG_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPG_PCG_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"27,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"28,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"29,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"30,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"31,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"32,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPG_PCG_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/Result"`
	NTE []NTE   `hl7:"36,display=Notes and Comments"`
	VAR []VAR   `hl7:"37,display=Variance"`
}

// Patient Pathway Add (Goal-Oriented)
type PPG_PCG struct {
	HL7          HL7Name               `hl7:",name=PPG_PCG,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPG_PCG_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPG_PCG_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPG_PCH_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPG_PCH_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCH_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	PathwayRole []PPG_PCH_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPG_PCH_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPG_PCH_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Goal
type PPG_PCH_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCH_Goal,type=tg"`
	GOL             *GOL                      `hl7:"12,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"13,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"14,display=Variance"`
	GoalRole        []PPG_PCH_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPG_PCH_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPG_PCH_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCH_Order           `hl7:",display=Order"`
}

// GoalRole
type PPG_PCH_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_GoalRole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// GoalObservation
type PPG_PCH_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Problem
type PPG_PCH_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCH_Problem,type=tg"`
	PRB                *PRB                         `hl7:"19,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"20,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"21,display=Variance"`
	ProblemRole        []PPG_PCH_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPG_PCH_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPG_PCH_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// ProblemObservation
type PPG_PCH_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Order
type PPG_PCH_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCH_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	OrderDetail *PPG_PCH_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPG_PCH_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPG_PCH_OrderDetail,type=tg"`
	OrderDetailSegment *PPG_PCH_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"33,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"34,display=Variance"`
	OrderObservation   []PPG_PCH_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPG_PCH_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"27,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"28,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"29,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"30,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"31,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"32,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPG_PCH_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/Result"`
	NTE []NTE   `hl7:"36,display=Notes and Comments"`
	VAR []VAR   `hl7:"37,display=Variance"`
}

// Patient Pathway Update (Goal-Oriented)
type PPG_PCH struct {
	HL7          HL7Name               `hl7:",name=PPG_PCH,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPG_PCH_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPG_PCH_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPG_PCJ_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPG_PCJ_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCJ_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	PathwayRole []PPG_PCJ_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPG_PCJ_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPG_PCJ_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Goal
type PPG_PCJ_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCJ_Goal,type=tg"`
	GOL             *GOL                      `hl7:"12,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"13,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"14,display=Variance"`
	GoalRole        []PPG_PCJ_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPG_PCJ_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPG_PCJ_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCJ_Order           `hl7:",display=Order"`
}

// GoalRole
type PPG_PCJ_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_GoalRole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// GoalObservation
type PPG_PCJ_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Problem
type PPG_PCJ_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCJ_Problem,type=tg"`
	PRB                *PRB                         `hl7:"19,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"20,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"21,display=Variance"`
	ProblemRole        []PPG_PCJ_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPG_PCJ_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPG_PCJ_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// ProblemObservation
type PPG_PCJ_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Order
type PPG_PCJ_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCJ_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	OrderDetail *PPG_PCJ_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPG_PCJ_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPG_PCJ_OrderDetail,type=tg"`
	OrderDetailSegment *PPG_PCJ_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"33,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"34,display=Variance"`
	OrderObservation   []PPG_PCJ_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPG_PCJ_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"27,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"28,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"29,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"30,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"31,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"32,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPG_PCJ_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/Result"`
	NTE []NTE   `hl7:"36,display=Notes and Comments"`
	VAR []VAR   `hl7:"37,display=Variance"`
}

// Patient Pathway Delete (Goal-Oriented)
type PPG_PCJ struct {
	HL7          HL7Name               `hl7:",name=PPG_PCJ,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPG_PCJ_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPG_PCJ_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPP_PCB_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPP_PCB_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCB_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	PathwayRole []PPP_PCB_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PPP_PCB_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PPP_PCB_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Problem
type PPP_PCB_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCB_Problem,type=tg"`
	PRB                *PRB                         `hl7:"12,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"13,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"14,display=Variance"`
	ProblemRole        []PPP_PCB_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPP_PCB_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPP_PCB_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCB_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPP_PCB_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// ProblemObservation
type PPP_PCB_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Goal
type PPP_PCB_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCB_Goal,type=tg"`
	GOL             *GOL                      `hl7:"19,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"20,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"21,display=Variance"`
	GoalRole        []PPP_PCB_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPP_PCB_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPP_PCB_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_GoalRole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// GoalObservation
type PPP_PCB_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Order
type PPP_PCB_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCB_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	OrderDetail *PPP_PCB_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPP_PCB_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPP_PCB_OrderDetail,type=tg"`
	OrderDetailSegment *PPP_PCB_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"33,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"34,display=Variance"`
	OrderObservation   []PPP_PCB_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPP_PCB_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"27,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"28,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"29,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"30,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"31,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"32,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPP_PCB_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/Result"`
	NTE []NTE   `hl7:"36,display=Notes and Comments"`
	VAR []VAR   `hl7:"37,display=Variance"`
}

// Patient Pathway Add (Problem-Oriented)
type PPP_PCB struct {
	HL7          HL7Name               `hl7:",name=PPP_PCB,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPP_PCB_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPP_PCB_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPP_PCC_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPP_PCC_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCC_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	PathwayRole []PPP_PCC_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PPP_PCC_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PPP_PCC_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Problem
type PPP_PCC_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCC_Problem,type=tg"`
	PRB                *PRB                         `hl7:"12,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"13,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"14,display=Variance"`
	ProblemRole        []PPP_PCC_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPP_PCC_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPP_PCC_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCC_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPP_PCC_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// ProblemObservation
type PPP_PCC_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Goal
type PPP_PCC_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCC_Goal,type=tg"`
	GOL             *GOL                      `hl7:"19,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"20,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"21,display=Variance"`
	GoalRole        []PPP_PCC_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPP_PCC_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPP_PCC_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_GoalRole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// GoalObservation
type PPP_PCC_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Order
type PPP_PCC_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCC_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	OrderDetail *PPP_PCC_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPP_PCC_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPP_PCC_OrderDetail,type=tg"`
	OrderDetailSegment *PPP_PCC_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"33,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"34,display=Variance"`
	OrderObservation   []PPP_PCC_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPP_PCC_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"27,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"28,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"29,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"30,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"31,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"32,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPP_PCC_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/Result"`
	NTE []NTE   `hl7:"36,display=Notes and Comments"`
	VAR []VAR   `hl7:"37,display=Variance"`
}

// Patient Pathway Update (Problem-Oriented)
type PPP_PCC struct {
	HL7          HL7Name               `hl7:",name=PPP_PCC,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPP_PCC_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPP_PCC_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPP_PCD_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Pathway
type PPP_PCD_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCD_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"7,required,display=Pathway"`
	NTE         []NTE                 `hl7:"8,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"9,display=Variance"`
	PathwayRole []PPP_PCD_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PPP_PCD_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PPP_PCD_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Problem
type PPP_PCD_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCD_Problem,type=tg"`
	PRB                *PRB                         `hl7:"12,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"13,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"14,display=Variance"`
	ProblemRole        []PPP_PCD_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPP_PCD_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPP_PCD_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCD_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPP_PCD_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"15,required,display=Role"`
	VAR []VAR   `hl7:"16,display=Variance"`
}

// ProblemObservation
type PPP_PCD_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Goal
type PPP_PCD_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCD_Goal,type=tg"`
	GOL             *GOL                      `hl7:"19,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"20,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"21,display=Variance"`
	GoalRole        []PPP_PCD_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPP_PCD_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPP_PCD_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_GoalRole,type=tg"`
	ROL *ROL    `hl7:"22,required,display=Role"`
	VAR []VAR   `hl7:"23,display=Variance"`
}

// GoalObservation
type PPP_PCD_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Order
type PPP_PCD_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCD_Order,type=tg"`
	ORC         *ORC                 `hl7:"26,required,display=Common Order"`
	OrderDetail *PPP_PCD_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPP_PCD_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPP_PCD_OrderDetail,type=tg"`
	OrderDetailSegment *PPP_PCD_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"33,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"34,display=Variance"`
	OrderObservation   []PPP_PCD_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPP_PCD_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"27,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"28,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"29,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"30,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"31,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"32,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPP_PCD_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"35,required,display=Observation/Result"`
	NTE []NTE   `hl7:"36,display=Notes and Comments"`
	VAR []VAR   `hl7:"37,display=Variance"`
}

// Patient Pathway Delete (Problem-Oriented)
type PPP_PCD struct {
	HL7          HL7Name               `hl7:",name=PPP_PCD,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPP_PCD_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPP_PCD_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPR_PC1_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Problem
type PPR_PC1_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC1_Problem,type=tg"`
	PRB                *PRB                         `hl7:"7,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"8,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"9,display=Variance"`
	ProblemRole        []PPR_PC1_ProblemRole        `hl7:",display=Problem Role"`
	Pathway            []PPR_PC1_Pathway            `hl7:",display=Pathway"`
	ProblemObservation []PPR_PC1_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPR_PC1_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC1_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPR_PC1_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PPR_PC1_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// ProblemObservation
type PPR_PC1_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/Result"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Goal
type PPR_PC1_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC1_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	GoalRole        []PPR_PC1_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPR_PC1_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPR_PC1_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_GoalRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// GoalObservation
type PPR_PC1_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Order
type PPR_PC1_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC1_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	OrderDetail *PPR_PC1_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPR_PC1_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPR_PC1_OrderDetail,type=tg"`
	OrderDetailSegment *PPR_PC1_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"30,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"31,display=Variance"`
	OrderObservation   []PPR_PC1_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPR_PC1_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"24,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"25,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"26,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"27,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"28,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"29,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPR_PC1_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/Result"`
	NTE []NTE   `hl7:"33,display=Notes and Comments"`
	VAR []VAR   `hl7:"34,display=Variance"`
}

// Patient Problem Add
//
// The patient problem message is used to send problems from one application to another (e.g., a point of care system to a clinical
// repository).  Many of the segments associated with this event are optional.  This optionality allows systems in need of
// this information to set up transactions that fulfill their requirements.
type PPR_PC1 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC1,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPR_PC1_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PPR_PC1_Problem     `hl7:",required,display=Problem"`
}

// PatientVisit
type PPR_PC2_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Problem
type PPR_PC2_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC2_Problem,type=tg"`
	PRB                *PRB                         `hl7:"7,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"8,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"9,display=Variance"`
	ProblemRole        []PPR_PC2_ProblemRole        `hl7:",display=Problem Role"`
	Pathway            []PPR_PC2_Pathway            `hl7:",display=Pathway"`
	ProblemObservation []PPR_PC2_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPR_PC2_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC2_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPR_PC2_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PPR_PC2_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// ProblemObservation
type PPR_PC2_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/Result"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Goal
type PPR_PC2_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC2_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	GoalRole        []PPR_PC2_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPR_PC2_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPR_PC2_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_GoalRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// GoalObservation
type PPR_PC2_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Order
type PPR_PC2_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC2_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	OrderDetail *PPR_PC2_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPR_PC2_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPR_PC2_OrderDetail,type=tg"`
	OrderDetailSegment *PPR_PC2_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"30,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"31,display=Variance"`
	OrderObservation   []PPR_PC2_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPR_PC2_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"24,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"25,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"26,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"27,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"28,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"29,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPR_PC2_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/Result"`
	NTE []NTE   `hl7:"33,display=Notes and Comments"`
	VAR []VAR   `hl7:"34,display=Variance"`
}

// Patient Problem Update
//
// The patient problem message is used to send problems from one application to another (e.g., a point of care system to a clinical
// repository).  Many of the segments associated with this event are optional.  This optionality allows systems in need of
// this information to set up transactions that fulfill their requirements.
type PPR_PC2 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC2,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPR_PC2_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PPR_PC2_Problem     `hl7:",required,display=Problem"`
}

// PatientVisit
type PPR_PC3_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"6,display=Patient Visit - Additional Information"`
}

// Problem
type PPR_PC3_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC3_Problem,type=tg"`
	PRB                *PRB                         `hl7:"7,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"8,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"9,display=Variance"`
	ProblemRole        []PPR_PC3_ProblemRole        `hl7:",display=Problem Role"`
	Pathway            []PPR_PC3_Pathway            `hl7:",display=Pathway"`
	ProblemObservation []PPR_PC3_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPR_PC3_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC3_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPR_PC3_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"10,required,display=Role"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Pathway
type PPR_PC3_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Pathway,type=tg"`
	PTH *PTH    `hl7:"12,required,display=Pathway"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// ProblemObservation
type PPR_PC3_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/Result"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Goal
type PPR_PC3_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC3_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	GoalRole        []PPR_PC3_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPR_PC3_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPR_PC3_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_GoalRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// GoalObservation
type PPR_PC3_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Order
type PPR_PC3_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC3_Order,type=tg"`
	ORC         *ORC                 `hl7:"23,required,display=Common Order"`
	OrderDetail *PPR_PC3_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPR_PC3_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPR_PC3_OrderDetail,type=tg"`
	OrderDetailSegment *PPR_PC3_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"30,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"31,display=Variance"`
	OrderObservation   []PPR_PC3_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPR_PC3_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"24,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"25,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"26,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"27,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"28,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"29,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPR_PC3_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"32,required,display=Observation/Result"`
	NTE []NTE   `hl7:"33,display=Notes and Comments"`
	VAR []VAR   `hl7:"34,display=Variance"`
}

// Patient Problem Delete
//
// The patient problem message is used to send problems from one application to another (e.g., a point of care system to a clinical
// repository).  Many of the segments associated with this event are optional.  This optionality allows systems in need of
// this information to set up transactions that fulfill their requirements.
type PPR_PC3 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC3,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	SFT          []SFT                 `hl7:"2,display=Software Segment"`
	UAC          *UAC                  `hl7:"3,display=User Authentication Credential"`
	PID          *PID                  `hl7:"4,required,display=Patient Identification"`
	PatientVisit *PPR_PC3_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PPR_PC3_Problem     `hl7:",required,display=Problem"`
}

// Patient
type PPT_PCL_Patient struct {
	HL7          HL7Name               `hl7:",name=PPT_PCL_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	PatientVisit *PPT_PCL_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPT_PCL_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPT_PCL_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Pathway
type PPT_PCL_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPT_PCL_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"11,required,display=Pathway"`
	NTE         []NTE                 `hl7:"12,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"13,display=Variance"`
	PathwayRole []PPT_PCL_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPT_PCL_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPT_PCL_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// Goal
type PPT_PCL_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPT_PCL_Goal,type=tg"`
	GOL             *GOL                      `hl7:"16,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"17,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"18,display=Variance"`
	GoalRole        []PPT_PCL_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPT_PCL_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPT_PCL_Problem         `hl7:",display=Problem"`
	Order           []PPT_PCL_Order           `hl7:",display=Order"`
}

// GoalRole
type PPT_PCL_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_GoalRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// GoalObservation
type PPT_PCL_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Problem
type PPT_PCL_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPT_PCL_Problem,type=tg"`
	PRB                *PRB                         `hl7:"23,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"24,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"25,display=Variance"`
	ProblemRole        []PPT_PCL_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPT_PCL_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPT_PCL_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"26,required,display=Role"`
	VAR []VAR   `hl7:"27,display=Variance"`
}

// ProblemObservation
type PPT_PCL_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/Result"`
	NTE []NTE   `hl7:"29,display=Notes and Comments"`
}

// Order
type PPT_PCL_Order struct {
	HL7         HL7Name              `hl7:",name=PPT_PCL_Order,type=tg"`
	ORC         *ORC                 `hl7:"30,required,display=Common Order"`
	OrderDetail *PPT_PCL_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPT_PCL_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPT_PCL_OrderDetail,type=tg"`
	OrderDetailSegment *PPT_PCL_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"37,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"38,display=Variance"`
	OrderObservation   []PPT_PCL_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPT_PCL_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"31,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"32,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"33,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"34,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"35,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"36,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPT_PCL_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"39,required,display=Observation/Result"`
	NTE []NTE   `hl7:"40,display=Notes and Comments"`
	VAR []VAR   `hl7:"41,display=Variance"`
}

// Patient Pathway (Goal-Oriented) Response
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// The following trigger/message event is served by PPT (a response from the system responsible for maintaining the goal-oriented
// pathway information).
type PPT_PCL struct {
	HL7     HL7Name           `hl7:",name=PPT_PCL,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	Patient []PPT_PCL_Patient `hl7:",required,display=Patient"`
}

// Patient
type PPV_PCA_Patient struct {
	HL7          HL7Name               `hl7:",name=PPV_PCA_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	PatientVisit *PPV_PCA_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PPV_PCA_Goal        `hl7:",required,display=Goal"`
}

// PatientVisit
type PPV_PCA_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Goal
type PPV_PCA_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPV_PCA_Goal,type=tg"`
	GOL             *GOL                      `hl7:"11,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"12,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"13,display=Variance"`
	GoalRole        []PPV_PCA_GoalRole        `hl7:",display=Goal Role"`
	GoalPathway     []PPV_PCA_GoalPathway     `hl7:",display=Goal Pathway"`
	GoalObservation []PPV_PCA_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPV_PCA_Problem         `hl7:",display=Problem"`
	Order           []PPV_PCA_Order           `hl7:",display=Order"`
}

// GoalRole
type PPV_PCA_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_GoalRole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// GoalPathway
type PPV_PCA_GoalPathway struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_GoalPathway,type=tg"`
	PTH *PTH    `hl7:"16,required,display=Pathway"`
	VAR []VAR   `hl7:"17,display=Variance"`
}

// GoalObservation
type PPV_PCA_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Problem
type PPV_PCA_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPV_PCA_Problem,type=tg"`
	PRB                *PRB                         `hl7:"20,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"21,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"22,display=Variance"`
	ProblemRole        []PPV_PCA_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPV_PCA_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPV_PCA_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"23,required,display=Role"`
	VAR []VAR   `hl7:"24,display=Variance"`
}

// ProblemObservation
type PPV_PCA_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/Result"`
	NTE []NTE   `hl7:"26,display=Notes and Comments"`
}

// Order
type PPV_PCA_Order struct {
	HL7         HL7Name              `hl7:",name=PPV_PCA_Order,type=tg"`
	ORC         *ORC                 `hl7:"27,required,display=Common Order"`
	OrderDetail *PPV_PCA_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPV_PCA_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPV_PCA_OrderDetail,type=tg"`
	OrderDetailSegment *PPV_PCA_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"34,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"35,display=Variance"`
	OrderObservation   []PPV_PCA_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPV_PCA_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"28,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"29,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"30,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"31,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"32,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"33,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPV_PCA_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"36,required,display=Observation/Result"`
	NTE []NTE   `hl7:"37,display=Notes and Comments"`
	VAR []VAR   `hl7:"38,display=Variance"`
}

// Patient Goal Response
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// The following trigger/message event is served by PPV (a response from the system responsible for maintaining the goal
// information).
type PPV_PCA struct {
	HL7     HL7Name           `hl7:",name=PPV_PCA,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	Patient []PPV_PCA_Patient `hl7:",required,display=Patient"`
}

// Patient
type PRR_PC5_Patient struct {
	HL7          HL7Name               `hl7:",name=PRR_PC5_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	PatientVisit *PRR_PC5_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PRR_PC5_Problem     `hl7:",required,display=Problem"`
}

// PatientVisit
type PRR_PC5_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Problem
type PRR_PC5_Problem struct {
	HL7                HL7Name                      `hl7:",name=PRR_PC5_Problem,type=tg"`
	PRB                *PRB                         `hl7:"11,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"12,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"13,display=Variance"`
	ProblemRole        []PRR_PC5_ProblemRole        `hl7:",display=Problem Role"`
	ProblemPathway     []PRR_PC5_ProblemPathway     `hl7:",display=Problem Pathway"`
	ProblemObservation []PRR_PC5_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PRR_PC5_Goal               `hl7:",display=Goal"`
	Order              []PRR_PC5_Order              `hl7:",display=Order"`
}

// ProblemRole
type PRR_PC5_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// ProblemPathway
type PRR_PC5_ProblemPathway struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_ProblemPathway,type=tg"`
	PTH *PTH    `hl7:"16,required,display=Pathway"`
	VAR []VAR   `hl7:"17,display=Variance"`
}

// ProblemObservation
type PRR_PC5_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Goal
type PRR_PC5_Goal struct {
	HL7             HL7Name                   `hl7:",name=PRR_PC5_Goal,type=tg"`
	GOL             *GOL                      `hl7:"20,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"21,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"22,display=Variance"`
	GoalRole        []PRR_PC5_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PRR_PC5_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PRR_PC5_GoalRole struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_GoalRole,type=tg"`
	ROL *ROL    `hl7:"23,required,display=Role"`
	VAR []VAR   `hl7:"24,display=Variance"`
}

// GoalObservation
type PRR_PC5_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/Result"`
	NTE []NTE   `hl7:"26,display=Notes and Comments"`
}

// Order
type PRR_PC5_Order struct {
	HL7         HL7Name              `hl7:",name=PRR_PC5_Order,type=tg"`
	ORC         *ORC                 `hl7:"27,required,display=Common Order"`
	OrderDetail *PRR_PC5_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PRR_PC5_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PRR_PC5_OrderDetail,type=tg"`
	OrderDetailSegment *PRR_PC5_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"34,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"35,display=Variance"`
	OrderObservation   []PRR_PC5_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PRR_PC5_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"28,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"29,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"30,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"31,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"32,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"33,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PRR_PC5_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"36,required,display=Observation/Result"`
	NTE []NTE   `hl7:"37,display=Notes and Comments"`
	VAR []VAR   `hl7:"38,display=Variance"`
}

// Patient Problem Response
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// The following trigger/message event is served by PRR (a response from the system responsible for maintaining the problem
// information).
type PRR_PC5 struct {
	HL7     HL7Name           `hl7:",name=PRR_PC5,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	Patient []PRR_PC5_Patient `hl7:",required,display=Patient"`
}

// Patient
type PTR_PCF_Patient struct {
	HL7          HL7Name               `hl7:",name=PTR_PCF_Patient,type=tg"`
	PID          *PID                  `hl7:"8,required,display=Patient Identification"`
	PatientVisit *PTR_PCF_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PTR_PCF_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PTR_PCF_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Pathway
type PTR_PCF_Pathway struct {
	HL7         HL7Name               `hl7:",name=PTR_PCF_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"11,required,display=Pathway"`
	NTE         []NTE                 `hl7:"12,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"13,display=Variance"`
	PathwayRole []PTR_PCF_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PTR_PCF_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PTR_PCF_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"14,required,display=Role"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// Problem
type PTR_PCF_Problem struct {
	HL7                HL7Name                      `hl7:",name=PTR_PCF_Problem,type=tg"`
	PRB                *PRB                         `hl7:"16,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"17,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"18,display=Variance"`
	ProblemRole        []PTR_PCF_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PTR_PCF_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PTR_PCF_Goal               `hl7:",display=Goal"`
	Order              []PTR_PCF_Order              `hl7:",display=Order"`
}

// ProblemRole
type PTR_PCF_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"19,required,display=Role"`
	VAR []VAR   `hl7:"20,display=Variance"`
}

// ProblemObservation
type PTR_PCF_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Goal
type PTR_PCF_Goal struct {
	HL7             HL7Name                   `hl7:",name=PTR_PCF_Goal,type=tg"`
	GOL             *GOL                      `hl7:"23,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"24,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"25,display=Variance"`
	GoalRole        []PTR_PCF_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PTR_PCF_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PTR_PCF_GoalRole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_GoalRole,type=tg"`
	ROL *ROL    `hl7:"26,required,display=Role"`
	VAR []VAR   `hl7:"27,display=Variance"`
}

// GoalObservation
type PTR_PCF_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"28,required,display=Observation/Result"`
	NTE []NTE   `hl7:"29,display=Notes and Comments"`
}

// Order
type PTR_PCF_Order struct {
	HL7         HL7Name              `hl7:",name=PTR_PCF_Order,type=tg"`
	ORC         *ORC                 `hl7:"30,required,display=Common Order"`
	OrderDetail *PTR_PCF_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PTR_PCF_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PTR_PCF_OrderDetail,type=tg"`
	OrderDetailSegment *PTR_PCF_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"37,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"38,display=Variance"`
	OrderObservation   []PTR_PCF_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PTR_PCF_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"31,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"32,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"33,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"34,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"35,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"36,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PTR_PCF_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"39,required,display=Observation/Result"`
	NTE []NTE   `hl7:"40,display=Notes and Comments"`
	VAR []VAR   `hl7:"41,display=Variance"`
}

// Patient Pathway (Problem-Oriented) Response
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// The following trigger/message event is served by PTR (a response from the system responsible for maintaining the problem-oriented
// pathway information).
type PTR_PCF struct {
	HL7     HL7Name           `hl7:",name=PTR_PCF,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	SFT     []SFT             `hl7:"2,display=Software Segment"`
	UAC     *UAC              `hl7:"3,display=User Authentication Credential"`
	MSA     *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR     []ERR             `hl7:"5,display=Error"`
	QAK     *QAK              `hl7:"6,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"7,required,display=Original-Style Query Definition"`
	Patient []PTR_PCF_Patient `hl7:",required,display=Patient"`
}

// QueryInformation
type QBP_E03_QueryInformation struct {
	HL7 HL7Name `hl7:",name=QBP_E03_QueryInformation,type=tg"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
}

// HealthCare Services Invoice Status Query
//
// This message is used to query the status of a HealthCare Services Invoice. There are 3 types of queries handled by this message:
// 1) a specific Invoice, 2) a specific Product/Service Group or 3) a specific Product/Service Line Item. If a Provider wants
// to obtain information on a group of invoices (e.g., submitted in a date range), each individual Invoice must be queried.
type QBP_E03 struct {
	HL7              HL7Name                   `hl7:",name=QBP_E03,type=t"`
	MSH              *MSH                      `hl7:"1,required,display=Message Header"`
	SFT              []SFT                     `hl7:"2,display=Software Segment"`
	UAC              []UAC                     `hl7:"3,display=User Authentication Credential"`
	QueryInformation *QBP_E03_QueryInformation `hl7:",required,display=Query Information"`
}

// Query
type QBP_E22_Query struct {
	HL7 HL7Name `hl7:",name=QBP_E22_Query,type=tg"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
}

// Query Authorization Request Status
//
// This message is used to query the status of an Authorization Request. There are 2 types of queries handled by this message:
// 1) a specific Authorization Request or 2) a specific Product/Service Line Item. If a Provider wants to obtain information
// on a group of Authorization Requests (e.g., submitted in a date range), each individual Authorization Request must be
// queried.
type QBP_E22 struct {
	HL7   HL7Name        `hl7:",name=QBP_E22,type=t"`
	MSH   *MSH           `hl7:"1,required,display=Message Header"`
	SFT   []SFT          `hl7:"2,display=Software Segment"`
	UAC   []UAC          `hl7:"3,display=User Authentication Credential"`
	Query *QBP_E22_Query `hl7:",required,display=Query"`
}

// RowDefinition
type QBP_K13_RowDefinition struct {
	HL7 HL7Name `hl7:",name=QBP_K13_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"6,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"7,display=Table Row Data"`
}

// Query by parameter
type QBP_K13 struct {
	HL7           HL7Name                `hl7:",name=QBP_K13,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"3,display=Error"`
	QAK           *QAK                   `hl7:"4,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"5,required,display=Query Parameter Definition"`
	RowDefinition *QBP_K13_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"8,display=Continuation Pointer"`
}

// Query by Parameter Requesting an RSP Segment Pattern Response
//
// The QBP_Q11 structure supports a Segment Pattern Response and contains the MSH, QPD, RCP, and DSC segments.  Its default
// trigger event is Q11.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value
// in its Query Profile.  If a unique trigger event value is chosen for a site-defined query, that value must begin with Z.
type QBP_Q11 struct {
	HL7 HL7Name `hl7:",name=QBP_Q11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,display=Event Type"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Query by Parameter Requesting an RTB Tabular Response
//
// The QBP_Q13 structure supports a Tabular Response and contains the MSH, RDF, RCP, and DSC segments.  Its default trigger
// event is Q13.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value in its
// Query Profile.  If a unique trigger event value is chosen for a site-defined query, that value must begin with Z.
type QBP_Q13 struct {
	HL7 HL7Name `hl7:",name=QBP_Q13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,display=Event Type"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	RDF *RDF    `hl7:"6,display=Table Row Definition"`
	RCP *RCP    `hl7:"7,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"8,display=Continuation Pointer"`
}

// Query by Parameter Requesting an RDY Display Response
//
// The QBP_Q15 structure supports a Display Response and contains the MSH, QPD, RCP, and DSC segments.  Its default trigger
// event is Q15.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value in its
// Query Profile.  If a unique trigger event value is chosen for a site-defined query, that value must begin with Z.
type QBP_Q15 struct {
	HL7 HL7Name `hl7:",name=QBP_Q15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	EVN *EVN    `hl7:"4,display=Event Type"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Get Person Demographics
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response of the demographics for that person.
type QBP_Q21 struct {
	HL7 HL7Name `hl7:",name=QBP_Q21,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Find Candidates Query
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of a set of demographics for a person, and the response is the list of candidates considered by the MPI to match that set.
//
// Each returned person, specified by a PID segment, can also have an optional QRI - Query Response Instance segment containing
// information about the quality of the match.
type QBP_Q22 struct {
	HL7 HL7Name `hl7:",name=QBP_Q22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Get Corresponding Identifiers Query
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response is a list of identifiers for that person from the domains specified.
type QBP_Q23 struct {
	HL7 HL7Name `hl7:",name=QBP_Q23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Allocate Identifiers Query
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of domains in which identifiers should be allocated. The response is new identifiers in those domains.
//
// This event is not meant to cause the creation of a new person record, or to bind identifiers to a particular person record.
// The events A28 - Add person information and A24 - Link patient information should be used for that purpose. This event is
// meant to simply reserve the use of identifiers.
type QBP_Q24 struct {
	HL7 HL7Name `hl7:",name=QBP_Q24,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Personnel Information by Segment Query
//
// The purpose of this query/response pair is to retrieve all available personnel information based upon the values of one
// or more commonly used search parameter.
type QBP_Q25 struct {
	HL7 HL7Name `hl7:",name=QBP_Q25,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Pharmacy Query - Dispense History
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type QBP_Q31 struct {
	HL7 HL7Name `hl7:",name=QBP_Q31,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Query by parameter - Information about Phone Calls
//
// Retrieve all information about phone calls made during a defined interval either in a detailed or an accumulative format.
// The identifier for the patient must be given.
type QBP_Z73 struct {
	HL7 HL7Name `hl7:",name=QBP_Z73,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
}

// Query by parameter - Tabular Patient List
//
// The purpose of this message/response is to find patient records that closely (as specified by the Client) match a set of
// input criteria using a specified algorithm.
type QBP_Z75 struct {
	HL7 HL7Name `hl7:",name=QBP_Z75,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	RDF *RDF    `hl7:"6,display=Table Row Definition"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Query - Dispense Information
//
// The purpose of this message/response is to retrieve patient pharmacy dispense history information from the Server.
type QBP_Z79 struct {
	HL7 HL7Name `hl7:",name=QBP_Z79,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Dispense History Query
//
// The purpose of this query/response is to retrieve patient pharmacy dispense history information from the Server.
type QBP_Z81 struct {
	HL7 HL7Name `hl7:",name=QBP_Z81,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Pharmacy Information Comprehensive Query
//
// The purpose of this query/response is to retrieve patient pharmacy history information from the Server.
type QBP_Z85 struct {
	HL7 HL7Name `hl7:",name=QBP_Z85,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Dispense Information Query
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type QBP_Z87 struct {
	HL7 HL7Name `hl7:",name=QBP_Z87,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Lab Results History Query
//
// The purpose of this query/response pair is to retrieve patient laboratory results information from the Server.
type QBP_Z89 struct {
	HL7 HL7Name `hl7:",name=QBP_Z89,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Who Am I Query
//
// The purpose of this query/response pair is to find the identity of the patient for specified medical record number(s).
type QBP_Z91 struct {
	HL7 HL7Name `hl7:",name=QBP_Z91,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RDF *RDF    `hl7:"5,display=Table Row Definition"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Tabular Dispense History Query
//
// The purpose of this query/response pair is to find medications dispensed between specified date range for specified medical
// record numbers.
type QBP_Z93 struct {
	HL7 HL7Name `hl7:",name=QBP_Z93,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RDF *RDF    `hl7:"5,display=Table Row Definition"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Tabular Dispense History Query
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type QBP_Z95 struct {
	HL7 HL7Name `hl7:",name=QBP_Z95,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RDF *RDF    `hl7:"5,display=Table Row Definition"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Dispense History Query
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type QBP_Z97 struct {
	HL7 HL7Name `hl7:",name=QBP_Z97,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Who Am I Query
//
// The purpose of this query/response pair is to find the identity of the patient for specified medical record number(s).
type QBP_Z99 struct {
	HL7 HL7Name `hl7:",name=QBP_Z99,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RDF *RDF    `hl7:"5,display=Table Row Definition"`
	RCP *RCP    `hl7:"6,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Deferred Query Response
//
// This section is retained for backward compatibility as of V2.4.
type QCK_Q02 struct {
	HL7 HL7Name `hl7:",name=QCK_Q02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,display=Query Acknowledgment"`
}

// Cancel Query
type QCN_J01 struct {
	HL7 HL7Name `hl7:",name=QCN_J01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QID *QID    `hl7:"4,required,display=Query Identification"`
}

// Patient Query
//
// The Original Mode Query was retained for backward compatibility only as of version 2.4.
//
// Another application determines a need for Patient Administration data about a patient and sends a query to the Patient
// Administration system.  The Who Filter in the QRD can identify the patient or account number upon which the query is defined
// and can contain a format code of "R" (record-oriented).  If the query is based on the Patient ID and there are data associated
// with multiple accounts, the problem of which account data should be returned becomes an implementation issue.  The ADT
// event-type segment, if included in the response, describes the last event for which the Patient Administration system
// initiated an unsolicited update.
type QRY_A19 struct {
	HL7 HL7Name `hl7:",name=QRY_A19,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
}

// Patient Care Problem Query
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
//
// Note from the Caristix team: The HL7 documentation appears to contain an error where the SFT and UAC segments in this message
// did not appear. We have included them in this message.
type QRY_PC4 struct {
	HL7 HL7Name `hl7:",name=QRY_PC4,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
}

// Patient Goal Query
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PC9 struct {
	HL7 HL7Name `hl7:",name=QRY_PC9,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
}

// Patient Pathway (Problem-Oriented) Query
//
// Retained for backwards compatibility only in version 2.4 and later; refer to Chapter 5, section 5.4.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PCE struct {
	HL7 HL7Name `hl7:",name=QRY_PCE,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
}

// Patient Pathway (Goal-Oriented) Query
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PCK struct {
	HL7 HL7Name `hl7:",name=QRY_PCK,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
}

// Query Sent for immediate response
type QRY_Q01 struct {
	HL7 HL7Name `hl7:",name=QRY_Q01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Deferred Query
//
// This section is retained for backward compatibility as of V2.4.
type QRY_Q02 struct {
	HL7 HL7Name `hl7:",name=QRY_Q02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Pharmacy/Treatment Order Query
//
// This query/response pair is retained for backward compatibility only.
type QRY_Q26 struct {
	HL7 HL7Name `hl7:",name=QRY_Q26,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Query - Pharmacy/Treatment Administration Information
//
// This query/response pair is retained for backward compatibility only.
type QRY_Q27 struct {
	HL7 HL7Name `hl7:",name=QRY_Q27,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Pharmacy/Treatment Dispense Information Query
//
// This query/response pair is retained for backward compatibility only.
type QRY_Q28 struct {
	HL7 HL7Name `hl7:",name=QRY_Q28,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Pharmacy/Treatment Encoded Order Information Query
//
// This query/response pair is retained for backward compatibility only.
type QRY_Q29 struct {
	HL7 HL7Name `hl7:",name=QRY_Q29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Pharmacy/Treatment Dose Information Query
//
// This query/response pair is retained for backward compatibility only.
type QRY_Q30 struct {
	HL7 HL7Name `hl7:",name=QRY_Q30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Results of Observation Query
//
// Retained for backwards compatibility only in version 2.4 and later. The original mode query and the QRD/QRF segments have
// been replaced.
type QRY_R02 struct {
	HL7 HL7Name `hl7:",name=QRY_R02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,required,display=Original style query filter"`
}

// Document Query
//
// Retained for backwards compatibility only in version 2.4 and later.
type QRY_T12 struct {
	HL7 HL7Name `hl7:",name=QRY_T12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original style query filter"`
}

// Create Subscription
type QSB_Q16 struct {
	HL7 HL7Name `hl7:",name=QSB_Q16,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Publish ORU Subscription
//
// The purpose of this publish/response pair is to send Lab Results, either filtered or unfiltered, as specified in the input
// parameters.
//
// A standard query response is not received from the se Instead, actual ORU messages are returned corresponding to nput parameters.
// The input param when selecting data to be returned.  That is, all input parameters that are specified must e sat d in r fo res
// report to be sent.
type QSB_Z83 struct {
	HL7 HL7Name `hl7:",name=QSB_Z83,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Cancel Subscription
type QSX_J02 struct {
	HL7 HL7Name `hl7:",name=QSX_J02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QID *QID    `hl7:"4,required,display=Query Identification"`
}

// Query for Previous Events
//
// The Query for Previous Events is like a Query by Parameter with a Segment Pattern Response except that the response consists
// of zero to many messages of the type defined in the Query Profile rather than a single response message containing multiple
// iterations of the segment pattern.  While the messages sent in response to a QVR will reflect events which occurred in the
// past, the time stamp in the message header will reflect the time the message is actually constructed (current time).  It
// is also similar to the previous generation VQQ/RQQ Event Replay.
type QVR_Q17 struct {
	HL7 HL7Name `hl7:",name=QVR_Q17,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QPD *QPD    `hl7:"4,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"5,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Definition
type RAR_RAR_Definition struct {
	HL7     HL7Name          `hl7:",name=RAR_RAR_Definition,type=tg"`
	QRD     *QRD             `hl7:"6,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"7,display=Original style query filter"`
	Patient *RAR_RAR_Patient `hl7:",display=Patient"`
	Order   []RAR_RAR_Order  `hl7:",required,display=Order"`
}

// Patient
type RAR_RAR_Patient struct {
	HL7 HL7Name `hl7:",name=RAR_RAR_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// Order
type RAR_RAR_Order struct {
	HL7      HL7Name           `hl7:",name=RAR_RAR_Order,type=tg"`
	ORC      *ORC              `hl7:"10,required,display=Common Order"`
	Encoding *RAR_RAR_Encoding `hl7:",display=Encoding"`
	RXA      []RXA             `hl7:"14,required,display=Pharmacy/Treatment Administration"`
	RXR      *RXR              `hl7:"15,required,display=Pharmacy/Treatment Route"`
}

// Encoding
type RAR_RAR_Encoding struct {
	HL7 HL7Name `hl7:",name=RAR_RAR_Encoding,type=tg"`
	RXE *RXE    `hl7:"11,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"12,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"13,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/Treatment Administration Information Response
//
// This query/response pair is retained for backward compatibility only.
type RAR_RAR struct {
	HL7        HL7Name              `hl7:",name=RAR_RAR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        []ERR                `hl7:"3,display=Error"`
	SFT        []SFT                `hl7:"4,display=Software Segment"`
	UAC        *UAC                 `hl7:"5,display=User Authentication Credential"`
	Definition []RAR_RAR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"16,display=Continuation Pointer"`
}

// Patient
type RAS_O17_Patient struct {
	HL7          HL7Name               `hl7:",name=RAS_O17_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	AL1          []AL1                 `hl7:"8,display=Patient Allergy Information"`
	PatientVisit *RAS_O17_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type RAS_O17_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RAS_O17_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Order
type RAS_O17_Order struct {
	HL7            HL7Name                  `hl7:",name=RAS_O17_Order,type=tg"`
	ORC            *ORC                     `hl7:"11,required,display=Common Order"`
	Timing         []RAS_O17_Timing         `hl7:",display=Timing"`
	OrderDetail    *RAS_O17_OrderDetail     `hl7:",display=Order Detail"`
	Encoding       *RAS_O17_Encoding        `hl7:",display=Encoding"`
	Administration []RAS_O17_Administration `hl7:",required,display=Administration"`
	CTI            []CTI                    `hl7:"28,display=Clinical Trial Identification"`
}

// Timing
type RAS_O17_Timing struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"12,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"13,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RAS_O17_OrderDetail struct {
	HL7                   HL7Name                        `hl7:",name=RAS_O17_OrderDetail,type=tg"`
	RXO                   *RXO                           `hl7:"14,required,display=Pharmacy/Treatment Order"`
	OrderDetailSupplement *RAS_O17_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RAS_O17_OrderDetailSupplement struct {
	HL7        HL7Name              `hl7:",name=RAS_O17_OrderDetailSupplement,type=tg"`
	NTE        []NTE                `hl7:"15,required,display=Notes and Comments"`
	RXR        []RXR                `hl7:"16,required,display=Pharmacy/Treatment Route"`
	Components []RAS_O17_Components `hl7:",display=Components"`
}

// Components
type RAS_O17_Components struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Components,type=tg"`
	RXC *RXC    `hl7:"17,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Encoding
type RAS_O17_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RAS_O17_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"19,required,display=Pharmacy/Treatment Encoded Order"`
	TimingEncoded []RAS_O17_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"22,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"23,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RAS_O17_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RAS_O17_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"20,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"21,display=Timing/Quantity Relationship"`
}

// Administration
type RAS_O17_Administration struct {
	HL7         HL7Name               `hl7:",name=RAS_O17_Administration,type=tg"`
	RXA         []RXA                 `hl7:"24,required,display=Pharmacy/Treatment Administration"`
	RXR         *RXR                  `hl7:"25,required,display=Pharmacy/Treatment Route"`
	Observation []RAS_O17_Observation `hl7:",display=Observation"`
}

// Observation
type RAS_O17_Observation struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Observation,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/Result"`
	NTE []NTE   `hl7:"27,display=Notes and Comments"`
}

// Pharmacy/Treatment Administration
//
// The RAS message may be created by the administering application (e.g., nursing application) for each instance of administration
// for an existing order.  If the administering application wants to report several administrations of medication/treatment
// for a given order with a single RAS message, each instance is reported by a separate (repeating) RXA segment.  In addition,
// the administration records for a group of orders may be sent in a single message by creating repeating groups of segments
// at the ORC level.
type RAS_O17 struct {
	HL7     HL7Name          `hl7:",name=RAS_O17,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *RAS_O17_Patient `hl7:",display=Patient"`
	Order   []RAS_O17_Order  `hl7:",required,display=Order"`
}

// Provider
type RCI_I05_Provider struct {
	HL7 HL7Name `hl7:",name=RCI_I05_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Observation
type RCI_I05_Observation struct {
	HL7     HL7Name           `hl7:",name=RCI_I05_Observation,type=tg"`
	OBR     *OBR              `hl7:"13,required,display=Observation Request"`
	NTE     []NTE             `hl7:"14,display=Notes and Comments"`
	Results []RCI_I05_Results `hl7:",display=Results"`
}

// Results
type RCI_I05_Results struct {
	HL7 HL7Name `hl7:",name=RCI_I05_Results,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Return Patient Clinical Information
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// This event is used to request clinical information for a specific patient.  Generally, this transaction occurs between
// one provider and another (typically a laboratory or radiology, etc.).  However, it may also be very useful for a payor-to-provider
// request for clinical observation information to be used in considering a request for treatment authorization.
type RCI_I05 struct {
	HL7         HL7Name               `hl7:",name=RCI_I05,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	SFT         []SFT                 `hl7:"2,display=Software Segment"`
	UAC         *UAC                  `hl7:"3,display=User Authentication Credential"`
	MSA         *MSA                  `hl7:"4,required,display=Message Acknowledgment"`
	QRD         *QRD                  `hl7:"5,required,display=Original-Style Query Definition"`
	QRF         *QRF                  `hl7:"6,display=Original style query filter"`
	Provider    []RCI_I05_Provider    `hl7:",required,display=Provider"`
	PID         *PID                  `hl7:"9,required,display=Patient Identification"`
	DG1         []DG1                 `hl7:"10,display=Diagnosis"`
	DRG         []DRG                 `hl7:"11,display=Diagnosis Related Group"`
	AL1         []AL1                 `hl7:"12,display=Patient Allergy Information"`
	Observation []RCI_I05_Observation `hl7:",display=Observation"`
	NTE         []NTE                 `hl7:"17,display=Notes and Comments"`
}

// Provider
type RCL_I06_Provider struct {
	HL7 HL7Name `hl7:",name=RCL_I06_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Return Clinical Data Listing
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// This event code is sent from one healthcare provider to another (typically a laboratory or radiology, etc.) to request
// a list of available clinical observation information.  When the provider is dealing with a community model in which remote
// requests make transmission of large amounts of data impractical, this event code will provide for interactive lists of
// transactions from which more specific selections can be made.
type RCL_I06 struct {
	HL7      HL7Name            `hl7:",name=RCL_I06,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	MSA      *MSA               `hl7:"4,required,display=Message Acknowledgment"`
	QRD      *QRD               `hl7:"5,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"6,display=Original style query filter"`
	Provider []RCL_I06_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"9,required,display=Patient Identification"`
	DG1      []DG1              `hl7:"10,display=Diagnosis"`
	DRG      []DRG              `hl7:"11,display=Diagnosis Related Group"`
	AL1      []AL1              `hl7:"12,display=Patient Allergy Information"`
	NTE      []NTE              `hl7:"13,display=Notes and Comments"`
	DSP      []DSP              `hl7:"14,display=Display Data"`
	DSC      *DSC               `hl7:"15,display=Continuation Pointer"`
}

// Patient
type RDE_O11_Patient struct {
	HL7          HL7Name               `hl7:",name=RDE_O11_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *RDE_O11_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []RDE_O11_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type RDE_O11_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RDE_O11_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type RDE_O11_Insurance struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type RDE_O11_Order struct {
	HL7           HL7Name                 `hl7:",name=RDE_O11_Order,type=tg"`
	ORC           *ORC                    `hl7:"15,required,display=Common Order"`
	Timing        []RDE_O11_Timing        `hl7:",display=Timing"`
	OrderDetail   *RDE_O11_OrderDetail    `hl7:",display=Order Detail"`
	RXE           *RXE                    `hl7:"23,required,display=Pharmacy/Treatment Encoded Order"`
	NTE           []NTE                   `hl7:"24,display=Notes and Comments"`
	TimingEncoded []RDE_O11_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"27,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"28,display=Pharmacy/Treatment Component Order"`
	Observation   []RDE_O11_Observation   `hl7:",display=Observation"`
	FT1           []FT1                   `hl7:"31,display=Financial Transaction"`
	BLG           *BLG                    `hl7:"32,display=Billing"`
	CTI           []CTI                   `hl7:"33,display=Clinical Trial Identification"`
}

// Timing
type RDE_O11_Timing struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RDE_O11_OrderDetail struct {
	HL7       HL7Name             `hl7:",name=RDE_O11_OrderDetail,type=tg"`
	RXO       *RXO                `hl7:"18,required,display=Pharmacy/Treatment Order"`
	NTE       []NTE               `hl7:"19,display=Notes and Comments"`
	RXR       []RXR               `hl7:"20,required,display=Pharmacy/Treatment Route"`
	Component []RDE_O11_Component `hl7:",display=Component"`
}

// Component
type RDE_O11_Component struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Component,type=tg"`
	RXC *RXC    `hl7:"21,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// TimingEncoded
type RDE_O11_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RDE_O11_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"25,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"26,display=Timing/Quantity Relationship"`
}

// Observation
type RDE_O11_Observation struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Observation,type=tg"`
	OBX *OBX    `hl7:"29,required,display=Observation/Result"`
	NTE []NTE   `hl7:"30,display=Notes and Comments"`
}

// Pharmacy/Treatment Encoded Order
//
// This message communicates the pharmacy or treatment application's encoding of the pharmacy/treatment order (ORM message
// with RXO segment, see above).  It may be sent as an unsolicited message to report on either a single order or multiple pharmacy/treatment
// orders for a patient.
//
// The RDE/RRE message pair can also be used to communicate a refill authorization request; however, a specific trigger event
// has been assigned.  See section 4.13.13 "RDE - Pharmacy/Treatment Refill Authorization Request Message (Event O25)."
// As a site-specific variant, the original order segments (RXO, RXRs, associated RXCs, and any NTEs) may be sent optionally
// (for comparison).
type RDE_O11 struct {
	HL7     HL7Name          `hl7:",name=RDE_O11,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *RDE_O11_Patient `hl7:",display=Patient"`
	Order   []RDE_O11_Order  `hl7:",required,display=Order"`
}

// Patient
type RDE_O25_Patient struct {
	HL7          HL7Name               `hl7:",name=RDE_O25_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	PatientVisit *RDE_O25_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []RDE_O25_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"13,display=Guarantor"`
	AL1          []AL1                 `hl7:"14,display=Patient Allergy Information"`
}

// PatientVisit
type RDE_O25_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RDE_O25_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Insurance
type RDE_O25_Insurance struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type RDE_O25_Order struct {
	HL7           HL7Name                 `hl7:",name=RDE_O25_Order,type=tg"`
	ORC           *ORC                    `hl7:"15,required,display=Common Order"`
	Timing        []RDE_O25_Timing        `hl7:",display=Timing"`
	OrderDetail   *RDE_O25_OrderDetail    `hl7:",display=Order Detail"`
	RXE           *RXE                    `hl7:"23,required,display=Pharmacy/Treatment Encoded Order"`
	NTE           []NTE                   `hl7:"24,display=Notes and Comments"`
	TimingEncoded []RDE_O25_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"27,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"28,display=Pharmacy/Treatment Component Order"`
	Observation   []RDE_O25_Observation   `hl7:",display=Observation"`
	FT1           []FT1                   `hl7:"31,display=Financial Transaction"`
	BLG           *BLG                    `hl7:"32,display=Billing"`
	CTI           []CTI                   `hl7:"33,display=Clinical Trial Identification"`
}

// Timing
type RDE_O25_Timing struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RDE_O25_OrderDetail struct {
	HL7        HL7Name              `hl7:",name=RDE_O25_OrderDetail,type=tg"`
	RXO        *RXO                 `hl7:"18,required,display=Pharmacy/Treatment Order"`
	NTE        []NTE                `hl7:"19,display=Notes and Comments"`
	RXR        []RXR                `hl7:"20,required,display=Pharmacy/Treatment Route"`
	Components []RDE_O25_Components `hl7:",display=Components"`
}

// Components
type RDE_O25_Components struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Components,type=tg"`
	RXC *RXC    `hl7:"21,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// TimingEncoded
type RDE_O25_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RDE_O25_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"25,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"26,display=Timing/Quantity Relationship"`
}

// Observation
type RDE_O25_Observation struct {
	HL7 HL7Name `hl7:",name=RDE_O25_Observation,type=tg"`
	OBX *OBX    `hl7:"29,display=Observation/Result"`
	NTE []NTE   `hl7:"30,display=Notes and Comments"`
}

// Pharmacy/Treatment Refill Authorization Request Message
//
// The RDE/RRE is used to communicate a refill authorization request originating with the pharmacy.  This message replicates
// the standard RDE message with a different trigger event code to indicate the specific use case of a refill authorization
// request.
type RDE_O25 struct {
	HL7     HL7Name          `hl7:",name=RDE_O25,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *RDE_O25_Patient `hl7:",display=Patient"`
	Order   []RDE_O25_Order  `hl7:",required,display=Order"`
}

// Definition
type RDR_RDR_Definition struct {
	HL7     HL7Name          `hl7:",name=RDR_RDR_Definition,type=tg"`
	QRD     *QRD             `hl7:"6,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"7,display=Original style query filter"`
	Patient *RDR_RDR_Patient `hl7:",display=Patient"`
	Order   []RDR_RDR_Order  `hl7:",required,display=Order"`
}

// Patient
type RDR_RDR_Patient struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// Order
type RDR_RDR_Order struct {
	HL7      HL7Name            `hl7:",name=RDR_RDR_Order,type=tg"`
	ORC      *ORC               `hl7:"10,required,display=Common Order"`
	Encoding *RDR_RDR_Encoding  `hl7:",display=Encoding"`
	Dispense []RDR_RDR_Dispense `hl7:",required,display=Dispense"`
}

// Encoding
type RDR_RDR_Encoding struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Encoding,type=tg"`
	RXE *RXE    `hl7:"11,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"12,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"13,display=Pharmacy/Treatment Component Order"`
}

// Dispense
type RDR_RDR_Dispense struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Dispense,type=tg"`
	RXD *RXD    `hl7:"14,required,display=Pharmacy/Treatment Dispense"`
	RXR []RXR   `hl7:"15,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"16,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/Treatment Dispense Information Response
//
// This query/response pair is retained for backward compatibility only.
type RDR_RDR struct {
	HL7        HL7Name              `hl7:",name=RDR_RDR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        []ERR                `hl7:"3,display=Error"`
	SFT        []SFT                `hl7:"4,display=Software Segment"`
	UAC        *UAC                 `hl7:"5,display=User Authentication Credential"`
	Definition []RDR_RDR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"17,display=Continuation Pointer"`
}

// Patient
type RDS_O13_Patient struct {
	HL7          HL7Name               `hl7:",name=RDS_O13_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"7,display=Notes and Comments"`
	AL1          []AL1                 `hl7:"8,display=Patient Allergy Information"`
	PatientVisit *RDS_O13_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type RDS_O13_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RDS_O13_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"9,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
}

// Order
type RDS_O13_Order struct {
	HL7         HL7Name               `hl7:",name=RDS_O13_Order,type=tg"`
	ORC         *ORC                  `hl7:"11,required,display=Common Order"`
	Timing      []RDS_O13_Timing      `hl7:",display=Timing"`
	OrderDetail *RDS_O13_OrderDetail  `hl7:",display=Order Detail"`
	Encoding    *RDS_O13_Encoding     `hl7:",display=Encoding"`
	RXD         *RXD                  `hl7:"25,required,display=Pharmacy/Treatment Dispense"`
	NTE         []NTE                 `hl7:"26,display=Notes and Comments"`
	RXR         []RXR                 `hl7:"27,required,display=Pharmacy/Treatment Route"`
	RXC         []RXC                 `hl7:"28,display=Pharmacy/Treatment Component Order"`
	Observation []RDS_O13_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"31,display=Financial Transaction"`
}

// Timing
type RDS_O13_Timing struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"12,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"13,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RDS_O13_OrderDetail struct {
	HL7                   HL7Name                        `hl7:",name=RDS_O13_OrderDetail,type=tg"`
	RXO                   *RXO                           `hl7:"14,required,display=Pharmacy/Treatment Order"`
	OrderDetailSupplement *RDS_O13_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RDS_O13_OrderDetailSupplement struct {
	HL7       HL7Name             `hl7:",name=RDS_O13_OrderDetailSupplement,type=tg"`
	NTE       []NTE               `hl7:"15,required,display=Notes and Comments"`
	RXR       []RXR               `hl7:"16,required,display=Pharmacy/Treatment Route"`
	Component []RDS_O13_Component `hl7:",display=Component"`
}

// Component
type RDS_O13_Component struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Component,type=tg"`
	RXC *RXC    `hl7:"17,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Encoding
type RDS_O13_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RDS_O13_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"19,required,display=Pharmacy/Treatment Encoded Order"`
	NTE           []NTE                   `hl7:"20,display=Notes and Comments"`
	TimingEncoded []RDS_O13_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"23,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"24,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RDS_O13_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RDS_O13_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"21,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"22,display=Timing/Quantity Relationship"`
}

// Observation
type RDS_O13_Observation struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Observation,type=tg"`
	OBX *OBX    `hl7:"29,required,display=Observation/Result"`
	NTE []NTE   `hl7:"30,display=Notes and Comments"`
}

// Pharmacy/treatment dispense
//
// The RDS message may be created by the pharmacy/treatment application for each instance of dispensing a drug or treatment
// to fill an existing order or orders.  In the most common case, the RDS messages would be routed to a Nursing application or
// to some clinical application, which needs the data about drugs dispensed or treatments given.  As a site-specific variant,
// the original order segments (RXO, RXE and their associated RXR/RXCs) may be sent optionally (for comparison).
type RDS_O13 struct {
	HL7     HL7Name          `hl7:",name=RDS_O13,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *RDS_O13_Patient `hl7:",display=Patient"`
	Order   []RDS_O13_Order  `hl7:",required,display=Order"`
}

// Display Response in Response to QBP_Q15
//
// The RDY_K15 supports a Display Response to the QBP and contains the MSH, MSA, ERR, QAK, DSP, and the DSC.  Its default trigger
// event is K15.  A standard or site-defined response may use this trigger event or may specify a unique trigger event value
// in its Query Profile.  If a unique trigger event value is chosen for a site-defined response, that value must begin with Z.
type RDY_K15 struct {
	HL7 HL7Name `hl7:",name=RDY_K15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"7,required,display=Query Parameter Definition"`
	DSP []DSP   `hl7:"8,display=Display Data"`
	DSC *DSC    `hl7:"9,display=Continuation Pointer"`
}

// Display based response - Dispense Information
//
// The purpose of this message/response is to retrieve patient pharmacy dispense history information from the Server.
type RDY_Z80 struct {
	HL7 HL7Name `hl7:",name=RDY_Z80,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"7,required,display=Query Parameter Definition"`
	DSP []DSP   `hl7:"8,display=Display Data"`
	DSC *DSC    `hl7:"9,display=Continuation Pointer"`
}

// Dispense History Response
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type RDY_Z98 struct {
	HL7 HL7Name `hl7:",name=RDY_Z98,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"7,required,display=Query Parameter Definition"`
	DSP []DSP   `hl7:"8,display=Display Data"`
	DSC *DSC    `hl7:"9,display=Continuation Pointer"`
}

// AuthorizationContact
type REF_I12_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I12_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// ProviderContact
type REF_I12_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I12_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I12_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I12_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I12_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I12_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"19,required,display=Procedures"`
	AuthorizationContact *REF_I12_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I12_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I12_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I12_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I12_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes and Comments"`
	ResultsNotes []REF_I12_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I12_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I12_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// PatientVisit
type REF_I12_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I12_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Patient Referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding a specific patient.  The referral
// message may contain patient demographic information, specific medical procedures to be performed (accompanied by previously
// obtained authorizations) and relevant clinical information pertinent to the patient's case.
type REF_I12 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I12,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	AuthorizationContact *REF_I12_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I12_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I12_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I12_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I12_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I12_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes and Comments"`
}

// AuthorizationContact
type REF_I13_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I13_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// ProviderContact
type REF_I13_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I13_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I13_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I13_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I13_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I13_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"19,required,display=Procedures"`
	AuthorizationContact *REF_I13_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I13_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I13_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I13_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I13_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes and Comments"`
	ResultsNotes []REF_I13_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I13_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I13_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// PatientVisit
type REF_I13_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I13_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Modify Patient Referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding changes to an existing referral.
// Changes in a referral may include additional instructions from the referring provider, additional clinical information,
// and even additional information on patient demographics.
type REF_I13 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I13,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	AuthorizationContact *REF_I13_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I13_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I13_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I13_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I13_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I13_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes and Comments"`
}

// AuthorizationContact
type REF_I14_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I14_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// ProviderContact
type REF_I14_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I14_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I14_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I14_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I14_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I14_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"19,required,display=Procedures"`
	AuthorizationContact *REF_I14_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I14_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I14_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I14_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I14_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes and Comments"`
	ResultsNotes []REF_I14_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I14_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I14_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// PatientVisit
type REF_I14_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I14_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Cancel Patient Referral
//
// This event triggers a message to be sent from one healthcare provider to another canceling a referral.  A previous referral
// may have been made in error, or perhaps the cancellation has come from the patient.
type REF_I14 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I14,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	AuthorizationContact *REF_I14_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I14_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I14_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I14_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I14_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I14_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes and Comments"`
}

// AuthorizationContact
type REF_I15_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I15_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// ProviderContact
type REF_I15_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I15_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// Insurance
type REF_I15_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I15_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I15_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I15_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"19,required,display=Procedures"`
	AuthorizationContact *REF_I15_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I15_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I15_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type REF_I15_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I15_Observation,type=tg"`
	OBR          *OBR                   `hl7:"22,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"23,display=Notes and Comments"`
	ResultsNotes []REF_I15_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I15_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I15_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// PatientVisit
type REF_I15_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I15_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request Patient Referral Status
//
// This event triggers a message to be sent between healthcare providers regarding the status of a patient referral request.
// A previous referral has been made and acknowledged; however, no response has been received to indicate results and/or
// procedures performed.
type REF_I15 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I15,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	RF1                  *RF1                          `hl7:"4,display=Referral Information"`
	AuthorizationContact *REF_I15_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I15_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"9,required,display=Patient Identification"`
	NK1                  []NK1                         `hl7:"10,display=Next of Kin / Associated Parties"`
	GT1                  []GT1                         `hl7:"11,display=Guarantor"`
	Insurance            []REF_I15_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"15,display=Accident"`
	DG1                  []DG1                         `hl7:"16,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"17,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"18,display=Patient Allergy Information"`
	Procedure            []REF_I15_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I15_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I15_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"28,display=Notes and Comments"`
}

// Definition
type RER_RER_Definition struct {
	HL7     HL7Name          `hl7:",name=RER_RER_Definition,type=tg"`
	QRD     *QRD             `hl7:"6,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"7,display=Original style query filter"`
	Patient *RER_RER_Patient `hl7:",display=Patient"`
	Order   []RER_RER_Order  `hl7:",required,display=Order"`
}

// Patient
type RER_RER_Patient struct {
	HL7 HL7Name `hl7:",name=RER_RER_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// Order
type RER_RER_Order struct {
	HL7 HL7Name `hl7:",name=RER_RER_Order,type=tg"`
	ORC *ORC    `hl7:"10,required,display=Common Order"`
	RXE *RXE    `hl7:"11,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"12,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"13,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/Treatment Encoded Order Information Response
//
// This query/response pair is retained for backward compatibility only.
type RER_RER struct {
	HL7        HL7Name              `hl7:",name=RER_RER,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        []ERR                `hl7:"3,display=Error"`
	SFT        []SFT                `hl7:"4,display=Software Segment"`
	UAC        *UAC                 `hl7:"5,display=User Authentication Credential"`
	Definition []RER_RER_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"14,display=Continuation Pointer"`
}

// Definition
type RGR_RGR_Definition struct {
	HL7     HL7Name          `hl7:",name=RGR_RGR_Definition,type=tg"`
	QRD     *QRD             `hl7:"6,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"7,display=Original style query filter"`
	Patient *RGR_RGR_Patient `hl7:",display=Patient"`
	Order   []RGR_RGR_Order  `hl7:",required,display=Order"`
}

// Patient
type RGR_RGR_Patient struct {
	HL7 HL7Name `hl7:",name=RGR_RGR_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// Order
type RGR_RGR_Order struct {
	HL7      HL7Name           `hl7:",name=RGR_RGR_Order,type=tg"`
	ORC      *ORC              `hl7:"10,required,display=Common Order"`
	Encoding *RGR_RGR_Encoding `hl7:",display=Encoding"`
	RXG      []RXG             `hl7:"14,required,display=Pharmacy/Treatment Give"`
	RXR      []RXR             `hl7:"15,required,display=Pharmacy/Treatment Route"`
	RXC      []RXC             `hl7:"16,display=Pharmacy/Treatment Component Order"`
}

// Encoding
type RGR_RGR_Encoding struct {
	HL7 HL7Name `hl7:",name=RGR_RGR_Encoding,type=tg"`
	RXE *RXE    `hl7:"11,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"12,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"13,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/Treatment Dose Information Response
//
// This query/response pair is retained for backward compatibility only.
type RGR_RGR struct {
	HL7        HL7Name              `hl7:",name=RGR_RGR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        []ERR                `hl7:"3,display=Error"`
	SFT        []SFT                `hl7:"4,display=Software Segment"`
	UAC        *UAC                 `hl7:"5,display=User Authentication Credential"`
	Definition []RGR_RGR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"17,display=Continuation Pointer"`
}

// Patient
type RGV_O15_Patient struct {
	HL7          HL7Name               `hl7:",name=RGV_O15_Patient,type=tg"`
	PID          *PID                  `hl7:"5,required,display=Patient Identification"`
	NTE          []NTE                 `hl7:"6,display=Notes and Comments"`
	AL1          []AL1                 `hl7:"7,display=Patient Allergy Information"`
	PatientVisit *RGV_O15_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type RGV_O15_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RGV_O15_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
}

// Order
type RGV_O15_Order struct {
	HL7         HL7Name              `hl7:",name=RGV_O15_Order,type=tg"`
	ORC         *ORC                 `hl7:"10,required,display=Common Order"`
	Timing      []RGV_O15_Timing     `hl7:",display=Timing"`
	OrderDetail *RGV_O15_OrderDetail `hl7:",display=Order Detail"`
	Encoding    *RGV_O15_Encoding    `hl7:",display=Encoding"`
	Give        []RGV_O15_Give       `hl7:",required,display=Give"`
}

// Timing
type RGV_O15_Timing struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"11,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"12,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RGV_O15_OrderDetail struct {
	HL7                   HL7Name                        `hl7:",name=RGV_O15_OrderDetail,type=tg"`
	RXO                   *RXO                           `hl7:"13,required,display=Pharmacy/Treatment Order"`
	OrderDetailSupplement *RGV_O15_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RGV_O15_OrderDetailSupplement struct {
	HL7        HL7Name              `hl7:",name=RGV_O15_OrderDetailSupplement,type=tg"`
	NTE        []NTE                `hl7:"14,required,display=Notes and Comments"`
	RXR        []RXR                `hl7:"15,required,display=Pharmacy/Treatment Route"`
	Components []RGV_O15_Components `hl7:",display=Components"`
}

// Components
type RGV_O15_Components struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Components,type=tg"`
	RXC *RXC    `hl7:"16,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// Encoding
type RGV_O15_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RGV_O15_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"18,required,display=Pharmacy/Treatment Encoded Order"`
	TimingEncoded []RGV_O15_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"21,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"22,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RGV_O15_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RGV_O15_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"19,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"20,display=Timing/Quantity Relationship"`
}

// Give
type RGV_O15_Give struct {
	HL7         HL7Name               `hl7:",name=RGV_O15_Give,type=tg"`
	RXG         *RXG                  `hl7:"23,required,display=Pharmacy/Treatment Give"`
	TimingGive  []RGV_O15_TimingGive  `hl7:",required,display=Timing Give"`
	RXR         []RXR                 `hl7:"26,required,display=Pharmacy/Treatment Route"`
	RXC         []RXC                 `hl7:"27,display=Pharmacy/Treatment Component Order"`
	Observation []RGV_O15_Observation `hl7:",required,display=Observation"`
}

// TimingGive
type RGV_O15_TimingGive struct {
	HL7 HL7Name `hl7:",name=RGV_O15_TimingGive,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// Observation
type RGV_O15_Observation struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Observation,type=tg"`
	OBX *OBX    `hl7:"28,display=Observation/Result"`
	NTE []NTE   `hl7:"29,display=Notes and Comments"`
}

// Pharmacy/Treatment Give
//
// The RDS message's RXD segment carries the dispense data for a given issuance of medication: thus it may describe a single
// dose, a half-day dose, a daily dose, a refill of a prescription, etc.  It does not contain the given instructions or scheduling
// information.  When this "give" (i.e., administration) information needs to be transmitted from the pharmacy or treatment
// application to another application, it is done with the RGV message.
//
// The RGV message uses the RXG segment to record drug or treatment administration instructions.  It may carry information
// about a single scheduled administration on a drug or treatment, or it may carry information about multiple administrations.
type RGV_O15 struct {
	HL7     HL7Name          `hl7:",name=RGV_O15,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	SFT     []SFT            `hl7:"2,display=Software Segment"`
	UAC     *UAC             `hl7:"3,display=User Authentication Credential"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Patient *RGV_O15_Patient `hl7:",display=Patient"`
	Order   []RGV_O15_Order  `hl7:",required,display=Order"`
}

// Definition
type ROR_ROR_Definition struct {
	HL7     HL7Name          `hl7:",name=ROR_ROR_Definition,type=tg"`
	QRD     *QRD             `hl7:"6,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"7,display=Original style query filter"`
	Patient *ROR_ROR_Patient `hl7:",display=Patient"`
	Order   []ROR_ROR_Order  `hl7:",required,display=Order"`
}

// Patient
type ROR_ROR_Patient struct {
	HL7 HL7Name `hl7:",name=ROR_ROR_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// Order
type ROR_ROR_Order struct {
	HL7 HL7Name `hl7:",name=ROR_ROR_Order,type=tg"`
	ORC *ORC    `hl7:"10,required,display=Common Order"`
	RXO *RXO    `hl7:"11,required,display=Pharmacy/Treatment Order"`
	RXR []RXR   `hl7:"12,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"13,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy Prescription Order Response
//
// This query/response pair is retained for backward compatibility only.
type ROR_ROR struct {
	HL7        HL7Name              `hl7:",name=ROR_ROR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        []ERR                `hl7:"3,display=Error"`
	SFT        []SFT                `hl7:"4,display=Software Segment"`
	UAC        *UAC                 `hl7:"5,display=User Authentication Credential"`
	Definition []ROR_ROR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"14,display=Continuation Pointer"`
}

// Authorization1
type RPA_I08_Authorization1 struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Authorization1,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I08_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I08_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I08_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I08_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I08_Authorization2 `hl7:",display=Authorization 2"`
}

// Authorization2
type RPA_I08_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I08_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I08_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes and Comments"`
	Results []RPA_I08_Results `hl7:",display=Results"`
}

// Results
type RPA_I08_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/Result"`
	NTE []NTE   `hl7:"26,display=Notes and Comments"`
}

// Visit
type RPA_I08_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return Treatment Authorization Information
//
// This event triggers a message to be sent from a healthcare provider to a payor requesting authorization to perform specific
// medical procedures or tests on a given patient.  The specific medical procedures must be filled out in the PR1 segments.
// Each repeating PR1 segment may be paired with an AUT segment so that authorization information can be given regarding dollar
// amounts, number of treatments, and perhaps the estimated length of stay for treatment.  The OBR and OBX segments should
// be used to include any relevant clinical information that may be required to support or process the authorization.
type RPA_I08 struct {
	HL7            HL7Name                 `hl7:",name=RPA_I08,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	RF1            *RF1                    `hl7:"5,display=Referral Information"`
	Authorization1 *RPA_I08_Authorization1 `hl7:",display=Authorization 1"`
	Provider       []RPA_I08_Provider      `hl7:",required,display=Provider"`
	PID            *PID                    `hl7:"10,required,display=Patient Identification"`
	NK1            []NK1                   `hl7:"11,display=Next of Kin / Associated Parties"`
	GT1            []GT1                   `hl7:"12,display=Guarantor"`
	Insurance      []RPA_I08_Insurance     `hl7:",display=Insurance"`
	ACC            *ACC                    `hl7:"16,display=Accident"`
	DG1            []DG1                   `hl7:"17,display=Diagnosis"`
	DRG            []DRG                   `hl7:"18,display=Diagnosis Related Group"`
	AL1            []AL1                   `hl7:"19,display=Patient Allergy Information"`
	Procedure      []RPA_I08_Procedure     `hl7:",required,display=Procedure"`
	Observation    []RPA_I08_Observation   `hl7:",display=Observation"`
	Visit          *RPA_I08_Visit          `hl7:",display=Visit"`
	NTE            []NTE                   `hl7:"29,display=Notes and Comments"`
}

// Authorization1
type RPA_I09_Authorization1 struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Authorization1,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I09_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I09_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I09_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I09_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I09_Authorization2 `hl7:",display=Authorization 2"`
}

// Authorization2
type RPA_I09_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I09_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I09_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes and Comments"`
	Results []RPA_I09_Results `hl7:",display=Results"`
}

// Results
type RPA_I09_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/Result"`
	NTE []NTE   `hl7:"26,display=Notes and Comments"`
}

// Visit
type RPA_I09_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return Modification to an Authorization
//
// This event triggers a message sent from a healthcare provider to a payor requesting changes to a previously referenced
// authorization.  For example, a provider may determine that a substitute testing or surgical procedure should be performed
// on a specified patient.
type RPA_I09 struct {
	HL7            HL7Name                 `hl7:",name=RPA_I09,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	RF1            *RF1                    `hl7:"5,display=Referral Information"`
	Authorization1 *RPA_I09_Authorization1 `hl7:",display=Authorization 1"`
	Provider       []RPA_I09_Provider      `hl7:",required,display=Provider"`
	PID            *PID                    `hl7:"10,required,display=Patient Identification"`
	NK1            []NK1                   `hl7:"11,display=Next of Kin / Associated Parties"`
	GT1            []GT1                   `hl7:"12,display=Guarantor"`
	Insurance      []RPA_I09_Insurance     `hl7:",display=Insurance"`
	ACC            *ACC                    `hl7:"16,display=Accident"`
	DG1            []DG1                   `hl7:"17,display=Diagnosis"`
	DRG            []DRG                   `hl7:"18,display=Diagnosis Related Group"`
	AL1            []AL1                   `hl7:"19,display=Patient Allergy Information"`
	Procedure      []RPA_I09_Procedure     `hl7:",required,display=Procedure"`
	Observation    []RPA_I09_Observation   `hl7:",display=Observation"`
	Visit          *RPA_I09_Visit          `hl7:",display=Visit"`
	NTE            []NTE                   `hl7:"29,display=Notes and Comments"`
}

// Authorization1
type RPA_I10_Authorization1 struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Authorization1,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I10_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I10_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I10_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I10_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I10_Authorization2 `hl7:",display=Authorization 2"`
}

// Authorization2
type RPA_I10_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I10_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I10_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes and Comments"`
	Results []RPA_I10_Results `hl7:",display=Results"`
}

// Results
type RPA_I10_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/Result"`
	NTE []NTE   `hl7:"26,display=Notes and Comments"`
}

// Visit
type RPA_I10_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return Resubmission of an Authorization
//
// If a previously submitted request for treatment authorization is rejected or canceled, this event could trigger a resubmission
// message for a referenced authorization.  For example, the payor may have rejected a request until additional clinical
// information is sent to support the authorization request.
type RPA_I10 struct {
	HL7            HL7Name                 `hl7:",name=RPA_I10,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	RF1            *RF1                    `hl7:"5,display=Referral Information"`
	Authorization1 *RPA_I10_Authorization1 `hl7:",display=Authorization 1"`
	Provider       []RPA_I10_Provider      `hl7:",required,display=Provider"`
	PID            *PID                    `hl7:"10,required,display=Patient Identification"`
	NK1            []NK1                   `hl7:"11,display=Next of Kin / Associated Parties"`
	GT1            []GT1                   `hl7:"12,display=Guarantor"`
	Insurance      []RPA_I10_Insurance     `hl7:",display=Insurance"`
	ACC            *ACC                    `hl7:"16,display=Accident"`
	DG1            []DG1                   `hl7:"17,display=Diagnosis"`
	DRG            []DRG                   `hl7:"18,display=Diagnosis Related Group"`
	AL1            []AL1                   `hl7:"19,display=Patient Allergy Information"`
	Procedure      []RPA_I10_Procedure     `hl7:",required,display=Procedure"`
	Observation    []RPA_I10_Observation   `hl7:",display=Observation"`
	Visit          *RPA_I10_Visit          `hl7:",display=Visit"`
	NTE            []NTE                   `hl7:"29,display=Notes and Comments"`
}

// Authorization1
type RPA_I11_Authorization1 struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Authorization1,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// Provider
type RPA_I11_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Provider,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Insurance
type RPA_I11_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I11_Procedure struct {
	HL7            HL7Name                 `hl7:",name=RPA_I11_Procedure,type=tg"`
	PR1            *PR1                    `hl7:"20,required,display=Procedures"`
	Authorization2 *RPA_I11_Authorization2 `hl7:",display=Authorization 2"`
}

// Authorization2
type RPA_I11_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Authorization2,type=tg"`
	AUT *AUT    `hl7:"21,required,display=Authorization Information"`
	CTD *CTD    `hl7:"22,display=Contact Data"`
}

// Observation
type RPA_I11_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I11_Observation,type=tg"`
	OBR     *OBR              `hl7:"23,required,display=Observation Request"`
	NTE     []NTE             `hl7:"24,display=Notes and Comments"`
	Results []RPA_I11_Results `hl7:",display=Results"`
}

// Results
type RPA_I11_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Results,type=tg"`
	OBX *OBX    `hl7:"25,required,display=Observation/Result"`
	NTE []NTE   `hl7:"26,display=Notes and Comments"`
}

// Visit
type RPA_I11_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Visit,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"28,display=Patient Visit - Additional Information"`
}

// Return Cancellation of an Authorization
//
// This event may trigger the cancellation of an authorization.  It may be used by the provider to indicate that an authorized
// service was not performed, or perhaps that the patient changed to another provider.  A payor may use this request to reject
// a submitted authorization request from a provider.
type RPA_I11 struct {
	HL7            HL7Name                 `hl7:",name=RPA_I11,type=t"`
	MSH            *MSH                    `hl7:"1,required,display=Message Header"`
	SFT            []SFT                   `hl7:"2,display=Software Segment"`
	UAC            *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA            *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	RF1            *RF1                    `hl7:"5,display=Referral Information"`
	Authorization1 *RPA_I11_Authorization1 `hl7:",display=Authorization 1"`
	Provider       []RPA_I11_Provider      `hl7:",required,display=Provider"`
	PID            *PID                    `hl7:"10,required,display=Patient Identification"`
	NK1            []NK1                   `hl7:"11,display=Next of Kin / Associated Parties"`
	GT1            []GT1                   `hl7:"12,display=Guarantor"`
	Insurance      []RPA_I11_Insurance     `hl7:",display=Insurance"`
	ACC            *ACC                    `hl7:"16,display=Accident"`
	DG1            []DG1                   `hl7:"17,display=Diagnosis"`
	DRG            []DRG                   `hl7:"18,display=Diagnosis Related Group"`
	AL1            []AL1                   `hl7:"19,display=Patient Allergy Information"`
	Procedure      []RPA_I11_Procedure     `hl7:",required,display=Procedure"`
	Observation    []RPA_I11_Observation   `hl7:",display=Observation"`
	Visit          *RPA_I11_Visit          `hl7:",display=Visit"`
	NTE            []NTE                   `hl7:"29,display=Notes and Comments"`
}

// Provider
type RPI_I01_Provider struct {
	HL7 HL7Name `hl7:",name=RPI_I01_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// GuarantorInsurance
type RPI_I01_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RPI_I01_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RPI_I01_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RPI_I01_Insurance struct {
	HL7 HL7Name `hl7:",name=RPI_I01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Return Insurance Information
//
// This event triggers a message to be sent from one healthcare provider to another to request insurance information for a
// specified patient.
type RPI_I01 struct {
	HL7                HL7Name                     `hl7:",name=RPI_I01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	MSA                *MSA                        `hl7:"4,required,display=Message Acknowledgment"`
	Provider           []RPI_I01_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"8,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RPI_I01_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"13,display=Notes and Comments"`
}

// Provider
type RPI_I04_Provider struct {
	HL7 HL7Name `hl7:",name=RPI_I04_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// GuarantorInsurance
type RPI_I04_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RPI_I04_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RPI_I04_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RPI_I04_Insurance struct {
	HL7 HL7Name `hl7:",name=RPI_I04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Return Patient Demographic Data
//
// This event triggers a request from one healthcare provider to another for patient demographic information, including
// insurance and billing information.  Typically, this transaction would occur between one provider to another, but it could
// also be directed to a payor.
type RPI_I04 struct {
	HL7                HL7Name                     `hl7:",name=RPI_I04,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	MSA                *MSA                        `hl7:"4,required,display=Message Acknowledgment"`
	Provider           []RPI_I04_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"8,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RPI_I04_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"13,display=Notes and Comments"`
}

// Provider
type RPL_I02_Provider struct {
	HL7 HL7Name `hl7:",name=RPL_I02_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Return Patient Selection Display List
//
// This trigger event occurs when the inquirer specifies a request for a name lookup listing.  Generally, this request is used
// by the responder when insufficient data is on hand for a positive match.  In this case, the requester may ask for a list of possible
// candidates from which to make a selection.  This event code is also used by the responder to signify that the return information
// contains a list of information rather than information specific to a single patient.
type RPL_I02 struct {
	HL7      HL7Name            `hl7:",name=RPL_I02,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	MSA      *MSA               `hl7:"4,required,display=Message Acknowledgment"`
	Provider []RPL_I02_Provider `hl7:",required,display=Provider"`
	NTE      []NTE              `hl7:"7,display=Notes and Comments"`
	DSP      []DSP              `hl7:"8,display=Display Data"`
	DSC      *DSC               `hl7:"9,display=Continuation Pointer"`
}

// Provider
type RPR_I03_Provider struct {
	HL7 HL7Name `hl7:",name=RPR_I03_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Return Patient Selection List
//
// This trigger event occurs when the inquirer specifies a request for a listing of patient names.  This event differs from
// event I02 (request/receipts of patient selection display list) in that it returns the patient list in repeating PID segments
// instead of repeating DSP segments.
type RPR_I03 struct {
	HL7      HL7Name            `hl7:",name=RPR_I03,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	MSA      *MSA               `hl7:"4,required,display=Message Acknowledgment"`
	Provider []RPR_I03_Provider `hl7:",required,display=Provider"`
	PID      []PID              `hl7:"7,display=Patient Identification"`
	NTE      []NTE              `hl7:"8,display=Notes and Comments"`
}

// Authorization
type RQA_I08_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I08_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I08_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I08_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I08_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I08_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I08_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I08_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization *RQA_I08_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I08_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I08_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I08_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes and Comments"`
	Results []RQA_I08_Results `hl7:",display=Results"`
}

// Results
type RQA_I08_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Visit
type RQA_I08_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request for Treatment Authorization Information
//
// This event triggers a message to be sent from a healthcare provider to a payor requesting authorization to perform specific
// medical procedures or tests on a given patient.  The specific medical procedures must be filled out in the PR1 segments.
// Each repeating PR1 segment may be paired with an AUT segment so that authorization information can be given regarding dollar
// amounts, number of treatments, and perhaps the estimated length of stay for treatment.  The OBR and OBX segments should
// be used to include any relevant clinical information that may be required to support or process the authorization.
type RQA_I08 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I08,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I08_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I08_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RQA_I08_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I08_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I08_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I08_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
}

// Authorization
type RQA_I09_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I09_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I09_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I09_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I09_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I09_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I09_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I09_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization *RQA_I09_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I09_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I09_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I09_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes and Comments"`
	Results []RQA_I09_Results `hl7:",display=Results"`
}

// Results
type RQA_I09_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Visit
type RQA_I09_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request for Modification to an Authorization
//
// This event triggers a message sent from a healthcare provider to a payor requesting changes to a previously referenced
// authorization.  For example, a provider may determine that a substitute testing or surgical procedure should be performed
// on a specified patient.
type RQA_I09 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I09,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I09_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I09_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RQA_I09_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I09_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I09_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I09_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
}

// Authorization
type RQA_I10_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I10_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I10_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I10_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I10_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I10_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I10_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I10_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization *RQA_I10_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I10_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I10_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I10_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes and Comments"`
	Results []RQA_I10_Results `hl7:",display=Results"`
}

// Results
type RQA_I10_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Visit
type RQA_I10_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request for Resubmission of an Authorization
//
// If a previously submitted request for treatment authorization is rejected or canceled, this event could trigger a resubmission
// message for a referenced authorization.  For example, the payor may have rejected a request until additional clinical
// information is sent to support the authorization request.
type RQA_I10 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I10,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I10_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I10_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RQA_I10_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I10_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I10_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I10_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
}

// Authorization
type RQA_I11_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Authorization,type=tg"`
	AUT *AUT    `hl7:"5,required,display=Authorization Information"`
	CTD *CTD    `hl7:"6,display=Contact Data"`
}

// Provider
type RQA_I11_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Provider,type=tg"`
	PRD *PRD    `hl7:"7,required,display=Provider Data"`
	CTD []CTD   `hl7:"8,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I11_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I11_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []RQA_I11_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I11_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I11_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I11_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"19,required,display=Procedures"`
	Authorization *RQA_I11_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I11_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Authorization2,type=tg"`
	AUT *AUT    `hl7:"20,required,display=Authorization Information"`
	CTD *CTD    `hl7:"21,display=Contact Data"`
}

// Observation
type RQA_I11_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I11_Observation,type=tg"`
	OBR     *OBR              `hl7:"22,required,display=Observation Request"`
	NTE     []NTE             `hl7:"23,display=Notes and Comments"`
	Results []RQA_I11_Results `hl7:",display=Results"`
}

// Results
type RQA_I11_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Results,type=tg"`
	OBX *OBX    `hl7:"24,required,display=Observation/Result"`
	NTE []NTE   `hl7:"25,display=Notes and Comments"`
}

// Visit
type RQA_I11_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Visit,type=tg"`
	PV1 *PV1    `hl7:"26,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"27,display=Patient Visit - Additional Information"`
}

// Request Cancellation of an Authorization
//
// This event may trigger the cancellation of an authorization.  It may be used by the provider to indicate that an authorized
// service was not performed, or perhaps that the patient changed to another provider.  A payor may use this request to reject
// a submitted authorization request from a provider.
type RQA_I11 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I11,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	RF1                *RF1                        `hl7:"4,display=Referral Information"`
	Authorization      *RQA_I11_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I11_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"9,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"10,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RQA_I11_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"15,display=Accident"`
	DG1                []DG1                       `hl7:"16,display=Diagnosis"`
	DRG                []DRG                       `hl7:"17,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"18,display=Patient Allergy Information"`
	Procedure          []RQA_I11_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I11_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I11_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
}

// Provider
type RQC_I05_Provider struct {
	HL7 HL7Name `hl7:",name=RQC_I05_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Request Patient Clinical Information
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// This event is used to request clinical information for a specific patient.  Generally, this transaction occurs between
// one provider and another (typically a laboratory or radiology, etc.).  However, it may also be very useful for a payor-to-provider
// request for clinical observation information to be used in considering a request for treatment authorization.
type RQC_I05 struct {
	HL7      HL7Name            `hl7:",name=RQC_I05,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	QRD      *QRD               `hl7:"4,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"5,display=Original style query filter"`
	Provider []RQC_I05_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"8,required,display=Patient Identification"`
	NK1      []NK1              `hl7:"9,display=Next of Kin / Associated Parties"`
	GT1      []GT1              `hl7:"10,display=Guarantor"`
	NTE      []NTE              `hl7:"11,display=Notes and Comments"`
}

// Provider
type RQC_I06_Provider struct {
	HL7 HL7Name `hl7:",name=RQC_I06_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Request Clinical Data Listing
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// This event code is sent from one healthcare provider to another (typically a laboratory or radiology, etc.) to request
// a list of available clinical observation information.  When the provider is dealing with a community model in which remote
// requests make transmission of large amounts of data impractical, this event code will provide for interactive lists of
// transactions from which more specific selections can be made.
type RQC_I06 struct {
	HL7      HL7Name            `hl7:",name=RQC_I06,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	QRD      *QRD               `hl7:"4,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"5,display=Original style query filter"`
	Provider []RQC_I06_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"8,required,display=Patient Identification"`
	NK1      []NK1              `hl7:"9,display=Next of Kin / Associated Parties"`
	GT1      *GT1               `hl7:"10,display=Guarantor"`
	NTE      []NTE              `hl7:"11,display=Notes and Comments"`
}

// Provider
type RQI_I01_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I01_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// GuarantorInsurance
type RQI_I01_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I01_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []RQI_I01_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I01_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Request Insurance Information
//
// This event triggers a message to be sent from one healthcare provider to another to request insurance information for a
// specified patient
type RQI_I01 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	Provider           []RQI_I01_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RQI_I01_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes and Comments"`
}

// Provider
type RQI_I02_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I02_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// GuarantorInsurance
type RQI_I02_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I02_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []RQI_I02_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I02_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I02_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Request Patient Selection Display List
//
// This trigger event occurs when the inquirer specifies a request for a name lookup listing.  Generally, this request is used
// by the responder when insufficient data is on hand for a positive match.  In this case, the requester may ask for a list of possible
// candidates from which to make a selection.  This event code is also used by the responder to signify that the return information
// contains a list of information rather than information specific to a single patient.
type RQI_I02 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I02,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	Provider           []RQI_I02_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RQI_I02_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes and Comments"`
}

// Provider
type RQI_I03_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I03_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// GuarantorInsurance
type RQI_I03_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I03_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"8,display=Guarantor"`
	Insurance []RQI_I03_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I03_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"9,required,display=Insurance"`
	IN2 *IN2    `hl7:"10,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"11,display=Insurance Additional Information- Certification"`
}

// Request Patient Selection List
//
// This trigger event occurs when the inquirer specifies a request for a listing of patient names.  This event differs from
// event I02 (request/receipts of patient selection display list) in that it returns the patient list in repeating PID segments
// instead of repeating DSP segments.
type RQI_I03 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I03,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	SFT                []SFT                       `hl7:"2,display=Software Segment"`
	UAC                *UAC                        `hl7:"3,display=User Authentication Credential"`
	Provider           []RQI_I03_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"6,required,display=Patient Identification"`
	NK1                []NK1                       `hl7:"7,display=Next of Kin / Associated Parties"`
	GuarantorInsurance *RQI_I03_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"12,display=Notes and Comments"`
}

// Provider
type RQP_I04_Provider struct {
	HL7 HL7Name `hl7:",name=RQP_I04_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Request Patient Demographic Data
//
// This event triggers a request from one healthcare provider to another for patient demographic information, including
// insurance and billing information.  Typically, this transaction would occur between one provider to another, but it could
// also be directed to a payor.
type RQP_I04 struct {
	HL7      HL7Name            `hl7:",name=RQP_I04,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	SFT      []SFT              `hl7:"2,display=Software Segment"`
	UAC      *UAC               `hl7:"3,display=User Authentication Credential"`
	Provider []RQP_I04_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"6,required,display=Patient Identification"`
	NK1      []NK1              `hl7:"7,display=Next of Kin / Associated Parties"`
	GT1      []GT1              `hl7:"8,display=Guarantor"`
	NTE      []NTE              `hl7:"9,display=Notes and Comments"`
}

// Event Replay Query
//
// This section is retained for backward compatibility as of V2.4.
//
// The Event Replay Query under version 2.3 provides a way for the querying system to request data formatted very similar to
// the format that would have been used were this data to be sent as an update in response to a trigger event.
//
// The RQQ is used to request data formatted as an event replay response.
type RQQ_Q09 struct {
	HL7 HL7Name `hl7:",name=RQQ_Q09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	ERQ *ERQ    `hl7:"3,required,display=Event replay query"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Response
type RRA_O18_Response struct {
	HL7     HL7Name          `hl7:",name=RRA_O18_Response,type=tg"`
	Patient *RRA_O18_Patient `hl7:",display=Patient"`
	Order   []RRA_O18_Order  `hl7:",required,display=Order"`
}

// Patient
type RRA_O18_Patient struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type RRA_O18_Order struct {
	HL7            HL7Name                 `hl7:",name=RRA_O18_Order,type=tg"`
	ORC            *ORC                    `hl7:"9,required,display=Common Order"`
	Timing         []RRA_O18_Timing        `hl7:",display=Timing"`
	Administration *RRA_O18_Administration `hl7:",display=Administration"`
}

// Timing
type RRA_O18_Timing struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// Administration
type RRA_O18_Administration struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Administration,type=tg"`
	RXA []RXA   `hl7:"12,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"13,required,display=Pharmacy/Treatment Route"`
}

// Pharmacy/Treatment Administration Acknowledgement
//
// The RAS/RRA message may be created by the administering application (e.g., nursing application) for each instance of
// administration for an existing order.  If the administering application wants to report several administrations of medication/treatment
// for a given order with a single RAS message, each instance is reported by a separate (repeating) RXA segment.  In addition,
// the administration records for a group of orders may be sent in a single message by creating repeating groups of segments
// at the ORC level.
type RRA_O18 struct {
	HL7      HL7Name           `hl7:",name=RRA_O18,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *RRA_O18_Response `hl7:",display=Response"`
}

// Response
type RRD_O14_Response struct {
	HL7     HL7Name          `hl7:",name=RRD_O14_Response,type=tg"`
	Patient *RRD_O14_Patient `hl7:",display=Patient"`
	Order   []RRD_O14_Order  `hl7:",required,display=Order"`
}

// Patient
type RRD_O14_Patient struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type RRD_O14_Order struct {
	HL7      HL7Name           `hl7:",name=RRD_O14_Order,type=tg"`
	ORC      *ORC              `hl7:"9,required,display=Common Order"`
	Timing   []RRD_O14_Timing  `hl7:",display=Timing"`
	Dispense *RRD_O14_Dispense `hl7:",display=Dispense"`
}

// Timing
type RRD_O14_Timing struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// Dispense
type RRD_O14_Dispense struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Dispense,type=tg"`
	RXD *RXD    `hl7:"12,required,display=Pharmacy/Treatment Dispense"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
	RXR []RXR   `hl7:"14,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"15,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/Treatment Dispense Acknowledgement
//
// The RDS/RRD message may be created by the pharmacy/treatment application for each instance of dispensing a drug or treatment
// to fill an existing order or orders.  In the most common case, the RDS messages would be routed to a Nursing application or
// to some clinical application, which needs the data about drugs dispensed or treatments given.  As a site-specific variant,
// the original order segments (RXO, RXE and their associated RXR/RXCs) may be sent optionally (for comparison).
type RRD_O14 struct {
	HL7      HL7Name           `hl7:",name=RRD_O14,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *RRD_O14_Response `hl7:",display=Response"`
}

// Response
type RRE_O12_Response struct {
	HL7     HL7Name          `hl7:",name=RRE_O12_Response,type=tg"`
	Patient *RRE_O12_Patient `hl7:",display=Patient"`
	Order   []RRE_O12_Order  `hl7:",required,display=Order"`
}

// Patient
type RRE_O12_Patient struct {
	HL7 HL7Name `hl7:",name=RRE_O12_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type RRE_O12_Order struct {
	HL7      HL7Name           `hl7:",name=RRE_O12_Order,type=tg"`
	ORC      *ORC              `hl7:"9,required,display=Common Order"`
	Timing   []RRE_O12_Timing  `hl7:",display=Timing"`
	Encoding *RRE_O12_Encoding `hl7:",display=Encoding"`
}

// Timing
type RRE_O12_Timing struct {
	HL7 HL7Name `hl7:",name=RRE_O12_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// Encoding
type RRE_O12_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RRE_O12_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"12,required,display=Pharmacy/Treatment Encoded Order"`
	NTE           []NTE                   `hl7:"13,display=Notes and Comments"`
	TimingEncoded []RRE_O12_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"16,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"17,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RRE_O12_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RRE_O12_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/Quantity Relationship"`
}

// Pharmacy/Treatment Encoded Order Acknowledgement
//
// This message communicates the pharmacy or treatment application's encoding of the pharmacy/treatment order (ORM message
// with RXO segment, see above).  It may be sent as an unsolicited message to report on either a single order or multiple pharmacy/treatment
// orders for a patient.  The RDE/RRE message pair can also be used to communicate a refill authorization request; however,
// a specific trigger event has been assigned.  See section 4.13.13 "RDE - Pharmacy/Treatment Refill Authorization Request
// Message (Event O25)." As a site-specific variant, the original order segments (RXO, RXRs, associated RXCs, and any NTEs)
// may be sent optionally (for comparison).
type RRE_O12 struct {
	HL7      HL7Name           `hl7:",name=RRE_O12,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *RRE_O12_Response `hl7:",display=Response"`
}

// Response
type RRE_O26_Response struct {
	HL7     HL7Name          `hl7:",name=RRE_O26_Response,type=tg"`
	Patient *RRE_O26_Patient `hl7:",display=Patient"`
	Order   []RRE_O26_Order  `hl7:",required,display=Order"`
}

// Patient
type RRE_O26_Patient struct {
	HL7 HL7Name `hl7:",name=RRE_O26_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type RRE_O26_Order struct {
	HL7      HL7Name           `hl7:",name=RRE_O26_Order,type=tg"`
	ORC      *ORC              `hl7:"9,required,display=Common Order"`
	Timing   []RRE_O26_Timing  `hl7:",display=Timing"`
	Encoding *RRE_O26_Encoding `hl7:",display=Encoding"`
}

// Timing
type RRE_O26_Timing struct {
	HL7 HL7Name `hl7:",name=RRE_O26_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// Encoding
type RRE_O26_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RRE_O26_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"12,required,display=Pharmacy/Treatment Encoded Order"`
	TimingEncoded []RRE_O26_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"15,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"16,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RRE_O26_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RRE_O26_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// Pharmacy/Treatment Refill Authorization Request Acknowledgment
//
// The RDE/RRE is used to communicate a refill authorization request originating with the pharmacy.  This message replicates
// the standard RDE message with a different trigger event code to indicate the specific use case of a refill authorization
// request.
type RRE_O26 struct {
	HL7      HL7Name           `hl7:",name=RRE_O26,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *RRE_O26_Response `hl7:",display=Response"`
}

// Response
type RRG_O16_Response struct {
	HL7     HL7Name          `hl7:",name=RRG_O16_Response,type=tg"`
	Patient *RRG_O16_Patient `hl7:",display=Patient"`
	Order   []RRG_O16_Order  `hl7:",required,display=Order"`
}

// Patient
type RRG_O16_Patient struct {
	HL7 HL7Name `hl7:",name=RRG_O16_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type RRG_O16_Order struct {
	HL7    HL7Name          `hl7:",name=RRG_O16_Order,type=tg"`
	ORC    *ORC             `hl7:"9,required,display=Common Order"`
	Timing []RRG_O16_Timing `hl7:",display=Timing"`
	Give   *RRG_O16_Give    `hl7:",display=Give"`
}

// Timing
type RRG_O16_Timing struct {
	HL7 HL7Name `hl7:",name=RRG_O16_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"10,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"11,display=Timing/Quantity Relationship"`
}

// Give
type RRG_O16_Give struct {
	HL7        HL7Name              `hl7:",name=RRG_O16_Give,type=tg"`
	RXG        *RXG                 `hl7:"12,required,display=Pharmacy/Treatment Give"`
	TimingGive []RRG_O16_TimingGive `hl7:",required,display=Timing Give"`
	RXR        []RXR                `hl7:"15,required,display=Pharmacy/Treatment Route"`
	RXC        []RXC                `hl7:"16,display=Pharmacy/Treatment Component Order"`
}

// TimingGive
type RRG_O16_TimingGive struct {
	HL7 HL7Name `hl7:",name=RRG_O16_TimingGive,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// Pharmacy/Treatment Give Acknowledgement
//
// The RDS message's RXD segment carries the dispense data for a given issuance of medication: thus it may describe a single
// dose, a half-day dose, a daily dose, a refill of a prescription, etc.  It does not contain the given instructions or scheduling
// information.  When this "give" (i.e., administration) information needs to be transmitted from the pharmacy or treatment
// application to another application, it is done with the RGV message.
//
// The RGV message uses the RXG segment to record drug or treatment administration instructions.  It may carry information
// about a single scheduled administration on a drug or treatment, or it may carry information about multiple administrations.
type RRG_O16 struct {
	HL7      HL7Name           `hl7:",name=RRG_O16,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	SFT      []SFT             `hl7:"4,display=Software Segment"`
	UAC      *UAC              `hl7:"5,display=User Authentication Credential"`
	NTE      []NTE             `hl7:"6,display=Notes and Comments"`
	Response *RRG_O16_Response `hl7:",display=Response"`
}

// AuthorizationContact
type RRI_I12_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I12_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// ProviderContact
type RRI_I12_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I12_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I12_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I12_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"15,required,display=Procedures"`
	AuthorizationContact *RRI_I12_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I12_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I12_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I12_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I12_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes and Comments"`
	ResultsNotes []RRI_I12_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I12_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I12_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/Result"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// PatientVisit
type RRI_I12_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I12_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Patient Referral Response
//
// This event triggers a message to be sent from one healthcare provider to another regarding a specific patient.  The referral
// message may contain patient demographic information, specific medical procedures to be performed (accompanied by previously
// obtained authorizations) and relevant clinical information pertinent to the patient's case.
type RRI_I12 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I12,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	AuthorizationContact *RRI_I12_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I12_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I12_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I12_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I12_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes and Comments"`
}

// AuthorizationContact
type RRI_I13_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I13_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// ProviderContact
type RRI_I13_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I13_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I13_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I13_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"15,required,display=Procedures"`
	AuthorizationContact *RRI_I13_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I13_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I13_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I13_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I13_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes and Comments"`
	ResultsNotes []RRI_I13_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I13_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I13_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/Result"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// PatientVisit
type RRI_I13_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I13_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Modify Patient Referral Response
//
// This event triggers a message to be sent from one healthcare provider to another regarding changes to an existing referral.
// Changes in a referral may include additional instructions from the referring provider, additional clinical information,
// and even additional information on patient demographics.
type RRI_I13 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I13,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	AuthorizationContact *RRI_I13_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I13_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I13_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I13_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I13_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes and Comments"`
}

// AuthorizationContact
type RRI_I14_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I14_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// ProviderContact
type RRI_I14_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I14_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I14_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I14_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"15,required,display=Procedures"`
	AuthorizationContact *RRI_I14_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I14_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I14_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I14_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I14_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes and Comments"`
	ResultsNotes []RRI_I14_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I14_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I14_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/Result"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// PatientVisit
type RRI_I14_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I14_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Cancel Patient Referral Response
//
// This event triggers a message to be sent from one healthcare provider to another canceling a referral.  A previous referral
// may have been made in error, or perhaps the cancellation has come from the patient.
type RRI_I14 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I14,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	AuthorizationContact *RRI_I14_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I14_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I14_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I14_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I14_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes and Comments"`
}

// AuthorizationContact
type RRI_I15_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I15_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"6,required,display=Authorization Information"`
	CTD *CTD    `hl7:"7,display=Contact Data"`
}

// ProviderContact
type RRI_I15_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I15_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"8,required,display=Provider Data"`
	CTD []CTD   `hl7:"9,display=Contact Data"`
}

// Procedure
type RRI_I15_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I15_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"15,required,display=Procedures"`
	AuthorizationContact *RRI_I15_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I15_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I15_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"16,required,display=Authorization Information"`
	CTD *CTD    `hl7:"17,display=Contact Data"`
}

// Observation
type RRI_I15_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I15_Observation,type=tg"`
	OBR          *OBR                   `hl7:"18,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"19,display=Notes and Comments"`
	ResultsNotes []RRI_I15_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I15_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I15_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/Result"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// PatientVisit
type RRI_I15_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I15_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"23,display=Patient Visit - Additional Information"`
}

// Return Request Patient Referral Status
//
// This event triggers a message to be sent between healthcare providers regarding the status of a patient referral request.
// A previous referral has been made and acknowledged; however, no response has been received to indicate results and/or
// procedures performed.
type RRI_I15 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I15,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	SFT                  []SFT                         `hl7:"2,display=Software Segment"`
	UAC                  *UAC                          `hl7:"3,display=User Authentication Credential"`
	MSA                  *MSA                          `hl7:"4,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"5,display=Referral Information"`
	AuthorizationContact *RRI_I15_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I15_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"10,required,display=Patient Identification"`
	ACC                  *ACC                          `hl7:"11,display=Accident"`
	DG1                  []DG1                         `hl7:"12,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"13,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"14,display=Patient Allergy Information"`
	Procedure            []RRI_I15_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I15_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I15_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"24,display=Notes and Comments"`
}

// QueryAck
type RSP_E03_QueryAck struct {
	HL7                          HL7Name                                `hl7:",name=RSP_E03_QueryAck,type=tg"`
	QAK                          *QAK                                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD                          *QPD                                   `hl7:"7,required,display=Query Parameter Definition"`
	InvoiceProcessingResultsInfo []RSP_E03_InvoiceProcessingResultsInfo `hl7:",display=Invoice Processing Results Info"`
}

// InvoiceProcessingResultsInfo
type RSP_E03_InvoiceProcessingResultsInfo struct {
	HL7 HL7Name `hl7:",name=RSP_E03_InvoiceProcessingResultsInfo,type=tg"`
	IPR *IPR    `hl7:"8,required,display=Invoice Processing Results"`
}

// HealthCare Services Invoice Status Query Response
//
// This message is used to respond to a QPB_E03 – Query HealthCare Services Invoice. It provides Invoice and invoice processing
// information to a Provider.
type RSP_E03 struct {
	HL7      HL7Name           `hl7:",name=RSP_E03,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	SFT      []SFT             `hl7:"2,display=Software Segment"`
	UAC      []UAC             `hl7:"3,display=User Authentication Credential"`
	MSA      *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"5,display=Error"`
	QueryAck *RSP_E03_QueryAck `hl7:",required,display=Query Ack"`
}

// QueryAck
type RSP_E22_QueryAck struct {
	HL7               HL7Name                    `hl7:",name=RSP_E22_QueryAck,type=tg"`
	QAK               *QAK                       `hl7:"6,required,display=Query Acknowledgment"`
	QPD               *QPD                       `hl7:"7,required,display=Query Parameter Definition"`
	AuthorizationInfo *RSP_E22_AuthorizationInfo `hl7:",display=Authorization Info"`
}

// AuthorizationInfo
type RSP_E22_AuthorizationInfo struct {
	HL7         HL7Name               `hl7:",name=RSP_E22_AuthorizationInfo,type=tg"`
	IVC         *IVC                  `hl7:"8,required,display=Invoice"`
	PSG         *PSG                  `hl7:"9,required,display=Product/Service Group"`
	PslItemInfo []RSP_E22_PslItemInfo `hl7:",required,display=Psl Item Info"`
}

// PslItemInfo
type RSP_E22_PslItemInfo struct {
	HL7 HL7Name `hl7:",name=RSP_E22_PslItemInfo,type=tg"`
	PSL *PSL    `hl7:"10,required,display=Product/Service Line Item"`
}

// Authorization Request StatusResponse
//
// This message is used to respond to a QPB_E22 –  Query Authorization Request Status. It provides Authorization status information
// to a Provider.
type RSP_E22 struct {
	HL7      HL7Name           `hl7:",name=RSP_E22,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	SFT      []SFT             `hl7:"2,display=Software Segment"`
	UAC      []UAC             `hl7:"3,display=User Authentication Credential"`
	MSA      *MSA              `hl7:"4,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"5,display=Error"`
	QueryAck *RSP_E22_QueryAck `hl7:",required,display=Query Ack"`
}

// Segment Pattern Response in Response to QBP_Q11
//
// The RSP_K11 supports a Segment Pattern Response to the QBP and contains the MSH, MSA, ERR, QAK, QPD, variable content segments,
// and the DSC.  Its default trigger event is K11.  A standard or site-defined response may use this trigger event or may specify
// a unique trigger event value in its Query Profile.  If a unique trigger event value is chosen for a site-defined response,
// that value must begin with Z.
type RSP_K11 struct {
	HL7 HL7Name `hl7:",name=RSP_K11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	MSA *MSA    `hl7:"4,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"5,display=Error"`
	QAK *QAK    `hl7:"6,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"7,required,display=Query Parameter Definition"`
	DSC *DSC    `hl7:"8,display=Continuation Pointer"`
}

// QueryResponse
type RSP_K21_QueryResponse struct {
	HL7 HL7Name `hl7:",name=RSP_K21_QueryResponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"9,display=Patient Additional Demographic"`
	ARV []ARV   `hl7:"10,display=Access Restrictions"`
	NK1 []NK1   `hl7:"11,display=Next of Kin / Associated Parties"`
	QRI *QRI    `hl7:"12,required,display=Query Response Instance"`
}

// Get Person Demographics Response
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response of the demographics for that person.
type RSP_K21 struct {
	HL7           HL7Name                `hl7:",name=RSP_K21,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	QueryResponse *RSP_K21_QueryResponse `hl7:",display=Query Response"`
	DSC           *DSC                   `hl7:"13,display=Continuation Pointer"`
}

// QueryResponse
type RSP_K22_QueryResponse struct {
	HL7 HL7Name `hl7:",name=RSP_K22_QueryResponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"9,display=Patient Additional Demographic"`
	NK1 []NK1   `hl7:"10,display=Next of Kin / Associated Parties"`
	QRI *QRI    `hl7:"11,display=Query Response Instance"`
}

// Find Candidates Response
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of a set of demographics for a person, and the response is the list of candidates considered by the MPI to match that set.
//
// Each returned person, specified by a PID segment, can also have an optional QRI - Query Response Instance segment containing
// information about the quality of the match.
type RSP_K22 struct {
	HL7           HL7Name                 `hl7:",name=RSP_K22,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	QueryResponse []RSP_K22_QueryResponse `hl7:",display=Query Response"`
	DSC           *DSC                    `hl7:"12,display=Continuation Pointer"`
}

// QueryResponse
type RSP_K23_QueryResponse struct {
	HL7 HL7Name `hl7:",name=RSP_K23_QueryResponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
}

// Get Corresponding Identifiers Response
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response is a list of identifiers for that person from the domains specified.
type RSP_K23 struct {
	HL7           HL7Name                `hl7:",name=RSP_K23,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	QueryResponse *RSP_K23_QueryResponse `hl7:",display=Query Response"`
	DSC           *DSC                   `hl7:"9,display=Continuation Pointer"`
}

// QueryResponse
type RSP_K24_QueryResponse struct {
	HL7 HL7Name `hl7:",name=RSP_K24_QueryResponse,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
}

// Allocate Identifiers Response
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of domains in which identifiers should be allocated. The response is new identifiers in those domains.
//
// This event is not meant to cause the creation of a new person record, or to bind identifiers to a particular person record.
// The events A28 - Add person information and A24 - Link patient information should be used for that purpose. This event is
// meant to simply reserve the use of identifiers.
type RSP_K24 struct {
	HL7           HL7Name                `hl7:",name=RSP_K24,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	QueryResponse *RSP_K24_QueryResponse `hl7:",display=Query Response"`
	DSC           *DSC                   `hl7:"9,display=Continuation Pointer"`
}

// Staff
type RSP_K25_Staff struct {
	HL7 HL7Name `hl7:",name=RSP_K25_Staff,type=tg"`
	STF *STF    `hl7:"9,required,display=Staff Identification"`
	PRA []PRA   `hl7:"10,display=Practitioner Detail"`
	ORG []ORG   `hl7:"11,display=Practitioner Organization Unit"`
	AFF []AFF   `hl7:"12,display=Professional Affiliation"`
	LAN []LAN   `hl7:"13,display=Language Detail"`
	EDU []EDU   `hl7:"14,display=Educational Detail"`
	CER []CER   `hl7:"15,display=Certificate Detail"`
}

// Personnel Information by Segment Response
//
// The purpose of this query/response pair is to retrieve all available personnel information based upon the values of one
// or more commonly used search parameter.
type RSP_K25 struct {
	HL7   HL7Name         `hl7:",name=RSP_K25,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	SFT   []SFT           `hl7:"2,display=Software Segment"`
	UAC   *UAC            `hl7:"3,display=User Authentication Credential"`
	MSA   *MSA            `hl7:"4,required,display=Message Acknowledgment"`
	ERR   []ERR           `hl7:"5,display=Error"`
	QAK   *QAK            `hl7:"6,required,display=Query Acknowledgment"`
	QPD   *QPD            `hl7:"7,required,display=Query Parameter Definition"`
	RCP   *RCP            `hl7:"8,required,display=Response Control Parameter"`
	Staff []RSP_K25_Staff `hl7:",required,display=Staff"`
	DSC   *DSC            `hl7:"16,display=Continuation Pointer"`
}

// Response
type RSP_K31_Response struct {
	HL7     HL7Name          `hl7:",name=RSP_K31_Response,type=tg"`
	Patient *RSP_K31_Patient `hl7:",display=Patient"`
	Order   []RSP_K31_Order  `hl7:",required,display=Order"`
}

// Patient
type RSP_K31_Patient struct {
	HL7          HL7Name               `hl7:",name=RSP_K31_Patient,type=tg"`
	PID          *PID                  `hl7:"9,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"10,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"11,display=Notes and Comments"`
	AL1          []AL1                 `hl7:"12,display=Patient Allergy Information"`
	PatientVisit *RSP_K31_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type RSP_K31_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RSP_K31_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
}

// Order
type RSP_K31_Order struct {
	HL7         HL7Name               `hl7:",name=RSP_K31_Order,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []RSP_K31_Timing      `hl7:",display=Timing"`
	OrderDetail *RSP_K31_OrderDetail  `hl7:",display=Order Detail"`
	Encoding    *RSP_K31_Encoding     `hl7:",display=Encoding"`
	RXD         *RXD                  `hl7:"28,required,display=Pharmacy/Treatment Dispense"`
	RXR         []RXR                 `hl7:"29,required,display=Pharmacy/Treatment Route"`
	RXC         []RXC                 `hl7:"30,display=Pharmacy/Treatment Component Order"`
	Observation []RSP_K31_Observation `hl7:",required,display=Observation"`
}

// Timing
type RSP_K31_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RSP_K31_OrderDetail struct {
	HL7        HL7Name              `hl7:",name=RSP_K31_OrderDetail,type=tg"`
	RXO        *RXO                 `hl7:"18,required,display=Pharmacy/Treatment Order"`
	NTE        []NTE                `hl7:"19,display=Notes and Comments"`
	RXR        []RXR                `hl7:"20,required,display=Pharmacy/Treatment Route"`
	Components []RSP_K31_Components `hl7:",display=Components"`
}

// Components
type RSP_K31_Components struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Components,type=tg"`
	RXC *RXC    `hl7:"21,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Encoding
type RSP_K31_Encoding struct {
	HL7           HL7Name                 `hl7:",name=RSP_K31_Encoding,type=tg"`
	RXE           *RXE                    `hl7:"23,required,display=Pharmacy/Treatment Encoded Order"`
	TimingEncoded []RSP_K31_TimingEncoded `hl7:",required,display=Timing Encoded"`
	RXR           []RXR                   `hl7:"26,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"27,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RSP_K31_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RSP_K31_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// Observation
type RSP_K31_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_K31_Observation,type=tg"`
	OBX *OBX    `hl7:"31,display=Observation/Result"`
	NTE []NTE   `hl7:"32,display=Notes and Comments"`
}

// Pharmacy Response - Dispense History
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type RSP_K31 struct {
	HL7      HL7Name            `hl7:",name=RSP_K31,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR              `hl7:"3,display=Error"`
	SFT      []SFT              `hl7:"4,display=Software Segment"`
	UAC      *UAC               `hl7:"5,display=User Authentication Credential"`
	QAK      *QAK               `hl7:"6,required,display=Query Acknowledgment"`
	QPD      *QPD               `hl7:"7,required,display=Query Parameter Definition"`
	RCP      *RCP               `hl7:"8,required,display=Response Control Parameter"`
	Response []RSP_K31_Response `hl7:",required,display=Response"`
	DSC      *DSC               `hl7:"33,display=Continuation Pointer"`
}

// QueryResponse
type RSP_Z82_QueryResponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z82_QueryResponse,type=tg"`
	Patient     *RSP_Z82_Patient      `hl7:",display=Patient"`
	CommonOrder []RSP_Z82_CommonOrder `hl7:",required,display=Common Order"`
}

// Patient
type RSP_Z82_Patient struct {
	HL7   HL7Name        `hl7:",name=RSP_Z82_Patient,type=tg"`
	PID   *PID           `hl7:"9,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"10,display=Patient Additional Demographic"`
	NTE   []NTE          `hl7:"11,display=Notes and Comments"`
	Visit *RSP_Z82_Visit `hl7:",display=Visit"`
}

// Visit
type RSP_Z82_Visit struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Visit,type=tg"`
	AL1 []AL1   `hl7:"12,required,display=Patient Allergy Information"`
	PV1 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
}

// CommonOrder
type RSP_Z82_CommonOrder struct {
	HL7          HL7Name               `hl7:",name=RSP_Z82_CommonOrder,type=tg"`
	ORC          *ORC                  `hl7:"15,required,display=Common Order"`
	Timing       []RSP_Z82_Timing      `hl7:",display=Timing"`
	OrderDetail  *RSP_Z82_OrderDetail  `hl7:",display=Order Detail"`
	EncodedOrder *RSP_Z82_EncodedOrder `hl7:",display=Encoded Order"`
	RXD          *RXD                  `hl7:"28,required,display=Pharmacy/Treatment Dispense"`
	RXR          []RXR                 `hl7:"29,required,display=Pharmacy/Treatment Route"`
	RXC          []RXC                 `hl7:"30,display=Pharmacy/Treatment Component Order"`
	Observation  []RSP_Z82_Observation `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z82_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RSP_Z82_OrderDetail struct {
	HL7       HL7Name            `hl7:",name=RSP_Z82_OrderDetail,type=tg"`
	RXO       *RXO               `hl7:"18,required,display=Pharmacy/Treatment Order"`
	NTE       []NTE              `hl7:"19,display=Notes and Comments"`
	RXR       []RXR              `hl7:"20,required,display=Pharmacy/Treatment Route"`
	Treatment *RSP_Z82_Treatment `hl7:",display=Treatment"`
}

// Treatment
type RSP_Z82_Treatment struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Treatment,type=tg"`
	RXC []RXC   `hl7:"21,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// EncodedOrder
type RSP_Z82_EncodedOrder struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z82_EncodedOrder,type=tg"`
	RXE           *RXE                    `hl7:"23,required,display=Pharmacy/Treatment Encoded Order"`
	TimingEncoded []RSP_Z82_TimingEncoded `hl7:",display=Timing Encoded"`
	RXR           []RXR                   `hl7:"26,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"27,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RSP_Z82_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// Observation
type RSP_Z82_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z82_Observation,type=tg"`
	OBX *OBX    `hl7:"31,display=Observation/Result"`
	NTE []NTE   `hl7:"32,display=Notes and Comments"`
}

// Dispense History Response
//
// The purpose of this query/response is to retrieve patient pharmacy dispense history information from the Server.
type RSP_Z82 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z82,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	RCP           *RCP                    `hl7:"8,required,display=Response Control Parameter"`
	QueryResponse []RSP_Z82_QueryResponse `hl7:",required,display=Query Response"`
	DSC           *DSC                    `hl7:"33,display=Continuation Pointer"`
}

// RowDefinition
type RSP_Z84_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RSP_Z84_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Who Am I Response
//
// The purpose of this query/response pair is to find the identity of the patient for specified medical record number(s).
type RSP_Z84 struct {
	HL7           HL7Name                `hl7:",name=RSP_Z84,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	RowDefinition *RSP_Z84_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// QueryResponse
type RSP_Z86_QueryResponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z86_QueryResponse,type=tg"`
	Patient     *RSP_Z86_Patient      `hl7:",display=Patient"`
	CommonOrder []RSP_Z86_CommonOrder `hl7:",required,display=Common Order"`
}

// Patient
type RSP_Z86_Patient struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"9,display=Patient Additional Demographic"`
	NTE []NTE   `hl7:"10,display=Notes and Comments"`
	AL1 []AL1   `hl7:"11,display=Patient Allergy Information"`
}

// CommonOrder
type RSP_Z86_CommonOrder struct {
	HL7            HL7Name                 `hl7:",name=RSP_Z86_CommonOrder,type=tg"`
	ORC            *ORC                    `hl7:"12,required,display=Common Order"`
	Timing         []RSP_Z86_Timing        `hl7:",display=Timing"`
	OrderDetail    *RSP_Z86_OrderDetail    `hl7:",display=Order Detail"`
	EncodedOrder   *RSP_Z86_EncodedOrder   `hl7:",display=Encoded Order"`
	Dispense       *RSP_Z86_Dispense       `hl7:",display=Dispense"`
	Give           *RSP_Z86_Give           `hl7:",display=Give"`
	Administration *RSP_Z86_Administration `hl7:",display=Administration"`
	Observation    []RSP_Z86_Observation   `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z86_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"13,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"14,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RSP_Z86_OrderDetail struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_OrderDetail,type=tg"`
	RXO *RXO    `hl7:"15,required,display=Pharmacy/Treatment Order"`
	RXR []RXR   `hl7:"16,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"17,display=Pharmacy/Treatment Component Order"`
}

// EncodedOrder
type RSP_Z86_EncodedOrder struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z86_EncodedOrder,type=tg"`
	RXE           *RXE                    `hl7:"18,required,display=Pharmacy/Treatment Encoded Order"`
	TimingEncoded []RSP_Z86_TimingEncoded `hl7:",display=Timing Encoded"`
	RXR           []RXR                   `hl7:"21,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"22,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RSP_Z86_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"19,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"20,display=Timing/Quantity Relationship"`
}

// Dispense
type RSP_Z86_Dispense struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Dispense,type=tg"`
	RXD *RXD    `hl7:"23,required,display=Pharmacy/Treatment Dispense"`
	RXR []RXR   `hl7:"24,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"25,display=Pharmacy/Treatment Component Order"`
}

// Give
type RSP_Z86_Give struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Give,type=tg"`
	RXG *RXG    `hl7:"26,required,display=Pharmacy/Treatment Give"`
	RXR []RXR   `hl7:"27,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"28,display=Pharmacy/Treatment Component Order"`
}

// Administration
type RSP_Z86_Administration struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Administration,type=tg"`
	RXA *RXA    `hl7:"29,required,display=Pharmacy/Treatment Administration"`
	RXR []RXR   `hl7:"30,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"31,display=Pharmacy/Treatment Component Order"`
}

// Observation
type RSP_Z86_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z86_Observation,type=tg"`
	OBX *OBX    `hl7:"32,display=Observation/Result"`
	NTE []NTE   `hl7:"33,display=Notes and Comments"`
}

// Pharmacy Information Comprehensive Response
//
// The purpose of this query/response is to retrieve patient pharmacy history information from the Server.
type RSP_Z86 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z86,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	QueryResponse []RSP_Z86_QueryResponse `hl7:",required,display=Query Response"`
	DSC           *DSC                    `hl7:"34,display=Continuation Pointer"`
}

// QueryResponse
type RSP_Z88_QueryResponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z88_QueryResponse,type=tg"`
	Patient     *RSP_Z88_Patient      `hl7:",display=Patient"`
	CommonOrder []RSP_Z88_CommonOrder `hl7:",required,display=Common Order"`
}

// Patient
type RSP_Z88_Patient struct {
	HL7     HL7Name          `hl7:",name=RSP_Z88_Patient,type=tg"`
	PID     *PID             `hl7:"9,required,display=Patient Identification"`
	PD1     *PD1             `hl7:"10,display=Patient Additional Demographic"`
	NTE     []NTE            `hl7:"11,display=Notes and Comments"`
	Allergy *RSP_Z88_Allergy `hl7:",display=Allergy"`
}

// Allergy
type RSP_Z88_Allergy struct {
	HL7   HL7Name        `hl7:",name=RSP_Z88_Allergy,type=tg"`
	AL1   []AL1          `hl7:"12,required,display=Patient Allergy Information"`
	Visit *RSP_Z88_Visit `hl7:",display=Visit"`
}

// Visit
type RSP_Z88_Visit struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Visit,type=tg"`
	PV1 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
}

// CommonOrder
type RSP_Z88_CommonOrder struct {
	HL7          HL7Name               `hl7:",name=RSP_Z88_CommonOrder,type=tg"`
	ORC          *ORC                  `hl7:"15,required,display=Common Order"`
	Timing       []RSP_Z88_Timing      `hl7:",display=Timing"`
	OrderDetail  *RSP_Z88_OrderDetail  `hl7:",display=Order Detail"`
	OrderEncoded *RSP_Z88_OrderEncoded `hl7:",display=Order Encoded"`
	RXD          *RXD                  `hl7:"28,required,display=Pharmacy/Treatment Dispense"`
	RXR          []RXR                 `hl7:"29,required,display=Pharmacy/Treatment Route"`
	RXC          []RXC                 `hl7:"30,display=Pharmacy/Treatment Component Order"`
	Observation  []RSP_Z88_Observation `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z88_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// OrderDetail
type RSP_Z88_OrderDetail struct {
	HL7       HL7Name            `hl7:",name=RSP_Z88_OrderDetail,type=tg"`
	RXO       *RXO               `hl7:"18,required,display=Pharmacy/Treatment Order"`
	NTE       []NTE              `hl7:"19,display=Notes and Comments"`
	RXR       []RXR              `hl7:"20,required,display=Pharmacy/Treatment Route"`
	Component *RSP_Z88_Component `hl7:",display=Component"`
}

// Component
type RSP_Z88_Component struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Component,type=tg"`
	RXC []RXC   `hl7:"21,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// OrderEncoded
type RSP_Z88_OrderEncoded struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z88_OrderEncoded,type=tg"`
	RXE           *RXE                    `hl7:"23,required,display=Pharmacy/Treatment Encoded Order"`
	TimingEncoded []RSP_Z88_TimingEncoded `hl7:",display=Timing Encoded"`
	RXR           []RXR                   `hl7:"26,required,display=Pharmacy/Treatment Route"`
	RXC           []RXC                   `hl7:"27,display=Pharmacy/Treatment Component Order"`
}

// TimingEncoded
type RSP_Z88_TimingEncoded struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_TimingEncoded,type=tg"`
	TQ1 *TQ1    `hl7:"24,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"25,display=Timing/Quantity Relationship"`
}

// Observation
type RSP_Z88_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z88_Observation,type=tg"`
	OBX *OBX    `hl7:"31,display=Observation/Result"`
	NTE []NTE   `hl7:"32,display=Notes and Comments"`
}

// Dispense Information Response
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type RSP_Z88 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z88,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	RCP           *RCP                    `hl7:"8,required,display=Response Control Parameter"`
	QueryResponse []RSP_Z88_QueryResponse `hl7:",required,display=Query Response"`
	DSC           *DSC                    `hl7:"33,required,display=Continuation Pointer"`
}

// QueryResponse
type RSP_Z90_QueryResponse struct {
	HL7         HL7Name               `hl7:",name=RSP_Z90_QueryResponse,type=tg"`
	Patient     *RSP_Z90_Patient      `hl7:",display=Patient"`
	CommonOrder []RSP_Z90_CommonOrder `hl7:",required,display=Common Order"`
	Specimen    []RSP_Z90_Specimen    `hl7:",display=Specimen"`
}

// Patient
type RSP_Z90_Patient struct {
	HL7   HL7Name        `hl7:",name=RSP_Z90_Patient,type=tg"`
	PID   *PID           `hl7:"9,required,display=Patient Identification"`
	PD1   *PD1           `hl7:"10,display=Patient Additional Demographic"`
	NK1   []NK1          `hl7:"11,display=Next of Kin / Associated Parties"`
	NTE   []NTE          `hl7:"12,display=Notes and Comments"`
	Visit *RSP_Z90_Visit `hl7:",display=Visit"`
}

// Visit
type RSP_Z90_Visit struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Visit,type=tg"`
	PV1 *PV1    `hl7:"13,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"14,display=Patient Visit - Additional Information"`
}

// CommonOrder
type RSP_Z90_CommonOrder struct {
	HL7         HL7Name               `hl7:",name=RSP_Z90_CommonOrder,type=tg"`
	ORC         *ORC                  `hl7:"15,required,display=Common Order"`
	Timing      []RSP_Z90_Timing      `hl7:",display=Timing"`
	OBR         *OBR                  `hl7:"18,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"19,display=Notes and Comments"`
	CTD         *CTD                  `hl7:"20,display=Contact Data"`
	Observation []RSP_Z90_Observation `hl7:",required,display=Observation"`
}

// Timing
type RSP_Z90_Timing struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"16,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"17,display=Timing/Quantity Relationship"`
}

// Observation
type RSP_Z90_Observation struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Observation,type=tg"`
	OBX *OBX    `hl7:"21,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Specimen
type RSP_Z90_Specimen struct {
	HL7 HL7Name `hl7:",name=RSP_Z90_Specimen,type=tg"`
	SPM *SPM    `hl7:"23,required,display=Specimen"`
	OBX []OBX   `hl7:"24,display=Observation/Result"`
}

// Lab Results History Response
//
// The purpose of this query/response pair is to retrieve patient laboratory results information from the Server.
type RSP_Z90 struct {
	HL7           HL7Name                 `hl7:",name=RSP_Z90,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	SFT           []SFT                   `hl7:"2,display=Software Segment"`
	UAC           *UAC                    `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                    `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"5,display=Error"`
	QAK           *QAK                    `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"7,required,display=Query Parameter Definition"`
	RCP           *RCP                    `hl7:"8,required,display=Response Control Parameter"`
	QueryResponse []RSP_Z90_QueryResponse `hl7:",required,display=Query Response"`
	DSC           *DSC                    `hl7:"25,required,display=Continuation Pointer"`
}

// RowDefinition
type RTB_K13_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_K13_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular Response in Response to QBP_Q13
//
// The RTB_K13 supports a Tabular Response to the QBP and contains the MSH, MSA, ERR, QAK, QPD, RDF, RDT and the DSC.  Its default
// trigger event is K13.  A standard or site-defined response may use this trigger event or may specify a unique trigger event
// value in its Query Profile.  If a unique trigger event value is chosen for a site-defined response, that value must begin
// with Z.
//
// The RTB_K13 structure requires that, if any RDT segments are returned, they be preceded by an RDF segment containing the
// row definition specification for the RDT segments.  If no RDF was sent in the query, the default RDF is returned in the RTB_K13.
//
type RTB_K13 struct {
	HL7           HL7Name                `hl7:",name=RTB_K13,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	RowDefinition *RTB_K13_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// RowDefinition
type RTB_Z74_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z74_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular response - Information about Phone Calls
//
// Returns response sorted by Phone Number
type RTB_Z74 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z74,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	ERR           []ERR                  `hl7:"3,display=Error"`
	SFT           []SFT                  `hl7:"4,display=Software Segment"`
	UAC           *UAC                   `hl7:"5,display=User Authentication Credential"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	RowDefinition *RTB_Z74_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// RowDefinition
type RTB_Z76_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z76_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular response - Tabular Patient List
//
// The purpose of this message/response is to find patient records that closely (as specified by the Client) match a set of
// input criteria using a specified algorithm.
//
// Response returns requested columns from the Virtual Table.  If no columns were requested, all columns are returned.
type RTB_Z76 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z76,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	RowDefinition *RTB_Z76_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// RowDefinition
type RTB_Z92_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z92_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Who Am I Response
//
// The purpose of this query/response pair is to find the identity of the patient for specified medical record number(s)
type RTB_Z92 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z92,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	RowDefinition *RTB_Z92_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// RowDefinition
type RTB_Z94_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z94_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular Dispense History Response
//
// The purpose of this query/response pair is to find medications dispensed between specified date range for specified medical
// record numbers.
type RTB_Z94 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z94,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	RowDefinition *RTB_Z94_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// RowDefinition
type RTB_Z96_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Z96_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"8,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"9,display=Table Row Data"`
}

// Tabular Dispense History Response
//
// The purpose of this query/response pair is to retrieve patient pharmacy dispense history information from the Server.
type RTB_Z96 struct {
	HL7           HL7Name                `hl7:",name=RTB_Z96,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	SFT           []SFT                  `hl7:"2,display=Software Segment"`
	UAC           *UAC                   `hl7:"3,display=User Authentication Credential"`
	MSA           *MSA                   `hl7:"4,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"5,display=Error"`
	QAK           *QAK                   `hl7:"6,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"7,required,display=Query Parameter Definition"`
	RowDefinition *RTB_Z96_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"10,display=Continuation Pointer"`
}

// AntiMicrobialDeviceCycleData
type SCN_S37_AntiMicrobialDeviceCycleData struct {
	HL7 HL7Name `hl7:",name=SCN_S37_AntiMicrobialDeviceCycleData,type=tg"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
	SCD []SCD   `hl7:"5,display=Anti-Microbial Cycle Data"`
}

// Notification of Anti-Microbial Device Cycle Data
//
// This message is sent from a filler application to notify other applications that anti-microbial device cycle data has
// been generated.  The information in the SCN segment and the other detail segments as appropriate describe details of a sterilization
// or decontamination cycle.
type SCN_S37 struct {
	HL7                          HL7Name                                `hl7:",name=SCN_S37,type=t"`
	MSH                          *MSH                                   `hl7:"1,required,display=Message Header"`
	SFT                          []SFT                                  `hl7:"2,display=Software Segment"`
	UAC                          *UAC                                   `hl7:"3,display=User Authentication Credential"`
	AntiMicrobialDeviceCycleData []SCN_S37_AntiMicrobialDeviceCycleData `hl7:",required,display=Anti Microbial Device Cycle Data"`
}

// AntiMicrobialDeviceData
type SDN_S36_AntiMicrobialDeviceData struct {
	HL7 HL7Name `hl7:",name=SDN_S36_AntiMicrobialDeviceData,type=tg"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
	SCD []SCD   `hl7:"5,display=Anti-Microbial Cycle Data"`
}

// Notification of Anti-Microbial Device Data
//
// This message is sent from a filler application to notify other applications that anti-microbial device data has been generated.
// The information in the SDN segment and the other detail segments as appropriate describe the detail of a device during a
// sterilization or decontamination cycle.
type SDN_S36 struct {
	HL7                     HL7Name                           `hl7:",name=SDN_S36,type=t"`
	MSH                     *MSH                              `hl7:"1,required,display=Message Header"`
	SFT                     []SFT                             `hl7:"2,display=Software Segment"`
	UAC                     *UAC                              `hl7:"3,display=User Authentication Credential"`
	AntiMicrobialDeviceData []SDN_S36_AntiMicrobialDeviceData `hl7:",required,display=Anti Microbial Device Data"`
}

// AntiMicrobialDeviceData
type SDR_S31_AntiMicrobialDeviceData struct {
	HL7 HL7Name `hl7:",name=SDR_S31_AntiMicrobialDeviceData,type=tg"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
	SCD []SCD   `hl7:"5,display=Anti-Microbial Cycle Data"`
}

// Request Sterilization Anti-Microbial Device Data
//
// This trigger event is sent by the placer application to the filler application to request anti-microbial device data created
// during the decontamination/sterilization of medical supplies.  In the context of this message segment, the term 'device'
// refers to a sterilizer or a washer.  Sterilizers perform a sterilization process and washers perform a decontamination
// process.
type SDR_S31 struct {
	HL7                     HL7Name                           `hl7:",name=SDR_S31,type=t"`
	MSH                     *MSH                              `hl7:"1,required,display=Message Header"`
	SFT                     []SFT                             `hl7:"2,display=Software Segment"`
	UAC                     *UAC                              `hl7:"3,display=User Authentication Credential"`
	AntiMicrobialDeviceData []SDR_S31_AntiMicrobialDeviceData `hl7:",required,display=Anti Microbial Device Data"`
}

// Patient
type SIU_S12_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S12_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S12_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S12_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S12_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S12_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S12_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S12_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S12_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S12_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S12_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of New Appointment Booking
//
// This message is sent from a filler application to notify other applications that a new appointment has been booked.  The
// information provided in the SCH segment and the other detail segments as appropriate describe the appointment that has
// been booked by the filler application.
type SIU_S12 struct {
	HL7       HL7Name             `hl7:",name=SIU_S12,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S12_Patient   `hl7:",display=Patient"`
	Resources []SIU_S12_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S13_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S13_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S13_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S13_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S13_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S13_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S13_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S13_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S13_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S13_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S13_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Appointment Rescheduling
//
// This message is sent from a filler application to notify other applications that an existing appointment has been rescheduled.
// The information in the SCH segment and the other detail segments as appropriate describe the new date(s) and time(s) to
// which the previously booked appointment has been moved.  Additionally, it describes the unchanged information in the
// previously booked appointment.
//
// This transaction should not be used to reschedule an appointment that has begun but has not been completed.  In such cases,
// and only if it logical to do so, the appointment should be discontinued and a new schedule request should be submitted.  Likewise,
// this transaction should not be used to reschedule a parent appointment, in which one or more children have begun or have
// already taken place.  Again, the parent appointment should be discontinued, and a new schedule request should be made.
// This procedure removes any ambiguity between applications that may arise with an attempt to modify an appointment that
// is in progress.
type SIU_S13 struct {
	HL7       HL7Name             `hl7:",name=SIU_S13,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S13_Patient   `hl7:",display=Patient"`
	Resources []SIU_S13_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S14_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S14_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S14_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S14_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S14_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S14_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S14_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S14_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S14_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S14_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S14_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Appointment Modification
//
// This message notifies other applications that an existing appointment has been modified on the filler application.  This
// trigger event should only be used for appointments that have not been completed, or for parent appointments whose children
// have not been completed.
type SIU_S14 struct {
	HL7       HL7Name             `hl7:",name=SIU_S14,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S14_Patient   `hl7:",display=Patient"`
	Resources []SIU_S14_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S15_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S15_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S15_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S15_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S15_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S15_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S15_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S15_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S15_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S15_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S15_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Appointment Cancellation
//
// A notification of appointment cancellation is sent by the filler application to other applications when an existing appointment
// has been canceled.  A cancel event is used to stop a valid appointment from taking place.  For example, if a patient scheduled
// for an exam cancels his/her appointment, then the appointment is canceled on the filler application.
//
// This trigger event can be used to cancel a parent appointment, in which none of the children of the appointment have either
// begun or been completed.  Any child appointments that exist on the filler and placer applications should be considered
// canceled.  If one or more child appointments have begun or have been completed, then this trigger event should not be used.
// Instead, the S16 (notification of appointment discontinuation) event should be used.
type SIU_S15 struct {
	HL7       HL7Name             `hl7:",name=SIU_S15,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S15_Patient   `hl7:",display=Patient"`
	Resources []SIU_S15_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S16_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S16_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S16_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S16_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S16_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S16_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S16_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S16_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S16_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S16_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S16_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Appointment Discontinuation
//
// A notification of appointment discontinuation is sent by the filler application to notify other applications that an
// appointment in progress has been stopped, or that the remaining occurrences of a parent appointment will not occur.  If
// none of the child appointments of a parent appointment have taken place, then a cancel trigger event should be sent instead.
type SIU_S16 struct {
	HL7       HL7Name             `hl7:",name=SIU_S16,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S16_Patient   `hl7:",display=Patient"`
	Resources []SIU_S16_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S17_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S17_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S17_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S17_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S17_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S17_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S17_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S17_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S17_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S17_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S17_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Appointment Deletion
//
// A notification of appointment deletion is sent by the filler application to other applications when an appointment that
// had been entered in error has been removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously scheduled.  It must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or that has already been completed.  Likewise, it should not be used for any parent appointment if any child appointments
// have either begun or been completed.
//
// The delete trigger event should be implemented with careful forethought, as it typically has different effects and repercussions
// in various applications.  In some applications, a delete event cannot be undone.  This means that if a delete transaction
// was sent erroneously, recovery will be difficult or impossible.  In other applications, a delete transaction will not
// result in the physical deletion of the record(s), but will set a status or a flag.  In these cases, the filler and/or placer
// appointment identifiers (the numbers or codes that uniquely identify the scheduled appointment or request to the placer
// and filler applications) probably cannot be reused.  Since these applications maintain a record of deleted appointments,
// the reuse of an identifier will likely cause a conflict in the applications' processing of transactions.
type SIU_S17 struct {
	HL7       HL7Name             `hl7:",name=SIU_S17,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S17_Patient   `hl7:",display=Patient"`
	Resources []SIU_S17_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S18_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S18_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S18_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S18_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S18_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S18_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S18_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S18_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S18_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S18_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S18_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Addition of Service/Resource on Appointment
//
// The notification of addition of service/resource is triggered on the filler application when a new service or resource
// has been added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments
// on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been
// completed, or for parent appointments whose children have not been completed.
type SIU_S18 struct {
	HL7       HL7Name             `hl7:",name=SIU_S18,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S18_Patient   `hl7:",display=Patient"`
	Resources []SIU_S18_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S19_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S19_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S19_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S19_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S19_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S19_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S19_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S19_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S19_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S19_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S19_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Modification of Service/Resource on Appointment
//
// The notification of modification of service/resource is triggered on the filler application when the information pertaining
// to an existing service or resource has been changed for an existing appointment.  Services and resources are represented
// by the AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used
// for appointments that have not been completed, or for parent appointments whose children have not been completed.
//
// This trigger event should not be used when an existing resource or service has been replaced in relation to an existing appointment.
// Instead, use two other trigger events: S20 (notification of cancellation of service/ resource on appointment), as well
// as S18 (notification of addition of service/resource on appointment).
type SIU_S19 struct {
	HL7       HL7Name             `hl7:",name=SIU_S19,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S19_Patient   `hl7:",display=Patient"`
	Resources []SIU_S19_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S20_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S20_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S20_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S20_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S20_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S20_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S20_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S20_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S20_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S20_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S20_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Cancellation of Service/Resource on Appointment
//
// This trigger event notifies other applications that a service or resource has been removed from an existing scheduled
// appointment that has not yet begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.
// For example, if a portable X-ray machine scheduled for an exam is no longer needed, then the resource is canceled on the filler
// application.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.
type SIU_S20 struct {
	HL7       HL7Name             `hl7:",name=SIU_S20,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S20_Patient   `hl7:",display=Patient"`
	Resources []SIU_S20_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S21_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S21_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S21_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S21_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S21_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S21_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S21_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S21_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S21_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S21_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S21_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Discontinuation of Service/Resource on Appointment
//
// A notification of discontinuation of service/resource is sent by the filler application to other applications when the
// remaining children of a parent appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to discontinue the performance of a service or resource in a parent appointment that has already begun.  If
// the first appointment in a set of recurring appointments has not yet taken place, then a cancel trigger event should be sent
// instead.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.
type SIU_S21 struct {
	HL7       HL7Name             `hl7:",name=SIU_S21,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S21_Patient   `hl7:",display=Patient"`
	Resources []SIU_S21_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S22_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S22_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S22_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S22_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S22_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S22_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S22_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S22_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S22_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S22_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S22_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Deletion of Service/Resource on Appointment
//
// A notification of deletion of service/resource is sent by the filler application to other applications when a scheduled
// appointment requiring a service or resource entered in error has been removed from the system.  A delete trigger event should
// only be used in those circumstances when a service or resource has been erroneously attached to an appointment, and must
// be removed from the schedule so that it does not affect any statistical processing.  A delete trigger event differs from
// a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts to prevent a valid request from taking
// place.
type SIU_S22 struct {
	HL7       HL7Name             `hl7:",name=SIU_S22,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S22_Patient   `hl7:",display=Patient"`
	Resources []SIU_S22_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S23_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S23_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S23_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S23_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S23_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S23_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S23_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S23_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S23_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S23_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S23_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Blocked Schedule Time Slot(s)
//
// A notification of blocked schedule time slots is sent by the filler application to other applications when a schedule has
// had one or more time slots blocked and made unavailable for reasons other than the scheduling of an appointment.  For example,
// if an exam room is unavailable for several hours because of maintenance needs or contamination, a user may block off those
// several hours on the exam room's schedule.  Similarly, if a physician is unavailable because he or she has taken vacation
// time, his or her schedule may be blocked off for the duration of the vacation.  When these types of conditions exist, the filler
// application may use this transaction to notify other applications that the resources controlled by schedules are unavailable.
type SIU_S23 struct {
	HL7       HL7Name             `hl7:",name=SIU_S23,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S23_Patient   `hl7:",display=Patient"`
	Resources []SIU_S23_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S24_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S24_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S24_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S24_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S24_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S24_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S24_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S24_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S24_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S24_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S24_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification of Opened (Un-Blocked) Schedule Time Slot(s)
//
// A notification of blocked schedule time slots is sent by the filler application to other applications when a schedule has
// one or more time slots open up ("un-blocked") and become available for use.  Typically, the blocked period of time on a schedule
// is simply allowed to expire, because the blocked amount of time is generally used for non-appointment activities. This
// transaction can be used either to discontinue the blocked status on the schedule, or to reverse a previous block made in
// error.  For the purposes of this transaction, discontinuing a block currently in progress (the blocked period has started,
// but not yet completed) and canceling a blocked period in the future are not significantly different.  Therefore, a separate
// discontinue block transaction is not necessary.  If this transaction is received prior to the inception of a blocked period,
// then the entire block period is simply canceled according to the data provided in the transaction.  If the transaction is
// received after the blocked period has begun, but prior to the end of the blocked period, then the blocked period is discontinued
// according to the data provided in the transactions.  Applications may decide how to handle transactions that attempt to
// open a blocked period that has both started and ended in the past; however, these transactions can generally be ignored.
type SIU_S24 struct {
	HL7       HL7Name             `hl7:",name=SIU_S24,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S24_Patient   `hl7:",display=Patient"`
	Resources []SIU_S24_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S26_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PD1 *PD1    `hl7:"6,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"7,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"9,display=Observation/Result"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SIU_S26_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S26_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SIU_S26_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S26_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S26_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S26_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S26_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SIU_S26_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SIU_S26_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S26_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Notification That Patient Did Not Show Up for Scheduled Appointment
//
// A notification that a patient did not show up for an appointment.  For example, if a patient was scheduled for a clinic visit,
// and never arrived for that appointment, this trigger event can be used to set a status on the appointment record for statistical
// purposes, as well as to free resources assigned to the appointment (or any other application level actions that must be
// taken in the event a patient does not appear for an appointment).
//
// Patient Administration events can be used to indicate that a patient has arrived for an appointment, e.g., A01 (admit/visit
// notification), A04 (register a patient), A05 (pre-admit a patient), or A10 (patient arriving - tracking) as possible
// examples.  Similarly, Patient Administration transactions can be used to identify the end of an appointment, e.g., A03
// (discharge/end visit) or A09 (patient departing - tracking) as possible examples.
type SIU_S26 struct {
	HL7       HL7Name             `hl7:",name=SIU_S26,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"3,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SIU_S26_Patient   `hl7:",display=Patient"`
	Resources []SIU_S26_Resources `hl7:",required,display=Resources"`
}

// Notification of New Sterilization Lot
//
// This message is sent from a filler application to notify other applications that a new sterilization lot has been created.
// The information provided in the SLT segment describes the new sterilization lot that has been created by the filler application.
type SLN_S34 struct {
	HL7 HL7Name `hl7:",name=SLN_S34,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot Segment"`
}

// Notification of Sterilization Lot Deletion
//
// This message is sent from a filler application to notify other applications that a sterilization lot has been deleted.
// The information provided in the SLT segment describes the sterilization lot that has been deleted by the filler application.
type SLN_S35 struct {
	HL7 HL7Name `hl7:",name=SLN_S35,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot Segment"`
}

// Request New Sterilization Lot
//
// A placer application (Sterilizer) sends a transaction with this trigger event to a filler application (Instrument-tracking
// system) to request that a new sterilization lot be added.  If it is successful, the filler application returns an application
// acknowledgment (if requested under the enhanced acknowledgment mode, or if the original acknowledgment mode is in use).
//
type SLR_S28 struct {
	HL7 HL7Name `hl7:",name=SLR_S28,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot Segment"`
}

// Request Sterilization Lot Deletion
//
// A request sterilization lot deletion is sent by the placer application to the filler application to request that a lot that
// had been created in error be removed from the system.  A delete trigger event differs from a cancel trigger event in that a
// delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring.  If it is successful, an application
// acknowledgment is returned.
type SLR_S29 struct {
	HL7 HL7Name `hl7:",name=SLR_S29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot Segment"`
}

// AntiMicrobialDeviceCycleData
type SMD_S32_AntiMicrobialDeviceCycleData struct {
	HL7 HL7Name `hl7:",name=SMD_S32_AntiMicrobialDeviceCycleData,type=tg"`
	SDD *SDD    `hl7:"4,required,display=Sterilization Device Data"`
	SCD []SCD   `hl7:"5,display=Anti-Microbial Cycle Data"`
}

// Request Anti-Microbial Device Cycle Data
//
// This trigger event is sent by the placer application to the filler application to request anti-microbial device cycle
// data created during the decontamination/sterilization of medical supplies.  In the context of this message segment,
// the term 'device' refers to a sterilizer or a washer.  Sterilizers perform a sterilization process and washers perform
// a decontamination process.
type SMD_S32 struct {
	HL7                          HL7Name                                `hl7:",name=SMD_S32,type=t"`
	MSH                          *MSH                                   `hl7:"1,required,display=Message Header"`
	SFT                          []SFT                                  `hl7:"2,display=Software Segment"`
	UAC                          *UAC                                   `hl7:"3,display=User Authentication Credential"`
	AntiMicrobialDeviceCycleData []SMD_S32_AntiMicrobialDeviceCycleData `hl7:",required,display=Anti Microbial Device Cycle Data"`
}

// Stored Procedure Request
//
// This section is retained for backward compatibility as of V2.4.
//
// The Stored Procedure Query provides a mechanism for the querying system to invoke a stored procedure on the responding
// system. The request includes a stored procedure name and a list of parameters passed to it.
//
// The SPQ enables an application on one system to execute a stored procedure on another system, which is coded to extract specific
// data.
type SPQ_Q08 struct {
	HL7 HL7Name `hl7:",name=SPQ_Q08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	SPR *SPR    `hl7:"3,required,display=Stored Procedure Request Definition"`
	RDF *RDF    `hl7:"4,display=Table Row Definition"`
	DSC *DSC    `hl7:"5,display=Continuation Pointer"`
}

// Request
type SQM_S25_Request struct {
	HL7       HL7Name             `hl7:",name=SQM_S25_Request,type=tg"`
	ARQ       *ARQ                `hl7:"4,required,display=Appointment Request"`
	APR       *APR                `hl7:"5,display=Appointment Preferences"`
	PID       *PID                `hl7:"6,display=Patient Identification"`
	Resources []SQM_S25_Resources `hl7:",required,display=Resources"`
}

// Resources
type SQM_S25_Resources struct {
	HL7               HL7Name                     `hl7:",name=SQM_S25_Resources,type=tg"`
	RGS               *RGS                        `hl7:"7,required,display=Resource Group"`
	Service           []SQM_S25_Service           `hl7:",display=Service"`
	GeneralResource   []SQM_S25_GeneralResource   `hl7:",display=General Resource"`
	PersonnelResource []SQM_S25_PersonnelResource `hl7:",display=Personnel Resource"`
	LocationResource  []SQM_S25_LocationResource  `hl7:",display=Location Resource"`
}

// Service
type SQM_S25_Service struct {
	HL7 HL7Name `hl7:",name=SQM_S25_Service,type=tg"`
	AIS *AIS    `hl7:"8,required,display=Appointment Information"`
	APR *APR    `hl7:"9,display=Appointment Preferences"`
}

// GeneralResource
type SQM_S25_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SQM_S25_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"10,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"11,display=Appointment Preferences"`
}

// PersonnelResource
type SQM_S25_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SQM_S25_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"12,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"13,display=Appointment Preferences"`
}

// LocationResource
type SQM_S25_LocationResource struct {
	HL7 HL7Name `hl7:",name=SQM_S25_LocationResource,type=tg"`
	AIL *AIL    `hl7:"14,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
}

// Schedule Query
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// Original Mode record-oriented query transactions are initiated from the querying application using the Schedule Query
// (SQM) to request information about a filler application's schedule(s).  The filler application responds to these requests,
// using the Schedule Query Response (SQR) message to either return the requested information, or to signal that an interfacing
// error of some kind has occurred.
type SQM_S25 struct {
	HL7     HL7Name          `hl7:",name=SQM_S25,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	QRD     *QRD             `hl7:"2,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"3,display=Original style query filter"`
	Request *SQM_S25_Request `hl7:",display=Request"`
	DSC     *DSC             `hl7:"16,display=Continuation Pointer"`
}

// Schedule
type SQR_S25_Schedule struct {
	HL7       HL7Name             `hl7:",name=SQR_S25_Schedule,type=tg"`
	SCH       *SCH                `hl7:"5,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"6,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"7,display=Notes and Comments"`
	Patient   *SQR_S25_Patient    `hl7:",display=Patient"`
	Resources []SQR_S25_Resources `hl7:",required,display=Resources"`
}

// Patient
type SQR_S25_Patient struct {
	HL7 HL7Name `hl7:",name=SQR_S25_Patient,type=tg"`
	PID *PID    `hl7:"8,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"9,display=Patient Visit"`
	PV2 *PV2    `hl7:"10,display=Patient Visit - Additional Information"`
	DG1 *DG1    `hl7:"11,display=Diagnosis"`
}

// Resources
type SQR_S25_Resources struct {
	HL7               HL7Name                     `hl7:",name=SQR_S25_Resources,type=tg"`
	RGS               *RGS                        `hl7:"12,required,display=Resource Group"`
	Service           []SQR_S25_Service           `hl7:",display=Service"`
	GeneralResource   []SQR_S25_GeneralResource   `hl7:",display=General Resource"`
	PersonnelResource []SQR_S25_PersonnelResource `hl7:",display=Personnel Resource"`
	LocationResource  []SQR_S25_LocationResource  `hl7:",display=Location Resource"`
}

// Service
type SQR_S25_Service struct {
	HL7 HL7Name `hl7:",name=SQR_S25_Service,type=tg"`
	AIS *AIS    `hl7:"13,required,display=Appointment Information"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// GeneralResource
type SQR_S25_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SQR_S25_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"15,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SQR_S25_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SQR_S25_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// LocationResource
type SQR_S25_LocationResource struct {
	HL7 HL7Name `hl7:",name=SQR_S25_LocationResource,type=tg"`
	AIL *AIL    `hl7:"19,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Schedule Response
//
// Retained for backwards compatibility only in version 2.4 and later.
//
// Original Mode record-oriented query transactions are initiated from the querying application using the Schedule Query
// (SQM) to request information about a filler application's schedule(s).  The filler application responds to these requests,
// using the Schedule Query Response (SQR) message to either return the requested information, or to signal that an interfacing
// error of some kind has occurred.
type SQR_S25 struct {
	HL7      HL7Name            `hl7:",name=SQR_S25,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR              `hl7:"3,display=Error"`
	QAK      *QAK               `hl7:"4,required,display=Query Acknowledgment"`
	Schedule []SQR_S25_Schedule `hl7:",display=Schedule"`
	DSC      *DSC               `hl7:"21,display=Continuation Pointer"`
}

// Patient
type SRM_S01_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S01_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S01_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S01_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S01_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S01_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S01_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S01_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S01_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S01_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S01_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request new appointment booking
//
// A placer application sends a transaction with this trigger event to a filler application to request that a new appointment
// be booked.  If it is successful, the filler application returns an application acknowledgment (if requested under the
// enhanced acknowledgment mode, or if the original acknowledgment mode is in use).  The acknowledgment may optionally contain
// an SCH segment and related detail segments describing the actual appointment that was booked.
type SRM_S01 struct {
	HL7       HL7Name             `hl7:",name=SRM_S01,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S01_Patient   `hl7:",display=Patient"`
	Resources []SRM_S01_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S02_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S02_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S02_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S02_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S02_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S02_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S02_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S02_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S02_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S02_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S02_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Appointment Rescheduling
//
// A placer application uses this trigger event to request that an existing appointment be rescheduled.  The new Requested
// Start Date and Time, Appointment Duration, Repeating Interval, Repeating Interval Duration, and/or Priority are provided
// in the ARQ segment, along with the existing placer and filler identification numbers.  If it is successful, an application
// acknowledgment is returned, optionally containing an SCH segment and related detail segments describing the new information
// for the rescheduled appointment.
//
// This transaction should not be used to reschedule an appointment that has begun but has not been completed.  In such cases,
// and only if it is logical to do so, the appointment should be discontinued and a new schedule request should be submitted.
// Likewise, this transaction should not be used to reschedule a parent appointment, in which one or more children have begun
// or have already occurred.  Again, the parent appointment should be discontinued, and a new schedule request should be made.
// This procedure removes any ambiguity between applications that may arise with an attempt to modify an appointment that
// is in progress
type SRM_S02 struct {
	HL7       HL7Name             `hl7:",name=SRM_S02,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S02_Patient   `hl7:",display=Patient"`
	Resources []SRM_S02_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S03_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S03_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S03_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S03_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S03_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S03_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S03_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S03_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S03_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S03_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S03_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Appointment Modification
//
// This message transmits a request for modification of an existing appointment to a filler application.  This trigger event
// is used to request the modification of information on an existing appointment, outside of the need to reschedule, cancel,
// discontinue or delete the appointment, or to add, modify, cancel, discontinue, or delete services and/or resources on
// the appointment.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the new information for the modified appointment.
type SRM_S03 struct {
	HL7       HL7Name             `hl7:",name=SRM_S03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S03_Patient   `hl7:",display=Patient"`
	Resources []SRM_S03_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S04_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S04_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S04_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S04_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S04_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S04_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S04_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S04_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S04_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S04_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S04_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Appointment Cancellation
//
// The request appointment cancellation trigger event is sent by the placer application to the filler application to request
// that an existing appointment be canceled.  A cancel event is used to stop a valid appointment from occurring.  For example,
// if a patient scheduled for an exam cancels his/her appointment, then a request to cancel the appointment is sent.  If it is
// successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail segments
// describing the canceled appointment.
//
// This trigger event can be used to cancel a parent appointment, in which none of the children of the appointment have either
// begun or have been completed.  Any child appointments that exist on the filler and placer applications should be considered
// canceled.  If one or more child appointments have begun or have been completed, then this trigger event should not be used.
// Instead, the S05 (request appointment discontinuation) event should be used.
type SRM_S04 struct {
	HL7       HL7Name             `hl7:",name=SRM_S04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S04_Patient   `hl7:",display=Patient"`
	Resources []SRM_S04_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S05_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S05_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S05_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S05_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S05_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S05_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S05_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S05_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S05_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S05_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S05_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Appointment Discontinuation
//
// The request appointment discontinuation is sent by the placer application to the filler application to request that an
// appointment in progress be stopped, or that the remaining occurrences of a parent appointment not occur as scheduled.
// If none of the child appointments of a parent appointment have occurred, then a cancel trigger event should be sent instead.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the discontinued appointment.
type SRM_S05 struct {
	HL7       HL7Name             `hl7:",name=SRM_S05,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S05_Patient   `hl7:",display=Patient"`
	Resources []SRM_S05_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S06_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S06_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S06_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S06_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S06_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S06_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S06_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S06_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S06_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S06_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S06_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Appointment Deletion
//
// A request appointment deletion is sent by the placer application to the filler application to request that an appointment
// that had been entered in error be removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously requested, and must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or has already been completed.  Likewise, it should not be used on any parent appointment if any child appointments have
// either begun or been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the deleted appointment.
//
// The delete trigger event should be implemented with careful forethought, as it typically has different effects and repercussions
// in various applications.  In some applications, a delete event cannot be undone.  This means that if a delete transaction
// was sent erroneously, recovery will be difficult or impossible.  In other applications, a delete transaction will not
// result in the physical deletion of the record(s), but will set a status or a flag.  In these cases, the filler and/or placer
// appointment identifiers (the numbers or codes that uniquely identify the scheduled appointment or request to the placer
// and filler applications) probably cannot be reused.  Since these applications maintain a record of deleted appointments,
// the reuse of an identifier will likely cause a conflict in the applications' processing of transactions.
type SRM_S06 struct {
	HL7       HL7Name             `hl7:",name=SRM_S06,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S06_Patient   `hl7:",display=Patient"`
	Resources []SRM_S06_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S07_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S07_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S07_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S07_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S07_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S07_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S07_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S07_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S07_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S07_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S07_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Addition of Service/Resource on Appointment
//
// The request addition of service/resource is triggered by the placer application to request that a new service or resource
// be added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments on an
// HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S07 struct {
	HL7       HL7Name             `hl7:",name=SRM_S07,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S07_Patient   `hl7:",display=Patient"`
	Resources []SRM_S07_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S08_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S08_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S08_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S08_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S08_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S08_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S08_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S08_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S08_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S08_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S08_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Modification of Service/Resource on Appointment
//
// The request modification of service/resource is triggered on the placer application to request that information pertaining
// to an existing service or resource be changed for an existing appointment.  Services and resources are represented by the
// AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments
// that have not been completed, or for parent appointments whose children have not been completed.  If it is successful, an
// application acknowledgment is returned, optionally containing an SCH segment and related detail segments describing
// the modified appointment.
//
// This trigger event should not be used when an existing resource or service must be replaced or rescheduled for an existing
// appointment.  The following fields on the indicated segments should not be changed by this trigger event: the first three
// fields of the AIS, the first four fields of the AIG, the first four fields of the AIL, and the first four fields of the AIP.  Instead,
// use two trigger events to accomplish the replacement or rescheduling of a service or resource: S09 (request cancellation
// of service/resource on appointment), as well as S07 (request addition of service/resource on appointment).
type SRM_S08 struct {
	HL7       HL7Name             `hl7:",name=SRM_S08,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S08_Patient   `hl7:",display=Patient"`
	Resources []SRM_S08_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S09_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S09_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S09_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S09_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S09_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S09_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S09_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S09_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S09_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S09_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S09_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Cancellation of Service/Resource on Appointment
//
// This trigger event requests that a service or resource be removed from an existing scheduled appointment that has not yet
// begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.  For example, if
// a portable X-ray machine scheduled for an exam is no longer needed, then the placer application requests that the resource
// be canceled on the filler application.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S09 struct {
	HL7       HL7Name             `hl7:",name=SRM_S09,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S09_Patient   `hl7:",display=Patient"`
	Resources []SRM_S09_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S10_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S10_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S10_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S10_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S10_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S10_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S10_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S10_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S10_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S10_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S10_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Discontinuation of Service/Resource on Appointment
//
// A request discontinuation of service/resource is sent by the placer application to the filler application when the remaining
// occurrences of a recurring appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to request that the performance of a service or resource in a recurring appointment that has already begun
// be stopped.  If the first appointment in a set of recurring appointments has not yet occurred, then a cancel trigger event
// should be sent instead.  This trigger event should only be used on appointments that have not been completed, or on parent
// appointments whose children have not been completed.  If it is successful, an application acknowledgment is returned,
// optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S10 struct {
	HL7       HL7Name             `hl7:",name=SRM_S10,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S10_Patient   `hl7:",display=Patient"`
	Resources []SRM_S10_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S11_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
	PV2 *PV2    `hl7:"7,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S11_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S11_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S11_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S11_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S11_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S11_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S11_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S11_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S11_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S11_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Request Deletion of Service/Resource on Appointment
//
// A request deletion of service/resource is sent by the placer application to the filler application to request that a scheduled
// appointment requiring a service or resource entered in error be removed from the system.  A delete trigger event should
// only be used when a service or resource has been erroneously attached to an appointment, and must be removed from the schedule
// so that it does not affect any statistical processing.  A delete trigger event differs from a cancel trigger event in that
// a delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring.  This trigger event should
// only be used on appointments that have not been completed, or on parent appointments whose children have not been completed.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the modified appointment.
type SRM_S11 struct {
	HL7       HL7Name             `hl7:",name=SRM_S11,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S11_Patient   `hl7:",display=Patient"`
	Resources []SRM_S11_Resources `hl7:",required,display=Resources"`
}

// Schedule
type SRR_S01_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S01_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S01_Patient   `hl7:",display=Patient"`
	Resources []SRR_S01_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S01_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S01_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S01_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S01_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S01_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S01_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S01_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S01_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S01_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S01_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S01_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S01_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S01_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request New Appointment Booking
//
// A placer application sends a transaction with this trigger event to a filler application to request that a new appointment
// be booked.  If it is successful, the filler application returns an application acknowledgment (if requested under the
// enhanced acknowledgment mode, or if the original acknowledgment mode is in use).  The acknowledgment may optionally contain
// an SCH segment and related detail segments describing the actual appointment that was booked
type SRR_S01 struct {
	HL7      HL7Name           `hl7:",name=SRR_S01,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S01_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S02_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S02_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S02_Patient   `hl7:",display=Patient"`
	Resources []SRR_S02_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S02_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S02_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S02_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S02_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S02_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S02_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S02_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S02_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S02_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S02_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S02_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S02_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S02_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Appointment Rescheduling
//
// A placer application uses this trigger event to request that an existing appointment be rescheduled.  The new Requested
// Start Date and Time, Appointment Duration, Repeating Interval, Repeating Interval Duration, and/or Priority are provided
// in the ARQ segment, along with the existing placer and filler identification numbers.  If it is successful, an application
// acknowledgment is returned, optionally containing an SCH segment and related detail segments describing the new information
// for the rescheduled appointment
type SRR_S02 struct {
	HL7      HL7Name           `hl7:",name=SRR_S02,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S02_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S03_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S03_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S03_Patient   `hl7:",display=Patient"`
	Resources []SRR_S03_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S03_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S03_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S03_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S03_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S03_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S03_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S03_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S03_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S03_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S03_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S03_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S03_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S03_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Appointment Modification
//
// This message transmits a request for modification of an existing appointment to a filler application.  This trigger event
// is used to request the modification of information on an existing appointment, outside of the need to reschedule, cancel,
// discontinue or delete the appointment, or to add, modify, cancel, discontinue, or delete services and/or resources on
// the appointment.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the new information for the modified appointment
type SRR_S03 struct {
	HL7      HL7Name           `hl7:",name=SRR_S03,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S03_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S04_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S04_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S04_Patient   `hl7:",display=Patient"`
	Resources []SRR_S04_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S04_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S04_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S04_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S04_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S04_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S04_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S04_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S04_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S04_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S04_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S04_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S04_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S04_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Appointment Cancellation
//
// The request appointment cancellation trigger event is sent by the placer application to the filler application to request
// that an existing appointment be canceled.  A cancel event is used to stop a valid appointment from occurring.  For example,
// if a patient scheduled for an exam cancels his/her appointment, then a request to cancel the appointment is sent.  If it is
// successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail segments
// describing the canceled appointment
type SRR_S04 struct {
	HL7      HL7Name           `hl7:",name=SRR_S04,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S04_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S05_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S05_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S05_Patient   `hl7:",display=Patient"`
	Resources []SRR_S05_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S05_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S05_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S05_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S05_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S05_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S05_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S05_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S05_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S05_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S05_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S05_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S05_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S05_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Appointment Discontinuation
//
// The request appointment discontinuation is sent by the placer application to the filler application to request that an
// appointment in progress be stopped, or that the remaining occurrences of a parent appointment not occur as scheduled.
// If none of the child appointments of a parent appointment have occurred, then a cancel trigger event should be sent instead.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the discontinued appointment
type SRR_S05 struct {
	HL7      HL7Name           `hl7:",name=SRR_S05,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S05_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S06_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S06_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S06_Patient   `hl7:",display=Patient"`
	Resources []SRR_S06_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S06_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S06_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S06_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S06_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S06_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S06_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S06_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S06_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S06_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S06_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S06_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S06_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S06_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Appointment Deletion
//
// A request appointment deletion is sent by the placer application to the filler application to request that an appointment
// that had been entered in error be removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously requested, and must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or has already been completed.  Likewise, it should not be used on any parent appointment if any child appointments have
// either begun or been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the deleted appointment
type SRR_S06 struct {
	HL7      HL7Name           `hl7:",name=SRR_S06,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S06_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S07_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S07_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S07_Patient   `hl7:",display=Patient"`
	Resources []SRR_S07_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S07_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S07_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S07_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S07_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S07_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S07_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S07_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S07_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S07_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S07_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S07_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S07_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S07_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Addition of Service/Resource on Appointment
//
// The request addition of service/resource is triggered by the placer application to request that a new service or resource
// be added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments on an
// HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment
type SRR_S07 struct {
	HL7      HL7Name           `hl7:",name=SRR_S07,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S07_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S08_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S08_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S08_Patient   `hl7:",display=Patient"`
	Resources []SRR_S08_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S08_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S08_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S08_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S08_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S08_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S08_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S08_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S08_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S08_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S08_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S08_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S08_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S08_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Modification of Service/Resource on Appointment
//
// The request modification of service/resource is triggered on the placer application to request that information pertaining
// to an existing service or resource be changed for an existing appointment.  Services and resources are represented by the
// AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments
// that have not been completed, or for parent appointments whose children have not been completed.  If it is successful, an
// application acknowledgment is returned, optionally containing an SCH segment and related detail segments describing
// the modified appointment
type SRR_S08 struct {
	HL7      HL7Name           `hl7:",name=SRR_S08,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S08_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S09_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S09_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S09_Patient   `hl7:",display=Patient"`
	Resources []SRR_S09_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S09_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S09_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S09_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S09_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S09_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S09_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S09_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S09_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S09_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S09_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S09_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S09_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S09_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Cancellation of Service/Resource on Appointment
//
// This trigger event requests that a service or resource be removed from an existing scheduled appointment that has not yet
// begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.  For example, if
// a portable X-ray machine scheduled for an exam is no longer needed, then the placer application requests that the resource
// be canceled on the filler application.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment
type SRR_S09 struct {
	HL7      HL7Name           `hl7:",name=SRR_S09,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S09_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S10_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S10_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S10_Patient   `hl7:",display=Patient"`
	Resources []SRR_S10_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S10_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S10_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S10_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S10_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S10_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S10_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S10_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S10_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S10_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S10_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S10_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S10_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S10_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Discontinuation of Service/Resource on Appointment
//
// A request discontinuation of service/resource is sent by the placer application to the filler application when the remaining
// occurrences of a recurring appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to request that the performance of a service or resource in a recurring appointment that has already begun
// be stopped.  If the first appointment in a set of recurring appointments has not yet occurred, then a cancel trigger event
// should be sent instead.  This trigger event should only be used on appointments that have not been completed, or on parent
// appointments whose children have not been completed.  If it is successful, an application acknowledgment is returned,
// optionally containing an SCH segment and related detail segments describing the modified appointment
type SRR_S10 struct {
	HL7      HL7Name           `hl7:",name=SRR_S10,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S10_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S11_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S11_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	TQ1       []TQ1               `hl7:"5,display=Timing/Quantity"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   []SRR_S11_Patient   `hl7:",display=Patient"`
	Resources []SRR_S11_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S11_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S11_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"8,display=Patient Visit"`
	PV2 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	DG1 []DG1   `hl7:"10,display=Diagnosis"`
}

// Resources
type SRR_S11_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S11_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SRR_S11_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S11_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S11_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S11_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S11_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S11_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRR_S11_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// LocationResource
type SRR_S11_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_LocationResource,type=tg"`
	AIL *AIL    `hl7:"16,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S11_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"18,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Scheduled Request Response - Request Deletion of Service/Resource on Appointment
//
// A request deletion of service/resource is sent by the placer application to the filler application to request that a scheduled
// appointment requiring a service or resource entered in error be removed from the system.  A delete trigger event should
// only be used when a service or resource has been erroneously attached to an appointment, and must be removed from the schedule
// so that it does not affect any statistical processing.  A delete trigger event differs from a cancel trigger event in that
// a delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring.  This trigger event should
// only be used on appointments that have not been completed, or on parent appointments whose children have not been completed.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the modified appointment
type SRR_S11 struct {
	HL7      HL7Name           `hl7:",name=SRR_S11,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      []ERR             `hl7:"3,display=Error"`
	Schedule *SRR_S11_Schedule `hl7:",display=Schedule"`
}

// SpecimenContainer
type SSR_U04_SpecimenContainer struct {
	HL7 HL7Name `hl7:",name=SSR_U04_SpecimenContainer,type=tg"`
	SAC *SAC    `hl7:"5,required,display=Specimen Container Detail"`
	SPM []SPM   `hl7:"6,display=Specimen"`
}

// Specimen Status Update
//
// This message is used to request information concerning the location and status of specimens from one application to another
// (e.g., Laboratory Automation System to automated equipment). The request can be addressed for a specific container,
// a specific carrier, a specific tray or a specific location, depending on the arguments set in the SAC segment. The equipment
// specified in the EQU segment should respond with the "Specimen Status Update."
type SSR_U04 struct {
	HL7               HL7Name                     `hl7:",name=SSR_U04,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	SpecimenContainer []SSR_U04_SpecimenContainer `hl7:",required,display=Specimen Container"`
	ROL               *ROL                        `hl7:"7,display=Role"`
}

// SpecimenContainer
type SSU_U03_SpecimenContainer struct {
	HL7      HL7Name            `hl7:",name=SSU_U03_SpecimenContainer,type=tg"`
	SAC      *SAC               `hl7:"5,required,display=Specimen Container Detail"`
	OBX      []OBX              `hl7:"6,display=Observation/Result"`
	Specimen []SSU_U03_Specimen `hl7:",display=Specimen"`
}

// Specimen
type SSU_U03_Specimen struct {
	HL7 HL7Name `hl7:",name=SSU_U03_Specimen,type=tg"`
	SPM *SPM    `hl7:"7,required,display=Specimen"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Specimen Status Update
//
// This message is used to send information concerning the location and status of specimens from one application to another
// (e.g., automated equipment to a Laboratory Automation System). The OBX segments attached to the SAC should be used for
// transfer of information not included in the SAC segment.
type SSU_U03 struct {
	HL7               HL7Name                     `hl7:",name=SSU_U03,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	SpecimenContainer []SSU_U03_SpecimenContainer `hl7:",required,display=Specimen Container"`
	ROL               *ROL                        `hl7:"9,display=Role"`
}

// Notification of Sterilization Configuration
//
// This message is sent from a filler application to notify other applications of a new sterilization configuration.  The
// information in the STC segment describes the detail of the new sterilization configuration
type STC_S33 struct {
	HL7 HL7Name `hl7:",name=STC_S33,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	SCP []SCP   `hl7:"4,required,display=Sterilizer Configuration"`
}

// Request Item
//
// A request item is sent by the placer application to the filler application to request the ID and description of an item to
// be sterilized or decontaminated.  If it is successful, the filler application returns an application acknowledgment
// (if requested under the enhanced acknowledgment mode, or if the original acknowledgment mode is in use).
type STI_S30 struct {
	HL7 HL7Name `hl7:",name=STI_S30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	SLT []SLT   `hl7:"4,required,display=Sterilization Lot Segment"`
}

// Facility
type SUR_P09_Facility struct {
	HL7            HL7Name                  `hl7:",name=SUR_P09_Facility,type=tg"`
	FAC            *FAC                     `hl7:"2,required,display=Facility"`
	Product        []SUR_P09_Product        `hl7:",required,display=Product"`
	PSH            *PSH                     `hl7:"5,required,display=Product Summary Header"`
	FacilityDetail []SUR_P09_FacilityDetail `hl7:",required,display=Facility Detail"`
}

// Product
type SUR_P09_Product struct {
	HL7 HL7Name `hl7:",name=SUR_P09_Product,type=tg"`
	PSH *PSH    `hl7:"3,required,display=Product Summary Header"`
	PDC *PDC    `hl7:"4,required,display=Product Detail Country"`
}

// FacilityDetail
type SUR_P09_FacilityDetail struct {
	HL7 HL7Name `hl7:",name=SUR_P09_FacilityDetail,type=tg"`
	FAC *FAC    `hl7:"6,required,display=Facility"`
	PDC *PDC    `hl7:"7,required,display=Product Detail Country"`
	NTE *NTE    `hl7:"8,required,display=Notes and Comments"`
}

// Summary Product Experience Report
//
// This message and event is deprecated for v2.5.
//
// Sending summary reports related to products constitutes a P09 event.
//
// Note from the Caristix team: We have not included the invalid ED segment in this message.
type SUR_P09 struct {
	HL7      HL7Name            `hl7:",name=SUR_P09,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	Facility []SUR_P09_Facility `hl7:",required,display=Facility"`
}

// Tabular Data Response
//
// This section is retained for backward compatibility as of V2.4.
type TBR_R08 struct {
	HL7 HL7Name `hl7:",name=TBR_R08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	MSA *MSA    `hl7:"3,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"4,display=Error"`
	QAK *QAK    `hl7:"5,required,display=Query Acknowledgment"`
	RDF *RDF    `hl7:"6,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"7,required,display=Table Row Data"`
	DSC *DSC    `hl7:"8,display=Continuation Pointer"`
}

// TestConfiguration
type TCR_U11_TestConfiguration struct {
	HL7 HL7Name `hl7:",name=TCR_U11_TestConfiguration,type=tg"`
	SPM *SPM    `hl7:"5,display=Specimen"`
	TCC []TCC   `hl7:"6,required,display=Test Code Configuration"`
}

// Automated Equipment Test Code Settings Request
//
// This message is used to request information concerning test codes from one application to another (e.g., Laboratory Automation
// System to automated equipment).
type TCR_U11 struct {
	HL7               HL7Name                     `hl7:",name=TCR_U11,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	TestConfiguration []TCR_U11_TestConfiguration `hl7:",required,display=Test Configuration"`
	ROL               *ROL                        `hl7:"7,display=Role"`
}

// TestConfiguration
type TCU_U10_TestConfiguration struct {
	HL7 HL7Name `hl7:",name=TCU_U10_TestConfiguration,type=tg"`
	SPM *SPM    `hl7:"5,display=Specimen"`
	TCC []TCC   `hl7:"6,required,display=Test Code Configuration"`
}

// Automated Equipment Test Code Settings Update
//
// This message is used to send information concerning test codes and parameters from one application to another (e.g., automated
// equipment to a Laboratory Automation System). This message transfers the current snapshot of the test parameters of the
// sending system. The sent parameter sets are supposed to replace the parameter sets existing at the receiver of this message
// before the trigger (there is no selective "Add" or "Delete").
type TCU_U10 struct {
	HL7               HL7Name                     `hl7:",name=TCU_U10,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	SFT               []SFT                       `hl7:"2,display=Software Segment"`
	UAC               *UAC                        `hl7:"3,display=User Authentication Credential"`
	EQU               *EQU                        `hl7:"4,required,display=Equipment Detail"`
	TestConfiguration []TCU_U10_TestConfiguration `hl7:",required,display=Test Configuration"`
	ROL               *ROL                        `hl7:"7,display=Role"`
}

// Unsolicited Display Update
//
// This section is retained for backward compatibility and the framework for the existing functional queries.
//
// The UDM message does not have a direct replacement in the new methodology. It is not clear how extensively this message is
// used.
//
// There is a simple HL7 message that allows for unsolicited display update messages to be sent in HL7 format from one system
// to another.
type UDM_Q05 struct {
	HL7 HL7Name `hl7:",name=UDM_Q05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	URD *URD    `hl7:"4,required,display=Results/update Definition"`
	URS *URS    `hl7:"5,display=Unsolicited Selection"`
	DSP []DSP   `hl7:"6,required,display=Display Data"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Virtual Table Query
//
// The VTQ provides a way to query for data to be expressed as tables without having to specify SQL or a stored procedure.
//
// The VQQ supports queries against server database table (virtual or actual) based on specific selection criteria delineated
// in the VTQ segment.
type VQQ_Q07 struct {
	HL7 HL7Name `hl7:",name=VQQ_Q07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	VTQ *VTQ    `hl7:"3,required,display=Virtual Table Query Request"`
	RDF *RDF    `hl7:"4,display=Table Row Definition"`
	DSC *DSC    `hl7:"5,display=Continuation Pointer"`
}

// Vaccination Record Query
//
// This section is retained for backward compatibility as of V2.4.
//
// When an immunization registry does not already have the complete patient vaccination record, it will send a query (with
// a V01 event) for the definitive (last updated) record.
type VXQ_V01 struct {
	HL7 HL7Name `hl7:",name=VXQ_V01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SFT []SFT   `hl7:"2,display=Software Segment"`
	UAC *UAC    `hl7:"3,display=User Authentication Credential"`
	QRD *QRD    `hl7:"4,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"5,display=Original style query filter"`
}

// PatientVisit
type VXR_V03_PatientVisit struct {
	HL7 HL7Name `hl7:",name=VXR_V03_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"10,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"11,display=Patient Visit - Additional Information"`
}

// Insurance
type VXR_V03_Insurance struct {
	HL7 HL7Name `hl7:",name=VXR_V03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Information- Certification"`
}

// Order
type VXR_V03_Order struct {
	HL7         HL7Name               `hl7:",name=VXR_V03_Order,type=tg"`
	ORC         *ORC                  `hl7:"16,required,display=Common Order"`
	Timing      []VXR_V03_Timing      `hl7:",display=Timing"`
	RXA         *RXA                  `hl7:"19,required,display=Pharmacy/Treatment Administration"`
	RXR         *RXR                  `hl7:"20,display=Pharmacy/Treatment Route"`
	Observation []VXR_V03_Observation `hl7:",display=Observation"`
}

// Timing
type VXR_V03_Timing struct {
	HL7 HL7Name `hl7:",name=VXR_V03_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"17,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"18,display=Timing/Quantity Relationship"`
}

// Observation
type VXR_V03_Observation struct {
	HL7 HL7Name `hl7:",name=VXR_V03_Observation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Vaccination Record Response
//
// When the patient has been uniquely identified (there is only one "match" to the query), the response to the query (with a
// V03 event) will follow this format.
//
// Note: The original mode query, including QRD and QRF segments were retained for backward compatibility only as of v 2.4.
//
type VXR_V03 struct {
	HL7          HL7Name               `hl7:",name=VXR_V03,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	MSA          *MSA                  `hl7:"2,required,display=Message Acknowledgment"`
	SFT          []SFT                 `hl7:"3,display=Software Segment"`
	UAC          *UAC                  `hl7:"4,display=User Authentication Credential"`
	QRD          *QRD                  `hl7:"5,required,display=Original-Style Query Definition"`
	QRF          *QRF                  `hl7:"6,display=Original style query filter"`
	PID          *PID                  `hl7:"7,required,display=Patient Identification"`
	PD1          *PD1                  `hl7:"8,display=Patient Additional Demographic"`
	NK1          []NK1                 `hl7:"9,display=Next of Kin / Associated Parties"`
	PatientVisit *VXR_V03_PatientVisit `hl7:",display=Patient Visit"`
	GT1          []GT1                 `hl7:"12,display=Guarantor"`
	Insurance    []VXR_V03_Insurance   `hl7:",display=Insurance"`
	Order        []VXR_V03_Order       `hl7:",display=Order"`
}

// Patient
type VXU_V04_Patient struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Patient,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"8,display=Patient Visit - Additional Information"`
}

// Insurance
type VXU_V04_Insurance struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Order
type VXU_V04_Order struct {
	HL7         HL7Name               `hl7:",name=VXU_V04_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	Timing      []VXU_V04_Timing      `hl7:",display=Timing"`
	RXA         *RXA                  `hl7:"16,required,display=Pharmacy/Treatment Administration"`
	RXR         *RXR                  `hl7:"17,display=Pharmacy/Treatment Route"`
	Observation []VXU_V04_Observation `hl7:",display=Observation"`
}

// Timing
type VXU_V04_Timing struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Timing,type=tg"`
	TQ1 *TQ1    `hl7:"14,required,display=Timing/Quantity"`
	TQ2 []TQ2   `hl7:"15,display=Timing/Quantity Relationship"`
}

// Observation
type VXU_V04_Observation struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Unsolicited Vaccination Record Update
//
// When a provider wishes to update the patient's vaccination record being held in a registry, he will transmit an unsolicited
// update of the record (a V04 trigger event).
type VXU_V04 struct {
	HL7       HL7Name             `hl7:",name=VXU_V04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SFT       []SFT               `hl7:"2,display=Software Segment"`
	UAC       *UAC                `hl7:"3,display=User Authentication Credential"`
	PID       *PID                `hl7:"4,required,display=Patient Identification"`
	PD1       *PD1                `hl7:"5,display=Patient Additional Demographic"`
	NK1       []NK1               `hl7:"6,display=Next of Kin / Associated Parties"`
	Patient   *VXU_V04_Patient    `hl7:",display=Patient"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []VXU_V04_Insurance `hl7:",display=Insurance"`
	Order     []VXU_V04_Order     `hl7:",display=Order"`
}

// Patient
type VXX_V02_Patient struct {
	HL7 HL7Name `hl7:",name=VXX_V02_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient Identification"`
	NK1 []NK1   `hl7:"8,display=Next of Kin / Associated Parties"`
}

// Vaccination Record Query Returning Multiple PID Matches
//
// In response to a query for the definitive patient vaccination record, the registry holding the record will return it to
// the registry originating the query.
//
// Note: The original mode query, including QRD and QRF segments were retained for backward compatibility only as of v 2.4.
//
type VXX_V02 struct {
	HL7     HL7Name           `hl7:",name=VXX_V02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	SFT     []SFT             `hl7:"3,display=Software Segment"`
	UAC     *UAC              `hl7:"4,display=User Authentication Credential"`
	QRD     *QRD              `hl7:"5,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"6,display=Original style query filter"`
	Patient []VXX_V02_Patient `hl7:",required,display=Patient"`
}
