// Code generated by "hl7fetch -pkgdir h240 -root ./genjson -version 2.4"; DO NOT EDIT.

package h240

import "time"

// Address
//
// Note: Replaced by the XAD data type as of v 2.3.
//
// Example:
// |10 ASH LN^#3^LIMA^OH^48132|
type AD struct {
	HL7                        HL7Name `hl7:",name=AD,len=0,type=d"`
	StreetAddress              ST      `hl7:"1,display=The street or mailing address of a person or institution. When referencing an institution- this first component is used to specify the institution name. When used in connection with a person- this component specifies the first line of the address."`
	OtherDesignation           ST      `hl7:"2,display=Second line of address. In general- it qualifies address. Examples: Suite 555 or Fourth Floor. When referencing an institution- this component specifies the street address."`
	City                       ST      `hl7:"3,display=City"`
	StateOrProvince            ST      `hl7:"4,display=State or province should be represented by the official postal service codes for that country."`
	ZipOrPostalCode            ST      `hl7:"5,display=Zip or postal codes should be represented by the official codes for that country. In the US- the zip code takes the form 99999[-9999]- while the Canadian postal code takes the form A9A9A9."`
	Country                    ID      `hl7:"6,table=0399,display=Defines the country of the address. ISO 3166 provides a list of country codes that may be used.[1] This ISO table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code. Refer to HL7 Table 0399 - Country code for valid values."`
	AddressType                ID      `hl7:"7,table=0190,display=Type is optional and defined by HL7 Table 0190 - Address type ."`
	OtherGeographicDesignation ST      `hl7:"8,display=Other geographic designation includes county- bioregion- SMSA- etc."`
}

// Authorization Information
type AUI struct {
	HL7                 HL7Name `hl7:",name=AUI,len=0,type=d"`
	AuthorizationNumber ST      `hl7:"1,display=Authorization Number"`
	Date                DT      `hl7:"2,format=YMD,display=Date"`
	Source              ST      `hl7:"3,display=Source"`
}

// Charge Time
type CCD struct {
	HL7              HL7Name `hl7:",name=CCD,len=0,type=d"`
	WhenToChargeCode ID      `hl7:"1,table=0100,display=When To Charge Code"`
	DateTime         TS      `hl7:"2,format=YMDHMS,display=Date/time"`
}

// Coded Element
//
// This data type transmits codes and the text associated with the code.
//
// Example:
// |F-11380^CREATININE^I9^2148-5^CREATININE^LN|
type CE struct {
	HL7                         HL7Name `hl7:",name=CE,len=250,type=d"`
	Identifier                  ST      `hl7:"1,display=Sequence of characters (the code) that uniquely identifies the item being referenced by the <text>. Different coding schemes will have different elements here."`
	Text                        ST      `hl7:"2,display=Name or description of the item in question. E.g.- myocardial infarction or X-ray impression. Its data type is string (ST)."`
	NameOfCodingSystem          IS      `hl7:"3,table=0396,display=Each coding system is assigned a unique identifier. This component will serve to identify the coding scheme being used in the identifier component. The combination of the identifier and name of coding system components will be a unique code for a data item. Each system has a unique identifier.  Refer to User-defined table 0396 Coding Systems for valid values. When an HL7 table is used for a CE data type- the name of coding system component is defined as HL7nnnn where nnnn is the HL7 table number. "`
	AlternateIdentifier         ST      `hl7:"4,display=These three components are defined analogously to the above for the alternate or local coding system.  If the alternate text component is absent- and the alternate identifier is present- the alternate text will be taken to be the same as the text component.  If the alternate coding system component is absent- it will be taken to mean the locally-defined system."`
	AlternateText               ST      `hl7:"5,display=These three components are defined analogously to the above for the alternate or local coding system.  If the alternate text component is absent- and the alternate identifier is present- the alternate text will be taken to be the same as the text component.  If the alternate coding system component is absent- it will be taken to mean the locally-defined system."`
	NameOfAlternateCodingSystem IS      `hl7:"6,table=0396,display=These three components are defined analogously to the above for the alternate or local coding system.  If the alternate text component is absent- and the alternate identifier is present- the alternate text will be taken to be the same as the text component.  If the alternate coding system component is absent- it will be taken to mean the locally-defined system.  Refer to User-defined table 0396 Coding Systems for valid values. When an HL7 table is used for a CE data type- the name of coding system component is defined as HL7nnnn where nnnn is the HL7 table number. "`
}

// Composite ID With Check Digit
//
// This data type is used only in CDM-11-Contract number as defined in chapter 8, section 8.10.2.11. If a site is not using check
// digits for a particular CK field, the second and third components are not valued.
//
// Example:
// |128952^6^M11^ADT01|
type CK struct {
	HL7                                        HL7Name `hl7:",name=CK,len=250,type=d"`
	IDNumber                                   NM      `hl7:"1,display=Id Number"`
	CheckDigit                                 ST      `hl7:"2,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CodeIdentifyingTheCheckDigitSchemeEmployed ID      `hl7:"3,table=0061,display=The check digit scheme codes are defined in HL7 Table 0061 - Check digit scheme."`
	AssigningAuthority                         *HD     `hl7:"4,display=The assigning authority is a unique identifier of the system (or organization or agency or department) that creates the data. It is a HD data type. Assigning authorities are unique across a given HL7 implementation. User-defined Table 0363 - Assigning authorit y is used as the HL7 identifier for the user-defined table of values for the first sub-component- namespace ID."`
}

// Coded With No Exceptions
type CNE struct {
	HL7                            HL7Name `hl7:",name=CNE,len=250,type=d"`
	Identifier                     ST      `hl7:"1,display=Sequence of characters (the code) that uniquely identifies the item being referenced by the <text>. Different coding schemes will have different elements here."`
	Text                           ST      `hl7:"2,display=Name or description of the item in question. E.g.- myocardial infarction or X-ray impression. Its data type is string (ST). This is the corresponding text assigned by the coding system to the identifier."`
	NameOfCodingSystem             IS      `hl7:"3,table=0396,display=Each coding system is assigned a unique identifier. This component will serve to identify the coding scheme being used in the identifier component. The combination of the identifier and name of coding system components will be a unique code for a data item. Each system has a unique identifier."`
	AlternateIdentifier            ST      `hl7:"4,display=Alternate Identifier"`
	AlternateText                  ST      `hl7:"5,display=Alternate Text"`
	NameOfAlternateCodingSystem    IS      `hl7:"6,table=0396,display=This is the version ID for the coding system identified by components 4-6. It belongs conceptually to the group of Alternate components (see note 2.9.3.6) and appears here only for reasons of backward compatibility."`
	CodingSystemVersionID          ST      `hl7:"7,display=This is the version ID for the coding system identified by component 1-3. It belongs conceptually to components 1-3 and appears here only for reasons of backward compatibility."`
	AlternateCodingSystemVersionID ST      `hl7:"8,display=This is the version ID for the coding system identified by components 4-6. It belongs conceptually to the group of Alternate components (see note 2.9.3.6) and appears here only for reasons of backward compatibility."`
	OriginalText                   ST      `hl7:"9,display=The original text that was available to an automated process or a human before a specific code was assigned. This component is optional."`
}

// Composite ID Number And Name (special DT For NDL
type CNN struct {
	HL7                                         HL7Name `hl7:",name=CNN,len=0,type=d"`
	IDNumber                                    ST      `hl7:"1,display=ID Number"`
	FamilyName                                  ST      `hl7:"2,display=Family Name"`
	GivenName                                   ST      `hl7:"3,display=Given Name"`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,display=Second And Further Given Names Or Initials Thereof"`
	Suffix                                      ST      `hl7:"5,display=Suffix"`
	Prefix                                      ST      `hl7:"6,display=Prefix"`
	Degree                                      IS      `hl7:"7,table=0360,display=Degree"`
	SourceTable                                 IS      `hl7:"8,table=0297,display=Source Table"`
	AssigningAuthorityNamespaceID               IS      `hl7:"9,table=0363,display=Assigning Authority Namespace ID"`
	AssigningAuthorityUniversalID               ST      `hl7:"10,display=Assigning Authority Universal ID"`
	AssigningAuthorityUniversalIDType           ID      `hl7:"11,table=0301,display=Assigning Authority Universal ID Type"`
}

// Composite Price
//
// Note: This data type is often used to define a repeating field within a given segment
// Note: Replaces MO as of v 2.3.
//
// Example:
// |100.00&USD^UP^0^9^min^P~50.00&USD^UP^10^59^min^P~10.00&USD^UP^60^999^P~50.00&USD^AP~ 200.00&USD^PF
// ~80.00&USD^DC|
type CP struct {
	HL7        HL7Name `hl7:",name=CP,len=0,type=d"`
	Price      *MO     `hl7:"1,display=The only required component; usually containing a decimal point. Note that each component of the MO data type (Section 2.9.26- MO - money) is a subcomponent here."`
	PriceType  ID      `hl7:"2,table=0205,display=A coded value- data type ID. Refer to HL7 Table 0205 - Price type for valid values."`
	FromValue  NM      `hl7:"3,display=Each is a NM data type; together they specify the range. The range can be defined as either time or quantity. For example- the range can indicate that the first 10 minutes of the procedure has one price. Another repetition of the data type can use the range to specify that the following 10 to 60 minutes of the procedure is charged at another price per; a final repetition can specify that the final 60 to N minutes of the procedure at a third price."`
	ToValue    NM      `hl7:"4,display=See <from value> above."`
	RangeUnits *CE     `hl7:"5,display=A coded value- data type CE- defined by the standard table of units for either time or quantity  (see for example- the tables in Section 7.1.4- “Coding schemes”).  This describes the units associated with the range- e.g.- seconds- minutes- hours- days- quantity (i.e.- count); it is required if <from value> and  <to value> are present.  Subcomponents of range units: <identifier (ST)> & <text (ST)> & <name of coding system (IS)> & <alternate identifier (ST)> & <alternate text (ST)> & <name of alternate coding system (IS)>"`
	RangeType  ID      `hl7:"6,table=0298,display=Refers to HL7 Table 0298 - CP range type for valid values."`
}

// Composite Quantity With Units
//
// Note: In future versions, CQ fields should be avoided because the same data can usually be sent as two separate fields, one
// with the value and one with the units as a CE data type.
//
// Examples:
// |123.7^kg| kilograms is an ISO unit
// |150^lb&&ANSI+| weight in pounds is a customary US unit defined within ANSI+.
type CQ struct {
	HL7      HL7Name `hl7:",name=CQ,len=0,type=d"`
	Quantity NM      `hl7:"1,display=Quantity"`
	Units    ST      `hl7:"2,display=The units in which the quantity is expressed. Field-by-field- default units may be defined within the specifications. When the observation is measured in the default units- the units need not be transmitted. If the measure is recorded in units different from the default- the measurement units must be transmitted as the second component. If the units are ISO+ units- then units should be recorded as lowercase abbreviations as specified in Chapter 7. If the units are ANSI or local- the units and the source table must be recorded as specified in Chapter 7. But in these cases the component separator should be replaced by the subcomponent delimiter"`
}

// Coded With Exceptions
type CWE struct {
	HL7                            HL7Name `hl7:",name=CWE,len=250,type=d"`
	Identifier                     ST      `hl7:"1,display=Sequence of characters (the code) that uniquely identifies the item being referenced by the <text>. Different coding schemes will have different elements here."`
	Text                           ST      `hl7:"2,display=Name or description of the item in question. E.g.- myocardial infarction or X-ray impression."`
	NameOfCodingSystem             IS      `hl7:"3,table=0396,display=Each coding system is assigned a unique identifier. This component will serve to identify the coding scheme being used in the identifier component. The combination of the identifier and name of coding system components will be a unique code for a data item. Each system has a unique identifier."`
	AlternateIdentifier            ST      `hl7:"4,display=Alternate Identifier"`
	AlternateText                  ST      `hl7:"5,display=Alternate Text"`
	NameOfAlternateCodingSystem    IS      `hl7:"6,table=0396,display=Name Of Alternate Coding System"`
	CodingSystemVersionID          ST      `hl7:"7,display=This is the version ID for the coding system identified by components 1-3. It belongs conceptually to the group of component 1-3 and appears here only for reasons of backward compatibility."`
	AlternateCodingSystemVersionID ST      `hl7:"8,display=This is the version ID for the coding system identified by components 4-6. It belongs conceptually to the group of alternate components (see note 0- Analogous to Text above. See 2.9.11.10- Usage notes: for further description."`
	OriginalText                   ST      `hl7:"9,display=The original text that was available to an automated process or a human before a specific code was assigned"`
}

// Extended Composite ID With Check Digit
//
// This data type is used for specifying an identifier with its associated administrative detail.
//
// Example:
// |1234567^4^M11^ADT01^MR^University Hospital|
type CX struct {
	HL7                                        HL7Name `hl7:",name=CX,len=250,type=d"`
	ID                                         ST      `hl7:"1,display=Definition: The value of the identifier itself. It is similar to the CK data type (see Section 2.9.5- CK - composite ID with check digit) except that a ST data type is used instead of a NM data type."`
	CheckDigit                                 ST      `hl7:"2,display=Defined as in the CK data type (see Section 2.9.5- CK - composite ID with check digit) except that an ST data type is allowed instead of an NM data type. The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CodeIdentifyingTheCheckDigitSchemeEmployed ID      `hl7:"3,table=0061,display=Defined as in the CK data type (see Section 2.9.5- CK - composite ID with check digit). Refer to HL7 Table 0061- Check digit scheme for valid values."`
	AssigningAuthority                         *HD     `hl7:"4,display=The assigning authority is a unique name of the system (or organization or agency or department) that creates the data. It is a HD data type . User-defined Table 0363 - Assigning authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component- <namespace ID>."`
	IdentifierTypeCode                         ID      `hl7:"5,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the Assigning authority component. Refer toHL7 Table 0203 - Identifier type for suggested values."`
	AssigningFacility                          *HD     `hl7:"6,display=The place or location identifier where the identifier was first assigned to the patient.  This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	EffectiveDate                              DT      `hl7:"7,format=YMD,display=The first date- if known- on which the identifier is valid and active."`
	ExpirationDate                             DT      `hl7:"8,format=YMD,display=The last date- if known- on which the identifier is valid and active."`
}

// Daily Deductible
type DDI struct {
	HL7          HL7Name `hl7:",name=DDI,len=0,type=d"`
	DelayDays    NM      `hl7:"1,display=Delay Days"`
	Amount       NM      `hl7:"2,display=Amount"`
	NumberOfDays NM      `hl7:"3,display=Number Of Days"`
}

// Activation Date
type DIN struct {
	HL7             HL7Name `hl7:",name=DIN,len=0,type=d"`
	Date            TS      `hl7:"1,format=YMDHMS,display=Date"`
	InstitutionName *CE     `hl7:"2,display=Institution Name"`
}

// Discharge Location
type DLD struct {
	HL7               HL7Name `hl7:",name=DLD,len=0,type=d"`
	DischargeLocation ID      `hl7:"1,table=0113,display=Discharge Location"`
	EffectiveDate     TS      `hl7:"2,format=YMDHMS,display=Effective Date"`
}

// Driver's License Number
//
// This field contains the drivers license information. For state or province refer to official postal codes for that country;
// for country refer to ISO 3166 for codes.
type DLN struct {
	HL7                         HL7Name `hl7:",name=DLN,len=0,type=d"`
	DriversLicenseNumber        ST      `hl7:"1,display=This field contains the drivers license number."`
	IssuingStateProvinceCountry IS      `hl7:"2,table=0333,display=Issuing authority for drivers license. For state or province refer to official postal codes for that country; for country refer to ISO 3166 for codes. (The ISO 3166 table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code .) User-defined Table 0333 - Drivers license issuing authority is used as the HL7 identifier for the user-defined table of values for this component."`
	ExpirationDate              DT      `hl7:"3,format=YMD,display=Expiration date (DT) for drivers license."`
}

// Delta Check
type DLT struct {
	HL7               HL7Name `hl7:",name=DLT,len=0,type=d"`
	Range             *NR     `hl7:"1,display=Range"`
	NumericThreshold  NM      `hl7:"2,display=Numeric Threshold"`
	ChangeComputation ST      `hl7:"3,display=Change Computation"`
	LengthOfTimeDays  NM      `hl7:"4,display=Length Of Time-days"`
}

// Date/time Range
type DR struct {
	HL7                HL7Name `hl7:",name=DR,len=0,type=d"`
	RangeStartDateTime TS      `hl7:"1,format=YMDHMS,display=The first component contains the earliest date/time (time stamp) in the specified range."`
	RangeEndDateTime   TS      `hl7:"2,format=YMDHMS,display=The second component contains the latest date/time in the specified range. Note that the TS (time stamp) data type allows the specification of precision."`
}

// Date
//
// In prior versions of HL7, this data type was always specified to be in the format YYYYMMDD. In the current and future versions,
// the precision of a date may be expressed by limiting the number of digits used with the format specification YYYY[MM[DD]].
// Thus, YYYY is used to specify a precision of year, YYYYMM specifies a precision of month, and YYYYMMDD specifies a precision
// of day.
//
// By site-specific agreement, YYYYMMDD may be used where backward compatibility must be maintained.
//
// Examples:
// |19880704|
// |199503|
type DT = time.Time

// Day Type And Number
type DTN struct {
	HL7          HL7Name `hl7:",name=DTN,len=0,type=d"`
	DayType      IS      `hl7:"1,table=0149,display=Day Type"`
	NumberOfDays NM      `hl7:"2,display=Number Of Days"`
}

// Entity Identifier
//
// The entity identifier defines a given entity within a specified series of identifiers.
type EI struct {
	HL7              HL7Name `hl7:",name=EI,len=0,type=d"`
	EntityIdentifier ST      `hl7:"1,display=The first component- <entity identifier>- is usually defined to be unique within the series of identifiers created by the <assigning authority>- defined by a hierarchic designator- represented by components 2 through 4. (See Section 2.9.21- HD - hierarchic designator.)"`
	NamespaceID      IS      `hl7:"2,table=0300,display=User-defined Table 0300 - Namespace ID is used as the HL7 identifier for the user-defined table of values for this component"`
	UniversalID      ST      `hl7:"3,display=<universal ID> (UID)- is a string formatted according to the scheme defined by the third component- <universal ID type> (UID type).  The UID is intended to be unique over time within the UID type.  It is rigorously defined.  Each UID must belong to one of the specifically enumerated schemes for constructing UIDs (defined by the UID type).  The UID (second component) must follow the syntactic rules of the particular universal identifier scheme (defined by the third component).  Note that these syntactic rules are not defined within HL7 but are defined by the rules of the particular universal identifier scheme (defined by the third component)."`
	UniversalIDType  ID      `hl7:"4,table=0301,display=This component governs the interpretation of the second component of the HD.  If the third component is a known UID refer to HL7 Table 0301 - Universal ID type for valid values- then the second component is a universal ID of that type"`
}

// Parent Order
type EIP struct {
	HL7                      HL7Name `hl7:",name=EIP,len=0,type=d"`
	ParentSPlacerOrderNumber *EI     `hl7:"1,display=Parent s Placer Order Number"`
	ParentSFillerOrderNumber *EI     `hl7:"2,display=Parent s Filler Order Number"`
}

// Error
type ELD struct {
	HL7                  HL7Name `hl7:",name=ELD,len=0,type=d"`
	SegmentID            ST      `hl7:"1,display=Segment ID"`
	Sequence             NM      `hl7:"2,display=Sequence"`
	FieldPosition        NM      `hl7:"3,display=Field Position"`
	CodeIdentifyingError *CE     `hl7:"4,display=Code Identifying Error"`
}

// Financial Class
type FC struct {
	HL7            HL7Name `hl7:",name=FC,len=0,type=d"`
	FinancialClass IS      `hl7:"1,table=0064,display=This component contains the financial class assigned to a person. User-defined Table 0064 - Financial class is used as the HL7 identifier for the user-defined table of values for this component."`
	EffectiveDate  TS      `hl7:"2,format=YMDHMS,display=This component contains the effective date/time of the persons assignment to the financial class specified in the first component."`
}

// Family Name
//
// This data type allows full specification of the surname of a person. Where appropriate, it differentiates the person's
// own surname from that of the person's partner or spouse, in cases where the person's name may contain elements from either
// name. It also permits messages to distinguish the surname prefix (such as "van" or "de") from the surname root.
//
// Note: Appears ONLY in the PN and other PN-containing data types (PPN, XCN, XPN).
type FN = string

// Formatted Text Data
//
// This data type is derived from the string data type by allowing the addition of embedded formatting instructions.  These
// instructions are limited to those that are intrinsic and independent of the circumstances under which the field is being
// used.  The actual instructions and their representation are described later in this chapter.  The FT field is of arbitrary
// length (up to 64k) and may contain formatting commands enclosed in escape characters.
type FT = string

// Hierarchic Designator
//
// The HD is designed to be more powerful and more general replacement for the application identifier of HL7 versions 2.1 and
// 2.2. It adds two additional components, the <universal ID> and the <universal ID type> to the former application ID (which
// is renamed more generically to be the namespace ID)
type HD struct {
	HL7             HL7Name `hl7:",name=HD,len=0,type=d"`
	NamespaceID     IS      `hl7:"1,table=0300,display=User-defined Table 0300 - Namespace ID is used as the HL7 identifier for the user-defined table of values for this component."`
	UniversalID     ST      `hl7:"2,display=The HDs second component- <universal ID> (UID)- is a string formatted according to the scheme defined by the third component- <universal ID type> (UID type). The UID is intended to be unique over time within the UID type. It is rigorously defined. Each UID must belong to one of the specifically enumerated schemes for constructing UIDs (defined by the UID type). The UID (second component) must follow the syntactic rules of the particular universal identifier scheme (defined by the third component). Note that these syntactic rules are not defined within HL7 but are defined by the rules of the particular universal identifier scheme (defined by the third component)."`
	UniversalIDType ID      `hl7:"3,table=0301,display=The third component governs the interpretation of the second component of the HD. If the third component is a known UID refer to HL7 Table 0301 - Universal ID type for valid values- then the second component is a universal ID of that type."`
}

// Coded values for HL7 tables
//
// The value of such a field follows the formatting rules for an ST field except that it is drawn from a table of legal values.
// There shall be an HL7 table number associated with ID data types. An examples of an ID field is OBR-25-result status. This
// data type should be used only for HL7 tables (see Section 2.7.6, Table). The reverse is not true, since in some circumstances
// it is more appropriate to use the CE data type for HL7 tables.
type ID = string

// Coded value for user-defined tables
//
// The value of such a field follows the formatting rules for a ST field except that it is drawn from a site-defined (or user-defined)
// table of legal values. There shall be an HL7 table number associated with IS data types. An example of an IS field is the Event
// reason code defined in Section 3.3.1.4, Event reason code. This data type should be used only for user-defined tables (see
// Section 2.7.6, Table). The reverse is not true, since in some circumstances, it is more appropriate to use the CE data type
// for user-defined tables.
type IS = string

// Job Code/class
type JCC struct {
	HL7      HL7Name `hl7:",name=JCC,len=0,type=d"`
	JobCode  IS      `hl7:"1,table=0327,display=This component contains the persons job code. User-defined Table 0327 - Job code is used as the HL7 identifier for the user-defined table of values for this component."`
	JobClass IS      `hl7:"2,table=0328,display=This component contains the persons employee classification . User-defined Table 0328 - Employee classificationis used as the HL7 identifier for the user-defined table of values for this component."`
}

// Location With Address Information (variant 1
type LA1 struct {
	HL7                HL7Name `hl7:",name=LA1,len=0,type=d"`
	PointOfCare        IS      `hl7:"1,table=0302,display=Point Of Care"`
	Room               IS      `hl7:"2,table=0303,display=Room"`
	Bed                IS      `hl7:"3,table=0304,display=Bed"`
	Facility           *HD     `hl7:"4,display=Facility"`
	LocationStatus     IS      `hl7:"5,table=0306,display=Location Status"`
	PersonLocationType IS      `hl7:"6,table=0305,display=Person Location Type"`
	Building           IS      `hl7:"7,table=0307,display=Building"`
	Floor              IS      `hl7:"8,table=0308,display=Floor"`
	Address            *AD     `hl7:"9,display=Address"`
}

// Location With Address Information (variant 2
type LA2 struct {
	HL7                        HL7Name `hl7:",name=LA2,len=0,type=d"`
	PointOfCare                IS      `hl7:"1,table=0302,display=Point Of Care"`
	Room                       IS      `hl7:"2,table=0303,display=Room"`
	Bed                        IS      `hl7:"3,table=0304,display=Bed"`
	Facility                   *HD     `hl7:"4,display=Facility"`
	LocationStatus             IS      `hl7:"5,table=0306,display=Location Status"`
	PersonLocationType         IS      `hl7:"6,table=0305,display=Person Location Type"`
	Building                   IS      `hl7:"7,table=0307,display=Building"`
	Floor                      IS      `hl7:"8,table=0308,display=Floor"`
	StreetAddress              ST      `hl7:"9,display=Street Address"`
	OtherDesignation           ST      `hl7:"10,display=Other Designation"`
	City                       ST      `hl7:"11,display=City"`
	StateOrProvince            ST      `hl7:"12,display=State Or Province"`
	ZipOrPostalCode            ST      `hl7:"13,display=Zip Or Postal Code"`
	Country                    ID      `hl7:"14,table=0399,display=Country"`
	AddressType                ID      `hl7:"15,table=0190,display=Address Type"`
	OtherGeographicDesignation ST      `hl7:"16,display=Other Geographic Designation"`
}

// Money
//
// Note: Intent is that it appear only as a component of data type CP.
type MO struct {
	HL7          HL7Name `hl7:",name=MO,len=0,type=d"`
	Quantity     NM      `hl7:"1,display=The first component is a quantity."`
	Denomination ID      `hl7:"2,table=ISO4217,display=The second component is the denomination in which the quantity is expressed. The values for the denomination component are those specified in ISO-4217. If the denomination is not specified- MSH-17-country code is used to determine the default.   Example: |99.50^USD|  where USD is the ISO 4217 code for the U.S. American dollar."`
}

// Charge To Practise
type MOC struct {
	HL7          HL7Name `hl7:",name=MOC,len=0,type=d"`
	DollarAmount *MO     `hl7:"1,display=Dollar Amount"`
	ChargeCode   *CE     `hl7:"2,display=Charge Code"`
}

// Money Or Percentage
type MOP struct {
	HL7                        HL7Name `hl7:",name=MOP,len=0,type=d"`
	MoneyOrPercentageIndicator IS      `hl7:"1,table=0148,display=Money Or Percentage Indicator"`
	MoneyOrPercentageQuantity  NM      `hl7:"2,display=Money Or Percentage Quantity"`
}

// Message Type
type MSG struct {
	HL7              HL7Name `hl7:",name=MSG,len=0,type=d"`
	MessageType      ID      `hl7:"1,table=0076,display=Message Type"`
	TriggerEvent     ID      `hl7:"2,table=0003,display=Trigger Event"`
	MessageStructure ID      `hl7:"3,table=0354,display=Message Structure"`
}

func (d MSG) MessageStructureID() []string {
	if len(d.MessageStructure) > 0 {
		return []string{d.MessageStructure}
	}
	if len(d.TriggerEvent) == 0 {
		return []string{d.MessageType}
	}
	return []string{d.MessageType + "_" + d.TriggerEvent, d.MessageType}
}

// Numeric Array
//
// This data type is used to represent a series (array) of numeric values, each one having a data type of NM.  A field of this type
// may contain a one-dimensional array (vector or row) of numbers.  Also, by allowing the field to repeat, a two-dimensional
// array (table) of numbers may be transmitted using this format, with each row of the table represented as one repetition
// of the field.  Arrays which have one or more values not present may be transmitted using this data type.  “Not present” values
// are represented as two adjacent component delimiters.  If the absent values occur at the end of a row, the trailing component
// delimiters may be omitted.  If an entire row of a table has no values, no component delimiters are necessary (in this case,
// there will be two adjacent repetition delimiters).  The maximum number of values in one repetition of an NA format field
// is determined by the maximum field length
type NA struct {
	HL7    HL7Name `hl7:",name=NA,len=0,type=d"`
	Value1 NM      `hl7:"1,display=Value1"`
	Value2 NM      `hl7:"2,display=Value2"`
	Value3 NM      `hl7:"3,display=Value3"`
	Value4 NM      `hl7:"4,display=Value4"`
}

// Observing Practitioner
type NDL struct {
	HL7                HL7Name `hl7:",name=NDL,len=0,type=d"`
	OPName             *CNN    `hl7:"1,display=OP Name"`
	StartDateTime      TS      `hl7:"2,format=YMDHMS,display=Start Date/time"`
	EndDateTime        TS      `hl7:"3,format=YMDHMS,display=End Date/time"`
	PointOfCare        IS      `hl7:"4,table=0302,display=Point Of Care"`
	Room               IS      `hl7:"5,table=0303,display=Room"`
	Bed                IS      `hl7:"6,table=0304,display=Bed"`
	Facility           *HD     `hl7:"7,display=Facility"`
	LocationStatus     IS      `hl7:"8,table=0306,display=Location Status"`
	PersonLocationType IS      `hl7:"9,table=0305,display=Person Location Type"`
	Building           IS      `hl7:"10,table=0307,display=Building"`
	Floor              IS      `hl7:"11,table=0308,display=Floor"`
}

// Numeric
//
// A number represented as a series of ASCII numeric characters consisting of an optional leading sign (+ or -), the digits
// and an optional decimal point. In the absence of a sign, the number is assumed to be positive. If there is no decimal point
// the number is assumed to be an integer.
//
// Examples:
// |999|
// |-123.792|
type NM = string

// Wertebereich
type NR struct {
	HL7       HL7Name `hl7:",name=NR,len=0,type=d"`
	LowValue  NM      `hl7:"1,display=Low Value"`
	HighValue NM      `hl7:"2,display=High Value"`
}

// Occurence
type OCD struct {
	HL7            HL7Name `hl7:",name=OCD,len=0,type=d"`
	OccurrenceCode IS      `hl7:"1,table=0350,display=Occurrence Code"`
	OccurrenceDate DT      `hl7:"2,format=YMD,display=Occurrence Date"`
}

// Order Sequence
type OSD struct {
	HL7                               HL7Name `hl7:",name=OSD,len=0,type=d"`
	SequenceResultsFlag               ID      `hl7:"1,required,table=OSD1,display=S for sequence conditions; C for cyclical; R is reserved for possible future use. The C will be used for indicating a repeating cycle of orders; for example- individual intravenous solutions used in a cyclical sequence (a.k.a. “Alternating IVs”).  This value would be compatible with linking separate orders or with having all cyclical order components in a single order.  Likewise- the value would be compatible with either Parent-Child messages or a single order message to communicate the orders’ sequencing "`
	PlacerOrderNumberEntityIdentifier ST      `hl7:"2,required,display=Placer Order Number: Entity Identifier"`
	PlacerOrderNumberNamespaceID      IS      `hl7:"3,table=0363,display=Placer Order Number: Namespace ID"`
	FillerOrderNumberEntityIdentifier ST      `hl7:"4,required,display=Filler Order Number: Entity Identifier"`
	FillerOrderNumberNamespaceID      IS      `hl7:"5,table=0363,display=Filler Order Number: Namespace ID"`
	SequenceConditionValue            ST      `hl7:"6,required,display=Sequence Condition Value"`
	MaximumNumberOfRepeats            NM      `hl7:"7,required,display=The maximum number of repeats to be used only on cyclic groups.  The total number of repeats is constrained by the end date/time of the last repeat or the end date/time of the parent- whichever is first."`
	PlacerOrderNumberUniversalID      ST      `hl7:"8,required,display=Placer Order Number: Universal ID"`
	PlacerOrderNumberUniversalIDType  ID      `hl7:"9,table=0301,display=Placer Order Number; Universal ID Type"`
	FillerOrderNumberUniversalID      ST      `hl7:"10,required,display=Filler Order Number: Universal ID"`
	FillerOrderNumberUniversalIDType  ID      `hl7:"11,table=0301,display=Filler Order Number: Universal ID Type"`
}

// Occurence Span
type OSP struct {
	HL7                     HL7Name `hl7:",name=OSP,len=0,type=d"`
	OccurrenceSpanCode      *CE     `hl7:"1,table=0351,display=Occurrence Span Code"`
	OccurrenceSpanStartDate DT      `hl7:"2,format=YMD,display=Occurrence Span Start Date"`
	OccurrenceSpanStopDate  DT      `hl7:"3,format=YMD,display=Occurrence Span Stop Date"`
}

// Pre-certification Required
type PCF struct {
	HL7                         HL7Name `hl7:",name=PCF,len=0,type=d"`
	PreCertificationPatientType IS      `hl7:"1,table=0150,display=pre-certification patient type refers to User-defined Table 0150 - Pre-certification patient type for suggested values "`
	PreCertificationRequired    ID      `hl7:"2,table=0136,display=pre-certification required refers to HL7 table 0136 - Yes/no indicator for valid values "`
	PreCertificationWindow      TS      `hl7:"3,format=YMDHMS,display=pre-certification window is the amount of time required to attain certification from arrival at the institution. Its format follows the time stamp (TS) data type rules."`
}

// Person Identifier
type PI struct {
	HL7                 HL7Name `hl7:",name=PI,len=0,type=d"`
	IDNumber            ST      `hl7:"1,display=ID Number"`
	TypeOfIDNumber      IS      `hl7:"2,display=Type Of ID Number"`
	OtherQualifyingInfo ST      `hl7:"3,display=Other Qualifying Info"`
}

// Privileges
type PIP struct {
	HL7            HL7Name `hl7:",name=PIP,len=0,type=d"`
	Privilege      *CE     `hl7:"1,display=Privilege"`
	PrivilegeClass *CE     `hl7:"2,display=Privilege Class"`
	ExpirationDate DT      `hl7:"3,format=YMD,display=Expiration Date"`
	ActivationDate DT      `hl7:"4,format=YMD,display=Activation Date"`
	Facility       *EI     `hl7:"5,display=Facility"`
}

// Person Location
//
// This data type is used to specify a patient location within a healthcare institution. Which components are valued depends
// on the needs of the site. For example for a patient treated at home, only the person location type is valued. It is most commonly
// used for specifying patient locations, but may refer to other types of persons within a healthcare setting.
//
// Note: This data type contains several location identifiers that should be thought of in the following order from the most
// general to the most specific: facility, building, floor, point of care, room, bed. Additional data about any location
// defined by these components can be added in the following components: person location type, location description and
// location status.
type PL struct {
	HL7                 HL7Name `hl7:",name=PL,len=0,type=d"`
	PointOfCare         IS      `hl7:"1,table=0302,display=Conditional on person location type (e.g.- nursing unit or department or clinic). After floor- most general patient location designation. User-defined Table 0302 - Point of care is used as the HL7 identifier for the user-defined table of values for this component."`
	Room                IS      `hl7:"2,table=0303,display=Patient room. After point of care- most general person location designation. User-defined Table 0303 - Room is used as the HL7 identifier for the user-defined table of values for this component."`
	Bed                 IS      `hl7:"3,table=0304,display=Patient bed. After room- most general person location designation. User-defined Table 0304 - Bed is used as the HL7 identifier for the user-defined table of values for this component."`
	Facility            *HD     `hl7:"4,display=Subject to site interpretation but generally describes the highest level physical designation of an institution- medical center or enterprise. Most general person location designation."`
	LocationStatus      IS      `hl7:"5,table=0306,display=Location (e.g.- Bed) status. User-defined Table 0306 - Location status is used as the HL7 identifier for the user-defined table of values for this component."`
	PersonLocationType  IS      `hl7:"6,table=0305,display=Person location type is the categorization of the persons location defined by facility- building- floor- point of care- room or bed. Although not a required field- when used- it may be the only populated field. Usually includes values such as nursing unit- department- clinic- SNF- physicians office . User-defined Table 0305 - Person location type is used as the HL7 identifier for the user-defined table of values for this component."`
	Building            IS      `hl7:"7,table=0307,display=After facility- most general person location designation. User-defined Table 0307 - Building is used as the HL7 identifier for the user-defined table of values for this component."`
	Floor               IS      `hl7:"8,table=0308,display=After building- most general person location designation. User-defined Table 0308 - Floor is used as the HL7 identifier for the user-defined table of values for this component."`
	LocationDescription ST      `hl7:"9,display=A free text description of the location."`
}

// Practitioner ID Numbers
type PLN struct {
	HL7                      HL7Name `hl7:",name=PLN,len=0,type=d"`
	IDNumber                 ST      `hl7:"1,display=ID Number"`
	TypeOfIDNumber           IS      `hl7:"2,table=0338,display=Type Of ID Number"`
	StateOtherQualifyingInfo ST      `hl7:"3,display=State/other Qualifying Info"`
	ExpirationDate           DT      `hl7:"4,format=YMD,display=Expiration Date"`
}

// Performing Person Time Stamp
//
// This data type is the equivalent of an XCN data type joined with a TS data type. However, since HL7 does not support subcomponents
// in Version 2.3, the XCN data type has been flattened.
type PPN struct {
	HL7                                         HL7Name `hl7:",name=PPN,len=250,type=d"`
	IDNumber                                    ST      `hl7:"1,display=Coded ID according to a user-defined table- defined by the 8th component. If the first component is present- either the source table or the assigning authority must be valued."`
	FamilyName                                  FN      `hl7:"2,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.9.19."`
	GivenName                                   ST      `hl7:"3,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"5,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"7,table=0360,display=Used to specify an educational degree (e.g.- MD). Refer to User-defined Table 0360 - Degree for suggested values."`
	SourceTable                                 IS      `hl7:"8,table=0297,display=User-defined Table 0297 - CN IDsource is used as the HL7 identifier for the user-defined table of values for this component. Used to delineate the first component."`
	AssigningAuthority                          *HD     `hl7:"9,display=The assigning authority is a unique identifier of the system (or organization or agency of department) that creates the data. It is a HD data type. User-defined Table 0363 - Assigning authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component- <namespace ID>."`
	NameTypeCode                                ID      `hl7:"10,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name type for valid values (see Section 2.9.55- XPN - extended person name)."`
	IdentifierCheckDigit                        ST      `hl7:"11,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CodeIdentifyingTheCheckDigitSchemeEmployed  ID      `hl7:"12,table=0061,display=Refer to HL7 Table 0061 - Check digit scheme for valid values."`
	IdentifierTypeCode                          IS      `hl7:"13,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the Assigning authority component. Refer to HL7 Table 0203 - Identifier typefor suggested values."`
	AssigningFacility                           *HD     `hl7:"14,display=The place or location identifier where the identifier was first assigned to the patient. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	DateTimeActionPerformed                     TS      `hl7:"15,format=YMDHMS,display=This component describes when the activity was performed."`
	NameRepresentationCode                      ID      `hl7:"16,table=0465,display=Different name/address types and representations of the same name/address should be described by repeating of this field- with different values of the Name/Address Type and/or Name/Address Representation component."`
	NameContext                                 *CE     `hl7:"17,display=Subcomponents of name context: <identifier (ST)> & <text (ST)> & <name of coding system (IS)> & <alternate identifier (ID)> & <alternate text (ST)> & <name of alternate coding system (IS)>"`
	NameValidityRange                           *DR     `hl7:"18,display=This component contains the start and end date/times which define the period during which this name was valid. See section 2.9.14- DR - date/time range for description of subcomponents."`
	NameAssemblyOrder                           ID      `hl7:"19,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 Table 0444 - Name assembly order for valid values."`
}

// Parent Result Link
type PRL struct {
	HL7                                     HL7Name `hl7:",name=PRL,len=0,type=d"`
	OBX3ObservationIdentifierOfParentResult *CE     `hl7:"1,display=OBX-3 Observation Identifier Of Parent Result"`
	OBX4SubIDOfParentResult                 ST      `hl7:"2,display=OBX-4 Sub-ID Of Parent Result"`
	PartOfOBX5ObservationResultFromParent   TX      `hl7:"3,display=Part Of OBX-5 Observation Result From Parent"`
}

// Processing Type
//
// This data type indicates whether to process a message as defined in HL7 Application (level 7) Processing rules.
type PT struct {
	HL7            HL7Name `hl7:",name=PT,len=0,type=d"`
	ProcessingID   ID      `hl7:"1,table=0103,display=A value that defines whether the message is part of a production- training- or debugging system. Refer to HL7 Table 0103 - Processing ID for valid values."`
	ProcessingMode ID      `hl7:"2,table=0207,display=A value that defines whether the message is part of an archival process or an initial load. Refer to HL7 Table 0207 - Processing mode for valid values."`
}

// Policy Type
type PTA struct {
	HL7         HL7Name `hl7:",name=PTA,len=0,type=d"`
	PolicyType  IS      `hl7:"1,table=0147,display=Policy Type"`
	AmountClass IS      `hl7:"2,table=0193,display=Amount Class"`
	Amount      NM      `hl7:"3,display=Amount"`
}

// Query Input Parameter List
//
// This field contains the list of parameter names and values to be passed to the stored procedure.
//
// Example:
// |@PID.5.1^EVANS|
type QIP struct {
	HL7                HL7Name `hl7:",name=QIP,len=0,type=d"`
	SegmentFieldName   ST      `hl7:"1,display=This component contains the segment field name."`
	Value1Value2Value3 ST      `hl7:"2,display=This component contains the field value or values in the form value1& value2 & value3"`
}

// Query Selection Criteria
//
// This field indicates the conditions that qualify the rows to be returned in the query response. (This field conveys the
// same information as the WHERE clause in the corresponding SQL expression of the query, but is formatted differently.)
//
// Example:
// |@PID.5.1^EQ^EVANS|
type QSC struct {
	HL7                   HL7Name `hl7:",name=QSC,len=0,type=d"`
	SegmentFieldName      ST      `hl7:"1,display=The name of the field that is participating as a qualifier (usually the key). Refer to Section 2.9.33.1- Segment field name (ST)- for segment field name conventions."`
	RelationalOperator    ID      `hl7:"2,table=0209,display=Refer to HL7 Table 0209 - Relational operator for valid values."`
	Value                 ST      `hl7:"3,display=The value to which the field will be compared."`
	RelationalConjunction ID      `hl7:"4,table=0210,display=Refer to HL7 Table 0210 - Relational conjunction for valid values. The relational conjunction is defined as follows: If more than one comparison is to be made to select qualifying rows- a conjunction relates this repetition of the field to the next."`
}

// Row Column Definition
//
// Definition: This specifies the format of a column in terms of a segment field name, a data type, and a maximum length. It consists
// of three components:
//
// Example: This defines a column containing the value of the “last name” component of PID-5, expressed as a ST data type with
// a maximum width of 20.
//
// |@PID.5.1^ST^20|
type RCD struct {
	HL7                HL7Name `hl7:",name=RCD,len=0,type=d"`
	SegmentFieldName   ST      `hl7:"1,display=The HL7 segment field name- which identifies the field occupying the column. (Refer to Section 2.9.33.1- Segment field name (ST)- for segment field name definition conventions.)"`
	Hl7DataType        ST      `hl7:"2,table=0440,display=The two or three character HL7 data type. Refer to HL7 Table 0440 - Data Types for valid values."`
	MaximumColumnWidth NM      `hl7:"3,display=The maximum width of the column- as dictated by the responding system. (This may vary from the HL7-defined maximum field length.)"`
}

// Reference Range
type RFR struct {
	HL7               HL7Name `hl7:",name=RFR,len=0,type=d"`
	NumericRange      *NR     `hl7:"1,display=Numeric Range"`
	AdministrativeSex IS      `hl7:"2,table=0007,display=Administrative Sex"`
	AgeRange          *NR     `hl7:"3,display=Age Range"`
	GestationalRange  *NR     `hl7:"4,display=Gestational Range"`
	Species           TX      `hl7:"5,display=Species"`
	RaceSubspecies    ST      `hl7:"6,display=Race/subspecies"`
	Conditions        TX      `hl7:"7,display=Conditions"`
}

// Repeat Interval
//
// This field contains the interval between repeating appointments. The default setting indicates that the appointment
// should occur once, when the component is not valued. The definition of this field is equivalent to the definition of the
// Interval component of the Quantity/Timing field given in Chapter 4, Section 4.4.2 Interval component (CM).
type RI struct {
	HL7                  HL7Name `hl7:",name=RI,len=0,type=d"`
	RepeatPattern        IS      `hl7:"1,table=0335,display=The repeating frequency with which the treatment is to be administered.  It is similar to the frequency and SIG code tables used in order entry systems. "`
	ExplicitTimeInterval ST      `hl7:"2,display=This field explicitly lists the actual times referenced by the code in the first subcomponent- in the following format: HHMM-HHMM-HHMM-.…  This second subcomponent will be used to clarify the first subcomponent in cases where the actual administration times vary within an institution.  If the time of the order spans more than a single day- this new subcomponent is only practical if the same times of administration occur for each day of the order.  If the actual start time of the order (as given by the fourth subcomponent of the quantity/timing field) is after the first explicit time- the first administration is taken to be the first explicit time after the start time.  In the case where the patient moves to a location having a different set of explicit times- the existing order may be updated with a new quantity/timing field showing the changed explicit times."`
}

// Room Coverage
type RMC struct {
	HL7            HL7Name `hl7:",name=RMC,len=0,type=d"`
	RoomType       IS      `hl7:"1,table=0145,display=Room Type"`
	AmountType     IS      `hl7:"2,table=0146,display=Amount Type"`
	CoverageAmount NM      `hl7:"3,display=Coverage Amount"`
}

// Street Address
//
// Note: Appears ONLY in the XAD data type
type SAD struct {
	HL7                    HL7Name `hl7:",name=SAD,len=0,type=d"`
	StreetOrMailingAddress ST      `hl7:"1,display=The street or mailing address of a person or institution. When referencing an institution- this first component is used to specify the institution name. When used in connection with a person- this component specifies the first line of the address."`
	StreetName             ST      `hl7:"2,display=Street Name"`
	DwellingNumber         ST      `hl7:"3,display=Dwelling Number"`
}

// Scheduling Class Value Pair
//
// This data type is used to communicate parameters and preferences to the filler application regarding the selection of
// an appropriate time slot, resource, location, or filler override criterion for an appointment.
type SCV struct {
	HL7            HL7Name `hl7:",name=SCV,len=0,type=d"`
	ParameterClass IS      `hl7:"1,table=0294,display=The first component of this field is a code identifying the parameter or preference being passed to the filler application. Refer to User-defined table 0294Time selection criteria parameter class codes for suggested values."`
	ParameterValue ST      `hl7:"2,display=The second component is the actual data value for that parameter."`
}

// Sequence ID
//
// A non-negative integer in the form of a NM field. The uses of this data type are defined in the chapters defining the segments
// and messages in which it appears.
type SI = string

// Structured Numeric
//
// The structured numeric data type is used to unambiguously express numeric clinical results along with qualifications.
// This enables receiving systems to store the components separately, and facilitates the use of numeric database queries.
// The corresponding sets of values indicated with the <comparator> and <separator/suffix> components are intended to
// be the authoritative and complete set of values. If additional values are needed for the <comparator> and <separator/suffix>
// components, they should be submitted to HL7 for inclusion in the Standard.
//
// If <num1> and <num2> are both non-null, then the separator/suffix must be non-null.  If the separator is “”, the data range
// is inclusive; e.g., <num1> - <num2> defines a range of numbers x, such that:  <num1> <=x<= <num2>.
type SN struct {
	HL7             HL7Name `hl7:",name=SN,len=0,type=d"`
	Comparator      ST      `hl7:"1,display=Defined as greater than- less than- greater than or equal- less than or equal- equal- and not equal- respectively (: > or < or >: or <: or : or <>"`
	Num1            NM      `hl7:"2,display=A number."`
	SeparatorSuffix ST      `hl7:"3,display=- or + or / or . or :"`
	Num2            NM      `hl7:"4,display=A number or null depending on the measurement."`
}

// Specialty
type SPD struct {
	HL7                 HL7Name `hl7:",name=SPD,len=0,type=d"`
	SpecialtyName       ST      `hl7:"1,display=Specialty Name"`
	GoverningBoard      ST      `hl7:"2,display=Governing Board"`
	EligibleOrCertified ID      `hl7:"3,table=0337,display=Eligible Or Certified"`
	DateOfCertification DT      `hl7:"4,format=YMD,display=Date Of Certification"`
}

// Specimen Source
type SPS struct {
	HL7                          HL7Name `hl7:",name=SPS,len=0,type=d"`
	SpecimenSourceNameOrCode     *CE     `hl7:"1,table=0070,display=The first component contains the specimen source name or code (as a CE data type component).  (Even in the case of observations whose name implies the source- a source may be required- e.g.- blood culture-heart blood.)  Refer to HL7 Table 0070 - Specimen source codes for valid entries."`
	Additives                    TX      `hl7:"2,display=The second component should include free text additives to the specimen such as Heparin- EDTA- or Oxlate- when applicable."`
	Freetext                     TX      `hl7:"3,display=The third is a free text component describing the method of collection when that information is a part of the order.  When the method of collection is logically an observation result- it should be included as a result segment."`
	BodySite                     *CE     `hl7:"4,table=0163,display=The fourth component specifies the body site from which the specimen was obtained- and the fifth is the site modifier.  For example- the site could be antecubital fossa- and the site modifier “right.”  The components of the CE fields become subcomponents.  Refer to HL7 Table 0163 - Body site for valid entries."`
	SiteModifier                 *CE     `hl7:"5,display=The fifth component indicates whether the specimen is frozen as part of the collection method.  Suggested values are F (Frozen); R (Refrigerated).  If the component is blank- the specimen is assumed to be at room temperature."`
	CollectionModifierMethodCode *CE     `hl7:"6,display=Collection Modifier Method Code"`
	SpecimenRole                 *CE     `hl7:"7,table=0369,display=The 7th component indicates the role of the sample.  Refer to User-defined Table 0369 – Specimen Role for suggested values.  Each of these values is normally identifiable by the systems and its components and can influence processing and data management related to the specimen."`
}

// Sort Order
//
// Specifies those parameters by which the response will be sorted and by what method.
type SRT struct {
	HL7         HL7Name `hl7:",name=SRT,len=0,type=d"`
	SortByField ST      `hl7:"1,display=Identifies the field by which the response will be sorted. In a tabular response - this will be the column name to sort by. In the Segment Pattern and the Display Response- this will be the segment field name to sort by. (see QIP in Section 2.9.33.1- Segment field name (ST) for segment field name definition.)"`
	Sequencing  ID      `hl7:"2,table=0397,display=Identifies how the field or parameter will be sorted; and- if sorted- whether the sort will be case sensitive (the default) or not. Refer to HL7 Table 0397 - Sequencingfor valid values"`
}

// String Data
//
// String data is left justified with trailing blanks optional.  Any displayable (printable) ACSII characters (hexadecimal
// values between 20 and 7E, inclusive, or ASCII decimal values between 32 and 126), except the defined escape characters
// and defined delimiter characters.
//
// Example:
// |almost any data at all|
//
// Usage note: The ST data type is intended for short strings (e.g., less than 200 characters).  For longer strings the TX or
// FT data types should be used (see Sections 2.9.48, “TX - text data” or 2.9.20, “FT - formatted text data”).
type ST = string

// Time
//
// In prior versions of HL7, this data type was always specified to be in the format HHMM[SS[.SSSS]][+/-ZZZZ] using a 24 hour
// clock notation. In the current and future versions, the precision of a time may be expressed by limiting the number of digits
// used with the format specification as shown above. By site-specific agreement, HHMM[SS[.SSSS]][+/-ZZZZ] may be used
// where backward compatibility must be maintained.
//
// Format: HH[MM[SS[.S[S[S[S]]]]]][+/-ZZZZ]
type TM = time.Time

// Telephone Number
//
// # For use in the United States and conforming countries, the telephone number is always in the form
//
// Format:  [NN] [(999)]999-9999[X99999][B99999][C any text]
//
// Note: Replaced by XTN data type as of v 2.3
type TN = string

// Timing Quantity
//
// Quantity/timing (ORC-7, OBR-27) provides a means of specifying when the service described by the order segment is to be
// performed and how frequently.  It is a complex multicomponent field that can have repeats; i.e., more than one quantity/timing
// specification, separated by repeat delimiters, may appear. It is a distinct data type (see Section 2.8.41, “TQ - timing
// quantity”).  The components of a single quantity/timing specification are described in Sections 4.3.1, “Quantity component
// (CQ),” through 4.3.12, “Total occurrences component (NM).”
type TQ struct {
	HL7                  HL7Name `hl7:",name=TQ,len=0,type=d"`
	Quantity             *CQ     `hl7:"1,display=This field specifies the quantity of the service that should be provided at each service interval. For example- if two blood cultures are to be obtained every 4 hours- the quantity would be 2.  If three units of blood are to be typed and cross-matched- the quantity would be 3.  The default value is 1.  When units are required- they can be added- specified by a subcomponent delimiter.  Note: The component delimiter in this CQ is demoted to a subcomponent delimiter."`
	Interval             *RI     `hl7:"2,display=This field determines the interval between repeated services.  The default is one time only- the first subcomponent is the repeat pattern- and the second subcomponent is the explicit time at which pattern is to be executed.  Note: The component delimiter in this CQ is demoted to a subcomponent delimiter."`
	Duration             ST      `hl7:"3,display=This field indicates how long the service should continue after it is started.  The default is INDEF (do indefinitely). "`
	StartDateTime        TS      `hl7:"4,format=YMDHMS,display=This field may be specified by the orderer- in which case it indicates the earliest date/time at which the services should be started.  In many cases- however- the start date/time will be implied or will be defined by other fields in the order record (e.g.- urgency - STAT).  In such a case- this field will be empty."`
	EndDateTime          TS      `hl7:"5,format=YMDHMS,display=When filled in by the requester of the service- this field should contain the latest date/time that the service should be performed.  If it has not been performed by the specified time- it should not be performed at all.  The requester may not always fill in this value- yet the filling service may fill it in on the basis of the instruction it receives and the actual start time."`
	Priority             ST      `hl7:"6,display= This field describes the urgency of the request."`
	Condition            ST      `hl7:"7,display=This is a free text field that describes the conditions under which the drug is to be given.  For example- PRN pain- or to keep blood pressure below 110.  The presence of text in this field should be taken to mean that human review is needed to determine the how and/or when this drug should be given."`
	Text                 TX      `hl7:"8,display=This field is a full text version of the instruction (optional)."`
	ConjunctionComponent ID      `hl7:"9,table=0472,display=This non-null component indicates that a second timing specification is to follow using the repeat delimiter.  This field can take three values as shown in HL7 table 0472 - TQ Conjunction ID."`
	OrderSequencing      *OSD    `hl7:"10,display=There are many situations- such as the creation of an order for a group of intravenous (IV) solutions- where the sequence of the individual intravenous solutions (each a service in itself) needs to be specified- e.g.- hyperalimentation with multi-vitamins in every third bottle."`
	OccurrenceDuration   *CE     `hl7:"11,display=This field contains the duration for a single performance of a service- e.g.- whirlpool twenty minutes three times per day for three days. It is optional within TQ and does not repeat.  Note: The component delimiter in this CQ is demoted to a subcomponent delimiter."`
	TotalOccurences      NM      `hl7:"12,display=This field contains the total number of occurrences of a service that should result from this order.  It is optional within TQ and does not repeat.  If both the end date/time and the total occurrences are valued and the occurrences would extend beyond the end date/time- then the end date/time takes precedence.  Otherwise the number of occurrences takes precedence."`
}

// Time Stamp
//
// Contains the exact time of an event, including the date and time. The date portion of a time stamp follows the rules of a date
// field and the time portion follows the rules of a time field. The time zone (+/-ZZZZ) is represented as +/-HHMM offset from
// UTC (formerly Greenwich Mean Time (GMT)), where +0000 or -0000 both represent UTC (without offset). The specific data
// representations used in the HL7 encoding rules are compatible with ISO 8824-1987(E).
//
// Format:  YYYY[MM[DD[HHMM[SS[.S[S[S[S]]]]]]]][+/-ZZZZ]^<degree of precision>
//
// Note:  The time zone [+/-ZZZZ], when used, is restricted to legally-defined time zones and is represented in HHMM format.
//
// By site-specific agreement, YYYYMMDD[HHMM[SS[.S[S[S[S]]]]]][+/-ZZZZ]^<degree of precision> may be used where backward
// compatibility must be maintained.
type TS = time.Time

// Text Data
//
// String data meant for user display (on a terminal or printer).  Such data would not necessarily be left justified since leading
// spaces may contribute greatly to the clarity of the presentation to the user.  Because this type of data is intended for display,
// it may contain certain escape character sequences designed to control the display.  Escape sequence formatting is defined
// later in this chapter in Section 2.10 “Use of escape sequences in text fields.”  Leading spaces should be included.  Trailing
// spaces should be removed.
//
// Since TX data is intended for display purposes, the repeat delimiter, when used with a TX data field, implies a series of
// repeating lines to be displayed on a printer or terminal.  Therefore, the repeat delimiters are regarded as paragraph terminators
// or hard carriage returns (e.g., they would display as though a CR/LF were inserted in the text (DOS type system) or as though
// a LF were inserted into the text (UNIX style system)).
//
// Example:
// |  leading spaces are allowed.|
type TX = string

// Value Code And Amount
type UVC struct {
	HL7         HL7Name `hl7:",name=UVC,len=0,type=d"`
	ValueCode   IS      `hl7:"1,table=0153,display=Value Code"`
	ValueAmount NM      `hl7:"2,display=Value Amount"`
}

// Variable Datatype
type VARIES any

// Visiting Hours
//
// This data type contains the hours when a patient location is open for visiting. Refer to HL7 Table 0267 - Days of the week for
// valid values for the first two components.
type VH struct {
	HL7            HL7Name `hl7:",name=VH,len=0,type=d"`
	StartDayRange  ID      `hl7:"1,table=0267,display=Starting day of visiting hours range. See HL7 Table 0267 - Days of the week for valid values."`
	EndDayRange    ID      `hl7:"2,table=0267,display=Ending day of visiting hours range. Starting day of visiting hours range. See HL7 Table 0267 - Days of the week for valid values"`
	StartHourRange TM      `hl7:"3,format=HM,display=Starting hour on starting day of visiting hours range (see first component- 2.9.49.1- Start day range (ID))."`
	EndHourRange   TM      `hl7:"4,format=HM,display=Ending hour on ending day of visiting hours range (see second component- 2.9.49.2- End day range (ID))."`
}

// Version Identifier
type VID struct {
	HL7                      HL7Name `hl7:",name=VID,len=0,type=d"`
	VersionID                ID      `hl7:"1,table=0104,display=Used to identify the HL7 version. Refer to HL7 Table 0104 - Version ID for valid values."`
	InternationalizationCode *CE     `hl7:"2,table=0399,display=Used to identify the international affiliate country code. The values to be used are those of ISO 3166 -1:1977. The ISO 3166 table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code."`
	InternationalVersionID   *CE     `hl7:"3,display=This field component identifies international affiliates version; it is especially important when the international affiliate has more than a single local version associated with a single US version."`
}

// Value Qualifier
type VR struct {
	HL7                HL7Name `hl7:",name=VR,len=0,type=d"`
	FirstDataCodeValue ST      `hl7:"1,display=First Data Code Value"`
	LastDataCodeValue  ST      `hl7:"2,display=Last Data Code Value"`
}

// Extended Address
//
// Note: Replaces the AD data type as of v 2.3.
//
// Example of usage for US:
// |1234 Easy St.^Ste. 123^San Francisco^CA^95123^USA^B^^SF^|
//
// This would be formatted for postal purposes as : 1234 Easy St. Ste. 123 San Francisco CA 95123
type XAD struct {
	HL7                        HL7Name `hl7:",name=XAD,len=250,type=d"`
	StreetAddress              *SAD    `hl7:"1,table=Street,display=See section 2.9.38- SAD - street address for description of components."`
	OtherDesignation           ST      `hl7:"2,display=Second line of address. In US usage- it qualifies address. Examples: Suite 555 or Fourth Floor. When referencing an institution- this component specifies the street address."`
	City                       ST      `hl7:"3,table=City,display=This may be the name of the city- or district or place depending upon the national convention for formatting addresses for postal usage."`
	StateOrProvince            ST      `hl7:"4,table=State,display=State or province should be represented by the official postal service codes for that country."`
	ZipOrPostalCode            ST      `hl7:"5,table=ZipCode,display=Zip or postal codes should be represented by the official codes for that country. In the US- the zip code takes the form 99999[-9999]- while the Canadian postal code takes the form A9A9A9- and the Australian Postcode takes the form 9999"`
	Country                    ID      `hl7:"6,table=0399,display=Defines the country of the address. ISO 3166 provides a list of country codes that may be used. The ISO 3166 table has three separate forms of the country code: HL7 specifies that the 3-character (alphabetic) form be used for the country code . HL7 Table 0399 - Country code is defined to contain these 3-character codes."`
	AddressType                ID      `hl7:"7,table=0190,display=Address type is optional and defined by HL7 Table 0190 - Address type."`
	OtherGeographicDesignation ST      `hl7:"8,display=Other geographic designation includes county- bioregion- SMSA- etc."`
	CountyParishCode           IS      `hl7:"9,table=0289,display=A code that represents the county in which the specified address resides . User-defined Table 0289 - County/parish is used as the HL7 identifier for the user-defined table of values for this component. When this component is used to represent the county (or parish)- component 8 <other geographic designation> should not duplicate it (i.e.- the use of <other geographic designation> to represent the county is allowed only for the purpose of backward compatibility- and should be discouraged in this and future versions of HL7)."`
	CensusTract                IS      `hl7:"10,table=0288,display=A code that represents the census tract in which the specified address resides . User-defined Table 0288 - Census tract is used as the HL7 identifier for the user-defined table of values for this component."`
	AddressRepresentationCode  ID      `hl7:"11,table=0465,display=Different <name/address types> and representations of the same name/address should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
	AddressValidityRange       *DR     `hl7:"12,display=This component contains the start and end date/times which define the period in which this address was valid"`
}

// Extended Composite ID Number And Name For Persons
//
// This data type is used extensively appearing in the PV1, ORC, RXO, RXE, OBR and SCH segments , as well as others, where there
// is a need to specify the ID number and name of a person.
//
// Note: Replaces CN data type as of v 2.3.
type XCN struct {
	HL7                                         HL7Name `hl7:",name=XCN,len=250,type=d"`
	IDNumber                                    ST      `hl7:"1,display=This string refers to the coded ID according to a user-defined table- defined by the 9th component. If the first component is present- either the source table or the assigning authority must be valued."`
	FamilyName                                  FN      `hl7:"2,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.9.19-  FN - family name."`
	GivenName                                   ST      `hl7:"3,table=FirstName,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"4,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"5,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"6,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"7,table=0360,display=Used to specify an educational degree (e.g.- MD). Refer to User-defined Table 0360 - Degree for suggested values."`
	SourceTable                                 IS      `hl7:"8,table=0297,display=User-defined Table 0297 - CN ID source is used as the HL7 identifier for the user-defined table of values for this component. Used to delineate the first component."`
	AssigningAuthority                          *HD     `hl7:"9,display=The assigning authority is a unique identifier of the system (or organization or agency of department) that creates the data. User-defined Table 0363 - Assigning authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component- <namespace ID>."`
	NameTypeCode                                ID      `hl7:"10,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name type for valid values (see Section 2.9.54.7- Name type code (ID))."`
	IdentifierCheckDigit                        ST      `hl7:"11,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CodeIdentifyingTheCheckDigitSchemeEmployed  ID      `hl7:"12,table=0061,display=Refer to HL7 Table 0061 - Check digit scheme for valid values."`
	IdentifierTypeCode                          IS      `hl7:"13,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the <assigning authority> component. Refer to HL7 Table 0203 - Identifier type for suggested values."`
	AssigningFacility                           *HD     `hl7:"14,display=The place or location identifier where the identifier was first assigned to the person. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	NameRepresentationCode                      ID      `hl7:"15,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
	NameContext                                 *CE     `hl7:"16,table=0448,display=This component is used to designate the context in which a name is used. The main use case is in Australian healthcare for indigenous patients who prefer to use different names when attending different healthcare institutions. Another use case occurs in the US where health practitioners can be licensed under slightly different names and the reporting of the correct name is vital for administrative purposes. Refer to User-defined Table 0448 - Name context for suggested values."`
	NameValidityRange                           *DR     `hl7:"17,display=This component contains the start and end date/times that define the period during which this name was valid. See section 2.9.14- DR - date/time range for description of subcomponents."`
	NameAssemblyOrder                           ID      `hl7:"18,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 Table 0444 - Name assembly orde r for valid values"`
}

// Extended Composite Name And Identification Number For Organizations
//
// This data type is used in fields (e.g., PV2-23, NK1-13, PD1-3, OBR-44) to specify the name and ID number of an organization.
type XON struct {
	HL7                                        HL7Name `hl7:",name=XON,len=250,type=d"`
	OrganizationName                           ST      `hl7:"1,display=The name of the specified organization."`
	OrganizationNameTypeCode                   IS      `hl7:"2,table=0204,display=A code that represents the type of name i.e.- legal name- display name. Refer to User-defined Table 0204 - Organizational name type for suggested values."`
	IDNumber                                   NM      `hl7:"3,display=Id Number"`
	CheckDigit                                 ST      `hl7:"4,display=The check digit in this data type is not an add-on produced by the message processor. It is the check digit that is part of the identifying number used in the sending application. If the sending application does not include a self-generated check digit in the identifying number- this component should be valued null."`
	CodeIdentifyingTheCheckDigitSchemeEmployed ID      `hl7:"5,table=0061,display=The check digit scheme codes are defined in HL7 Table 0061 - Check digit scheme."`
	AssigningAuthority                         *HD     `hl7:"6,display=The assigning authority is a unique identifier of the system (or organization or agency or department) that creates the data. Assigning authorities are unique across a given HL7 implementation. User-defined Table 0363 - Assigning authority is used as the HL7 identifier for the user-defined table of values for the first sub-component of the HD component <namespace ID>."`
	IdentifierTypeCode                         IS      `hl7:"7,table=0203,display=A code corresponding to the type of identifier. In some cases- this code may be used as a qualifier to the Assigning authority component. Refer to HL7 Table 0203 - Identifier typefor suggested values."`
	AssigningFacilityID                        *HD     `hl7:"8,display=The place or location identifier where the identifier was first assigned to the person. This component is not an inherent part of the identifier but rather part of the history of the identifier: as part of this data type- its existence is a convenience for certain intercommunicating systems."`
	NameRepresentationCode                     ID      `hl7:"9,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
}

// Extended Person Name
//
// Note: Replaces PN data type as of v 2.3.
//
// Example:
// |Smith^John^J^III^DR^PHD^L|
type XPN struct {
	HL7                                         HL7Name `hl7:",name=XPN,len=0,type=d"`
	FamilyName                                  FN      `hl7:"1,display=This component allows full specification of the surname of a person. Where appropriate- it differentiates the person's own surname from that of the person's partner or spouse- in cases where the person's name may contain elements from either name. It also permits messages to distinguish the surname prefix (such as 'van' or 'de') from the surname root. See section 2.9.19- FN - family name."`
	GivenName                                   ST      `hl7:"2,table=FirstName,display=First name."`
	SecondAndFurtherGivenNamesOrInitialsThereof ST      `hl7:"3,display=Multiple middle names may be included by separating them with spaces."`
	Suffix                                      ST      `hl7:"4,display=Used to specify a name suffix (e.g.- Jr. or III)."`
	Prefix                                      ST      `hl7:"5,display=Used to specify a name prefix (e.g.- Dr.)."`
	Degree                                      IS      `hl7:"6,table=0360,display=Used to specify an educational degree (e.g.- MD). Refer to User-defined Table 0360 - Degree for suggested values."`
	NameTypeCode                                ID      `hl7:"7,table=0200,display=A code that represents the type of name. Refer to HL7 Table 0200 - Name type for valid values."`
	NameRepresentationCode                      ID      `hl7:"8,table=0465,display=Different <name/address types> and representations of the same <name/address> should be described by repeating of this field- with different values of the <name/address type> and/or <name/address representation> component."`
	NameContext                                 *CE     `hl7:"9,table=0448,display=Subcomponents of name context: <identifier (ID)> & <text (ST)> & <name of coding system (IS)> & <alternate identifier (ID)> & <alternate text (ST)> & <name of alternate coding system (IS)>"`
	NameValidityRange                           *DR     `hl7:"10,display=This component contains the start and end date/times which define the period during which this name was valid. See section 2.9.14- DR - date/time range for description of subcomponents."`
	NameAssemblyOrder                           ID      `hl7:"11,table=0444,display=A code that represents the preferred display order of the components of this person name. Refer to HL7 0444 - Name assembly order for valid values."`
}

// Extended Telecommunication Number
//
// Note: Replaces TN data type as of v 2.3
//
// Example:
// (415)555-3210^ORN^FX^
type XTN struct {
	HL7                            HL7Name `hl7:",name=XTN,len=250,type=d"`
	TelephoneNumber                TN      `hl7:"1,table=PhoneNumber,display=Defined as the TN data type (see Section 2.9.45- TN - telephone number)- except that the length of the country access code has been increased to three."`
	TelecommunicationUseCode       ID      `hl7:"2,table=0201,display=A code that represents a specific use of a telecommunicationnumber. Refer to HL7 Table 0201 - Telecommunication use code for valid values."`
	TelecommunicationEquipmentType ID      `hl7:"3,table=0202,display=A code that represents the type of telecommunicationequipment. Refer to HL7 Table 0202 - Telecommunication equipment type for valid values."`
	EmailAddress                   ST      `hl7:"4,display=Email Address"`
	CountryCode                    NM      `hl7:"5,display=Country Code"`
	AreaCityCode                   NM      `hl7:"6,display=Area/City Code"`
	PhoneNumber                    NM      `hl7:"7,display=Phone Number"`
	Extension                      NM      `hl7:"8,display=Extension"`
	AnyText                        ST      `hl7:"9,display=Any Text"`
}
