// Code generated by "hl7fetch -pkgdir h240 -root ./genjson -version 2.4"; DO NOT EDIT.

package h240

// General acknowledgment message
//
// The simple general acknowledgment (ACK) can be used where the application does not define a special application level
// acknowledgment message or where there has been an error that precludes application processing.  It is also used for accept
// level acknowledgments.  The details are described in Section 2.13.1, “Original and enhanced processing rules.”
//
// Note: For the general acknowledgment (ACK) message, the value of MSH-9-2-Trigger event is equal to the value of MSH-9-2-Trigger
// event in the query message being acknowledged.  The value of MSH-9-3-Message structure for the general acknowledgment
// message is always ACK.
type ACK struct {
	HL7 HL7Name `hl7:",name=ACK,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
}

// QueryResponse
type ADR_A19_QueryResponse struct {
	HL7       HL7Name             `hl7:",name=ADR_A19_QueryResponse,type=tg"`
	EVN       *EVN                `hl7:"7,display=Event Type"`
	PID       *PID                `hl7:"8,required,display=Patient identification"`
	PD1       *PD1                `hl7:"9,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"10,display=Role"`
	NK1       []NK1               `hl7:"11,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"12,required,display=Patient visit"`
	PV2       *PV2                `hl7:"13,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"14,display=Role"`
	DB1       []DB1               `hl7:"15,display=Disability"`
	OBX       []OBX               `hl7:"16,display=Observation/Result"`
	AL1       []AL1               `hl7:"17,display=Patient allergy information"`
	DG1       []DG1               `hl7:"18,display=Diagnosis"`
	DRG       *DRG                `hl7:"19,display=Diagnosis Related Group"`
	Procedure []ADR_A19_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"22,display=Guarantor"`
	Insurance []ADR_A19_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"27,display=Accident"`
	UB1       *UB1                `hl7:"28,display=UB82"`
	UB2       *UB2                `hl7:"29,display=UB92 Data"`
}

// Procedure
type ADR_A19_Procedure struct {
	HL7 HL7Name `hl7:",name=ADR_A19_Procedure,type=tg"`
	PR1 *PR1    `hl7:"20,required,display=Procedures"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Insurance
type ADR_A19_Insurance struct {
	HL7 HL7Name `hl7:",name=ADR_A19_Insurance,type=tg"`
	IN1 *IN1    `hl7:"23,required,display=Insurance"`
	IN2 *IN2    `hl7:"24,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"25,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"26,display=Role"`
}

// Patient query
//
// The following trigger event is served by QRY (a query from another system) and ADR (a response from an Patient Administration
// system.)
type ADR_A19 struct {
	HL7           HL7Name                 `hl7:",name=ADR_A19,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	MSA           *MSA                    `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"3,display=Error"`
	QAK           *QAK                    `hl7:"4,display=Query Acknowledgment"`
	QRD           *QRD                    `hl7:"5,required,display=Original-Style Query Definition"`
	QRF           *QRF                    `hl7:"6,display=Original Style Query Filter"`
	QueryResponse []ADR_A19_QueryResponse `hl7:",required,display=Query Response"`
	DSC           *DSC                    `hl7:"30,display=Continuation Pointer"`
}

// Procedure
type ADT_A01_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A01_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Admit/visit notification
//
// An A01 event is intended to be used for "Admitted" patients only.  An A01 event is sent as a result of a patient undergoing the
// admission process which assigns the patient to a bed.  It signals the beginning of a patient’s stay in a healthcare facility.
// Normally, this information is entered in the primary Patient Administration system and broadcast to the nursing units
// and ancillary systems.  It includes short stay and "John Doe" (e.g. patient name is unknown) admissions.
type ADT_A01 struct {
	HL7       HL7Name             `hl7:",name=ADT_A01,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A01_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
	PDA       *PDA                `hl7:"25,display=Patient death and autopsy"`
}

// Transfer a patient
//
// An A02 event is issued as a result of the patient changing his or her assigned physical location.
type ADT_A02 struct {
	HL7  HL7Name `hl7:",name=ADT_A02,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient identification"`
	PD1  *PD1    `hl7:"4,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"5,display=Role"`
	PV1  *PV1    `hl7:"6,required,display=Patient visit"`
	PV2  *PV2    `hl7:"7,display=Patient visit - additional information"`
	ROL2 []ROL   `hl7:"8,display=Role"`
	DB1  []DB1   `hl7:"9,display=Disability"`
	OBX  []OBX   `hl7:"10,display=Observation/Result"`
	PDA  *PDA    `hl7:"11,display=Patient death and autopsy"`
}

// Procedure
type ADT_A03_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A03_Procedure,type=tg"`
	PR1 *PR1    `hl7:"12,required,display=Procedures"`
	ROL []ROL   `hl7:"13,display=Role"`
}

// Discharge/end visit
//
// An A03 event signals the end of a patient’s stay in a healthcare facility.  It signals that the patient’s status has changed
// to "discharged" and that a discharge date has been recorded.  The patient is no longer in the facility.  The patient’s location
// prior to discharge should be entered in PV1-3 - Assigned Patient Location.
type ADT_A03 struct {
	HL7       HL7Name             `hl7:",name=ADT_A03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	PV1       *PV1                `hl7:"6,required,display=Patient visit"`
	PV2       *PV2                `hl7:"7,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"8,display=Role"`
	DB1       []DB1               `hl7:"9,display=Disability"`
	DG1       []DG1               `hl7:"10,display=Diagnosis"`
	DRG       *DRG                `hl7:"11,display=Diagnosis Related Group"`
	Procedure []ADT_A03_Procedure `hl7:",display=Procedure"`
	OBX       []OBX               `hl7:"14,display=Observation/Result"`
	PDA       *PDA                `hl7:"15,display=Patient death and autopsy"`
}

// Procedure
type ADT_A04_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A04_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A04_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Register a patient
//
// An A04 event signals that the patient has arrived or checked in as a one-time, or recurring outpatient, and is not assigned
// to a bed.  One example might be its use to signal the beginning of a visit to the Emergency Room (= Casualty, etc.).  Note that
// some systems refer to these events as outpatient registrations or emergency admissions.  PV1-44 - Admit Date/Time is used
// for the visit start date/time.
type ADT_A04 struct {
	HL7       HL7Name             `hl7:",name=ADT_A04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A04_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A04_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
	PDA       *PDA                `hl7:"25,display=Patient death and autopsy"`
}

// Procedure
type ADT_A05_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A05_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A05_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Pre-admit a patient
//
// An A05 event is sent when a patient undergoes the pre-admission process.  During this process, episoderelated data is collected
// in preparation for a patient’s visit or stay in a healthcare facility.  For example, a pre-admit may be performed prior to
// inpatient or outpatient surgery so that lab tests can be performed prior to the surgery.  This event can also be used to pre-register
// a non-admitted patient.
type ADT_A05 struct {
	HL7       HL7Name             `hl7:",name=ADT_A05,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A05_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A05_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
}

// Procedure
type ADT_A06_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A06_Procedure,type=tg"`
	PR1 *PR1    `hl7:"16,required,display=Procedures"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// Insurance
type ADT_A06_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A06_Insurance,type=tg"`
	IN1 *IN1    `hl7:"19,required,display=Insurance"`
	IN2 *IN2    `hl7:"20,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"21,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"22,display=Role"`
}

// Change an outpatient to an inpatient
//
// An A06 event is sent when a patient who was present for a non-admitted visit is being admitted after an evaluation of the seriousness
// of the patient’s condition.  This event changes a patient’s status from nonadmitted to admitted.  The new patient location
// should appear in PV1-3 - Assigned patient location, while the old patient location (if different) should appear in PV1-6
// - Prior patient location.  The new patient class should appear in PV1-2 - Patient class.
type ADT_A06 struct {
	HL7       HL7Name             `hl7:",name=ADT_A06,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	MRG       *MRG                `hl7:"6,display=Merge patient information"`
	NK1       []NK1               `hl7:"7,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"8,required,display=Patient visit"`
	PV2       *PV2                `hl7:"9,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"10,display=Role"`
	DB1       []DB1               `hl7:"11,display=Disability"`
	OBX       []OBX               `hl7:"12,display=Observation/Result"`
	AL1       []AL1               `hl7:"13,display=Patient allergy information"`
	DG1       []DG1               `hl7:"14,display=Diagnosis"`
	DRG       *DRG                `hl7:"15,display=Diagnosis Related Group"`
	Procedure []ADT_A06_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"18,display=Guarantor"`
	Insurance []ADT_A06_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"23,display=Accident"`
	UB1       *UB1                `hl7:"24,display=UB82"`
	UB2       *UB2                `hl7:"25,display=UB92 Data"`
}

// Procedure
type ADT_A07_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A07_Procedure,type=tg"`
	PR1 *PR1    `hl7:"16,required,display=Procedures"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// Insurance
type ADT_A07_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"19,required,display=Insurance"`
	IN2 *IN2    `hl7:"20,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"21,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"22,display=Role"`
}

// Change an inpatient to an outpatient
//
// An A07 event is sent when a patient who was admitted changes his/her status to "no longer admitted" but is still being seen
// for this episode of care.  This event changes a patient from an "admitted" to a "nonadmitted" status.  The new patient location
// should appear in PV1-3 - Assigned patient location, while the old patient location (if different) should appear in PV1-6
// - Prior patient location.
type ADT_A07 struct {
	HL7       HL7Name             `hl7:",name=ADT_A07,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	MRG       *MRG                `hl7:"6,display=Merge patient information"`
	NK1       []NK1               `hl7:"7,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"8,required,display=Patient visit"`
	PV2       *PV2                `hl7:"9,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"10,display=Role"`
	DB1       []DB1               `hl7:"11,display=Disability"`
	OBX       []OBX               `hl7:"12,display=Observation/Result"`
	AL1       []AL1               `hl7:"13,display=Patient allergy information"`
	DG1       []DG1               `hl7:"14,display=Diagnosis"`
	DRG       *DRG                `hl7:"15,display=Diagnosis Related Group"`
	Procedure []ADT_A07_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"18,display=Guarantor"`
	Insurance []ADT_A07_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"23,display=Accident"`
	UB1       *UB1                `hl7:"24,display=UB82"`
	UB2       *UB2                `hl7:"25,display=UB92 Data"`
}

// Procedure
type ADT_A08_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A08_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A08_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Update patient information
//
// This trigger event is used when any patient information has changed but when no other trigger event has occurred.  For example,
// an A08 event can be used to notify the receiving systems of a change of address or a name change.  We recommend that the A08 transaction
// be used to update fields that are not related to any of the other trigger events.  The A08 event can include information specific
// to an episode of care, but it can also be used for demographic information only.
type ADT_A08 struct {
	HL7       HL7Name             `hl7:",name=ADT_A08,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A08_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A08_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
	PDA       *PDA                `hl7:"25,display=Patient death and autopsy"`
}

// Patient departing - tracking
//
// The A09 and A10 - patient arriving-tracking events are used when there is a change in a patient’s physical location (inpatient
// or outpatient) and when this is NOT a change in the official census bed location, as in the case of an outpatient setting.
// There are three situations that qualify as non-census location changes:  (a) patient tracking, (b) the patient is in transit
// between locations for some time, (c) a notification of temporary location change.
//
// The DG1 segment remains in this message for backward compatibility only.
type ADT_A09 struct {
	HL7 HL7Name `hl7:",name=ADT_A09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Patient arriving - tracking
//
// The A10 event is sent when a patient arrives at a new location in the healthcare facility (inpatient or outpatient).  The
// A09 - patient departing-tracking and A10 events are used when there is a change in a patient’s physical location and when
// this is NOT a change in the official census bed location, as in the case of an outpatient setting.  There are three varieties
// of these non-census location changes involving three different kinds of notification:  (a) an unofficial notification
// of location change prior to the official notification of patient tracking, (b) the patient is in transit between locations
// for some time, (c) a notification of a temporary location change.
//
// The DG1 segment remains in this message for backward compatibility only.
type ADT_A10 struct {
	HL7 HL7Name `hl7:",name=ADT_A10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Cancel admit/visit notification
//
// For "admitted" patients, the A11 event is sent when an A01 (admit/visit notification) event is cancelled, either because
// of an erroneous entry of the A01 event, or because of a decision not to admit the patient after all.
//
// For "non-admitted" patients, the A11 event is sent when an A04 (register a patient) event is cancelled, either because
// of an erroneous entry of the A04 event, or because of a decision not to check the patient in for the visit after all.  To cancel
// an A05 (pre-admit a patient) event, use the A38 (cancel pre-admit), which is new for Version 2.3 of this Standard.
//
// The DG1 segment remains in this message for backward compatibility only.
type ADT_A11 struct {
	HL7 HL7Name `hl7:",name=ADT_A11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Cancel transfer
//
// The A12 event is sent when an A02 (transfer a patient) event is cancelled, either because of erroneous entry of the A02 event
// or because of a decision not to transfer the patient after all.  PV1-3 - assigned patient location must show the location
// of the patient prior to the original transfer.
//
// The DG1 segment remains in this message for backward compatibility only.
type ADT_A12 struct {
	HL7 HL7Name `hl7:",name=ADT_A12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 *DG1    `hl7:"9,display=Diagnosis"`
}

// Procedure
type ADT_A13_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A13_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A13_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A13_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Cancel discharge/end visit
//
// The A13 event is sent when an A03 (discharge/end visit) event is cancelled, either because of erroneous entry of the A03
// event or because of a decision not to discharge or end the visit of the patient after all. PV1-3 - assigned patient location
// should reflect the location of the patient after the cancellation has been processed.  Note that this location may be different
// from the patient’s location prior to the erroneous discharge.  Prior Location could be used to show the location of the patient
// prior to the erroneous discharge.
type ADT_A13 struct {
	HL7       HL7Name             `hl7:",name=ADT_A13,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A13_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A13_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
	PDA       *PDA                `hl7:"25,display=Patient death and autopsy"`
}

// Procedure
type ADT_A14_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A14_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A14_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A14_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Pending admit
//
// An A14 event notifies other systems of a planned admission, when there is a reservation or when patient admission is to occur
// imminently.  The A14 event is similar to a pre-admit, but without the implication that an account should be opened for the
// purposes of tests prior to admission.  It is used when advanced notification of an admit is required in order to prepare for
// the patient’s arrival.
type ADT_A14 struct {
	HL7       HL7Name             `hl7:",name=ADT_A14,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A14_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A14_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
}

// Pending transfer
//
// An A15 event notifies other systems of a plan to transfer a patient to a new location when the patient has not yet left the old
// location.  It is used when advanced notification of a transfer is required in order to prepare for the patient’s location
// change.  For example, this transaction could be sent so that staff will be on hand to move the patient or so that dietary services
// can route the next meal to the new location.
//
// The DG1 segment remains in this message for backward compatibility only.
type ADT_A15 struct {
	HL7  HL7Name `hl7:",name=ADT_A15,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient identification"`
	PD1  *PD1    `hl7:"4,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"5,display=Role"`
	PV1  *PV1    `hl7:"6,required,display=Patient visit"`
	PV2  *PV2    `hl7:"7,display=Patient visit - additional information"`
	ROL2 []ROL   `hl7:"8,display=Role"`
	DB1  []DB1   `hl7:"9,display=Disability"`
	OBX  []OBX   `hl7:"10,display=Observation/Result"`
	DG1  []DG1   `hl7:"11,display=Diagnosis"`
}

// Pending discharge
//
// An A16 event notifies other systems of a plan to discharge a patient when the patient has not yet left the healthcare facility.
// It is used when advanced notification of a discharge is required in order to prepare for the patient’s change in location.
// For example, it is used to notify the pharmacy of the possible need for discharge drugs or to notify psychotherapy of the
// possible need for post-discharge appointments.
type ADT_A16 struct {
	HL7  HL7Name `hl7:",name=ADT_A16,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient identification"`
	PD1  *PD1    `hl7:"4,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"5,display=Role"`
	PV1  *PV1    `hl7:"6,required,display=Patient visit"`
	PV2  *PV2    `hl7:"7,display=Patient visit - additional information"`
	ROL2 []ROL   `hl7:"8,display=Role"`
	DB1  []DB1   `hl7:"9,display=Disability"`
	OBX  []OBX   `hl7:"10,display=Observation/Result"`
	DG1  []DG1   `hl7:"11,display=Diagnosis"`
	DRG  *DRG    `hl7:"12,display=Diagnosis Related Group"`
}

// Swap patients
//
// The A17 is used when it is decided that two patients will exchange beds.  The patient ID and visit data are repeated for the
// two patients changing places.  See Section 3.6.1, "Swapping a patient," for a discussion of issues related to implementing
// this trigger event. When other important fields change, it is recommended that the A08 (update patient information) event
// be used in addition.
type ADT_A17 struct {
	HL7  HL7Name `hl7:",name=ADT_A17,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient identification"`
	PD1  *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"5,required,display=Patient visit"`
	PV2  *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1  []DB1   `hl7:"7,display=Disability"`
	OBX  []OBX   `hl7:"8,display=Observation/Result"`
	PID2 *PID    `hl7:"9,required,display=Patient identification"`
	PD12 *PD1    `hl7:"10,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"11,required,display=Patient visit"`
	PV22 *PV2    `hl7:"12,display=Patient visit - additional information"`
	DB12 []DB1   `hl7:"13,display=Disability"`
	OBX2 []OBX   `hl7:"14,display=Observation/Result"`
}

// Merge patient information
//
// Event A18 has been retained for backward compatibility.  The A18 event was used to merge current and previous patient identification
// numbers: PID-3 - patient identifier list, PID-2 - patient ID, PID-4 alternate patient ID-PID, and PID-18 - patient account
// number.  This procedure is required, for example, when a previous patient is registered under a new patient identification
// number because of an error, or because there was insufficient time to determine the actual patient identification number.
// The merge event occurs when a decision is made to combine the information under either the new or the old identifier(s).
// The PID segment contains the surviving patient ID information.  The MRG segment contains the non-surviving information.
//
// From V2.3.1 onwards events A40 (merge patient-patient identifier list), A41 (merge account-patient account number),
// and A42 (merge visit-visit number) should be utilized in place of the A18 event.
//
// This merge event is non-specific in that, as a result of the merge, several patient identifiers may or may not have changed.
// For sites requiring (or desiring) greater specificity with regard to this type of message, new events A40 (merge patient-patient
// identifier list), A41 (merge account-patient account number) and A42 (merge visit-visit number)) are now available
// as alternatives.
type ADT_A18 struct {
	HL7 HL7Name `hl7:",name=ADT_A18,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
}

// Bed status update
//
// Certain nursing/census applications need to be able to update the Patient Administration system’s bed status.
type ADT_A20 struct {
	HL7 HL7Name `hl7:",name=ADT_A20,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	NPU *NPU    `hl7:"3,required,display=Bed status update"`
}

// Patient goes on a "leave of absence"
//
// An A21 event is sent to notify systems that an admitted patient has left the healthcare institution temporarily.  It is used
// for systems in which a bed is still assigned to the patient, and it puts the current admitted patient activities on hold.
// For example, it is used to notify dietary services and laboratory systems when the patient goes home for the weekend.
type ADT_A21 struct {
	HL7 HL7Name `hl7:",name=ADT_A21,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Patient returns from a "leave of absence"
//
// An A22 event is sent to notify systems that an admitted patient has returned to the healthcare institution after a temporary
// "leave of absence."  It is used for systems in which a bed is still assigned to the patient, and it takes their current admitted
// patient activities off of "hold" status.  For example, it is used to notify dietary services and laboratory systems when
// the patient returns from a weekend trip to his/her home.
type ADT_A22 struct {
	HL7 HL7Name `hl7:",name=ADT_A22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Delete a patient record
//
// The A23 event is used to delete visit or episode-specific information from the patient record.  For example, it is used to
// remove old data from a database that cannot hold all historical patient visit data. When an event was entered erroneously,
// use one of the cancel transactions.  This event can be used to purge account-level data while retaining the person in the
// database.
type ADT_A23 struct {
	HL7 HL7Name `hl7:",name=ADT_A23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Link patient information
//
// The A24 event is used when the first PID segment needs to be linked to the second PID segment and when both patient identifiers
// identify the same patient.  Linking two or more patients does not require the actual merging of patient information; following
// a link event, the affected patient data records should remain distinct.  For example, this event could be used in a hospital
// network environment in which there are multiple campuses and in which records need to be linked.  For example, hospital
// A, hospital B, and hospital C would each keep their own records on a patient, but an A24 link event would be sent to a corporate-wide
// MPI to enable the coupling of ID information with the corporate ID number.  It is used for corporate data repositories, etc.
// This event is not meant to link mothers and babies since a field exists (PID-21 - mother’s identifier) for that purpose.
// See Section 3.6.3, "Patient record links," for a discussion of issues related to implementing patient link messages and
// MPI issues.
type ADT_A24 struct {
	HL7  HL7Name `hl7:",name=ADT_A24,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient identification"`
	PD1  *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"5,display=Patient visit"`
	DB1  []DB1   `hl7:"6,display=Disability"`
	PID2 *PID    `hl7:"7,required,display=Patient identification"`
	PD12 *PD1    `hl7:"8,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"9,display=Patient visit"`
	DB12 []DB1   `hl7:"10,display=Disability"`
}

// Cancel pending discharge
//
// The A25 event is sent when an A16 (pending discharge) event is cancelled, either because of erroneous entry of the A16 event
// or because of a decision not to discharge the patient after all.
type ADT_A25 struct {
	HL7 HL7Name `hl7:",name=ADT_A25,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Cancel pending transfer
//
// The A26 event is sent when an A15 (pending transfer) event is cancelled, either because of erroneous entry of the A15 event
// or because of a decision not to transfer the patient after all.
type ADT_A26 struct {
	HL7 HL7Name `hl7:",name=ADT_A26,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Cancel pending admit
//
// The A27 event is sent when an A14 (pending admit) event is canceled, either because of erroneous entry of the A14 event or
// because of a decision not to admit the patient after all.
type ADT_A27 struct {
	HL7 HL7Name `hl7:",name=ADT_A27,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Procedure
type ADT_A28_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A28_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A28_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A28_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Add person information
//
// The A28 event can be used to send everything that is known about a person.  For example, it can be sent to an ICU unit (in addition
// to the A02 (transfer a patient) event) when a patient is transferred to the ICU unit in order to backload all demographic
// information for the patient into the ICU system.  An A28 (add person information) or A31 (update person information) can
// also be used for backloading MPI information for the person, or for backloading person and historical information.
type ADT_A28 struct {
	HL7       HL7Name             `hl7:",name=ADT_A28,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A28_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A28_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
}

// Delete person information
//
// An A29 event can be used to delete all demographic information related to a given person.  This event "undoes" an A28 (add
// person information) event.  The information from the A28 event is deleted.  This event is used, for example, when adding
// the information was performed in error, or when another record already exists for the person, or when one wants to purge
// the person from the database.  When this event occurs, all visit and account level data for this person is also purged.
type ADT_A29 struct {
	HL7 HL7Name `hl7:",name=ADT_A29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Merge person information
//
// An A30 (merge person information) is intended for merging person records without merging patient identifiers.
//
// Event A30 has been retained for backward compatibility only.  An A30 event was used to merge person information on an MPI.
// From V 2.3.1 onwards, the A40 (merge patient-patient identifier list) events should be used to merge patient information
// for a current episode.  The "incorrect MRN" identified on the MRG segment (MRG-1 - prior patient identifier list) is to be
// merged with the "correct MRN" identified on the PID segment (PID-3 - patient identifier list).  The "incorrect MRN" then
// no longer exists.  All PID data associated with the "correct MRN" are treated as updated information.
type ADT_A30 struct {
	HL7 HL7Name `hl7:",name=ADT_A30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Procedure
type ADT_A31_Procedure struct {
	HL7 HL7Name `hl7:",name=ADT_A31_Procedure,type=tg"`
	PR1 *PR1    `hl7:"15,required,display=Procedures"`
	ROL []ROL   `hl7:"16,display=Role"`
}

// Insurance
type ADT_A31_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A31_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Update person information
//
// An A31 event can be used to update person information on an MPI.  It is similar to an A08 (update patient information) event,
// but an A08 (update patient information) event should be used to update patient information for a current episode.  An A28
// (add person information) or A31 can also be used for backloading MPI information for the person, or for backloading person
// and historical information.
type ADT_A31 struct {
	HL7       HL7Name             `hl7:",name=ADT_A31,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	ROL       []ROL               `hl7:"5,display=Role"`
	NK1       []NK1               `hl7:"6,display=Next of kin / associated parties"`
	PV1       *PV1                `hl7:"7,required,display=Patient visit"`
	PV2       *PV2                `hl7:"8,display=Patient visit - additional information"`
	ROL2      []ROL               `hl7:"9,display=Role"`
	DB1       []DB1               `hl7:"10,display=Disability"`
	OBX       []OBX               `hl7:"11,display=Observation/Result"`
	AL1       []AL1               `hl7:"12,display=Patient allergy information"`
	DG1       []DG1               `hl7:"13,display=Diagnosis"`
	DRG       *DRG                `hl7:"14,display=Diagnosis Related Group"`
	Procedure []ADT_A31_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"17,display=Guarantor"`
	Insurance []ADT_A31_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
}

// Cancel patient arriving - tracking
//
// The A32 event is sent when an A10 (patient arriving-tracking) event is cancelled, either because of erroneous entry of
// the A10 event or because of a decision not to receive the patient after all.
type ADT_A32 struct {
	HL7 HL7Name `hl7:",name=ADT_A32,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Cancel patient departing - tracking
//
// The A33 event is sent when an A09 (patient departing-tracking) event is cancelled, either because of erroneous entry of
// the A09 event or because of a decision not to send the patient after all.
type ADT_A33 struct {
	HL7 HL7Name `hl7:",name=ADT_A33,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
}

// Merge patient information - patient id only
//
// An A34 (merge patient information-patient ID only) event was intended for merging or changing patient identifiers.  It
// was used to change patient identifiers on all of this patient’s existing accounts.
//
// Event A34 has been retained for backward compatibility only.  From V2.3.1 onwards, event A40 (Merge patient - patient identifier
// list) should be used instead. Only the patient identifier list has changed as a result of the merge.  See Section 3.6.2, "Merging
// patient/person information," for a discussion of issues related to the implementation of merge messages.
type ADT_A34 struct {
	HL7 HL7Name `hl7:",name=ADT_A34,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Merge patient information - account number only
//
// An A35 (merge patient information-account number only) event was intended for merging or changing an account number only.
//
// Event A35 has been retained for backward compatibility only.  From V2.3.1 onwards, event A41 (Merge patient - patient account
// number) should be used instead. Only the patient account number has changed as a result of the merge.  See Section 3.6.2,
// "Merging patient/person information," for a discussion of issues related to the implementation of merge message.
type ADT_A35 struct {
	HL7 HL7Name `hl7:",name=ADT_A35,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Merge patient information - patient id and account number
//
// Event A36 has been retained for backward compatibility only. From V2.3.1 onwards, events A40 (merge patient - patient
// identifier list) and A41 (merge patient - patient account number) should be used instead. Both patient identifier list
// and the patient account number have changed as a result of the merge.
type ADT_A36 struct {
	HL7 HL7Name `hl7:",name=ADT_A36,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Unlink patient information
//
// The A37 event unlinks two patient identifiers.
type ADT_A37 struct {
	HL7  HL7Name `hl7:",name=ADT_A37,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient identification"`
	PD1  *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1  *PV1    `hl7:"5,display=Patient visit"`
	DB1  []DB1   `hl7:"6,display=Disability"`
	PID2 *PID    `hl7:"7,required,display=Patient identification"`
	PD12 *PD1    `hl7:"8,display=Patient Additional Demographic"`
	PV12 *PV1    `hl7:"9,display=Patient visit"`
	DB12 []DB1   `hl7:"10,display=Disability"`
}

// Cancel pre-admit
//
// The A38 event is sent when an A05 (pre-admit a patient) event is cancelled, either because of erroneous entry of the A05 event
// or because of a decision not to pre-admit the patient after all.
type ADT_A38 struct {
	HL7 HL7Name `hl7:",name=ADT_A38,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
	DB1 []DB1   `hl7:"7,display=Disability"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
	DRG *DRG    `hl7:"10,display=Diagnosis Related Group"`
}

// Patient
type ADT_A39_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A39_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
}

// Merge person - patient id
//
// An A39 event is used to signal a merge of records for a person that was incorrectly filed under two different PID-2 - patient
// IDs.  The "incorrect source patient ID" identified in the MRG segment (MRG-4 prior patient ID) is to be merged with the required
// "correct target patient ID" identified in the PID segment (PID-2 - patient ID).  The "incorrect source patient ID" would
// then logically never be referenced in future transactions.  It is noted that some systems may still physically keep this
// "incorrect identifier" for audit trail purposes or other reasons associated with database index implementation requirements.
//
// Event A39 has been retained for backward compatibility only. From V2.3.1 onwards, event A40 (merge patient - patient identifier
// list) should be used instead. A merge has been done at the patient identifier level.  That is, two PID-2 - patient ID identifiers
// have been merged into one.
type ADT_A39 struct {
	HL7     HL7Name           `hl7:",name=ADT_A39,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	EVN     *EVN              `hl7:"2,required,display=Event Type"`
	Patient []ADT_A39_Patient `hl7:",required,display=Patient"`
}

// PatientID
type ADT_A40_PatientID struct {
	HL7 HL7Name `hl7:",name=ADT_A40_PatientID,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
}

// Merge patient - patient identifier list
//
// An A40 event is used to signal a merge of records for a patient that was incorrectly filed under two different identifiers.
// The "incorrect source identifier" identified in the MRG segment (MRG-1 - prior patient identifier list) is to be merged
// with the required "correct target identifier" of the same "identifier type code" component identified in the PID segment
// (PID-3 - patient identifier list). The "incorrect source identifier" would then logically never be referenced in future
// transactions.  It is noted that some systems may still physically keep this "incorrect identifier" for audit trail purposes
// or other reasons associated with database index implementation requirements.
type ADT_A40 struct {
	HL7       HL7Name             `hl7:",name=ADT_A40,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PatientID []ADT_A40_PatientID `hl7:",required,display=Patient ID"`
}

// PatientID
type ADT_A41_PatientID struct {
	HL7 HL7Name `hl7:",name=ADT_A41_PatientID,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
}

// Merge account - patient account number
//
// An A41 event is used to signal a merge of records for an account that was incorrectly filed under two different account numbers.
// The "incorrect source patient account number" identified in the MRG segment (MRG-3 - prior patient account number) is
// to be merged with the "correct target patient account number" identified in the PID segment (PID-18 - patient account number).
// The "incorrect source patient account number" would then logically never be referenced in future transactions.  It is
// noted that some systems may still physically keep this "incorrect identifier" for audit trail purposes or other reasons
// associated with database index implementation requirements.
//
// A merge has been done at the account identifier level.  That is, two PID-18 - patient account number identifiers have been
// merged into one.
type ADT_A41 struct {
	HL7       HL7Name             `hl7:",name=ADT_A41,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PatientID []ADT_A41_PatientID `hl7:",required,display=Patient ID"`
}

// PatientID
type ADT_A42_PatientID struct {
	HL7 HL7Name `hl7:",name=ADT_A42_PatientID,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
}

// Merge visit - visit number
//
// An A42 event is used to signal a merge of records for a visit that was incorrectly filed under two different visit numbers.
// The "incorrect source visit number" identified in the MRG segment (MRG-5 - prior visit number) is to be merged with the required
// "correct target visit number" identified in the PV1 segment (PV1-19 - visit number). The "incorrect source visit number"
// would then logically never be referenced in future transactions.  It is noted that some systems may still physically keep
// this "incorrect identifier" for audit trail purposes or other reasons associated with database index implementation
// requirements.
//
// A merge has been done at the visit identifier level.  That is, two PV1-19 - visit number identifiers have been merged into
// one.
type ADT_A42 struct {
	HL7       HL7Name             `hl7:",name=ADT_A42,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PatientID []ADT_A42_PatientID `hl7:",required,display=Patient ID"`
}

// Patient
type ADT_A43_Patient struct {
	HL7 HL7Name `hl7:",name=ADT_A43_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Move patient information - patient identifier list
//
// A move has been done at the patient identifier list level.  Identifier to be moved in the PID-3 - Patient identifier list and
// MRG-1 - prior patient identifier list will have the same value. The "from" (incorrect source patient ID) and "to" (correct
// target patient ID) identifiers have different values. See A43 examples in section 5.  The identifiers involved in identifying
// the patient to be moved (MRG-1 - prior patient identifier list) may or may not have accounts, which may or may not have visits.
// In any case, all subordinate data sets associated with the identifier in MRG-1 - prior patient identifier list are moved
// along with the identifier, from the "incorrect source patient ID" to the "correct target patient ID".
type ADT_A43 struct {
	HL7     HL7Name           `hl7:",name=ADT_A43,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	EVN     *EVN              `hl7:"2,required,display=Event Type"`
	Patient []ADT_A43_Patient `hl7:",required,display=Patient"`
}

// PatientID
type ADT_A44_PatientID struct {
	HL7 HL7Name `hl7:",name=ADT_A44_PatientID,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Move account information - patient account number
//
// An A44 event is used to signal a move of records identified by the MRG-3 - prior patient account number from the "incorrect
// source patient identifier list" identified in the MRG segment (MRG-1 - prior patient identifier list) to the "correct
// target patient identifier list" identified in the PID segment (PID-3 - patient identifier list).
//
// A move has been done at the account identifier level.  That is, a PID-18 - patient account number associated with one PID-3
// - patient identifier list has been moved to another patient identifier lis.
type ADT_A44 struct {
	HL7       HL7Name             `hl7:",name=ADT_A44,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PatientID []ADT_A44_PatientID `hl7:",required,display=Patient ID"`
}

// MergeInfo
type ADT_A45_MergeInfo struct {
	HL7 HL7Name `hl7:",name=ADT_A45_MergeInfo,type=tg"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
}

// Move visit information - visit number
//
// An A45 event is used to signal a move of records identified by the MRG-5 - prior visit number or the MRG-6 - prior alternate
// visit ID from the "incorrect source account identifier" identified in the MRG segment (MRG-3 - prior patient account number)
// to the "correct target account identifier" identified in the PID segment (PID-18 - patient account number).
//
// A move has been done at the visit identifier level.  That is, a PV1-19 - visit number or PV1-50 - alternate visit ID associated
// with one account identifier (PID-18 - patient account number) has been moved to another account identifier.
type ADT_A45 struct {
	HL7       HL7Name             `hl7:",name=ADT_A45,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PD1       *PD1                `hl7:"4,display=Patient Additional Demographic"`
	MergeInfo []ADT_A45_MergeInfo `hl7:",required,display=Merge Info"`
}

// Change patient id (for backward compatibility only)
//
// An A46 event is used to signal a change of an incorrectly assigned PID-2 - patient ID value.  The "incorrect source patient
// ID" value is stored in the MRG segment (MRG-4 - prior patient ID) and is to be changed to the "correct target patient ID" value
// stored in the PID segment (PID-2 - patient ID).
//
// Event A46 has been retained for backward compatibility only, corresponding with PID-2 - patient ID, which is also retained
// for backward compatibility. From V2.3.1 onwards, event A47 (change patient identifier list) should be used instead.
// A change has been done at the patient identifier level.  That is, a PID-2 - patient ID has been found to be incorrect and has
// been changed.
type ADT_A46 struct {
	HL7 HL7Name `hl7:",name=ADT_A46,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Change patient identifier list
//
// An A47 event is used to signal a change of an incorrectly assigned PID-3 - patient identifier list value. The "incorrect
// source identifier" value is stored in the MRG segment (MRG-1 - prior patient identifier list) and is to be changed to the
// "correct target patient ID" value stored in the PID segment (PID-3 patient identifier list).
//
// A change has been done at the patient identifier list level.  That is, a single PID-3 - patient identifier list value has been
// found to be incorrect and has been changed.
type ADT_A47 struct {
	HL7 HL7Name `hl7:",name=ADT_A47,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Change alternate patient id
//
// An A48 event is used to signal a change of an incorrectly assigned alternate patient identifier value.  The "incorrect source
// alternate patient ID" value is stored in the MRG segment (MRG-2 - prior alternate patient ID) and is to be changed to the "correct
// target alternate patient ID" value stored in the PID segment (PID-4 - alternate patient ID-PID).
//
// Event A48 has been retained for backward compatibility only, corresponding with PID-4 - alternate Patient ID-PID, which
// is also retained for backward compatibility.  From V2.3.1 onwards, event A47 (change patient identifier list) should
// be used instead.  A change has been done at the alternate patient identifier level.  That is, a PID-4 - alternate patient ID-PID
// has been found to be incorrect and has been changed.
type ADT_A48 struct {
	HL7 HL7Name `hl7:",name=ADT_A48,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Change patient account number
//
// An A49 event is used to signal a change of an incorrectly assigned account number value.  The "incorrect source account number"
// value is stored in the MRG segment (MRG-3 - prior patient account number) and is to be changed to the "correct target account
// number" value stored in the PID segment (PID-18 - patient account number).
//
// A change has been done at the account identifier level.  That is, a PID-18 - patient account number has been found to be incorrect
// and has been changed.
type ADT_A49 struct {
	HL7 HL7Name `hl7:",name=ADT_A49,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
}

// Change visit number
//
// An A50 event is used to signal a change of an incorrectly assigned visit number value.  The "incorrect source visit number"
// value is stored in the MRG segment (MRG-5 - prior visit number) and is to be changed to the "correct target visit number" value
// stored in the PV1 segment (PV1-19 - visit number).
//
// A change has been done at the visit identifier level.  That is, a PV1-19 - visit number has been found to be incorrect and has
// been changed.
type ADT_A50 struct {
	HL7 HL7Name `hl7:",name=ADT_A50,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
}

// Change alternate visit id
//
// An A51 event is used to signal a change of an incorrectly assigned alternate visit ID value.  The "incorrect source alternate
// visit ID" value is stored in the MRG segment (MRG-6 - prior alternate visit ID) and is to be changed to the "correct target
// alternate visit ID" value stored in the PV1 segment (PV1-50 - alternate visit ID).
//
// A change has been done at the alternate visit identifier level.  That is, a PV1-50 - alternate visit ID has been found to be
// incorrect and has been changed.
type ADT_A51 struct {
	HL7 HL7Name `hl7:",name=ADT_A51,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	MRG *MRG    `hl7:"5,required,display=Merge patient information"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
}

// Cancel leave of absence for a patient
//
// The A52 event is sent when an A21 (patient goes on "leave of absence") event is cancelled, either because of erroneous entry
// of the A21 event or because of a decision not to put the patient on "leave of absence" after all.
type ADT_A52 struct {
	HL7 HL7Name `hl7:",name=ADT_A52,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// Cancel patient returns from a leave of absence
//
// The A53 event is sent when an A22 (patient returns from "leave of absence") event is cancelled, either because of erroneous
// entry of the A22 event or because of a decision not to return the patient from "leave of absence" after all.
type ADT_A53 struct {
	HL7 HL7Name `hl7:",name=ADT_A53,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// Change attending doctor
//
// An A54 event is issued as a result of a change in the attending doctor responsible for the treatment of a patient.
type ADT_A54 struct {
	HL7  HL7Name `hl7:",name=ADT_A54,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient identification"`
	PD1  *PD1    `hl7:"4,display=Patient Additional Demographic"`
	ROL  []ROL   `hl7:"5,display=Role"`
	PV1  *PV1    `hl7:"6,required,display=Patient visit"`
	PV2  *PV2    `hl7:"7,display=Patient visit - additional information"`
	ROL2 []ROL   `hl7:"8,display=Role"`
}

// Cancel change attending doctor
//
// The A55 event is sent when an A54 (change attending doctor) event is cancelled, either because of erroneous entry of the
// A54 event or because of a decision not to change the attending doctor after all. PV1-7 - attending doctor must contain the
// patient's doctor prior to the change of attending doctor.
type ADT_A55 struct {
	HL7 HL7Name `hl7:",name=ADT_A55,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// Update allergy information
//
// This trigger event is used when person/patient allergy information has changed.  It is used in conjunction with a new allergy
// segment, the IAM - patient allergy information segment-unique identifier, which supports Action code/unique identifier
// mode update for repeating segments as defined in 2.14.4 Modes for updating via repeating segments.
type ADT_A60 struct {
	HL7 HL7Name `hl7:",name=ADT_A60,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,display=Patient visit"`
	PV2 *PV2    `hl7:"5,display=Patient visit - additional information"`
	IAM []IAM   `hl7:"6,display=Patient adverse reaction information - unique iden"`
}

// Change consulting doctor
//
// An A61 event is used as a result of a change in the consulting physician(s) for the treatment of a patient.
type ADT_A61 struct {
	HL7 HL7Name `hl7:",name=ADT_A61,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	ROL []ROL   `hl7:"6,display=Role"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Cancel change consulting doctor
type ADT_A62 struct {
	HL7 HL7Name `hl7:",name=ADT_A62,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	ROL []ROL   `hl7:"6,display=Role"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Visit
type BAR_P01_Visit struct {
	HL7       HL7Name             `hl7:",name=BAR_P01_Visit,type=tg"`
	PV1       *PV1                `hl7:"6,display=Patient visit"`
	PV2       *PV2                `hl7:"7,display=Patient visit - additional information"`
	ROL       []ROL               `hl7:"8,display=Role"`
	DB1       []DB1               `hl7:"9,display=Disability"`
	OBX       []OBX               `hl7:"10,display=Observation/Result"`
	AL1       []AL1               `hl7:"11,display=Patient allergy information"`
	DG1       []DG1               `hl7:"12,display=Diagnosis"`
	DRG       *DRG                `hl7:"13,display=Diagnosis Related Group"`
	Procedure []BAR_P01_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"16,display=Guarantor"`
	NK1       []NK1               `hl7:"17,display=Next of kin / associated parties"`
	Insurance []BAR_P01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
}

// Procedure
type BAR_P01_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P01_Procedure,type=tg"`
	PR1 *PR1    `hl7:"14,required,display=Procedures"`
	ROL []ROL   `hl7:"15,display=Role"`
}

// Insurance
type BAR_P01_Insurance struct {
	HL7 HL7Name `hl7:",name=BAR_P01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Add patient accounts
//
// Data are sent from some application (usually a Registration or an ADT system) for example, to the patient accounting or
// financial system to establish an account for a patient’s billing/accounts receivable record. Many of the segments associated
// with this event are optional.  This optionality allows those systems needing these fields to set up transactions that fulfill
// their requirements and yet satisfy the HL7 requirements.
//
// From Standard Version 2.3 onward, the P01 event should only be used to add a new account that did not exist before, not to update
// an existing account.  The new P05 (update account) event should be used to update an existing account.  The new P06 (end account)
// event should be used to close an account.  With the P01 event, EVN-2 - recorded date/time should contain the account start
// date.
type BAR_P01 struct {
	HL7   HL7Name         `hl7:",name=BAR_P01,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	EVN   *EVN            `hl7:"2,required,display=Event Type"`
	PID   *PID            `hl7:"3,required,display=Patient identification"`
	PD1   *PD1            `hl7:"4,display=Patient Additional Demographic"`
	ROL   []ROL           `hl7:"5,display=Role"`
	Visit []BAR_P01_Visit `hl7:",required,display=Visit"`
}

// Patient
type BAR_P02_Patient struct {
	HL7 HL7Name `hl7:",name=BAR_P02_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"5,display=Patient visit"`
	DB1 []DB1   `hl7:"6,display=Disability"`
}

// Purge patient accounts
//
// Generally, the elimination of all billing/accounts receivable records will be an internal function controlled, for
// example, by the patient accounting or financial system.  However, on occasion, there will be a need to correct an account,
// or a series of accounts, that may require that a notice of account deletion be sent from another sub-system and processed,
// for example, by the patient accounting or financial system.  Although a series of accounts may be purged within this one
// event, we recommend that only one PID segment be sent per event.
type BAR_P02 struct {
	HL7     HL7Name           `hl7:",name=BAR_P02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	EVN     *EVN              `hl7:"2,required,display=Event Type"`
	Patient []BAR_P02_Patient `hl7:",required,display=Patient"`
}

// Visit
type BAR_P05_Visit struct {
	HL7       HL7Name             `hl7:",name=BAR_P05_Visit,type=tg"`
	PV1       *PV1                `hl7:"6,display=Patient visit"`
	PV2       *PV2                `hl7:"7,display=Patient visit - additional information"`
	ROL       []ROL               `hl7:"8,display=Role"`
	DB1       []DB1               `hl7:"9,display=Disability"`
	OBX       []OBX               `hl7:"10,display=Observation/Result"`
	AL1       []AL1               `hl7:"11,display=Patient allergy information"`
	DG1       []DG1               `hl7:"12,display=Diagnosis"`
	DRG       *DRG                `hl7:"13,display=Diagnosis Related Group"`
	Procedure []BAR_P05_Procedure `hl7:",display=Procedure"`
	GT1       []GT1               `hl7:"16,display=Guarantor"`
	NK1       []NK1               `hl7:"17,display=Next of kin / associated parties"`
	Insurance []BAR_P05_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"22,display=Accident"`
	UB1       *UB1                `hl7:"23,display=UB82"`
	UB2       *UB2                `hl7:"24,display=UB92 Data"`
	ABS       *ABS                `hl7:"25,display=Abstract"`
	BLC       []BLC               `hl7:"26,display=Blood Code"`
	RMI       *RMI                `hl7:"27,display=Risk Management Incident"`
}

// Procedure
type BAR_P05_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P05_Procedure,type=tg"`
	PR1 *PR1    `hl7:"14,required,display=Procedures"`
	ROL []ROL   `hl7:"15,display=Role"`
}

// Insurance
type BAR_P05_Insurance struct {
	HL7 HL7Name `hl7:",name=BAR_P05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"18,required,display=Insurance"`
	IN2 *IN2    `hl7:"19,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"20,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"21,display=Role"`
}

// Update account
//
// The P05 event is sent when an existing account is being updated.  From Standard Version 2.3 onward, the P01 (add account)
// event should no longer be used for updating an existing account, but only for creating a new account.  With the addition of
// P10 (transmit ambulatory payment classification [APC] groups) in Version 2.4, it is expected that the P05 (update account)
// will be used to send inpatient coding information and the P10 (transmit ambulatory payment classification [APC] groups)
// will be used to send outpatient coding information.
type BAR_P05 struct {
	HL7   HL7Name         `hl7:",name=BAR_P05,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	EVN   *EVN            `hl7:"2,required,display=Event Type"`
	PID   *PID            `hl7:"3,required,display=Patient identification"`
	PD1   *PD1            `hl7:"4,display=Patient Additional Demographic"`
	ROL   []ROL           `hl7:"5,display=Role"`
	Visit []BAR_P05_Visit `hl7:",required,display=Visit"`
}

// Patient
type BAR_P06_Patient struct {
	HL7 HL7Name `hl7:",name=BAR_P06_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,display=Patient visit"`
}

// End account
//
// The P06 event is a notification that the account is no longer open, that is, no new charges can accrue to this account.  This
// notification is not related to whether or not the account is paid in full.  EVN-2 - recorded date/time must contain the account
// end date.
//
// Note: P07-P09 have been defined by the Orders/Observations Technical Committee as product experience messages.
type BAR_P06 struct {
	HL7     HL7Name           `hl7:",name=BAR_P06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	EVN     *EVN              `hl7:"2,required,display=Event Type"`
	Patient []BAR_P06_Patient `hl7:",required,display=Patient"`
}

// Procedure
type BAR_P10_Procedure struct {
	HL7 HL7Name `hl7:",name=BAR_P10_Procedure,type=tg"`
	PR1 *PR1    `hl7:"7,required,display=Procedures"`
	GP2 *GP2    `hl7:"8,display=Grouping/Reimbursement - Procedure Line Item"`
}

// Transmit ambulatory payment classification(apc)
//
// The P10 event is used to communicate Ambulatory Payment Classification (APC) grouping.  The grouping can be estimated
// or actual, based on the APC status indictor in GP1-1.  This information is mandated in the USA by the Health Care Financing
// Administration (HCFA) for reimbursement of outpatient services.  The PID and PV1 segments are included for identification
// purposes only. When other important fields change, it is recommended that the A08 (update patient information) event
// be used in addition.
type BAR_P10 struct {
	HL7       HL7Name             `hl7:",name=BAR_P10,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient identification"`
	PV1       *PV1                `hl7:"4,required,display=Patient visit"`
	DG1       []DG1               `hl7:"5,display=Diagnosis"`
	GP1       *GP1                `hl7:"6,required,display=Grouping/Reimbursement - Visit"`
	Procedure []BAR_P10_Procedure `hl7:",display=Procedure"`
}

// Patient
type CRM_C01_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C01_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Register a patient on a clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C01 struct {
	HL7     HL7Name           `hl7:",name=CRM_C01,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C01_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C02_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C02_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Cancel a patient registration on clinical trial (for clerical mistakes since an intended registration should not be canceled)
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C02 struct {
	HL7     HL7Name           `hl7:",name=CRM_C02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C02_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C03_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C03_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Correct/update registration information
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C03 struct {
	HL7     HL7Name           `hl7:",name=CRM_C03,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C03_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C04_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C04_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Register a patient on a clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C04 struct {
	HL7     HL7Name           `hl7:",name=CRM_C04,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C04_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C05_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C05_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Patient enters phase of clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C05 struct {
	HL7     HL7Name           `hl7:",name=CRM_C05,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C05_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C06_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C06_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Cancel patient entering a phase (clerical mistake)
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C06 struct {
	HL7     HL7Name           `hl7:",name=CRM_C06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C06_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C07_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C07_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Correct/update phase information
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C07 struct {
	HL7     HL7Name           `hl7:",name=CRM_C07,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C07_Patient `hl7:",required,display=Patient"`
}

// Patient
type CRM_C08_Patient struct {
	HL7 HL7Name `hl7:",name=CRM_C08_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient identification"`
	PV1 *PV1    `hl7:"3,display=Patient visit"`
	CSR *CSR    `hl7:"4,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"5,display=Clinical Study Phase"`
}

// Patient has gone off phase of clinical trial
//
// The data are entered in a clinical trials or other patient data system and broadcast to other facility systems such as order
// entry, pharmacy, accounting, and nursing systems.  They can be transmitted in batch mode or broadcast to outside-facility
// computer systems, including diagnostic and patient management systems. It is assumed that proper routing and security
// mechanisms are in place
type CRM_C08 struct {
	HL7     HL7Name           `hl7:",name=CRM_C08,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CRM_C08_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C09_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C09_Patient,type=tg"`
	PID        *PID                 `hl7:"2,required,display=Patient identification"`
	PD1        *PD1                 `hl7:"3,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"4,display=Notes and Comments"`
	Visit      *CSU_C09_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"7,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C09_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C09_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C09_Visit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// StudyPhase
type CSU_C09_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C09_StudyPhase,type=tg"`
	CSP           []CSP                   `hl7:"8,display=Clinical Study Phase"`
	StudySchedule []CSU_C09_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C09_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C09_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"9,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C09_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C09_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C09_StudyObservation struct {
	HL7 HL7Name `hl7:",name=CSU_C09_StudyObservation,type=tg"`
	ORC *ORC    `hl7:"10,display=Common Order"`
	OBR *OBR    `hl7:"11,required,display=Observation Request"`
	OBX []OBX   `hl7:"12,required,display=Observation/Result"`
}

// StudyPharm
type CSU_C09_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C09_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"13,display=Common Order"`
	RxAdmin []CSU_C09_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C09_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C09_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"14,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"15,required,display=Pharmacy/Treatment Route"`
}

// Automated time intervals for reporting, like monthly
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data - clinical observations and study variables will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies
type CSU_C09 struct {
	HL7     HL7Name           `hl7:",name=CSU_C09,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CSU_C09_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C10_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C10_Patient,type=tg"`
	PID        *PID                 `hl7:"2,required,display=Patient identification"`
	PD1        *PD1                 `hl7:"3,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"4,display=Notes and Comments"`
	Visit      *CSU_C10_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"7,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C10_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C10_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C10_Visit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// StudyPhase
type CSU_C10_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C10_StudyPhase,type=tg"`
	CSP           []CSP                   `hl7:"8,display=Clinical Study Phase"`
	StudySchedule []CSU_C10_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C10_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C10_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"9,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C10_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C10_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C10_StudyObservation struct {
	HL7 HL7Name `hl7:",name=CSU_C10_StudyObservation,type=tg"`
	ORC *ORC    `hl7:"10,display=Common Order"`
	OBR *OBR    `hl7:"11,required,display=Observation Request"`
	OBX []OBX   `hl7:"12,required,display=Observation/Result"`
}

// StudyPharm
type CSU_C10_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C10_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"13,display=Common Order"`
	RxAdmin []CSU_C10_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C10_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C10_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"14,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"15,required,display=Pharmacy/Treatment Route"`
}

// Patient completes the clinical trial
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data - clinical observations and study variables will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies
type CSU_C10 struct {
	HL7     HL7Name           `hl7:",name=CSU_C10,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CSU_C10_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C11_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C11_Patient,type=tg"`
	PID        *PID                 `hl7:"2,required,display=Patient identification"`
	PD1        *PD1                 `hl7:"3,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"4,display=Notes and Comments"`
	Visit      *CSU_C11_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"7,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C11_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C11_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C11_Visit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// StudyPhase
type CSU_C11_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C11_StudyPhase,type=tg"`
	CSP           []CSP                   `hl7:"8,display=Clinical Study Phase"`
	StudySchedule []CSU_C11_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C11_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C11_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"9,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C11_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C11_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C11_StudyObservation struct {
	HL7 HL7Name `hl7:",name=CSU_C11_StudyObservation,type=tg"`
	ORC *ORC    `hl7:"10,display=Common Order"`
	OBR *OBR    `hl7:"11,required,display=Observation Request"`
	OBX []OBX   `hl7:"12,required,display=Observation/Result"`
}

// StudyPharm
type CSU_C11_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C11_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"13,display=Common Order"`
	RxAdmin []CSU_C11_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C11_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C11_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"14,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"15,required,display=Pharmacy/Treatment Route"`
}

// Patient completes a phase of the clinical trial
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data - clinical observations and study variables will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies
type CSU_C11 struct {
	HL7     HL7Name           `hl7:",name=CSU_C11,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CSU_C11_Patient `hl7:",required,display=Patient"`
}

// Patient
type CSU_C12_Patient struct {
	HL7        HL7Name              `hl7:",name=CSU_C12_Patient,type=tg"`
	PID        *PID                 `hl7:"2,required,display=Patient identification"`
	PD1        *PD1                 `hl7:"3,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"4,display=Notes and Comments"`
	Visit      *CSU_C12_Visit       `hl7:",display=Visit"`
	CSR        *CSR                 `hl7:"7,required,display=Clinical Study Registration"`
	StudyPhase []CSU_C12_StudyPhase `hl7:",required,display=Study Phase"`
}

// Visit
type CSU_C12_Visit struct {
	HL7 HL7Name `hl7:",name=CSU_C12_Visit,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// StudyPhase
type CSU_C12_StudyPhase struct {
	HL7           HL7Name                 `hl7:",name=CSU_C12_StudyPhase,type=tg"`
	CSP           []CSP                   `hl7:"8,display=Clinical Study Phase"`
	StudySchedule []CSU_C12_StudySchedule `hl7:",required,display=Study Schedule"`
}

// StudySchedule
type CSU_C12_StudySchedule struct {
	HL7              HL7Name                    `hl7:",name=CSU_C12_StudySchedule,type=tg"`
	CSS              *CSS                       `hl7:"9,display=Clinical Study Data Schedule Segment"`
	StudyObservation []CSU_C12_StudyObservation `hl7:",required,display=Study Observation"`
	StudyPharm       []CSU_C12_StudyPharm       `hl7:",required,display=Study Pharm"`
}

// StudyObservation
type CSU_C12_StudyObservation struct {
	HL7 HL7Name `hl7:",name=CSU_C12_StudyObservation,type=tg"`
	ORC *ORC    `hl7:"10,display=Common Order"`
	OBR *OBR    `hl7:"11,required,display=Observation Request"`
	OBX []OBX   `hl7:"12,required,display=Observation/Result"`
}

// StudyPharm
type CSU_C12_StudyPharm struct {
	HL7     HL7Name           `hl7:",name=CSU_C12_StudyPharm,type=tg"`
	ORC     *ORC              `hl7:"13,display=Common Order"`
	RxAdmin []CSU_C12_RxAdmin `hl7:",required,display=Rx Admin"`
}

// RxAdmin
type CSU_C12_RxAdmin struct {
	HL7 HL7Name `hl7:",name=CSU_C12_RxAdmin,type=tg"`
	RXA *RXA    `hl7:"14,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"15,required,display=Pharmacy/Treatment Route"`
}

// Update/correction of patient order/result information
//
// Data are entered in the clinical trials system or may reside in laboratory, pathology, radiology, pharmacy and/or other
// clinical applications.  Most clinical trials data - clinical observations and study variables will be communicated in
// OBR and OBX segments.  The CSR, CSP, and CSS segments will identify the specific association these OBR and OBX have to the
// clinical trial.  Data can be broadcast or transmitted in batch mode to study sponsors or the data management center for collaborative
// studies
type CSU_C12 struct {
	HL7     HL7Name           `hl7:",name=CSU_C12,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	Patient []CSU_C12_Patient `hl7:",required,display=Patient"`
}

// CommonOrder
type DFT_P03_CommonOrder struct {
	HL7         HL7Name               `hl7:",name=DFT_P03_CommonOrder,type=tg"`
	ORC         *ORC                  `hl7:"10,display=Common Order"`
	Order       *DFT_P03_Order        `hl7:",display=Order"`
	Observation []DFT_P03_Observation `hl7:",display=Observation"`
}

// Order
type DFT_P03_Order struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Order,type=tg"`
	OBR *OBR    `hl7:"11,required,display=Observation Request"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// Observation
type DFT_P03_Observation struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Observation,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Financial
type DFT_P03_Financial struct {
	HL7                  HL7Name                        `hl7:",name=DFT_P03_Financial,type=tg"`
	FT1                  *FT1                           `hl7:"15,required,display=Financial Transaction"`
	FinancialProcedure   []DFT_P03_FinancialProcedure   `hl7:",display=Financial Procedure"`
	FinancialCommonOrder []DFT_P03_FinancialCommonOrder `hl7:",display=Financial Common Order"`
}

// FinancialProcedure
type DFT_P03_FinancialProcedure struct {
	HL7 HL7Name `hl7:",name=DFT_P03_FinancialProcedure,type=tg"`
	PR1 *PR1    `hl7:"16,required,display=Procedures"`
	ROL []ROL   `hl7:"17,display=Role"`
}

// FinancialCommonOrder
type DFT_P03_FinancialCommonOrder struct {
	HL7                  HL7Name                        `hl7:",name=DFT_P03_FinancialCommonOrder,type=tg"`
	ORC                  *ORC                           `hl7:"18,display=Common Order"`
	FinancialOrder       *DFT_P03_FinancialOrder        `hl7:",display=Financial Order"`
	FinancialObservation []DFT_P03_FinancialObservation `hl7:",display=Financial Observation"`
}

// FinancialOrder
type DFT_P03_FinancialOrder struct {
	HL7 HL7Name `hl7:",name=DFT_P03_FinancialOrder,type=tg"`
	OBR *OBR    `hl7:"19,required,display=Observation Request"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// FinancialObservation
type DFT_P03_FinancialObservation struct {
	HL7 HL7Name `hl7:",name=DFT_P03_FinancialObservation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Insurance
type DFT_P03_Insurance struct {
	HL7 HL7Name `hl7:",name=DFT_P03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"26,required,display=Insurance"`
	IN2 *IN2    `hl7:"27,display=Insurance Additional Information"`
	IN3 []IN3   `hl7:"28,display=Insurance Additional Information- Certification"`
	ROL []ROL   `hl7:"29,display=Role"`
}

// Post detail financial transaction
//
// The Detail Financial Transaction (DFT) message is used to describe a financial transaction transmitted between systems,
// that is, to the billing system for ancillary charges, ADT to billing system for patient deposits, etc.  In HL7 2.4, the message
// construct for the P03 is expanded to support the use cases described below.
type DFT_P03 struct {
	HL7         HL7Name               `hl7:",name=DFT_P03,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	EVN         *EVN                  `hl7:"2,required,display=Event Type"`
	PID         *PID                  `hl7:"3,required,display=Patient identification"`
	PD1         *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	ROL         []ROL                 `hl7:"5,display=Role"`
	PV1         *PV1                  `hl7:"6,display=Patient visit"`
	PV2         *PV2                  `hl7:"7,display=Patient visit - additional information"`
	ROL2        []ROL                 `hl7:"8,display=Role"`
	DB1         []DB1                 `hl7:"9,display=Disability"`
	CommonOrder []DFT_P03_CommonOrder `hl7:",display=Common Order"`
	Financial   []DFT_P03_Financial   `hl7:",required,display=Financial"`
	DG1         []DG1                 `hl7:"23,display=Diagnosis"`
	DRG         *DRG                  `hl7:"24,display=Diagnosis Related Group"`
	GT1         []GT1                 `hl7:"25,display=Guarantor"`
	Insurance   []DFT_P03_Insurance   `hl7:",display=Insurance"`
	ACC         *ACC                  `hl7:"30,display=Accident"`
}

// Result
type DOC_T12_Result struct {
	HL7 HL7Name `hl7:",name=DOC_T12_Result,type=tg"`
	EVN *EVN    `hl7:"6,display=Event Type"`
	PID *PID    `hl7:"7,required,display=Patient identification"`
	PV1 *PV1    `hl7:"8,required,display=Patient visit"`
	TXA *TXA    `hl7:"9,required,display=Transcription Document Header"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Document response
type DOC_T12 struct {
	HL7    HL7Name          `hl7:",name=DOC_T12,type=t"`
	MSH    *MSH             `hl7:"1,required,display=Message Header"`
	MSA    *MSA             `hl7:"2,required,display=Message Acknowledgment"`
	ERR    *ERR             `hl7:"3,display=Error"`
	QAK    *QAK             `hl7:"4,display=Query Acknowledgment"`
	QRD    *QRD             `hl7:"5,required,display=Original-Style Query Definition"`
	Result []DOC_T12_Result `hl7:",required,display=Result"`
	DSC    *DSC             `hl7:"11,display=Continuation Pointer"`
}

// Response - Generate bills and accounts receivable statements
//
// For patient accounting systems that support demand billing, the QRY/DSR transaction, as defined in Chapter 5, will provide
// the mechanism with which to request a copy of the bill for printing or viewing by the requesting system
type DSR_P04 struct {
	HL7 HL7Name `hl7:",name=DSR_P04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,display=Query Acknowledgment"`
	QRD *QRD    `hl7:"5,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"6,display=Original Style Query Filter"`
	DSP []DSP   `hl7:"7,required,display=Display Data"`
	DSC *DSC    `hl7:"8,display=Continuation Pointer"`
}

// Display response message
type DSR_Q01 struct {
	HL7 HL7Name `hl7:",name=DSR_Q01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,display=Query Acknowledgment"`
	QRD *QRD    `hl7:"5,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"6,display=Original Style Query Filter"`
	DSP []DSP   `hl7:"7,required,display=Display Data"`
	DSC *DSC    `hl7:"8,display=Continuation Pointer"`
}

// Deferred response to a query
type DSR_Q03 struct {
	HL7 HL7Name `hl7:",name=DSR_Q03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,display=Query Acknowledgment"`
	QRD *QRD    `hl7:"5,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"6,display=Original Style Query Filter"`
	DSP []DSP   `hl7:"7,required,display=Display Data"`
	DSC *DSC    `hl7:"8,display=Continuation Pointer"`
}

// Automated equipment command
//
// This message is used to send equipment commands from one application to another (e.g., a Laboratory Automation System
// to an automated Equipment).
type EAC_U07 struct {
	HL7 HL7Name `hl7:",name=EAC_U07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	ECD []ECD   `hl7:"3,required,display=Equipment Command"`
	SAC *SAC    `hl7:"4,display=Specimen and container detail"`
	CNS *CNS    `hl7:"5,display=Clear Notification"`
	ROL *ROL    `hl7:"6,display=Role"`
}

// Notification
type EAN_U09_Notification struct {
	HL7 HL7Name `hl7:",name=EAN_U09_Notification,type=tg"`
	NDS *NDS    `hl7:"3,required,display=Notification Detail"`
	NTE *NTE    `hl7:"4,display=Notes and Comments"`
}

// Automated equipment notification
//
// This message is used to send equipment notifications from one application to another (e.g., alerts sent by automated equipment
// to a Laboratory Automation System).
type EAN_U09 struct {
	HL7          HL7Name                `hl7:",name=EAN_U09,type=t"`
	MSH          *MSH                   `hl7:"1,required,display=Message Header"`
	EQU          *EQU                   `hl7:"2,required,display=Equipment Detail"`
	Notification []EAN_U09_Notification `hl7:",required,display=Notification"`
	ROL          *ROL                   `hl7:"5,display=Role"`
}

// CommandResponse
type EAR_U08_CommandResponse struct {
	HL7 HL7Name `hl7:",name=EAR_U08_CommandResponse,type=tg"`
	ECD *ECD    `hl7:"3,required,display=Equipment Command"`
	SAC *SAC    `hl7:"4,display=Specimen and container detail"`
	ECR *ECR    `hl7:"5,required,display=Equipment Command Response"`
}

// Automated equipment response
//
// This message is used to send equipment responses to previously issued commands from one application to another (e.g.,
// automated Equipment to a Laboratory Automation System).
type EAR_U08 struct {
	HL7             HL7Name                   `hl7:",name=EAR_U08,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	EQU             *EQU                      `hl7:"2,required,display=Equipment Detail"`
	CommandResponse []EAR_U08_CommandResponse `hl7:",required,display=Command Response"`
	ROL             *ROL                      `hl7:"6,display=Role"`
}

// Enhanced display response
type EDR_R07 struct {
	HL7 HL7Name `hl7:",name=EDR_R07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	DSP []DSP   `hl7:"5,required,display=Display Data"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Embedded query language query
//
// This query provides an envelope with which a query expressed in a language (e.g., SQL) is packaged and sent to the responding
// system. It is meant to provide the maximum query function without reinventing the wheel.
// The EQQ with its EQL query defining segment supports free-form select statements, based on the query language of choice
// (e.g., SQL).
//
// The response to the EQQ could be tabular TBR or display EQQ. The segment pattern response (the ERP) is invalid given that
// there is no way to specify the desired segment pattern in the query defining segment, EQL.
type EQQ_Q04 struct {
	HL7 HL7Name `hl7:",name=EQQ_Q04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQL *EQL    `hl7:"2,required,display=Embedded Query Language"`
	DSC *DSC    `hl7:"3,display=Continuation Pointer"`
}

// Event replay response
//
// The Event Replay Query under version 2.3 provides a way for the querying system to request data formatted very similar to
// the format that would have been used were this data to be sent as an update in response to a trigger event.
// The RQQ is used to request data formatted as an event replay response
type ERP_R09 struct {
	HL7 HL7Name `hl7:",name=ERP_R09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	ERQ *ERQ    `hl7:"5,required,display=Event Replay Query"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Automated equipment status request
//
// This message is used to request information about a device’s or piece of equipment’s status from one application to another
// (e.g., Laboratory Automation System to automated equipment). The equipment identified in the EQU segment should respond
// with its status using the “Automated Equipment Status Update.”
type ESR_U02 struct {
	HL7 HL7Name `hl7:",name=ESR_U02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	ROL *ROL    `hl7:"3,display=Role"`
}

// Automated equipment status update
//
// This message is used to send information about the status of a device or equipment from one application to another (e.g.,
// automated device to a Laboratory Automation System). The status update can be sent unsolicited or as a response to the trigger
// “Automated Equipment Status Request.”
type ESU_U01 struct {
	HL7 HL7Name `hl7:",name=ESU_U01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	ISD []ISD   `hl7:"3,display=Interaction Status Detail"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// Automated equipment inventory request
//
// This message is used to request information about inventory items from one application to another (e.g., Laboratory Automation
// System to automated equipment). The equipment specified in the EQU segment should respond with the information about
// inventory item requested in the INV segment (or all items).
type INR_U06 struct {
	HL7 HL7Name `hl7:",name=INR_U06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	INV []INV   `hl7:"3,required,display=Inventory Detail"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// Automated equipment inventory update
//
// This message is used to send information about inventory items from one application to another (e.g., automated Equipment
// to a Laboratory Automation System).
type INU_U05 struct {
	HL7 HL7Name `hl7:",name=INU_U05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	INV []INV   `hl7:"3,required,display=Inventory Detail"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// Automated equipment log/service request
//
// This message is used to request log and/or service events from one application to another (e.g., Laboratory Automation
// System to automated equipment).
type LSR_U13 struct {
	HL7 HL7Name `hl7:",name=LSR_U13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	EQP []EQP   `hl7:"3,required,display=Equipment/log Service"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// Automated equipment log/service update
//
// This message is used to send log and/or service events from one application to another (e.g., automated equipment to Laboratory
// Automation System).
type LSU_U12 struct {
	HL7 HL7Name `hl7:",name=LSU_U12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	EQP []EQP   `hl7:"3,required,display=Equipment/log Service"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// Original document notification
//
// This is a notification of the creation of a document without the accompanying content
type MDM_T01 struct {
	HL7 HL7Name `hl7:",name=MDM_T01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
}

// Original document notification and content
//
// This is a notification of the creation of a document with the accompanying content
type MDM_T02 struct {
	HL7 HL7Name `hl7:",name=MDM_T02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
	OBX []OBX   `hl7:"6,required,display=Observation/Result"`
}

// Document status change notification
//
// This is a notification of a change in a status of a document without the accompanying content.
type MDM_T03 struct {
	HL7 HL7Name `hl7:",name=MDM_T03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
}

// Document status change notification and content
//
// This is a notification of the creation of a document with the accompanying content
type MDM_T04 struct {
	HL7 HL7Name `hl7:",name=MDM_T04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
	OBX []OBX   `hl7:"6,required,display=Observation/Result"`
}

// Document addendum notification
//
// This is a notification of an addendum to a document without the accompanying content.
type MDM_T05 struct {
	HL7 HL7Name `hl7:",name=MDM_T05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
}

// Document addendum notification and content
//
// This is a notification of an addendum to a document with the accompanying content.
type MDM_T06 struct {
	HL7 HL7Name `hl7:",name=MDM_T06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
	OBX []OBX   `hl7:"6,required,display=Observation/Result"`
}

// Document edit  notification
//
// This is a notification of an edit to a document without the accompanying content
//
// Note: The only valid use of this trigger event is for documents whose availability status is “Unavailable,” i.e., the document
// has not been made available for patient care.
type MDM_T07 struct {
	HL7 HL7Name `hl7:",name=MDM_T07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
}

// Document edit notification and content
//
// This is a notification of an edit to a document with the accompanying content.
//
// Note: The only valid use of this trigger event is for documents whose availability status is "Unavailable," i.e., the document
// has not been made available for patient care.
type MDM_T08 struct {
	HL7 HL7Name `hl7:",name=MDM_T08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
	OBX []OBX   `hl7:"6,required,display=Observation/Result"`
}

// Document replacement notification
//
// This is a notification of replacement to a document without the accompanying content.
//
// Note: This trigger event is generally used when the original document availability status is “Available.”
type MDM_T09 struct {
	HL7 HL7Name `hl7:",name=MDM_T09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
}

// Document replacement notification and content
//
// Scenario:   Errors discovered in a document are corrected.  The original document is replaced with the revised document.
// The replacement document has its own new unique document ID that is linked to the original document via the parent ID.  The
// availability status of the original document is changed to “Obsolete” but the original document should be retained in
// the system for historical reference.  Document replacement notification and document content are sent.
type MDM_T10 struct {
	HL7 HL7Name `hl7:",name=MDM_T10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
	OBX []OBX   `hl7:"6,required,display=Observation/Result"`
}

// Original document notification
//
// This is a notification of a cancellation of a document.   This trigger event should be used only for an original document with
// an availability status of “Unavailable.”  When a document has been made available for patient care, the process should
// be to replace the original document, which then becomes obsolete.  The replacement document describes why the erroneous
// information exists.
type MDM_T11 struct {
	HL7 HL7Name `hl7:",name=MDM_T11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient visit"`
	TXA *TXA    `hl7:"5,required,display=Transcription Document Header"`
}

// Master files delayed application acknowledgment
//
// The MFD transaction is the delayed application acknowledgment.  It can be used to return  "deferred" application-level
// acknowledgment statuses at the MFE level, without reference to the original MFN message.
type MFD_MFA struct {
	HL7 HL7Name `hl7:",name=MFD_MFA,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	MFA []MFA   `hl7:"3,display=Master File Acknowledgment"`
}

// Master file application acknowledgment
type MFK_M01 struct {
	HL7 HL7Name `hl7:",name=MFK_M01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	MFI *MFI    `hl7:"3,required,display=Master File Identification"`
	MFA []MFA   `hl7:"4,display=Master File Acknowledgment"`
}

// MfStaff
type MFK_M02_MfStaff struct {
	HL7 HL7Name `hl7:",name=MFK_M02_MfStaff,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	STF *STF    `hl7:"6,required,display=Staff Identification"`
	PRA *PRA    `hl7:"7,display=Practitioner Detail"`
	ORG *ORG    `hl7:"8,display=Practitioner Organization Unit"`
}

// Master file acknowledgment - Staff/practitioner master file
//
// The staff identification (STF), practitioner detail (PRA), and practitioner organization unit segment (ORG) segments
// can be used to transmit master files information between systems. The STF segment provides general information about
// personnel; the PRA and ORG segments provides detailed information for a staff member who is also a health practitioner.
// Other segments may be defined to follow the STF segment to provide additional detail information for a particular type
// of staff member: the PRA and ORG segments are the first such segments
type MFK_M02 struct {
	HL7     HL7Name           `hl7:",name=MFK_M02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	MFI     *MFI              `hl7:"3,required,display=Master File Identification"`
	MFA     []MFA             `hl7:"4,display=Master File Acknowledgment"`
	MfStaff []MFK_M02_MfStaff `hl7:",required,display=Mf Staff"`
}

// MfCdm
type MFK_M04_MfCdm struct {
	HL7 HL7Name `hl7:",name=MFK_M04_MfCdm,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	CDM *CDM    `hl7:"6,required,display=Charge Description Master"`
	PRC []PRC   `hl7:"7,display=Pricing"`
}

// Master file acknowledgment - Charge description master file
//
// The charge description (CDM) master file segment should be used in conjunction with the general master file segments in
// Section 8.5, "GENERAL MASTER FILE SEGMENTS."  Interfacing systems often need not only to communicate data about a patient’s
// detailed charges, but also to communicate the charge identification entries by which an application knows how to handle
// a particular charge code.  The charge description master is a master file.  The CDM segment below is a specially designed
// master file segment for interfacing charge description masters.  In the following message, the MFI-master file identifier
// should equal "CDM."
type MFK_M04 struct {
	HL7   HL7Name         `hl7:",name=MFK_M04,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	MSA   *MSA            `hl7:"2,required,display=Message Acknowledgment"`
	MFI   *MFI            `hl7:"3,required,display=Master File Identification"`
	MFA   []MFA           `hl7:"4,display=Master File Acknowledgment"`
	MfCdm []MFK_M04_MfCdm `hl7:",required,display=Mf Cdm"`
}

// MfLocation
type MFK_M05_MfLocation struct {
	HL7       HL7Name             `hl7:",name=MFK_M05_MfLocation,type=tg"`
	MFE       *MFE                `hl7:"5,required,display=Master File Entry"`
	LOC       *LOC                `hl7:"6,required,display=Location Identification"`
	LCH       []LCH               `hl7:"7,display=Location Characteristic"`
	LRL       []LRL               `hl7:"8,display=Location Relationship"`
	MfLocDept []MFK_M05_MfLocDept `hl7:",required,display=Mf Loc Dept"`
}

// MfLocDept
type MFK_M05_MfLocDept struct {
	HL7 HL7Name `hl7:",name=MFK_M05_MfLocDept,type=tg"`
	LDP *LDP    `hl7:"9,required,display=Location Department"`
	LCH []LCH   `hl7:"10,display=Location Characteristic"`
	LCC []LCC   `hl7:"11,display=Location Charge Code"`
}

// Master file acknowledgment - Patient location master file
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the inventory of healthcare patient locations, such as nursing units, rooms, beds, clinics, exam rooms,
// etc.  In a network environment, this segment can be used to define patient locations to other applications.  The segment
// also includes the readiness states and support locations for the patient locations.
type MFK_M05 struct {
	HL7        HL7Name              `hl7:",name=MFK_M05,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	MFI        *MFI                 `hl7:"3,required,display=Master File Identification"`
	MFA        []MFA                `hl7:"4,display=Master File Acknowledgment"`
	MfLocation []MFK_M05_MfLocation `hl7:",required,display=Mf Location"`
}

// MfClinStudy
type MFK_M06_MfClinStudy struct {
	HL7                HL7Name                      `hl7:",name=MFK_M06_MfClinStudy,type=tg"`
	MFE                *MFE                         `hl7:"5,required,display=Master File Entry"`
	CM0                *CM0                         `hl7:"6,required,display=Clinical Study Master"`
	MfPhaseSchedDetail []MFK_M06_MfPhaseSchedDetail `hl7:",display=Mf Phase Sched Detail"`
}

// MfPhaseSchedDetail
type MFK_M06_MfPhaseSchedDetail struct {
	HL7 HL7Name `hl7:",name=MFK_M06_MfPhaseSchedDetail,type=tg"`
	CM1 *CM1    `hl7:"7,required,display=Clinical Study Phase Master"`
	CM2 []CM2   `hl7:"8,display=Clinical Study Schedule Master"`
}

// Master file acknowledgment - Clinical study with phases and schedules master file
type MFK_M06 struct {
	HL7         HL7Name               `hl7:",name=MFK_M06,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	MSA         *MSA                  `hl7:"2,required,display=Message Acknowledgment"`
	MFI         *MFI                  `hl7:"3,required,display=Master File Identification"`
	MFA         []MFA                 `hl7:"4,display=Master File Acknowledgment"`
	MfClinStudy []MFK_M06_MfClinStudy `hl7:",required,display=Mf Clin Study"`
}

// MfClinStudySched
type MFK_M07_MfClinStudySched struct {
	HL7 HL7Name `hl7:",name=MFK_M07_MfClinStudySched,type=tg"`
	MFE *MFE    `hl7:"5,required,display=Master File Entry"`
	CM0 *CM0    `hl7:"6,required,display=Clinical Study Master"`
	CM2 []CM2   `hl7:"7,display=Clinical Study Schedule Master"`
}

// Master file acknowledgment - Clinical study without phases but with schedules master file
type MFK_M07 struct {
	HL7              HL7Name                    `hl7:",name=MFK_M07,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	MSA              *MSA                       `hl7:"2,required,display=Message Acknowledgment"`
	MFI              *MFI                       `hl7:"3,required,display=Master File Identification"`
	MFA              []MFA                      `hl7:"4,display=Master File Acknowledgment"`
	MfClinStudySched []MFK_M07_MfClinStudySched `hl7:",required,display=Mf Clin Study Sched"`
}

// MfStaff
type MFN_M02_MfStaff struct {
	HL7 HL7Name `hl7:",name=MFN_M02_MfStaff,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	STF *STF    `hl7:"4,required,display=Staff Identification"`
	PRA *PRA    `hl7:"5,display=Practitioner Detail"`
	ORG *ORG    `hl7:"6,display=Practitioner Organization Unit"`
}

// Master files notification - Staff/practitioner master file
//
// The staff identification (STF), practitioner detail (PRA), and practitioner organization unit segment (ORG) segments
// can be used to transmit master files information between systems. The STF segment provides general information about
// personnel; the PRA and ORG segments provides detailed information for a staff member who is also a health practitioner.
// Other segments may be defined to follow the STF segment to provide additional detail information for a particular type
// of staff member: the PRA and ORG segments are the first such segments.
type MFN_M02 struct {
	HL7     HL7Name           `hl7:",name=MFN_M02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MFI     *MFI              `hl7:"2,required,display=Master File Identification"`
	MfStaff []MFN_M02_MfStaff `hl7:",required,display=Mf Staff"`
}

// MfCdm
type MFN_M04_MfCdm struct {
	HL7 HL7Name `hl7:",name=MFN_M04_MfCdm,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	CDM *CDM    `hl7:"4,required,display=Charge Description Master"`
	PRC []PRC   `hl7:"5,display=Pricing"`
}

// Master files notification - Charge description master file
//
// The charge description (CDM) master file segment should be used in conjunction with the general master file segments in
// Section 8.5, "GENERAL MASTER FILE SEGMENTS."  Interfacing systems often need not only to communicate data about a patient’s
// detailed charges, but also to communicate the charge identification entries by which an application knows how to handle
// a particular charge code.  The charge description master is a master file.  The CDM segment below is a specially designed
// master file segment for interfacing charge description masters.  In the following message, the MFI-master file identifier
// should equal "CDM."
type MFN_M04 struct {
	HL7   HL7Name         `hl7:",name=MFN_M04,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	MFI   *MFI            `hl7:"2,required,display=Master File Identification"`
	MfCdm []MFN_M04_MfCdm `hl7:",required,display=Mf Cdm"`
}

// MfLocation
type MFN_M05_MfLocation struct {
	HL7       HL7Name             `hl7:",name=MFN_M05_MfLocation,type=tg"`
	MFE       *MFE                `hl7:"3,required,display=Master File Entry"`
	LOC       *LOC                `hl7:"4,required,display=Location Identification"`
	LCH       []LCH               `hl7:"5,display=Location Characteristic"`
	LRL       []LRL               `hl7:"6,display=Location Relationship"`
	MfLocDept []MFN_M05_MfLocDept `hl7:",required,display=Mf Loc Dept"`
}

// MfLocDept
type MFN_M05_MfLocDept struct {
	HL7 HL7Name `hl7:",name=MFN_M05_MfLocDept,type=tg"`
	LDP *LDP    `hl7:"7,required,display=Location Department"`
	LCH []LCH   `hl7:"8,display=Location Characteristic"`
	LCC []LCC   `hl7:"9,display=Location Charge Code"`
}

// Master files notification - Patient location master file
//
// This section is specifically concerned with describing a master file message that should be used to transmit information
// which identifies the inventory of healthcare patient locations, such as nursing units, rooms, beds, clinics, exam rooms,
// etc.  In a network environment, this segment can be used to define patient locations to other applications.  The segment
// also includes the readiness states and support locations for the patient locations.
type MFN_M05 struct {
	HL7        HL7Name              `hl7:",name=MFN_M05,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MFI        *MFI                 `hl7:"2,required,display=Master File Identification"`
	MfLocation []MFN_M05_MfLocation `hl7:",required,display=Mf Location"`
}

// MfClinStudy
type MFN_M06_MfClinStudy struct {
	HL7                HL7Name                      `hl7:",name=MFN_M06_MfClinStudy,type=tg"`
	MFE                *MFE                         `hl7:"3,required,display=Master File Entry"`
	CM0                *CM0                         `hl7:"4,required,display=Clinical Study Master"`
	MfPhaseSchedDetail []MFN_M06_MfPhaseSchedDetail `hl7:",display=Mf Phase Sched Detail"`
}

// MfPhaseSchedDetail
type MFN_M06_MfPhaseSchedDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M06_MfPhaseSchedDetail,type=tg"`
	CM1 *CM1    `hl7:"5,required,display=Clinical Study Phase Master"`
	CM2 []CM2   `hl7:"6,display=Clinical Study Schedule Master"`
}

// Master files notification - Clinical study with phases and schedules master file
//
// The CM0 (Clinical Study Master), CM1 (Clinical Study Phase), and CM2 (Clinical Study Schedule) segments can be used to
// transmit master files information between systems. The CM0 segment contains the information about the study itself;
// the CM1 contains the information about one phase of the study identified in the preceding CM0; and the CM2 contains the information
// about the scheduled time points for the preceding study or phase-related treatment or evaluation events.
//
// Case 1: MFN message for Clinical Study with phases and schedules
// MFI-1 - master file identifier code = CMA
type MFN_M06 struct {
	HL7         HL7Name               `hl7:",name=MFN_M06,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	MFI         *MFI                  `hl7:"2,required,display=Master File Identification"`
	MfClinStudy []MFN_M06_MfClinStudy `hl7:",required,display=Mf Clin Study"`
}

// MfClinStudySched
type MFN_M07_MfClinStudySched struct {
	HL7 HL7Name `hl7:",name=MFN_M07_MfClinStudySched,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	CM0 *CM0    `hl7:"4,required,display=Clinical Study Master"`
	CM2 []CM2   `hl7:"5,display=Clinical Study Schedule Master"`
}

// Master files notification - Clinical study without phases but with schedules master file
//
// The CM0 (Clinical Study Master), CM1 (Clinical Study Phase), and CM2 (Clinical Study Schedule) segments can be used to
// transmit master files information between systems. The CM0 segment contains the information about the study itself;
// the CM1 contains the information about one phase of the study identified in the preceding CM0; and the CM2 contains the information
// about the scheduled time points for the preceding study or phase-related treatment or evaluation events.
//
// Case 2: MFN message for Clinical Study without phases but with schedules
// MFI-1 - master file identifier code = CMB
type MFN_M07 struct {
	HL7              HL7Name                    `hl7:",name=MFN_M07,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	MFI              *MFI                       `hl7:"2,required,display=Master File Identification"`
	MfClinStudySched []MFN_M07_MfClinStudySched `hl7:",required,display=Mf Clin Study Sched"`
}

// MfTestNumeric
type MFN_M08_MfTestNumeric struct {
	HL7 HL7Name `hl7:",name=MFN_M08_MfTestNumeric,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	OM1 *OM1    `hl7:"4,required,display=General Segment"`
	OM2 *OM2    `hl7:"5,display=Numeric Observation"`
	OM3 *OM3    `hl7:"6,display=Categorical Service/Test/Observation"`
	OM4 *OM4    `hl7:"7,display=Observations that Require Specimens"`
}

// Master files notification - Test/observation (numeric) master file
type MFN_M08 struct {
	HL7           HL7Name                 `hl7:",name=MFN_M08,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	MFI           *MFI                    `hl7:"2,required,display=Master File Identification"`
	MfTestNumeric []MFN_M08_MfTestNumeric `hl7:",required,display=Mf Test Numeric"`
}

// MfTestCategorical
type MFN_M09_MfTestCategorical struct {
	HL7             HL7Name                  `hl7:",name=MFN_M09_MfTestCategorical,type=tg"`
	MFE             *MFE                     `hl7:"3,required,display=Master File Entry"`
	OM1             *OM1                     `hl7:"4,required,display=General Segment"`
	MfTestCatDetail *MFN_M09_MfTestCatDetail `hl7:",display=Mf Test Cat Detail"`
}

// MfTestCatDetail
type MFN_M09_MfTestCatDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M09_MfTestCatDetail,type=tg"`
	OM3 *OM3    `hl7:"5,required,display=Categorical Service/Test/Observation"`
	OM4 []OM4   `hl7:"6,display=Observations that Require Specimens"`
}

// Master files notification - Test/observation (categorical) master file
type MFN_M09 struct {
	HL7               HL7Name                     `hl7:",name=MFN_M09,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	MFI               *MFI                        `hl7:"2,required,display=Master File Identification"`
	MfTestCategorical []MFN_M09_MfTestCategorical `hl7:",required,display=Mf Test Categorical"`
}

// MfTestBatteries
type MFN_M10_MfTestBatteries struct {
	HL7              HL7Name                   `hl7:",name=MFN_M10_MfTestBatteries,type=tg"`
	MFE              *MFE                      `hl7:"3,required,display=Master File Entry"`
	OM1              *OM1                      `hl7:"4,required,display=General Segment"`
	MfTestBattDetail *MFN_M10_MfTestBattDetail `hl7:",display=Mf Test Batt Detail"`
}

// MfTestBattDetail
type MFN_M10_MfTestBattDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M10_MfTestBattDetail,type=tg"`
	OM5 *OM5    `hl7:"5,required,display=Observation Batteries (Sets)"`
	OM4 []OM4   `hl7:"6,display=Observations that Require Specimens"`
}

// Master files notification - Test/observation batteries master file
type MFN_M10 struct {
	HL7             HL7Name                   `hl7:",name=MFN_M10,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	MFI             *MFI                      `hl7:"2,required,display=Master File Identification"`
	MfTestBatteries []MFN_M10_MfTestBatteries `hl7:",required,display=Mf Test Batteries"`
}

// MfTestCalculated
type MFN_M11_MfTestCalculated struct {
	HL7              HL7Name                   `hl7:",name=MFN_M11_MfTestCalculated,type=tg"`
	MFE              *MFE                      `hl7:"3,required,display=Master File Entry"`
	OM1              *OM1                      `hl7:"4,required,display=General Segment"`
	MfTestCalcDetail *MFN_M11_MfTestCalcDetail `hl7:",display=Mf Test Calc Detail"`
}

// MfTestCalcDetail
type MFN_M11_MfTestCalcDetail struct {
	HL7 HL7Name `hl7:",name=MFN_M11_MfTestCalcDetail,type=tg"`
	OM6 *OM6    `hl7:"5,required,display=Observations that are Calculated from Other Observ"`
	OM2 *OM2    `hl7:"6,required,display=Numeric Observation"`
}

// Master files notification - Test/calculated observations master file
type MFN_M11 struct {
	HL7              HL7Name                    `hl7:",name=MFN_M11,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	MFI              *MFI                       `hl7:"2,required,display=Master File Identification"`
	MfTestCalculated []MFN_M11_MfTestCalculated `hl7:",required,display=Mf Test Calculated"`
}

// MfObsAttributes
type MFN_M12_MfObsAttributes struct {
	HL7 HL7Name `hl7:",name=MFN_M12_MfObsAttributes,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	OM1 *OM1    `hl7:"4,required,display=General Segment"`
	OM7 *OM7    `hl7:"5,display=Additional Basic Attributes"`
}

// Master files notification - Service/text/observation master file
//
// Note: A service/test/observation definition may have both an OM2 (numeric) and OM3 (categorical) segment included in
// case the value may be either numeric and/or categorical.
type MFN_M12 struct {
	HL7             HL7Name                   `hl7:",name=MFN_M12,type=t"`
	MSH             *MSH                      `hl7:"1,required,display=Message Header"`
	MFI             *MFI                      `hl7:"2,required,display=Master File Identification"`
	MfObsAttributes []MFN_M12_MfObsAttributes `hl7:",required,display=Mf Obs Attributes"`
}

// Master files query - Master file not otherwise specified
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
//
// (for backward compatibility only)
type MFQ_M01 struct {
	HL7 HL7Name `hl7:",name=MFQ_M01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Staff/practitioner master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M02 struct {
	HL7 HL7Name `hl7:",name=MFQ_M02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Service/test/observation master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
//
// (for backward compatibility only)
type MFQ_M03 struct {
	HL7 HL7Name `hl7:",name=MFQ_M03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Charge description master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M04 struct {
	HL7 HL7Name `hl7:",name=MFQ_M04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Patient location master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M05 struct {
	HL7 HL7Name `hl7:",name=MFQ_M05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Clinical study with phases and schedules master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M06 struct {
	HL7 HL7Name `hl7:",name=MFQ_M06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Clinical study without phases but with schedules master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M07 struct {
	HL7 HL7Name `hl7:",name=MFQ_M07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Test/observation (numeric) master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M08 struct {
	HL7 HL7Name `hl7:",name=MFQ_M08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Test/observation (categorical) master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M09 struct {
	HL7 HL7Name `hl7:",name=MFQ_M09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Test/observation batteries master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M10 struct {
	HL7 HL7Name `hl7:",name=MFQ_M10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Test/calculated observations master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M11 struct {
	HL7 HL7Name `hl7:",name=MFQ_M11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Master files query - Service/text/observation master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFQ_M12 struct {
	HL7 HL7Name `hl7:",name=MFQ_M12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// MfQuery
type MFR_M01_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M01_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Master file not otherwise specified
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
//
// (for backward compatibility only)
type MFR_M01 struct {
	HL7     HL7Name           `hl7:",name=MFR_M01,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M01_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M02_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M02_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Staff/practitioner master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M02 struct {
	HL7     HL7Name           `hl7:",name=MFR_M02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M02_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M03_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M03_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Service/test/observation master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
//
// (for backward compatibility only)
type MFR_M03 struct {
	HL7     HL7Name           `hl7:",name=MFR_M03,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M03_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M04_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M04_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Charge description master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M04 struct {
	HL7     HL7Name           `hl7:",name=MFR_M04,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M04_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M05_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M05_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Patient Location master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M05 struct {
	HL7     HL7Name           `hl7:",name=MFR_M05,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M05_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M06_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M06_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Clinical study with phases and schedules master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M06 struct {
	HL7     HL7Name           `hl7:",name=MFR_M06,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M06_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M07_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M07_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Clinical study without phases but with schedules master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M07 struct {
	HL7     HL7Name           `hl7:",name=MFR_M07,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M07_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M08_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M08_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Test/observation (numeric) master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M08 struct {
	HL7     HL7Name           `hl7:",name=MFR_M08,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M08_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M09_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M09_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Test/observation (categorical) master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M09 struct {
	HL7     HL7Name           `hl7:",name=MFR_M09,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M09_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M10_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M10_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Test/observation batteries master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M10 struct {
	HL7     HL7Name           `hl7:",name=MFR_M10,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M10_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M11_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M11_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Test/calculated observations master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M11 struct {
	HL7     HL7Name           `hl7:",name=MFR_M11,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M11_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// MfQuery
type MFR_M12_MfQuery struct {
	HL7 HL7Name `hl7:",name=MFR_M12_MfQuery,type=tg"`
	MFE *MFE    `hl7:"7,required,display=Master File Entry"`
}

// Master Files Response - Service/text/observation master file
//
// The MFQ/MFR transaction allows a system to query for a particular record or group records (defined by the primary key) in
// a particular master file.
type MFR_M12 struct {
	HL7     HL7Name           `hl7:",name=MFR_M12,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QRD     *QRD              `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"5,display=Original Style Query Filter"`
	MFI     *MFI              `hl7:"6,required,display=Master File Identification"`
	MfQuery []MFR_M12_MfQuery `hl7:",required,display=Mf Query"`
	DSC     *DSC              `hl7:"8,display=Continuation Pointer"`
}

// ClockAndStatsWithNotes
type NMD_N02_ClockAndStatsWithNotes struct {
	HL7       HL7Name            `hl7:",name=NMD_N02_ClockAndStatsWithNotes,type=tg"`
	Clock     *NMD_N02_Clock     `hl7:",display=Clock"`
	AppStats  *NMD_N02_AppStats  `hl7:",display=App Stats"`
	AppStatus *NMD_N02_AppStatus `hl7:",display=App Status"`
}

// Clock
type NMD_N02_Clock struct {
	HL7 HL7Name `hl7:",name=NMD_N02_Clock,type=tg"`
	NCK *NCK    `hl7:"2,required,display=System clock"`
	NTE []NTE   `hl7:"3,display=Notes and Comments"`
}

// AppStats
type NMD_N02_AppStats struct {
	HL7 HL7Name `hl7:",name=NMD_N02_AppStats,type=tg"`
	NST *NST    `hl7:"4,required,display=Application control level statistics"`
	NTE []NTE   `hl7:"5,display=Notes and Comments"`
}

// AppStatus
type NMD_N02_AppStatus struct {
	HL7 HL7Name `hl7:",name=NMD_N02_AppStatus,type=tg"`
	NSC *NSC    `hl7:"6,required,display=Application status change"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// Application management data message
type NMD_N02 struct {
	HL7                    HL7Name                          `hl7:",name=NMD_N02,type=t"`
	MSH                    *MSH                             `hl7:"1,required,display=Message Header"`
	ClockAndStatsWithNotes []NMD_N02_ClockAndStatsWithNotes `hl7:",required,display=Clock And Stats With Notes"`
}

// QryWithDetail
type NMQ_N01_QryWithDetail struct {
	HL7 HL7Name `hl7:",name=NMQ_N01_QryWithDetail,type=tg"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// ClockAndStatistics
type NMQ_N01_ClockAndStatistics struct {
	HL7 HL7Name `hl7:",name=NMQ_N01_ClockAndStatistics,type=tg"`
	NCK *NCK    `hl7:"4,display=System clock"`
	NST *NST    `hl7:"5,display=Application control level statistics"`
	NSC *NSC    `hl7:"6,display=Application status change"`
}

// Application management query message
//
// The N01 event signifies when the NMQ (Application Management Query) message is used by one application to make application
// control-level requests for information or action to another application.  It has three segments, the NCK segment (system
// clock), the NST segment (application control-level statistics), and the NSC segment (application control-level status
// change). At least one of these three segments must be present in the NMQ message. If a segment is present in the NMQ message,
// the corresponding segment needs to be present in the NMR message to return the requested data or status
type NMQ_N01 struct {
	HL7                HL7Name                      `hl7:",name=NMQ_N01,type=t"`
	MSH                *MSH                         `hl7:"1,required,display=Message Header"`
	QryWithDetail      *NMQ_N01_QryWithDetail       `hl7:",display=Qry With Detail"`
	ClockAndStatistics []NMQ_N01_ClockAndStatistics `hl7:",required,display=Clock And Statistics"`
}

// ClockAndStatsWithNotesAlt
type NMR_N01_ClockAndStatsWithNotesAlt struct {
	HL7  HL7Name `hl7:",name=NMR_N01_ClockAndStatsWithNotesAlt,type=tg"`
	NCK  *NCK    `hl7:"5,display=System clock"`
	NTE  []NTE   `hl7:"6,display=Notes and Comments"`
	NST  *NST    `hl7:"7,display=Application control level statistics"`
	NTE2 []NTE   `hl7:"8,display=Notes and Comments"`
	NSC  *NSC    `hl7:"9,display=Application status change"`
	NTE3 []NTE   `hl7:"10,display=Notes and Comments"`
}

// Application management response
//
// The N01 event signifies when the NMQ (Application Management Query) message is used by one application to make application
// control-level requests for information or action to another application.  It has three segments, the NCK segment (system
// clock), the NST segment (application control-level statistics), and the NSC segment (application control-level status
// change). At least one of these three segments must be present in the NMQ message. If a segment is present in the NMQ message,
// the corresponding segment needs to be present in the NMR message to return the requested data or status
type NMR_N01 struct {
	HL7                       HL7Name                             `hl7:",name=NMR_N01,type=t"`
	MSH                       *MSH                                `hl7:"1,required,display=Message Header"`
	MSA                       *MSA                                `hl7:"2,required,display=Message Acknowledgment"`
	ERR                       *ERR                                `hl7:"3,display=Error"`
	QRD                       *QRD                                `hl7:"4,display=Original-Style Query Definition"`
	ClockAndStatsWithNotesAlt []NMR_N01_ClockAndStatsWithNotesAlt `hl7:",required,display=Clock And Stats With Notes Alt"`
}

// Patient
type OMD_O03_Patient struct {
	HL7          HL7Name               `hl7:",name=OMD_O03_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *OMD_O03_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMD_O03_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type OMD_O03_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMD_O03_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type OMD_O03_Insurance struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// OrderDiet
type OMD_O03_OrderDiet struct {
	HL7  HL7Name       `hl7:",name=OMD_O03_OrderDiet,type=tg"`
	ORC  *ORC          `hl7:"13,required,display=Common Order"`
	Diet *OMD_O03_Diet `hl7:",display=Diet"`
}

// Diet
type OMD_O03_Diet struct {
	HL7         HL7Name               `hl7:",name=OMD_O03_Diet,type=tg"`
	ODS         []ODS                 `hl7:"14,required,display=Dietary Orders- Supplements- and Preferences"`
	NTE         []NTE                 `hl7:"15,display=Notes and Comments"`
	Observation []OMD_O03_Observation `hl7:",display=Observation"`
}

// Observation
type OMD_O03_Observation struct {
	HL7 HL7Name `hl7:",name=OMD_O03_Observation,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/Result"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// OrderTray
type OMD_O03_OrderTray struct {
	HL7 HL7Name `hl7:",name=OMD_O03_OrderTray,type=tg"`
	ORC *ORC    `hl7:"18,required,display=Common Order"`
	ODT []ODT   `hl7:"19,required,display=Diet Tray Instructions"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Dietary order
//
// A diet office needs to receive specific information, the most important being the diet order itself.  Diet restrictions
// (often called diet codes) are the basic building blocks of a diet order.  The diet order segments may be sent as part of the
// ORM and ORR message structure to support backwards compatibility, or may be sent as part of the following dedicated message
// structures.
type OMD_O03 struct {
	HL7       HL7Name             `hl7:",name=OMD_O03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	NTE       []NTE               `hl7:"2,display=Notes and Comments"`
	Patient   *OMD_O03_Patient    `hl7:",display=Patient"`
	OrderDiet []OMD_O03_OrderDiet `hl7:",required,display=Order Diet"`
	OrderTray []OMD_O03_OrderTray `hl7:",display=Order Tray"`
}

// Patient
type OMG_O19_Patient struct {
	HL7          HL7Name               `hl7:",name=OMG_O19_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *OMG_O19_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMG_O19_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type OMG_O19_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMG_O19_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type OMG_O19_Insurance struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type OMG_O19_Order struct {
	HL7         HL7Name               `hl7:",name=OMG_O19_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	OBR         *OBR                  `hl7:"14,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"15,display=Notes and Comments"`
	CTD         *CTD                  `hl7:"16,display=Contact Data"`
	DG1         []DG1                 `hl7:"17,display=Diagnosis"`
	Observation []OMG_O19_Observation `hl7:",display=Observation"`
	PriorResult []OMG_O19_PriorResult `hl7:",display=Prior Result"`
	FT1         []FT1                 `hl7:"31,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"32,display=Clinical Trial Identification"`
	BLG         *BLG                  `hl7:"33,display=Billing"`
}

// Observation
type OMG_O19_Observation struct {
	HL7 HL7Name `hl7:",name=OMG_O19_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PriorResult
type OMG_O19_PriorResult struct {
	HL7               HL7Name                    `hl7:",name=OMG_O19_PriorResult,type=tg"`
	PatientPrior      *OMG_O19_PatientPrior      `hl7:",display=Patient Prior"`
	PatientVisitPrior *OMG_O19_PatientVisitPrior `hl7:",display=Patient Visit Prior"`
	AL1               []AL1                      `hl7:"24,display=Patient allergy information"`
	OrderPrior        []OMG_O19_OrderPrior       `hl7:",required,display=Order Prior"`
}

// PatientPrior
type OMG_O19_PatientPrior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_PatientPrior,type=tg"`
	PID *PID    `hl7:"20,required,display=Patient identification"`
	PD1 *PD1    `hl7:"21,display=Patient Additional Demographic"`
}

// PatientVisitPrior
type OMG_O19_PatientVisitPrior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_PatientVisitPrior,type=tg"`
	PV1 *PV1    `hl7:"22,required,display=Patient visit"`
	PV2 *PV2    `hl7:"23,display=Patient visit - additional information"`
}

// OrderPrior
type OMG_O19_OrderPrior struct {
	HL7              HL7Name                    `hl7:",name=OMG_O19_OrderPrior,type=tg"`
	ORC              *ORC                       `hl7:"25,display=Common Order"`
	OBR              *OBR                       `hl7:"26,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"27,display=Notes and Comments"`
	CTD              *CTD                       `hl7:"28,display=Contact Data"`
	ObservationPrior []OMG_O19_ObservationPrior `hl7:",required,display=Observation Prior"`
}

// ObservationPrior
type OMG_O19_ObservationPrior struct {
	HL7 HL7Name `hl7:",name=OMG_O19_ObservationPrior,type=tg"`
	OBX *OBX    `hl7:"29,required,display=Observation/Result"`
	NTE []NTE   `hl7:"30,display=Notes and Comments"`
}

// General clinical order
//
// The function of this message is to initiate the transmission of information about a general clinical order that uses the
// OBR segment.  Messages using the ORM message with the OBR segment are supported for backward compatibility.  This includes
// placing new orders, cancellation of existing orders, discontinuation, holding, etc.  OMG messages can originate also
// with a placer, filler, or an interested third party.
type OMG_O19 struct {
	HL7     HL7Name          `hl7:",name=OMG_O19,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *OMG_O19_Patient `hl7:",display=Patient"`
	Order   []OMG_O19_Order  `hl7:",required,display=Order"`
}

// Patient
type OML_O21_Patient struct {
	HL7          HL7Name               `hl7:",name=OML_O21_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *OML_O21_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OML_O21_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type OML_O21_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OML_O21_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type OML_O21_Insurance struct {
	HL7 HL7Name `hl7:",name=OML_O21_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// OrderGeneral
type OML_O21_OrderGeneral struct {
	HL7        HL7Name             `hl7:",name=OML_O21_OrderGeneral,type=tg"`
	Container1 *OML_O21_Container1 `hl7:",display=Container 1"`
	Order      []OML_O21_Order     `hl7:",required,display=Order"`
}

// Container1
type OML_O21_Container1 struct {
	HL7 HL7Name `hl7:",name=OML_O21_Container1,type=tg"`
	SAC *SAC    `hl7:"13,required,display=Specimen and container detail"`
	OBX []OBX   `hl7:"14,display=Observation/Result"`
}

// Order
type OML_O21_Order struct {
	HL7                HL7Name                     `hl7:",name=OML_O21_Order,type=tg"`
	ORC                *ORC                        `hl7:"15,required,display=Common Order"`
	ObservationRequest *OML_O21_ObservationRequest `hl7:",display=Observation Request"`
	FT1                []FT1                       `hl7:"35,display=Financial Transaction"`
	CTI                []CTI                       `hl7:"36,display=Clinical Trial Identification"`
	BLG                *BLG                        `hl7:"37,display=Billing"`
}

// ObservationRequest
type OML_O21_ObservationRequest struct {
	HL7         HL7Name               `hl7:",name=OML_O21_ObservationRequest,type=tg"`
	OBR         *OBR                  `hl7:"16,required,display=Observation Request"`
	Container2  []OML_O21_Container2  `hl7:",display=Container 2"`
	TCD         *TCD                  `hl7:"19,display=Test Code Detail"`
	NTE         []NTE                 `hl7:"20,display=Notes and Comments"`
	DG1         []DG1                 `hl7:"21,display=Diagnosis"`
	Observation []OML_O21_Observation `hl7:",display=Observation"`
	PriorResult []OML_O21_PriorResult `hl7:",display=Prior Result"`
}

// Container2
type OML_O21_Container2 struct {
	HL7 HL7Name `hl7:",name=OML_O21_Container2,type=tg"`
	SAC *SAC    `hl7:"17,required,display=Specimen and container detail"`
	OBX []OBX   `hl7:"18,display=Observation/Result"`
}

// Observation
type OML_O21_Observation struct {
	HL7 HL7Name `hl7:",name=OML_O21_Observation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	TCD *TCD    `hl7:"23,display=Test Code Detail"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// PriorResult
type OML_O21_PriorResult struct {
	HL7               HL7Name                    `hl7:",name=OML_O21_PriorResult,type=tg"`
	PatientPrior      *OML_O21_PatientPrior      `hl7:",display=Patient Prior"`
	PatientVisitPrior *OML_O21_PatientVisitPrior `hl7:",display=Patient Visit Prior"`
	AL1               []AL1                      `hl7:"29,display=Patient allergy information"`
	OrderPrior        []OML_O21_OrderPrior       `hl7:",required,display=Order Prior"`
}

// PatientPrior
type OML_O21_PatientPrior struct {
	HL7 HL7Name `hl7:",name=OML_O21_PatientPrior,type=tg"`
	PID *PID    `hl7:"25,required,display=Patient identification"`
	PD1 *PD1    `hl7:"26,display=Patient Additional Demographic"`
}

// PatientVisitPrior
type OML_O21_PatientVisitPrior struct {
	HL7 HL7Name `hl7:",name=OML_O21_PatientVisitPrior,type=tg"`
	PV1 *PV1    `hl7:"27,required,display=Patient visit"`
	PV2 *PV2    `hl7:"28,display=Patient visit - additional information"`
}

// OrderPrior
type OML_O21_OrderPrior struct {
	HL7              HL7Name                    `hl7:",name=OML_O21_OrderPrior,type=tg"`
	ORC              *ORC                       `hl7:"30,display=Common Order"`
	OBR              *OBR                       `hl7:"31,required,display=Observation Request"`
	NTE              []NTE                      `hl7:"32,display=Notes and Comments"`
	ObservationPrior []OML_O21_ObservationPrior `hl7:",required,display=Observation Prior"`
}

// ObservationPrior
type OML_O21_ObservationPrior struct {
	HL7 HL7Name `hl7:",name=OML_O21_ObservationPrior,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/Result"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
}

// Laboratory order
//
// The following message structure may be used for the communication of laboratory and other order messages and must be used
// for lab automation messages.  While the ORM message with the OBR segment can be used for backwards compatibility for general
// lab messages, only the OML message should be used to take advantage of the specimen and container extensions required in
// laboratory automation.
type OML_O21 struct {
	HL7          HL7Name                `hl7:",name=OML_O21,type=t"`
	MSH          *MSH                   `hl7:"1,required,display=Message Header"`
	NTE          []NTE                  `hl7:"2,display=Notes and Comments"`
	Patient      *OML_O21_Patient       `hl7:",display=Patient"`
	OrderGeneral []OML_O21_OrderGeneral `hl7:",required,display=Order General"`
}

// Patient
type OMN_O07_Patient struct {
	HL7          HL7Name               `hl7:",name=OMN_O07_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *OMN_O07_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMN_O07_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type OMN_O07_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMN_O07_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type OMN_O07_Insurance struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type OMN_O07_Order struct {
	HL7         HL7Name               `hl7:",name=OMN_O07_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	RQD         *RQD                  `hl7:"14,required,display=Requisition Detail"`
	RQ1         *RQ1                  `hl7:"15,display=Requisition Detail-1"`
	NTE         []NTE                 `hl7:"16,display=Notes and Comments"`
	Observation []OMN_O07_Observation `hl7:",display=Observation"`
	BLG         *BLG                  `hl7:"19,display=Billing"`
}

// Observation
type OMN_O07_Observation struct {
	HL7 HL7Name `hl7:",name=OMN_O07_Observation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Non-stock requisition order
//
// Non-stock requisitions can use the ORM message with the RQD and RQ1 segments as the detail segment, or use the OMN and ORN
// messages described.
type OMN_O07 struct {
	HL7     HL7Name          `hl7:",name=OMN_O07,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *OMN_O07_Patient `hl7:",display=Patient"`
	Order   []OMN_O07_Order  `hl7:",required,display=Order"`
}

// Patient
type OMP_O09_Patient struct {
	HL7          HL7Name               `hl7:",name=OMP_O09_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *OMP_O09_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMP_O09_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type OMP_O09_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMP_O09_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type OMP_O09_Insurance struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type OMP_O09_Order struct {
	HL7         HL7Name               `hl7:",name=OMP_O09_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	RXO         *RXO                  `hl7:"14,required,display=Pharmacy/Treatment Order"`
	NTE         []NTE                 `hl7:"15,display=Notes and Comments"`
	RXR         []RXR                 `hl7:"16,required,display=Pharmacy/Treatment Route"`
	Component   *OMP_O09_Component    `hl7:",display=Component"`
	Observation []OMP_O09_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"21,display=Financial Transaction"`
	BLG         *BLG                  `hl7:"22,display=Billing"`
}

// Component
type OMP_O09_Component struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Component,type=tg"`
	RXC []RXC   `hl7:"17,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Observation
type OMP_O09_Observation struct {
	HL7 HL7Name `hl7:",name=OMP_O09_Observation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Pharmacy/treatment order
//
// Pharmacy/Treatment Orders can use the ORM message with the RXO, RXC, and RXR segments for the detail segment, or use the
// OMP and ORP messages as described.
type OMP_O09 struct {
	HL7     HL7Name          `hl7:",name=OMP_O09,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *OMP_O09_Patient `hl7:",display=Patient"`
	Order   []OMP_O09_Order  `hl7:",required,display=Order"`
}

// Patient
type OMS_O05_Patient struct {
	HL7          HL7Name               `hl7:",name=OMS_O05_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *OMS_O05_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []OMS_O05_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type OMS_O05_PatientVisit struct {
	HL7 HL7Name `hl7:",name=OMS_O05_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type OMS_O05_Insurance struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type OMS_O05_Order struct {
	HL7         HL7Name               `hl7:",name=OMS_O05_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	RQD         *RQD                  `hl7:"14,required,display=Requisition Detail"`
	RQ1         *RQ1                  `hl7:"15,display=Requisition Detail-1"`
	NTE         []NTE                 `hl7:"16,display=Notes and Comments"`
	Observation []OMS_O05_Observation `hl7:",display=Observation"`
	BLG         *BLG                  `hl7:"19,display=Billing"`
}

// Observation
type OMS_O05_Observation struct {
	HL7 HL7Name `hl7:",name=OMS_O05_Observation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Stock requisition order
//
// Stock requisition orders use the ORM where RQD is the detail segment for backward compatibility or can use the OMS and ORS
// messages described.
type OMS_O05 struct {
	HL7     HL7Name          `hl7:",name=OMS_O05,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *OMS_O05_Patient `hl7:",display=Patient"`
	Order   []OMS_O05_Order  `hl7:",required,display=Order"`
}

// Response
type ORD_O04_Response struct {
	HL7       HL7Name             `hl7:",name=ORD_O04_Response,type=tg"`
	Patient   *ORD_O04_Patient    `hl7:",display=Patient"`
	OrderDiet []ORD_O04_OrderDiet `hl7:",required,display=Order Diet"`
	OrderTray []ORD_O04_OrderTray `hl7:",display=Order Tray"`
}

// Patient
type ORD_O04_Patient struct {
	HL7 HL7Name `hl7:",name=ORD_O04_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// OrderDiet
type ORD_O04_OrderDiet struct {
	HL7 HL7Name `hl7:",name=ORD_O04_OrderDiet,type=tg"`
	ORC *ORC    `hl7:"7,required,display=Common Order"`
	ODS []ODS   `hl7:"8,display=Dietary Orders- Supplements- and Preferences"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
}

// OrderTray
type ORD_O04_OrderTray struct {
	HL7 HL7Name `hl7:",name=ORD_O04_OrderTray,type=tg"`
	ORC *ORC    `hl7:"10,required,display=Common Order"`
	ODT []ODT   `hl7:"11,display=Diet Tray Instructions"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// Dietary order acknowledgment
//
// A diet office needs to receive specific information, the most important being the diet order itself.  Diet restrictions
// (often called diet codes) are the basic building blocks of a diet order.  The diet order segments may be sent as part of the
// ORM and ORR message structure to support backwards compatibility, or may be sent as part of the following dedicated message
// structures.
type ORD_O04 struct {
	HL7      HL7Name           `hl7:",name=ORD_O04,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *ORD_O04_Response `hl7:",display=Response"`
}

// Response
type ORF_R04_Response struct {
	HL7     HL7Name          `hl7:",name=ORF_R04_Response,type=tg"`
	Patient *ORF_R04_Patient `hl7:",display=Patient"`
	Order   []ORF_R04_Order  `hl7:",required,display=Order"`
}

// Patient
type ORF_R04_Patient struct {
	HL7 HL7Name `hl7:",name=ORF_R04_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORF_R04_Order struct {
	HL7         HL7Name               `hl7:",name=ORF_R04_Order,type=tg"`
	ORC         *ORC                  `hl7:"7,display=Common Order"`
	OBR         *OBR                  `hl7:"8,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"9,display=Notes and Comments"`
	CTD         *CTD                  `hl7:"10,display=Contact Data"`
	Observation []ORF_R04_Observation `hl7:",required,display=Observation"`
	CTI         []CTI                 `hl7:"13,display=Clinical Trial Identification"`
}

// Observation
type ORF_R04_Observation struct {
	HL7 HL7Name `hl7:",name=ORF_R04_Observation,type=tg"`
	OBX *OBX    `hl7:"11,display=Observation/Result"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// Response to query; transmission of requested observation
type ORF_R04 struct {
	HL7      HL7Name            `hl7:",name=ORF_R04,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	QRD      *QRD               `hl7:"3,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"4,display=Original Style Query Filter"`
	Response []ORF_R04_Response `hl7:",required,display=Response"`
	ERR      *ERR               `hl7:"14,display=Error"`
	QAK      *QAK               `hl7:"15,display=Query Acknowledgment"`
	DSC      *DSC               `hl7:"16,display=Continuation Pointer"`
}

// Response
type ORF_W02_Response struct {
	HL7     HL7Name          `hl7:",name=ORF_W02_Response,type=tg"`
	Patient *ORF_W02_Patient `hl7:",display=Patient"`
	Order   []ORF_W02_Order  `hl7:",required,display=Order"`
}

// Patient
type ORF_W02_Patient struct {
	HL7 HL7Name `hl7:",name=ORF_W02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORF_W02_Order struct {
	HL7         HL7Name               `hl7:",name=ORF_W02_Order,type=tg"`
	ORC         *ORC                  `hl7:"7,display=Common Order"`
	OBR         *OBR                  `hl7:"8,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"9,display=Notes and Comments"`
	CTD         *CTD                  `hl7:"10,display=Contact Data"`
	Observation []ORF_W02_Observation `hl7:",required,display=Observation"`
	CTI         []CTI                 `hl7:"13,display=Clinical Trial Identification"`
}

// Observation
type ORF_W02_Observation struct {
	HL7 HL7Name `hl7:",name=ORF_W02_Observation,type=tg"`
	OBX *OBX    `hl7:"11,display=Observation/Result"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// Waveform result, response to query
//
// The W02 trigger event identifies QRF messages which are a response to a QRY message specifying an immediate mode query for
// waveform results/observations with record-oriented format.
type ORF_W02 struct {
	HL7      HL7Name            `hl7:",name=ORF_W02,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	QRD      *QRD               `hl7:"3,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"4,display=Original Style Query Filter"`
	Response []ORF_W02_Response `hl7:",required,display=Response"`
	ERR      *ERR               `hl7:"14,display=Error"`
	QAK      *QAK               `hl7:"15,display=Query Acknowledgment"`
	DSC      *DSC               `hl7:"16,display=Continuation Pointer"`
}

// Response
type ORG_O20_Response struct {
	HL7     HL7Name          `hl7:",name=ORG_O20_Response,type=tg"`
	Patient *ORG_O20_Patient `hl7:",display=Patient"`
	Order   []ORG_O20_Order  `hl7:",required,display=Order"`
}

// Patient
type ORG_O20_Patient struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORG_O20_Order struct {
	HL7 HL7Name `hl7:",name=ORG_O20_Order,type=tg"`
	ORC *ORC    `hl7:"7,required,display=Common Order"`
	OBR *OBR    `hl7:"8,display=Observation Request"`
	NTE []NTE   `hl7:"9,display=Notes and Comments"`
	CTI []CTI   `hl7:"10,display=Clinical Trial Identification"`
}

// General clinical order response
//
// The function of this message is to respond to an OMG message.  An ORG message is the application acknowledgment to an OMG message.
//
//
// In ORG the PID and ORC segments are optional, particularly in case of an error response.  However, ORC segments are always
// required in ORG when the OBR is present.  For example, a response ORG might include only the MSH and MSA.
type ORG_O20 struct {
	HL7      HL7Name           `hl7:",name=ORG_O20,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *ORG_O20_Response `hl7:",display=Response"`
}

// Response
type ORL_O22_Response struct {
	HL7     HL7Name          `hl7:",name=ORL_O22_Response,type=tg"`
	Patient *ORL_O22_Patient `hl7:",display=Patient"`
}

// Patient
type ORL_O22_Patient struct {
	HL7          HL7Name                `hl7:",name=ORL_O22_Patient,type=tg"`
	PID          *PID                   `hl7:"5,required,display=Patient identification"`
	GeneralOrder []ORL_O22_GeneralOrder `hl7:",required,display=General Order"`
}

// GeneralOrder
type ORL_O22_GeneralOrder struct {
	HL7       HL7Name            `hl7:",name=ORL_O22_GeneralOrder,type=tg"`
	Container *ORL_O22_Container `hl7:",display=Container"`
	Order     []ORL_O22_Order    `hl7:",display=Order"`
}

// Container
type ORL_O22_Container struct {
	HL7 HL7Name `hl7:",name=ORL_O22_Container,type=tg"`
	SAC *SAC    `hl7:"6,required,display=Specimen and container detail"`
	OBX []OBX   `hl7:"7,display=Observation/Result"`
}

// Order
type ORL_O22_Order struct {
	HL7                HL7Name                     `hl7:",name=ORL_O22_Order,type=tg"`
	ORC                *ORC                        `hl7:"8,required,display=Common Order"`
	ObservationRequest *ORL_O22_ObservationRequest `hl7:",display=Observation Request"`
}

// ObservationRequest
type ORL_O22_ObservationRequest struct {
	HL7 HL7Name `hl7:",name=ORL_O22_ObservationRequest,type=tg"`
	OBR *OBR    `hl7:"9,required,display=Observation Request"`
	SAC []SAC   `hl7:"10,display=Specimen and container detail"`
}

// General laboratory order response message
//
// The function of this message is to respond to an OML message.  An ORL message is the application acknowledgment to an OML message.
type ORL_O22 struct {
	HL7      HL7Name           `hl7:",name=ORL_O22,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *ORL_O22_Response `hl7:",display=Response"`
}

// Patient
type ORM_O01_Patient struct {
	HL7          HL7Name               `hl7:",name=ORM_O01_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *ORM_O01_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []ORM_O01_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type ORM_O01_PatientVisit struct {
	HL7 HL7Name `hl7:",name=ORM_O01_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type ORM_O01_Insurance struct {
	HL7 HL7Name `hl7:",name=ORM_O01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type ORM_O01_Order struct {
	HL7         HL7Name              `hl7:",name=ORM_O01_Order,type=tg"`
	ORC         *ORC                 `hl7:"13,required,display=Common Order"`
	OrderDetail *ORM_O01_OrderDetail `hl7:",display=Order Detail"`
	FT1         []FT1                `hl7:"25,display=Financial Transaction"`
	CTI         []CTI                `hl7:"26,display=Clinical Trial Identification"`
	BLG         *BLG                 `hl7:"27,display=Billing"`
}

// OrderDetail
type ORM_O01_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=ORM_O01_OrderDetail,type=tg"`
	OrderDetailSegment *ORM_O01_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"20,display=Notes and Comments"`
	CTD                *CTD                        `hl7:"21,display=Contact Data"`
	DG1                []DG1                       `hl7:"22,display=Diagnosis"`
	Observation        []ORM_O01_Observation       `hl7:",display=Observation"`
}

// OrderDetailSegment
type ORM_O01_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=ORM_O01_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"14,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"15,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"16,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"17,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"18,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"19,conditional,display=Diet Tray Instructions"`
}

// Observation
type ORM_O01_Observation struct {
	HL7 HL7Name `hl7:",name=ORM_O01_Observation,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Order message
//
// Left for backward compatibility only.  It is recommended that the trigger events OMG, OML, OMD, OMS OMN and OMP be used instead
// when communicating orders and order related events.
//
// The function of this message is to initiate the transmission of information about an order.  This includes placing new orders,
// cancellation of existing orders, discontinuation, holding, etc.  ORM messages can originate also with a placer, filler,
// or an interested third party.
type ORM_O01 struct {
	HL7     HL7Name          `hl7:",name=ORM_O01,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *ORM_O01_Patient `hl7:",display=Patient"`
	Order   []ORM_O01_Order  `hl7:",required,display=Order"`
}

// Response
type ORN_O08_Response struct {
	HL7     HL7Name          `hl7:",name=ORN_O08_Response,type=tg"`
	Patient *ORN_O08_Patient `hl7:",display=Patient"`
	Order   []ORN_O08_Order  `hl7:",required,display=Order"`
}

// Patient
type ORN_O08_Patient struct {
	HL7 HL7Name `hl7:",name=ORN_O08_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORN_O08_Order struct {
	HL7 HL7Name `hl7:",name=ORN_O08_Order,type=tg"`
	ORC *ORC    `hl7:"7,required,display=Common Order"`
	RQD *RQD    `hl7:"8,required,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"9,display=Requisition Detail-1"`
	NTE []NTE   `hl7:"10,display=Notes and Comments"`
}

// Non-stock requisition acknowledgement
//
// Non-stock requisitions can use the ORM message with the RQD and RQ1 segments as the detail segment, or use the OMN and ORN
// messages described.
type ORN_O08 struct {
	HL7      HL7Name           `hl7:",name=ORN_O08,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *ORN_O08_Response `hl7:",display=Response"`
}

// Response
type ORP_O10_Response struct {
	HL7     HL7Name          `hl7:",name=ORP_O10_Response,type=tg"`
	Patient *ORP_O10_Patient `hl7:",display=Patient"`
	Order   []ORP_O10_Order  `hl7:",required,display=Order"`
}

// Patient
type ORP_O10_Patient struct {
	HL7 HL7Name `hl7:",name=ORP_O10_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORP_O10_Order struct {
	HL7         HL7Name              `hl7:",name=ORP_O10_Order,type=tg"`
	ORC         *ORC                 `hl7:"7,required,display=Common Order"`
	OrderDetail *ORP_O10_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type ORP_O10_OrderDetail struct {
	HL7  HL7Name `hl7:",name=ORP_O10_OrderDetail,type=tg"`
	RXO  *RXO    `hl7:"8,required,display=Pharmacy/Treatment Order"`
	NTE  []NTE   `hl7:"9,display=Notes and Comments"`
	RXR  []RXR   `hl7:"10,required,display=Pharmacy/Treatment Route"`
	RXC  []RXC   `hl7:"11,display=Pharmacy/Treatment Component Order"`
	NTE2 []NTE   `hl7:"12,display=Notes and Comments"`
}

// Pharmacy/treatment order acknowledgement
//
// Pharmacy/Treatment Orders can use the ORM message with the RXO, RXC, and RXR segments for the detail segment, or use the
// OMP and ORP messages as described
type ORP_O10 struct {
	HL7      HL7Name           `hl7:",name=ORP_O10,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *ORP_O10_Response `hl7:",display=Response"`
}

// Response
type ORR_O02_Response struct {
	HL7     HL7Name          `hl7:",name=ORR_O02_Response,type=tg"`
	Patient *ORR_O02_Patient `hl7:",display=Patient"`
	Order   []ORR_O02_Order  `hl7:",required,display=Order"`
}

// Patient
type ORR_O02_Patient struct {
	HL7 HL7Name `hl7:",name=ORR_O02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORR_O02_Order struct {
	HL7                HL7Name                     `hl7:",name=ORR_O02_Order,type=tg"`
	ORC                *ORC                        `hl7:"7,required,display=Common Order"`
	OrderDetailSegment *ORR_O02_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"14,display=Notes and Comments"`
	CTI                []CTI                       `hl7:"15,display=Clinical Trial Identification"`
}

// OrderDetailSegment
type ORR_O02_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=ORR_O02_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"8,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"9,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"10,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"11,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"12,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"13,conditional,display=Diet Tray Instructions"`
}

// Order response
//
// The function of this message is to respond to an ORM message.  An ORR message is the application acknowledgment to an ORM message.
//
type ORR_O02 struct {
	HL7      HL7Name           `hl7:",name=ORR_O02,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *ORR_O02_Response `hl7:",display=Response"`
}

// Rsponse
type ORS_O06_Rsponse struct {
	HL7     HL7Name          `hl7:",name=ORS_O06_Rsponse,type=tg"`
	Patient *ORS_O06_Patient `hl7:",display=Patient"`
	Order   []ORS_O06_Order  `hl7:",required,display=Order"`
}

// Patient
type ORS_O06_Patient struct {
	HL7 HL7Name `hl7:",name=ORS_O06_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type ORS_O06_Order struct {
	HL7 HL7Name `hl7:",name=ORS_O06_Order,type=tg"`
	ORC *ORC    `hl7:"7,required,display=Common Order"`
	RQD *RQD    `hl7:"8,required,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"9,display=Requisition Detail-1"`
	NTE []NTE   `hl7:"10,display=Notes and Comments"`
}

// Stock requisition acknowledgement
//
// Stock requisition orders use the ORM where RQD is the detail segment for backward compatibility or can use the OMS and ORS
// messages described.
type ORS_O06 struct {
	HL7     HL7Name          `hl7:",name=ORS_O06,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	MSA     *MSA             `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR             `hl7:"3,display=Error"`
	NTE     []NTE            `hl7:"4,display=Notes and Comments"`
	Rsponse *ORS_O06_Rsponse `hl7:",display=Rsponse"`
}

// PatientResult
type ORU_R01_PatientResult struct {
	HL7              HL7Name                    `hl7:",name=ORU_R01_PatientResult,type=tg"`
	Patient          *ORU_R01_Patient           `hl7:",display=Patient"`
	OrderObservation []ORU_R01_OrderObservation `hl7:",required,display=Order Observation"`
}

// Patient
type ORU_R01_Patient struct {
	HL7   HL7Name        `hl7:",name=ORU_R01_Patient,type=tg"`
	PID   *PID           `hl7:"2,required,display=Patient identification"`
	PD1   *PD1           `hl7:"3,display=Patient Additional Demographic"`
	NK1   []NK1          `hl7:"4,display=Next of kin / associated parties"`
	NTE   []NTE          `hl7:"5,display=Notes and Comments"`
	Visit *ORU_R01_Visit `hl7:",display=Visit"`
}

// Visit
type ORU_R01_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Visit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// OrderObservation
type ORU_R01_OrderObservation struct {
	HL7         HL7Name               `hl7:",name=ORU_R01_OrderObservation,type=tg"`
	ORC         *ORC                  `hl7:"8,display=Common Order"`
	OBR         *OBR                  `hl7:"9,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"10,display=Notes and Comments"`
	CTD         *CTD                  `hl7:"11,display=Contact Data"`
	Observation []ORU_R01_Observation `hl7:",required,display=Observation"`
	FT1         []FT1                 `hl7:"14,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"15,display=Clinical Trial Identification"`
}

// Observation
type ORU_R01_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Observation,type=tg"`
	OBX *OBX    `hl7:"12,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Unsolicited transmission of an observation message
//
// The OUL message is designed to accommodate the laboratory processes of laboratory automation systems. The ORU message
// is still fully supported by HL7 for transmitting laboratory results to other systems
//
// Note:  The ORC is permitted but not required in this message.  Any information that could be included in either the ORC or the
// OBR must be included in the OBR on reporting.  Notice also that the ORU (and the QRY) messages accommodate reports about many
// patients.
type ORU_R01 struct {
	HL7           HL7Name                 `hl7:",name=ORU_R01,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	PatientResult []ORU_R01_PatientResult `hl7:",required,display=Patient Result"`
	DSC           *DSC                    `hl7:"16,display=Continuation Pointer"`
}

// PatientResult
type ORU_W01_PatientResult struct {
	HL7              HL7Name                    `hl7:",name=ORU_W01_PatientResult,type=tg"`
	Patient          *ORU_W01_Patient           `hl7:",display=Patient"`
	OrderObservation []ORU_W01_OrderObservation `hl7:",required,display=Order Observation"`
}

// Patient
type ORU_W01_Patient struct {
	HL7   HL7Name        `hl7:",name=ORU_W01_Patient,type=tg"`
	PID   *PID           `hl7:"2,required,display=Patient identification"`
	PD1   *PD1           `hl7:"3,display=Patient Additional Demographic"`
	NK1   []NK1          `hl7:"4,display=Next of kin / associated parties"`
	NTE   []NTE          `hl7:"5,display=Notes and Comments"`
	Visit *ORU_W01_Visit `hl7:",display=Visit"`
}

// Visit
type ORU_W01_Visit struct {
	HL7 HL7Name `hl7:",name=ORU_W01_Visit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// OrderObservation
type ORU_W01_OrderObservation struct {
	HL7         HL7Name               `hl7:",name=ORU_W01_OrderObservation,type=tg"`
	ORC         *ORC                  `hl7:"8,display=Common Order"`
	OBR         *OBR                  `hl7:"9,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"10,display=Notes and Comments"`
	CTD         *CTD                  `hl7:"11,display=Contact Data"`
	Observation []ORU_W01_Observation `hl7:",required,display=Observation"`
	FT1         []FT1                 `hl7:"14,display=Financial Transaction"`
	CTI         []CTI                 `hl7:"15,display=Clinical Trial Identification"`
}

// Observation
type ORU_W01_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_W01_Observation,type=tg"`
	OBX *OBX    `hl7:"12,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Waveform result, unsolicited transmission of requested information
//
// The waveform response unsolicited trigger event identifies ORU messages used to transmit waveform data which are results
// of an ordered test or series of observations. The W01 trigger event may also be used to identify ORU messages sent as the eventual
// response to a QRY message specifying a deferred mode query for waveform results/observations with record-oriented format
// (similar to the deferred response display mode DSR message type described in Chapter 2).  One or more ORU messages with the
// W01 trigger event  may result from this type of QRY message.
type ORU_W01 struct {
	HL7           HL7Name                 `hl7:",name=ORU_W01,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	PatientResult []ORU_W01_PatientResult `hl7:",required,display=Patient Result"`
	DSC           *DSC                    `hl7:"16,display=Continuation Pointer"`
}

// Query for order status
type OSQ_Q06 struct {
	HL7 HL7Name `hl7:",name=OSQ_Q06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Response
type OSR_Q06_Response struct {
	HL7     HL7Name          `hl7:",name=OSR_Q06_Response,type=tg"`
	Patient *OSR_Q06_Patient `hl7:",display=Patient"`
	Order   []OSR_Q06_Order  `hl7:",required,display=Order"`
}

// Patient
type OSR_Q06_Patient struct {
	HL7 HL7Name `hl7:",name=OSR_Q06_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient identification"`
	NTE []NTE   `hl7:"8,display=Notes and Comments"`
}

// Order
type OSR_Q06_Order struct {
	HL7                HL7Name                     `hl7:",name=OSR_Q06_Order,type=tg"`
	ORC                *ORC                        `hl7:"9,required,display=Common Order"`
	OrderDetailSegment *OSR_Q06_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"16,display=Notes and Comments"`
	CTI                []CTI                       `hl7:"17,display=Clinical Trial Identification"`
}

// OrderDetailSegment
type OSR_Q06_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=OSR_Q06_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"10,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"11,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"12,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"13,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"14,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"15,conditional,display=Diet Tray Instructions"`
}

// Query response for order status
type OSR_Q06 struct {
	HL7      HL7Name           `hl7:",name=OSR_Q06,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	QRD      *QRD              `hl7:"5,required,display=Original-Style Query Definition"`
	QRF      *QRF              `hl7:"6,display=Original Style Query Filter"`
	Response *OSR_Q06_Response `hl7:",display=Response"`
	DSC      *DSC              `hl7:"18,display=Continuation Pointer"`
}

// Patient
type OUL_R21_Patient struct {
	HL7 HL7Name `hl7:",name=OUL_R21_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient identification"`
	PD1 *PD1    `hl7:"4,display=Patient Additional Demographic"`
	NTE []NTE   `hl7:"5,display=Notes and Comments"`
}

// Visit
type OUL_R21_Visit struct {
	HL7 HL7Name `hl7:",name=OUL_R21_Visit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// OrderObservation
type OUL_R21_OrderObservation struct {
	HL7         HL7Name               `hl7:",name=OUL_R21_OrderObservation,type=tg"`
	Container   *OUL_R21_Container    `hl7:",display=Container"`
	ORC         *ORC                  `hl7:"11,display=Common Order"`
	OBR         *OBR                  `hl7:"12,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"13,display=Notes and Comments"`
	Observation []OUL_R21_Observation `hl7:",required,display=Observation"`
	CTI         []CTI                 `hl7:"18,display=Clinical Trial Identification"`
}

// Container
type OUL_R21_Container struct {
	HL7 HL7Name `hl7:",name=OUL_R21_Container,type=tg"`
	SAC *SAC    `hl7:"8,required,display=Specimen and container detail"`
	SID *SID    `hl7:"9,display=Substance Identifier"`
	OBX []OBX   `hl7:"10,display=Observation/Result"`
}

// Observation
type OUL_R21_Observation struct {
	HL7 HL7Name `hl7:",name=OUL_R21_Observation,type=tg"`
	OBX *OBX    `hl7:"14,display=Observation/Result"`
	TCD *TCD    `hl7:"15,display=Test Code Detail"`
	SID []SID   `hl7:"16,display=Substance Identifier"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// Unsolicited laboratory observation
//
// This message was designed to accommodate laboratory automation systems.  It permits the communication of the following
// kinds of information in addition to the results themselves: relation of the analysis results to a particular container
// with patient sample (SAC segment),
type OUL_R21 struct {
	HL7              HL7Name                    `hl7:",name=OUL_R21,type=t"`
	MSH              *MSH                       `hl7:"1,required,display=Message Header"`
	NTE              *NTE                       `hl7:"2,display=Notes and Comments"`
	Patient          *OUL_R21_Patient           `hl7:",display=Patient"`
	Visit            *OUL_R21_Visit             `hl7:",display=Visit"`
	OrderObservation []OUL_R21_OrderObservation `hl7:",required,display=Order Observation"`
	DSC              *DSC                       `hl7:"19,display=Continuation Pointer"`
}

// Visit
type PEX_P07_Visit struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Visit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Experience
type PEX_P07_Experience struct {
	HL7            HL7Name                  `hl7:",name=PEX_P07_Experience,type=tg"`
	PES            *PES                     `hl7:"8,required,display=Product Experience Sender"`
	PexObservation []PEX_P07_PexObservation `hl7:",required,display=Pex Observation"`
}

// PexObservation
type PEX_P07_PexObservation struct {
	HL7      HL7Name            `hl7:",name=PEX_P07_PexObservation,type=tg"`
	PEO      *PEO               `hl7:"9,required,display=Product Experience Observation"`
	PexCause []PEX_P07_PexCause `hl7:",required,display=Pex Cause"`
}

// PexCause
type PEX_P07_PexCause struct {
	HL7              HL7Name                    `hl7:",name=PEX_P07_PexCause,type=tg"`
	PCR              *PCR                       `hl7:"10,required,display=Possible Causal Relationship"`
	RxOrder          *PEX_P07_RxOrder           `hl7:",display=Rx Order"`
	RxAdministration []PEX_P07_RxAdministration `hl7:",display=Rx Administration"`
	PRB              []PRB                      `hl7:"15,display=Problem Details"`
	OBX              []OBX                      `hl7:"16,display=Observation/Result"`
	NTE              []NTE                      `hl7:"17,display=Notes and Comments"`
	AssociatedPerson *PEX_P07_AssociatedPerson  `hl7:",display=Associated Person"`
	Study            []PEX_P07_Study            `hl7:",display=Study"`
}

// RxOrder
type PEX_P07_RxOrder struct {
	HL7 HL7Name `hl7:",name=PEX_P07_RxOrder,type=tg"`
	RXE *RXE    `hl7:"11,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"12,display=Pharmacy/Treatment Route"`
}

// RxAdministration
type PEX_P07_RxAdministration struct {
	HL7 HL7Name `hl7:",name=PEX_P07_RxAdministration,type=tg"`
	RXA *RXA    `hl7:"13,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"14,display=Pharmacy/Treatment Route"`
}

// AssociatedPerson
type PEX_P07_AssociatedPerson struct {
	HL7               HL7Name                     `hl7:",name=PEX_P07_AssociatedPerson,type=tg"`
	NK1               *NK1                        `hl7:"18,required,display=Next of kin / associated parties"`
	AssociatedRxOrder *PEX_P07_AssociatedRxOrder  `hl7:",display=Associated Rx Order"`
	AssociatedRxAdmin []PEX_P07_AssociatedRxAdmin `hl7:",display=Associated Rx Admin"`
	PRB               []PRB                       `hl7:"23,display=Problem Details"`
	OBX               []OBX                       `hl7:"24,display=Observation/Result"`
}

// AssociatedRxOrder
type PEX_P07_AssociatedRxOrder struct {
	HL7 HL7Name `hl7:",name=PEX_P07_AssociatedRxOrder,type=tg"`
	RXE *RXE    `hl7:"19,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"20,display=Pharmacy/Treatment Route"`
}

// AssociatedRxAdmin
type PEX_P07_AssociatedRxAdmin struct {
	HL7 HL7Name `hl7:",name=PEX_P07_AssociatedRxAdmin,type=tg"`
	RXA *RXA    `hl7:"21,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"22,display=Pharmacy/Treatment Route"`
}

// Study
type PEX_P07_Study struct {
	HL7 HL7Name `hl7:",name=PEX_P07_Study,type=tg"`
	CSR *CSR    `hl7:"25,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"26,display=Clinical Study Phase"`
}

// Unsolicited initial individual product experience report
//
// The primary application of this message is to transfer information related to an adverse event occurring while a patient
// was exposed to a product
type PEX_P07 struct {
	HL7        HL7Name              `hl7:",name=PEX_P07,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	EVN        *EVN                 `hl7:"2,required,display=Event Type"`
	PID        *PID                 `hl7:"3,required,display=Patient identification"`
	PD1        *PD1                 `hl7:"4,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"5,display=Notes and Comments"`
	Visit      *PEX_P07_Visit       `hl7:",display=Visit"`
	Experience []PEX_P07_Experience `hl7:",required,display=Experience"`
}

// Visit
type PEX_P08_Visit struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Visit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Experience
type PEX_P08_Experience struct {
	HL7            HL7Name                  `hl7:",name=PEX_P08_Experience,type=tg"`
	PES            *PES                     `hl7:"8,required,display=Product Experience Sender"`
	PexObservation []PEX_P08_PexObservation `hl7:",required,display=Pex Observation"`
}

// PexObservation
type PEX_P08_PexObservation struct {
	HL7      HL7Name            `hl7:",name=PEX_P08_PexObservation,type=tg"`
	PEO      *PEO               `hl7:"9,required,display=Product Experience Observation"`
	PexCause []PEX_P08_PexCause `hl7:",required,display=Pex Cause"`
}

// PexCause
type PEX_P08_PexCause struct {
	HL7              HL7Name                    `hl7:",name=PEX_P08_PexCause,type=tg"`
	PCR              *PCR                       `hl7:"10,required,display=Possible Causal Relationship"`
	RxOrder          *PEX_P08_RxOrder           `hl7:",display=Rx Order"`
	RxAdministration []PEX_P08_RxAdministration `hl7:",display=Rx Administration"`
	PRB              []PRB                      `hl7:"15,display=Problem Details"`
	OBX              []OBX                      `hl7:"16,display=Observation/Result"`
	NTE              []NTE                      `hl7:"17,display=Notes and Comments"`
	AssociatedPerson *PEX_P08_AssociatedPerson  `hl7:",display=Associated Person"`
	Study            []PEX_P08_Study            `hl7:",display=Study"`
}

// RxOrder
type PEX_P08_RxOrder struct {
	HL7 HL7Name `hl7:",name=PEX_P08_RxOrder,type=tg"`
	RXE *RXE    `hl7:"11,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"12,display=Pharmacy/Treatment Route"`
}

// RxAdministration
type PEX_P08_RxAdministration struct {
	HL7 HL7Name `hl7:",name=PEX_P08_RxAdministration,type=tg"`
	RXA *RXA    `hl7:"13,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"14,display=Pharmacy/Treatment Route"`
}

// AssociatedPerson
type PEX_P08_AssociatedPerson struct {
	HL7               HL7Name                     `hl7:",name=PEX_P08_AssociatedPerson,type=tg"`
	NK1               *NK1                        `hl7:"18,required,display=Next of kin / associated parties"`
	AssociatedRxOrder *PEX_P08_AssociatedRxOrder  `hl7:",display=Associated Rx Order"`
	AssociatedRxAdmin []PEX_P08_AssociatedRxAdmin `hl7:",display=Associated Rx Admin"`
	PRB               []PRB                       `hl7:"23,display=Problem Details"`
	OBX               []OBX                       `hl7:"24,display=Observation/Result"`
}

// AssociatedRxOrder
type PEX_P08_AssociatedRxOrder struct {
	HL7 HL7Name `hl7:",name=PEX_P08_AssociatedRxOrder,type=tg"`
	RXE *RXE    `hl7:"19,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"20,display=Pharmacy/Treatment Route"`
}

// AssociatedRxAdmin
type PEX_P08_AssociatedRxAdmin struct {
	HL7 HL7Name `hl7:",name=PEX_P08_AssociatedRxAdmin,type=tg"`
	RXA *RXA    `hl7:"21,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"22,display=Pharmacy/Treatment Route"`
}

// Study
type PEX_P08_Study struct {
	HL7 HL7Name `hl7:",name=PEX_P08_Study,type=tg"`
	CSR *CSR    `hl7:"25,required,display=Clinical Study Registration"`
	CSP []CSP   `hl7:"26,display=Clinical Study Phase"`
}

// Unsolicited update individual product experience report
//
// The primary application of this message is to transfer information related to an adverse event occurring while a patient
// was exposed to a product
type PEX_P08 struct {
	HL7        HL7Name              `hl7:",name=PEX_P08,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	EVN        *EVN                 `hl7:"2,required,display=Event Type"`
	PID        *PID                 `hl7:"3,required,display=Patient identification"`
	PD1        *PD1                 `hl7:"4,display=Patient Additional Demographic"`
	NTE        []NTE                `hl7:"5,display=Notes and Comments"`
	Visit      *PEX_P08_Visit       `hl7:",display=Visit"`
	Experience []PEX_P08_Experience `hl7:",required,display=Experience"`
}

// PatientVisit
type PGL_PC6_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Goal
type PGL_PC6_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC6_Goal,type=tg"`
	GOL         *GOL                  `hl7:"5,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	GoalRole    []PGL_PC6_GoalRole    `hl7:",display=Goal Role"`
	Pathway     []PGL_PC6_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC6_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC6_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC6_Order       `hl7:",display=Order"`
}

// GoalRole
type PGL_PC6_GoalRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_GoalRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Pathway
type PGL_PC6_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Pathway,type=tg"`
	PTH *PTH    `hl7:"10,required,display=Pathway"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Observation
type PGL_PC6_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_Observation,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Problem
type PGL_PC6_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC6_Problem,type=tg"`
	PRB                *PRB                         `hl7:"14,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"15,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"16,display=Variance"`
	ProblemRole        []PGL_PC6_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PGL_PC6_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PGL_PC6_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// ProblemObservation
type PGL_PC6_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Order
type PGL_PC6_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC6_Order,type=tg"`
	ORC         *ORC                 `hl7:"21,required,display=Common Order"`
	OrderDetail *PGL_PC6_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PGL_PC6_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PGL_PC6_OrderDetail,type=tg"`
	OrderDetailSegment *PGL_PC6_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"29,display=Variance"`
	OrderObservation   []PGL_PC6_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PGL_PC6_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"22,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"23,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"24,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"25,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"26,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"27,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PGL_PC6_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC6_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/Result"`
	NTE []NTE   `hl7:"31,display=Notes and Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// Goal add
//
// This message is used to send goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.
type PGL_PC6 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC6,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PGL_PC6_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PGL_PC6_Goal        `hl7:",required,display=Goal"`
}

// PatientVisit
type PGL_PC7_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Goal
type PGL_PC7_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC7_Goal,type=tg"`
	GOL         *GOL                  `hl7:"5,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	GoalRole    []PGL_PC7_GoalRole    `hl7:",display=Goal Role"`
	Pathway     []PGL_PC7_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC7_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC7_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC7_Order       `hl7:",display=Order"`
}

// GoalRole
type PGL_PC7_GoalRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_GoalRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Pathway
type PGL_PC7_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Pathway,type=tg"`
	PTH *PTH    `hl7:"10,required,display=Pathway"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Observation
type PGL_PC7_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_Observation,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Problem
type PGL_PC7_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC7_Problem,type=tg"`
	PRB                *PRB                         `hl7:"14,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"15,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"16,display=Variance"`
	ProblemRole        []PGL_PC7_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PGL_PC7_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PGL_PC7_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// ProblemObservation
type PGL_PC7_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Order
type PGL_PC7_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC7_Order,type=tg"`
	ORC         *ORC                 `hl7:"21,required,display=Common Order"`
	OrderDetail *PGL_PC7_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PGL_PC7_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PGL_PC7_OrderDetail,type=tg"`
	OrderDetailSegment *PGL_PC7_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"29,display=Variance"`
	OrderObservation   []PGL_PC7_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PGL_PC7_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"22,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"23,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"24,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"25,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"26,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"27,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PGL_PC7_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC7_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/Result"`
	NTE []NTE   `hl7:"31,display=Notes and Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// Goal update
//
// This message is used to send goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.
type PGL_PC7 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC7,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PGL_PC7_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PGL_PC7_Goal        `hl7:",required,display=Goal"`
}

// PatientVisit
type PGL_PC8_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Goal
type PGL_PC8_Goal struct {
	HL7         HL7Name               `hl7:",name=PGL_PC8_Goal,type=tg"`
	GOL         *GOL                  `hl7:"5,required,display=Goal Detail"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	GoalRole    []PGL_PC8_GoalRole    `hl7:",display=Goal Role"`
	Pathway     []PGL_PC8_Pathway     `hl7:",display=Pathway"`
	Observation []PGL_PC8_Observation `hl7:",display=Observation"`
	Problem     []PGL_PC8_Problem     `hl7:",display=Problem"`
	Order       []PGL_PC8_Order       `hl7:",display=Order"`
}

// GoalRole
type PGL_PC8_GoalRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_GoalRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Pathway
type PGL_PC8_Pathway struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Pathway,type=tg"`
	PTH *PTH    `hl7:"10,required,display=Pathway"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// Observation
type PGL_PC8_Observation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_Observation,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Problem
type PGL_PC8_Problem struct {
	HL7                HL7Name                      `hl7:",name=PGL_PC8_Problem,type=tg"`
	PRB                *PRB                         `hl7:"14,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"15,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"16,display=Variance"`
	ProblemRole        []PGL_PC8_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PGL_PC8_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PGL_PC8_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// ProblemObservation
type PGL_PC8_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Order
type PGL_PC8_Order struct {
	HL7         HL7Name              `hl7:",name=PGL_PC8_Order,type=tg"`
	ORC         *ORC                 `hl7:"21,required,display=Common Order"`
	OrderDetail *PGL_PC8_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PGL_PC8_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PGL_PC8_OrderDetail,type=tg"`
	OrderDetailSegment *PGL_PC8_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"29,display=Variance"`
	OrderObservation   []PGL_PC8_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PGL_PC8_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"22,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"23,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"24,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"25,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"26,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"27,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PGL_PC8_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PGL_PC8_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/Result"`
	NTE []NTE   `hl7:"31,display=Notes and Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// Goal delete
//
// This message is used to send goals from one application to another (e.g., a point of care system to a clinical repository).
// Many of the segments associated with this event are optional.  This optionality allows systems in need of this information
// to set up transactions that fulfill their requirements.
type PGL_PC8 struct {
	HL7          HL7Name               `hl7:",name=PGL_PC8,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PGL_PC8_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PGL_PC8_Goal        `hl7:",required,display=Goal"`
}

// Provider
type PIN_I07_Provider struct {
	HL7 HL7Name `hl7:",name=PIN_I07_Provider,type=tg"`
	PRD *PRD    `hl7:"2,required,display=Provider Data"`
	CTD []CTD   `hl7:"3,display=Contact Data"`
}

// GuarantorInsurance
type PIN_I07_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=PIN_I07_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"6,display=Guarantor"`
	Insurance []PIN_I07_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type PIN_I07_Insurance struct {
	HL7 HL7Name `hl7:",name=PIN_I07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"7,required,display=Insurance"`
	IN2 *IN2    `hl7:"8,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"9,display=Insurance Additional Information- Certification"`
}

// Unsolicited insurance information
//
// This trigger event is used by an entity or organization to transmit to a healthcare provider the insurance information
// on a specific patient.  Typically, the healthcare provider will be a primary care provider.
type PIN_I07 struct {
	HL7                HL7Name                     `hl7:",name=PIN_I07,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	Provider           []PIN_I07_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"4,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"5,display=Next of kin / associated parties"`
	GuarantorInsurance *PIN_I07_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"10,display=Notes and Comments"`
}

// Add personnel record
//
// An event B01 signals to add a new record for healthcare administration information about an individual healthcare practitioner
// establishing a relationship between that practitioner and the institution.
//
// The EVN segment is used to indicate the effective or planned date.
type PMU_B01 struct {
	HL7 HL7Name `hl7:",name=PMU_B01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	STF *STF    `hl7:"3,required,display=Staff Identification"`
	PRA []PRA   `hl7:"4,display=Practitioner Detail"`
	ORG []ORG   `hl7:"5,display=Practitioner Organization Unit"`
	AFF []AFF   `hl7:"6,display=Professional Affiliation"`
	LAN []LAN   `hl7:"7,display=Language Detail"`
	EDU []EDU   `hl7:"8,display=Educational Detail"`
}

// Update personnel record
//
// An event B02 signals to update the record with the healthcare administration information about an individual healthcare
// practitioner.
type PMU_B02 struct {
	HL7 HL7Name `hl7:",name=PMU_B02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	STF *STF    `hl7:"3,required,display=Staff Identification"`
	PRA []PRA   `hl7:"4,display=Practitioner Detail"`
	ORG []ORG   `hl7:"5,display=Practitioner Organization Unit"`
	AFF []AFF   `hl7:"6,display=Professional Affiliation"`
	LAN []LAN   `hl7:"7,display=Language Detail"`
	EDU []EDU   `hl7:"8,display=Educational Detail"`
}

// Delete personnel record
//
// An event B03 signals to delete the record with the healthcare administration information about an individual healthcare
// practitioner to correct erroneous entries.
type PMU_B03 struct {
	HL7 HL7Name `hl7:",name=PMU_B03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	STF *STF    `hl7:"3,required,display=Staff Identification"`
}

// Active practicing person
//
// An event B04 signals that a staff member is available for work (e.g. schedules can be created) and has a relationship with
// the institution.  This message applies to STF-7.
type PMU_B04 struct {
	HL7 HL7Name `hl7:",name=PMU_B04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	STF *STF    `hl7:"3,required,display=Staff Identification"`
	PRA []PRA   `hl7:"4,display=Practitioner Detail"`
	ORG *ORG    `hl7:"5,display=Practitioner Organization Unit"`
}

// Deactivate practicing person
//
// An event B05 indicates that a staff member is temporarily unavailable for work, while maintaining a relationship with
// the institution.  This message applies to STF-7.
type PMU_B05 struct {
	HL7 HL7Name `hl7:",name=PMU_B05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	STF *STF    `hl7:"3,required,display=Staff Identification"`
	PRA []PRA   `hl7:"4,display=Practitioner Detail"`
	ORG *ORG    `hl7:"5,display=Practitioner Organization Unit"`
}

// Terminate practicing person
//
// An event B06 signals that the formal relationship between a staff member and the institution has ended (e.g. upon termination).
type PMU_B06 struct {
	HL7 HL7Name `hl7:",name=PMU_B06,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	STF *STF    `hl7:"3,required,display=Staff Identification"`
	PRA []PRA   `hl7:"4,display=Practitioner Detail"`
	ORG *ORG    `hl7:"5,display=Practitioner Organization Unit"`
}

// PatientVisit
type PPG_PCG_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Pathway
type PPG_PCG_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCG_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"5,required,display=Pathway"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	PathwayRole []PPG_PCG_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPG_PCG_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPG_PCG_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Goal
type PPG_PCG_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCG_Goal,type=tg"`
	GOL             *GOL                      `hl7:"10,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"11,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"12,display=Variance"`
	GoalRole        []PPG_PCG_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPG_PCG_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPG_PCG_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCG_Order           `hl7:",display=Order"`
}

// GoalRole
type PPG_PCG_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_GoalRole,type=tg"`
	ROL *ROL    `hl7:"13,required,display=Role"`
	VAR []VAR   `hl7:"14,display=Variance"`
}

// GoalObservation
type PPG_PCG_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Problem
type PPG_PCG_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCG_Problem,type=tg"`
	PRB                *PRB                         `hl7:"17,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"18,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"19,display=Variance"`
	ProblemRole        []PPG_PCG_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPG_PCG_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPG_PCG_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"20,required,display=Role"`
	VAR []VAR   `hl7:"21,display=Variance"`
}

// ProblemObservation
type PPG_PCG_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Order
type PPG_PCG_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCG_Order,type=tg"`
	ORC         *ORC                 `hl7:"24,required,display=Common Order"`
	OrderDetail *PPG_PCG_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPG_PCG_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPG_PCG_OrderDetail,type=tg"`
	OrderDetailSegment *PPG_PCG_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"31,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"32,display=Variance"`
	OrderObservation   []PPG_PCG_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPG_PCG_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"25,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"26,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"27,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"28,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"29,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"30,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPG_PCG_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCG_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/Result"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
	VAR []VAR   `hl7:"35,display=Variance"`
}

// Pathway (goal-oriented) add
type PPG_PCG struct {
	HL7          HL7Name               `hl7:",name=PPG_PCG,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPG_PCG_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPG_PCG_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPG_PCH_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Pathway
type PPG_PCH_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCH_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"5,required,display=Pathway"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	PathwayRole []PPG_PCH_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPG_PCH_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPG_PCH_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Goal
type PPG_PCH_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCH_Goal,type=tg"`
	GOL             *GOL                      `hl7:"10,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"11,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"12,display=Variance"`
	GoalRole        []PPG_PCH_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPG_PCH_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPG_PCH_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCH_Order           `hl7:",display=Order"`
}

// GoalRole
type PPG_PCH_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_GoalRole,type=tg"`
	ROL *ROL    `hl7:"13,required,display=Role"`
	VAR []VAR   `hl7:"14,display=Variance"`
}

// GoalObservation
type PPG_PCH_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Problem
type PPG_PCH_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCH_Problem,type=tg"`
	PRB                *PRB                         `hl7:"17,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"18,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"19,display=Variance"`
	ProblemRole        []PPG_PCH_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPG_PCH_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPG_PCH_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"20,required,display=Role"`
	VAR []VAR   `hl7:"21,display=Variance"`
}

// ProblemObservation
type PPG_PCH_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Order
type PPG_PCH_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCH_Order,type=tg"`
	ORC         *ORC                 `hl7:"24,required,display=Common Order"`
	OrderDetail *PPG_PCH_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPG_PCH_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPG_PCH_OrderDetail,type=tg"`
	OrderDetailSegment *PPG_PCH_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"31,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"32,display=Variance"`
	OrderObservation   []PPG_PCH_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPG_PCH_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"25,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"26,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"27,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"28,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"29,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"30,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPG_PCH_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCH_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/Result"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
	VAR []VAR   `hl7:"35,display=Variance"`
}

// Pathway (goal-oriented) update
type PPG_PCH struct {
	HL7          HL7Name               `hl7:",name=PPG_PCH,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPG_PCH_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPG_PCH_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPG_PCJ_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Pathway
type PPG_PCJ_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPG_PCJ_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"5,required,display=Pathway"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	PathwayRole []PPG_PCJ_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPG_PCJ_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPG_PCJ_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Goal
type PPG_PCJ_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPG_PCJ_Goal,type=tg"`
	GOL             *GOL                      `hl7:"10,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"11,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"12,display=Variance"`
	GoalRole        []PPG_PCJ_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPG_PCJ_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPG_PCJ_Problem         `hl7:",display=Problem"`
	Order           []PPG_PCJ_Order           `hl7:",display=Order"`
}

// GoalRole
type PPG_PCJ_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_GoalRole,type=tg"`
	ROL *ROL    `hl7:"13,required,display=Role"`
	VAR []VAR   `hl7:"14,display=Variance"`
}

// GoalObservation
type PPG_PCJ_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Problem
type PPG_PCJ_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPG_PCJ_Problem,type=tg"`
	PRB                *PRB                         `hl7:"17,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"18,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"19,display=Variance"`
	ProblemRole        []PPG_PCJ_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPG_PCJ_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPG_PCJ_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"20,required,display=Role"`
	VAR []VAR   `hl7:"21,display=Variance"`
}

// ProblemObservation
type PPG_PCJ_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Order
type PPG_PCJ_Order struct {
	HL7         HL7Name              `hl7:",name=PPG_PCJ_Order,type=tg"`
	ORC         *ORC                 `hl7:"24,required,display=Common Order"`
	OrderDetail *PPG_PCJ_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPG_PCJ_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPG_PCJ_OrderDetail,type=tg"`
	OrderDetailSegment *PPG_PCJ_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"31,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"32,display=Variance"`
	OrderObservation   []PPG_PCJ_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPG_PCJ_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"25,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"26,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"27,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"28,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"29,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"30,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPG_PCJ_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPG_PCJ_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/Result"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
	VAR []VAR   `hl7:"35,display=Variance"`
}

// Pathway (goal-oriented) delete
type PPG_PCJ struct {
	HL7          HL7Name               `hl7:",name=PPG_PCJ,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPG_PCJ_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPG_PCJ_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPP_PCB_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Pathway
type PPP_PCB_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCB_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"5,required,display=Pathway"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	PathwayRole []PPP_PCB_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PPP_PCB_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PPP_PCB_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Problem
type PPP_PCB_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCB_Problem,type=tg"`
	PRB                *PRB                         `hl7:"10,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"11,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"12,display=Variance"`
	ProblemRole        []PPP_PCB_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPP_PCB_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPP_PCB_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCB_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPP_PCB_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"13,required,display=Role"`
	VAR []VAR   `hl7:"14,display=Variance"`
}

// ProblemObservation
type PPP_PCB_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Goal
type PPP_PCB_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCB_Goal,type=tg"`
	GOL             *GOL                      `hl7:"17,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"18,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"19,display=Variance"`
	GoalRole        []PPP_PCB_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPP_PCB_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPP_PCB_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_GoalRole,type=tg"`
	ROL *ROL    `hl7:"20,required,display=Role"`
	VAR []VAR   `hl7:"21,display=Variance"`
}

// GoalObservation
type PPP_PCB_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Order
type PPP_PCB_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCB_Order,type=tg"`
	ORC         *ORC                 `hl7:"24,required,display=Common Order"`
	OrderDetail *PPP_PCB_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPP_PCB_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPP_PCB_OrderDetail,type=tg"`
	OrderDetailSegment *PPP_PCB_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"31,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"32,display=Variance"`
	OrderObservation   []PPP_PCB_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPP_PCB_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"25,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"26,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"27,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"28,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"29,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"30,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPP_PCB_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCB_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/Result"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
	VAR []VAR   `hl7:"35,display=Variance"`
}

// Pathway (problem-oriented) add
type PPP_PCB struct {
	HL7          HL7Name               `hl7:",name=PPP_PCB,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPP_PCB_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPP_PCB_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPP_PCC_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Pathway
type PPP_PCC_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCC_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"5,required,display=Pathway"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	PathwayRole []PPP_PCC_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PPP_PCC_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PPP_PCC_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Problem
type PPP_PCC_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCC_Problem,type=tg"`
	PRB                *PRB                         `hl7:"10,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"11,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"12,display=Variance"`
	ProblemRole        []PPP_PCC_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPP_PCC_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPP_PCC_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCC_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPP_PCC_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"13,required,display=Role"`
	VAR []VAR   `hl7:"14,display=Variance"`
}

// ProblemObservation
type PPP_PCC_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Goal
type PPP_PCC_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCC_Goal,type=tg"`
	GOL             *GOL                      `hl7:"17,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"18,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"19,display=Variance"`
	GoalRole        []PPP_PCC_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPP_PCC_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPP_PCC_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_GoalRole,type=tg"`
	ROL *ROL    `hl7:"20,required,display=Role"`
	VAR []VAR   `hl7:"21,display=Variance"`
}

// GoalObservation
type PPP_PCC_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Order
type PPP_PCC_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCC_Order,type=tg"`
	ORC         *ORC                 `hl7:"24,required,display=Common Order"`
	OrderDetail *PPP_PCC_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPP_PCC_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPP_PCC_OrderDetail,type=tg"`
	OrderDetailSegment *PPP_PCC_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"31,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"32,display=Variance"`
	OrderObservation   []PPP_PCC_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPP_PCC_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"25,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"26,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"27,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"28,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"29,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"30,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPP_PCC_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCC_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/Result"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
	VAR []VAR   `hl7:"35,display=Variance"`
}

// Pathway (problem-oriented) update
type PPP_PCC struct {
	HL7          HL7Name               `hl7:",name=PPP_PCC,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPP_PCC_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPP_PCC_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPP_PCD_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Pathway
type PPP_PCD_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPP_PCD_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"5,required,display=Pathway"`
	NTE         []NTE                 `hl7:"6,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"7,display=Variance"`
	PathwayRole []PPP_PCD_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PPP_PCD_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PPP_PCD_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Problem
type PPP_PCD_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPP_PCD_Problem,type=tg"`
	PRB                *PRB                         `hl7:"10,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"11,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"12,display=Variance"`
	ProblemRole        []PPP_PCD_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPP_PCD_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPP_PCD_Goal               `hl7:",display=Goal"`
	Order              []PPP_PCD_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPP_PCD_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"13,required,display=Role"`
	VAR []VAR   `hl7:"14,display=Variance"`
}

// ProblemObservation
type PPP_PCD_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation/Result"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// Goal
type PPP_PCD_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPP_PCD_Goal,type=tg"`
	GOL             *GOL                      `hl7:"17,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"18,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"19,display=Variance"`
	GoalRole        []PPP_PCD_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPP_PCD_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPP_PCD_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_GoalRole,type=tg"`
	ROL *ROL    `hl7:"20,required,display=Role"`
	VAR []VAR   `hl7:"21,display=Variance"`
}

// GoalObservation
type PPP_PCD_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Order
type PPP_PCD_Order struct {
	HL7         HL7Name              `hl7:",name=PPP_PCD_Order,type=tg"`
	ORC         *ORC                 `hl7:"24,required,display=Common Order"`
	OrderDetail *PPP_PCD_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPP_PCD_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPP_PCD_OrderDetail,type=tg"`
	OrderDetailSegment *PPP_PCD_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"31,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"32,display=Variance"`
	OrderObservation   []PPP_PCD_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPP_PCD_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"25,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"26,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"27,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"28,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"29,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"30,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPP_PCD_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPP_PCD_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"33,required,display=Observation/Result"`
	NTE []NTE   `hl7:"34,display=Notes and Comments"`
	VAR []VAR   `hl7:"35,display=Variance"`
}

// Pathway (problem-oriented) delete
type PPP_PCD struct {
	HL7          HL7Name               `hl7:",name=PPP_PCD,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPP_PCD_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPP_PCD_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPR_PC1_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Problem
type PPR_PC1_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC1_Problem,type=tg"`
	PRB                *PRB                         `hl7:"5,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"6,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"7,display=Variance"`
	ProblemRole        []PPR_PC1_ProblemRole        `hl7:",display=Problem Role"`
	Pathway            []PPR_PC1_Pathway            `hl7:",display=Pathway"`
	ProblemObservation []PPR_PC1_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPR_PC1_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC1_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPR_PC1_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Pathway
type PPR_PC1_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_Pathway,type=tg"`
	PTH *PTH    `hl7:"10,required,display=Pathway"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// ProblemObservation
type PPR_PC1_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Goal
type PPR_PC1_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC1_Goal,type=tg"`
	GOL             *GOL                      `hl7:"14,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"15,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"16,display=Variance"`
	GoalRole        []PPR_PC1_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPR_PC1_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPR_PC1_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_GoalRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// GoalObservation
type PPR_PC1_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Order
type PPR_PC1_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC1_Order,type=tg"`
	ORC         *ORC                 `hl7:"21,required,display=Common Order"`
	OrderDetail *PPR_PC1_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPR_PC1_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPR_PC1_OrderDetail,type=tg"`
	OrderDetailSegment *PPR_PC1_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"29,display=Variance"`
	OrderObservation   []PPR_PC1_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPR_PC1_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"22,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"23,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"24,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"25,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"26,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"27,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPR_PC1_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC1_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/Result"`
	NTE []NTE   `hl7:"31,display=Notes and Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// Problem add
//
// The patient problem message is used to send problems from one application to another (e.g., a point of care system to a clinical
// repository).  Many of the segments associated with this event are optional.  This optionality allows systems in need of
// this information to set up transactions that fulfill their requirements
type PPR_PC1 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC1,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPR_PC1_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PPR_PC1_Problem     `hl7:",required,display=Problem"`
}

// PatientVisit
type PPR_PC2_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Problem
type PPR_PC2_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC2_Problem,type=tg"`
	PRB                *PRB                         `hl7:"5,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"6,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"7,display=Variance"`
	ProblemRole        []PPR_PC2_ProblemRole        `hl7:",display=Problem Role"`
	Pathway            []PPR_PC2_Pathway            `hl7:",display=Pathway"`
	ProblemObservation []PPR_PC2_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPR_PC2_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC2_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPR_PC2_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Pathway
type PPR_PC2_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_Pathway,type=tg"`
	PTH *PTH    `hl7:"10,required,display=Pathway"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// ProblemObservation
type PPR_PC2_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Goal
type PPR_PC2_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC2_Goal,type=tg"`
	GOL             *GOL                      `hl7:"14,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"15,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"16,display=Variance"`
	GoalRole        []PPR_PC2_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPR_PC2_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPR_PC2_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_GoalRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// GoalObservation
type PPR_PC2_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Order
type PPR_PC2_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC2_Order,type=tg"`
	ORC         *ORC                 `hl7:"21,required,display=Common Order"`
	OrderDetail *PPR_PC2_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPR_PC2_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPR_PC2_OrderDetail,type=tg"`
	OrderDetailSegment *PPR_PC2_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"29,display=Variance"`
	OrderObservation   []PPR_PC2_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPR_PC2_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"22,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"23,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"24,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"25,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"26,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"27,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPR_PC2_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC2_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/Result"`
	NTE []NTE   `hl7:"31,display=Notes and Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// Problem update
//
// The patient problem message is used to send problems from one application to another (e.g., a point of care system to a clinical
// repository).  Many of the segments associated with this event are optional.  This optionality allows systems in need of
// this information to set up transactions that fulfill their requirements
type PPR_PC2 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC2,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPR_PC2_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PPR_PC2_Problem     `hl7:",required,display=Problem"`
}

// PatientVisit
type PPR_PC3_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"3,required,display=Patient visit"`
	PV2 *PV2    `hl7:"4,display=Patient visit - additional information"`
}

// Problem
type PPR_PC3_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPR_PC3_Problem,type=tg"`
	PRB                *PRB                         `hl7:"5,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"6,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"7,display=Variance"`
	ProblemRole        []PPR_PC3_ProblemRole        `hl7:",display=Problem Role"`
	Pathway            []PPR_PC3_Pathway            `hl7:",display=Pathway"`
	ProblemObservation []PPR_PC3_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PPR_PC3_Goal               `hl7:",display=Goal"`
	Order              []PPR_PC3_Order              `hl7:",display=Order"`
}

// ProblemRole
type PPR_PC3_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"8,required,display=Role"`
	VAR []VAR   `hl7:"9,display=Variance"`
}

// Pathway
type PPR_PC3_Pathway struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_Pathway,type=tg"`
	PTH *PTH    `hl7:"10,required,display=Pathway"`
	VAR []VAR   `hl7:"11,display=Variance"`
}

// ProblemObservation
type PPR_PC3_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"12,required,display=Observation/Result"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Goal
type PPR_PC3_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPR_PC3_Goal,type=tg"`
	GOL             *GOL                      `hl7:"14,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"15,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"16,display=Variance"`
	GoalRole        []PPR_PC3_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPR_PC3_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PPR_PC3_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_GoalRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// GoalObservation
type PPR_PC3_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Order
type PPR_PC3_Order struct {
	HL7         HL7Name              `hl7:",name=PPR_PC3_Order,type=tg"`
	ORC         *ORC                 `hl7:"21,required,display=Common Order"`
	OrderDetail *PPR_PC3_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPR_PC3_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPR_PC3_OrderDetail,type=tg"`
	OrderDetailSegment *PPR_PC3_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"28,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"29,display=Variance"`
	OrderObservation   []PPR_PC3_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPR_PC3_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"22,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"23,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"24,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"25,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"26,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"27,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPR_PC3_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPR_PC3_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"30,required,display=Observation/Result"`
	NTE []NTE   `hl7:"31,display=Notes and Comments"`
	VAR []VAR   `hl7:"32,display=Variance"`
}

// Problem delete
//
// The patient problem message is used to send problems from one application to another (e.g., a point of care system to a clinical
// repository).  Many of the segments associated with this event are optional.  This optionality allows systems in need of
// this information to set up transactions that fulfill their requirements
type PPR_PC3 struct {
	HL7          HL7Name               `hl7:",name=PPR_PC3,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	PID          *PID                  `hl7:"2,required,display=Patient identification"`
	PatientVisit *PPR_PC3_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PPR_PC3_Problem     `hl7:",required,display=Problem"`
}

// Patient
type PPT_PCL_Patient struct {
	HL7          HL7Name               `hl7:",name=PPT_PCL_Patient,type=tg"`
	PID          *PID                  `hl7:"6,required,display=Patient identification"`
	PatientVisit *PPT_PCL_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PPT_PCL_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PPT_PCL_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
}

// Pathway
type PPT_PCL_Pathway struct {
	HL7         HL7Name               `hl7:",name=PPT_PCL_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"9,required,display=Pathway"`
	NTE         []NTE                 `hl7:"10,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"11,display=Variance"`
	PathwayRole []PPT_PCL_PathwayRole `hl7:",display=Pathway Role"`
	Goal        []PPT_PCL_Goal        `hl7:",display=Goal"`
}

// PathwayRole
type PPT_PCL_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"12,required,display=Role"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Goal
type PPT_PCL_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPT_PCL_Goal,type=tg"`
	GOL             *GOL                      `hl7:"14,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"15,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"16,display=Variance"`
	GoalRole        []PPT_PCL_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PPT_PCL_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPT_PCL_Problem         `hl7:",display=Problem"`
	Order           []PPT_PCL_Order           `hl7:",display=Order"`
}

// GoalRole
type PPT_PCL_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_GoalRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// GoalObservation
type PPT_PCL_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Problem
type PPT_PCL_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPT_PCL_Problem,type=tg"`
	PRB                *PRB                         `hl7:"21,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"22,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"23,display=Variance"`
	ProblemRole        []PPT_PCL_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPT_PCL_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPT_PCL_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"24,required,display=Role"`
	VAR []VAR   `hl7:"25,display=Variance"`
}

// ProblemObservation
type PPT_PCL_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/Result"`
	NTE []NTE   `hl7:"27,display=Notes and Comments"`
}

// Order
type PPT_PCL_Order struct {
	HL7         HL7Name              `hl7:",name=PPT_PCL_Order,type=tg"`
	ORC         *ORC                 `hl7:"28,required,display=Common Order"`
	OrderDetail *PPT_PCL_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPT_PCL_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPT_PCL_OrderDetail,type=tg"`
	OrderDetailSegment *PPT_PCL_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"35,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"36,display=Variance"`
	OrderObservation   []PPT_PCL_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPT_PCL_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"29,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"30,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"31,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"32,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"33,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"34,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPT_PCL_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPT_PCL_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"37,required,display=Observation/Result"`
	NTE []NTE   `hl7:"38,display=Notes and Comments"`
	VAR []VAR   `hl7:"39,display=Variance"`
}

// Pathway (goal-oriented) query response
//
// The following trigger/message event is served by PPT (a response from the system responsible for maintaining the goal-oriented
// pathway information).
type PPT_PCL struct {
	HL7     HL7Name           `hl7:",name=PPT_PCL,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QAK     *QAK              `hl7:"4,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"5,required,display=Original-Style Query Definition"`
	Patient []PPT_PCL_Patient `hl7:",required,display=Patient"`
}

// Patient
type PPV_PCA_Patient struct {
	HL7          HL7Name               `hl7:",name=PPV_PCA_Patient,type=tg"`
	PID          *PID                  `hl7:"6,required,display=Patient identification"`
	PatientVisit *PPV_PCA_PatientVisit `hl7:",display=Patient Visit"`
	Goal         []PPV_PCA_Goal        `hl7:",required,display=Goal"`
}

// PatientVisit
type PPV_PCA_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
}

// Goal
type PPV_PCA_Goal struct {
	HL7             HL7Name                   `hl7:",name=PPV_PCA_Goal,type=tg"`
	GOL             *GOL                      `hl7:"9,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"10,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"11,display=Variance"`
	GoalRole        []PPV_PCA_GoalRole        `hl7:",display=Goal Role"`
	GoalPathway     []PPV_PCA_GoalPathway     `hl7:",display=Goal Pathway"`
	GoalObservation []PPV_PCA_GoalObservation `hl7:",display=Goal Observation"`
	Problem         []PPV_PCA_Problem         `hl7:",display=Problem"`
	Order           []PPV_PCA_Order           `hl7:",display=Order"`
}

// GoalRole
type PPV_PCA_GoalRole struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_GoalRole,type=tg"`
	ROL *ROL    `hl7:"12,required,display=Role"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// GoalPathway
type PPV_PCA_GoalPathway struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_GoalPathway,type=tg"`
	PTH *PTH    `hl7:"14,required,display=Pathway"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// GoalObservation
type PPV_PCA_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/Result"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// Problem
type PPV_PCA_Problem struct {
	HL7                HL7Name                      `hl7:",name=PPV_PCA_Problem,type=tg"`
	PRB                *PRB                         `hl7:"18,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"19,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"20,display=Variance"`
	ProblemRole        []PPV_PCA_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PPV_PCA_ProblemObservation `hl7:",display=Problem Observation"`
}

// ProblemRole
type PPV_PCA_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"21,required,display=Role"`
	VAR []VAR   `hl7:"22,display=Variance"`
}

// ProblemObservation
type PPV_PCA_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Order
type PPV_PCA_Order struct {
	HL7         HL7Name              `hl7:",name=PPV_PCA_Order,type=tg"`
	ORC         *ORC                 `hl7:"25,required,display=Common Order"`
	OrderDetail *PPV_PCA_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PPV_PCA_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PPV_PCA_OrderDetail,type=tg"`
	OrderDetailSegment *PPV_PCA_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"32,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"33,display=Variance"`
	OrderObservation   []PPV_PCA_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PPV_PCA_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"26,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"27,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"28,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"29,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"30,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"31,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PPV_PCA_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PPV_PCA_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"34,required,display=Observation/Result"`
	NTE []NTE   `hl7:"35,display=Notes and Comments"`
	VAR []VAR   `hl7:"36,display=Variance"`
}

// Patient goal response
//
// The following trigger/message event is served by PPV (a response from the system responsible for maintaining the goal
// information).
type PPV_PCA struct {
	HL7     HL7Name           `hl7:",name=PPV_PCA,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QAK     *QAK              `hl7:"4,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"5,required,display=Original-Style Query Definition"`
	Patient []PPV_PCA_Patient `hl7:",required,display=Patient"`
}

// Patient
type PRR_PC5_Patient struct {
	HL7          HL7Name               `hl7:",name=PRR_PC5_Patient,type=tg"`
	PID          *PID                  `hl7:"6,required,display=Patient identification"`
	PatientVisit *PRR_PC5_PatientVisit `hl7:",display=Patient Visit"`
	Problem      []PRR_PC5_Problem     `hl7:",required,display=Problem"`
}

// PatientVisit
type PRR_PC5_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
}

// Problem
type PRR_PC5_Problem struct {
	HL7                HL7Name                      `hl7:",name=PRR_PC5_Problem,type=tg"`
	PRB                *PRB                         `hl7:"9,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"10,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"11,display=Variance"`
	ProblemRole        []PRR_PC5_ProblemRole        `hl7:",display=Problem Role"`
	ProblemPathway     []PRR_PC5_ProblemPathway     `hl7:",display=Problem Pathway"`
	ProblemObservation []PRR_PC5_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PRR_PC5_Goal               `hl7:",display=Goal"`
	Order              []PRR_PC5_Order              `hl7:",display=Order"`
}

// ProblemRole
type PRR_PC5_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"12,required,display=Role"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// ProblemPathway
type PRR_PC5_ProblemPathway struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_ProblemPathway,type=tg"`
	PTH *PTH    `hl7:"14,required,display=Pathway"`
	VAR []VAR   `hl7:"15,display=Variance"`
}

// ProblemObservation
type PRR_PC5_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"16,required,display=Observation/Result"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// Goal
type PRR_PC5_Goal struct {
	HL7             HL7Name                   `hl7:",name=PRR_PC5_Goal,type=tg"`
	GOL             *GOL                      `hl7:"18,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"19,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"20,display=Variance"`
	GoalRole        []PRR_PC5_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PRR_PC5_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PRR_PC5_GoalRole struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_GoalRole,type=tg"`
	ROL *ROL    `hl7:"21,required,display=Role"`
	VAR []VAR   `hl7:"22,display=Variance"`
}

// GoalObservation
type PRR_PC5_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Order
type PRR_PC5_Order struct {
	HL7         HL7Name              `hl7:",name=PRR_PC5_Order,type=tg"`
	ORC         *ORC                 `hl7:"25,required,display=Common Order"`
	OrderDetail *PRR_PC5_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PRR_PC5_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PRR_PC5_OrderDetail,type=tg"`
	OrderDetailSegment *PRR_PC5_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"32,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"33,display=Variance"`
	OrderObservation   []PRR_PC5_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PRR_PC5_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"26,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"27,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"28,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"29,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"30,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"31,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PRR_PC5_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PRR_PC5_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"34,required,display=Observation/Result"`
	NTE []NTE   `hl7:"35,display=Notes and Comments"`
	VAR []VAR   `hl7:"36,display=Variance"`
}

// Patient problem response
//
// The following trigger/message event is served by PRR (a response from the system responsible for maintaining the problem
// information).
type PRR_PC5 struct {
	HL7     HL7Name           `hl7:",name=PRR_PC5,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QAK     *QAK              `hl7:"4,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"5,required,display=Original-Style Query Definition"`
	Patient []PRR_PC5_Patient `hl7:",required,display=Patient"`
}

// Patient
type PTR_PCF_Patient struct {
	HL7          HL7Name               `hl7:",name=PTR_PCF_Patient,type=tg"`
	PID          *PID                  `hl7:"6,required,display=Patient identification"`
	PatientVisit *PTR_PCF_PatientVisit `hl7:",display=Patient Visit"`
	Pathway      []PTR_PCF_Pathway     `hl7:",required,display=Pathway"`
}

// PatientVisit
type PTR_PCF_PatientVisit struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
}

// Pathway
type PTR_PCF_Pathway struct {
	HL7         HL7Name               `hl7:",name=PTR_PCF_Pathway,type=tg"`
	PTH         *PTH                  `hl7:"9,required,display=Pathway"`
	NTE         []NTE                 `hl7:"10,display=Notes and Comments"`
	VAR         []VAR                 `hl7:"11,display=Variance"`
	PathwayRole []PTR_PCF_PathwayRole `hl7:",display=Pathway Role"`
	Problem     []PTR_PCF_Problem     `hl7:",display=Problem"`
}

// PathwayRole
type PTR_PCF_PathwayRole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_PathwayRole,type=tg"`
	ROL *ROL    `hl7:"12,required,display=Role"`
	VAR []VAR   `hl7:"13,display=Variance"`
}

// Problem
type PTR_PCF_Problem struct {
	HL7                HL7Name                      `hl7:",name=PTR_PCF_Problem,type=tg"`
	PRB                *PRB                         `hl7:"14,required,display=Problem Details"`
	NTE                []NTE                        `hl7:"15,display=Notes and Comments"`
	VAR                []VAR                        `hl7:"16,display=Variance"`
	ProblemRole        []PTR_PCF_ProblemRole        `hl7:",display=Problem Role"`
	ProblemObservation []PTR_PCF_ProblemObservation `hl7:",display=Problem Observation"`
	Goal               []PTR_PCF_Goal               `hl7:",display=Goal"`
	Order              []PTR_PCF_Order              `hl7:",display=Order"`
}

// ProblemRole
type PTR_PCF_ProblemRole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_ProblemRole,type=tg"`
	ROL *ROL    `hl7:"17,required,display=Role"`
	VAR []VAR   `hl7:"18,display=Variance"`
}

// ProblemObservation
type PTR_PCF_ProblemObservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_ProblemObservation,type=tg"`
	OBX *OBX    `hl7:"19,required,display=Observation/Result"`
	NTE []NTE   `hl7:"20,display=Notes and Comments"`
}

// Goal
type PTR_PCF_Goal struct {
	HL7             HL7Name                   `hl7:",name=PTR_PCF_Goal,type=tg"`
	GOL             *GOL                      `hl7:"21,required,display=Goal Detail"`
	NTE             []NTE                     `hl7:"22,display=Notes and Comments"`
	VAR             []VAR                     `hl7:"23,display=Variance"`
	GoalRole        []PTR_PCF_GoalRole        `hl7:",display=Goal Role"`
	GoalObservation []PTR_PCF_GoalObservation `hl7:",display=Goal Observation"`
}

// GoalRole
type PTR_PCF_GoalRole struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_GoalRole,type=tg"`
	ROL *ROL    `hl7:"24,required,display=Role"`
	VAR []VAR   `hl7:"25,display=Variance"`
}

// GoalObservation
type PTR_PCF_GoalObservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_GoalObservation,type=tg"`
	OBX *OBX    `hl7:"26,required,display=Observation/Result"`
	NTE []NTE   `hl7:"27,display=Notes and Comments"`
}

// Order
type PTR_PCF_Order struct {
	HL7         HL7Name              `hl7:",name=PTR_PCF_Order,type=tg"`
	ORC         *ORC                 `hl7:"28,required,display=Common Order"`
	OrderDetail *PTR_PCF_OrderDetail `hl7:",display=Order Detail"`
}

// OrderDetail
type PTR_PCF_OrderDetail struct {
	HL7                HL7Name                     `hl7:",name=PTR_PCF_OrderDetail,type=tg"`
	OrderDetailSegment *PTR_PCF_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"35,display=Notes and Comments"`
	VAR                []VAR                       `hl7:"36,display=Variance"`
	OrderObservation   []PTR_PCF_OrderObservation  `hl7:",display=Order Observation"`
}

// OrderDetailSegment
type PTR_PCF_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"29,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"30,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"31,conditional,display=Requisition Detail-1"`
	RXO *RXO    `hl7:"32,conditional,display=Pharmacy/Treatment Order"`
	ODS *ODS    `hl7:"33,conditional,display=Dietary Orders- Supplements- and Preferences"`
	ODT *ODT    `hl7:"34,conditional,display=Diet Tray Instructions"`
}

// OrderObservation
type PTR_PCF_OrderObservation struct {
	HL7 HL7Name `hl7:",name=PTR_PCF_OrderObservation,type=tg"`
	OBX *OBX    `hl7:"37,required,display=Observation/Result"`
	NTE []NTE   `hl7:"38,display=Notes and Comments"`
	VAR []VAR   `hl7:"39,display=Variance"`
}

// Pathway (problem-oriented) query response
//
// The following trigger/message event is served by PTR (a response from the system responsible for maintaining the problem-oriented
// pathway information).
type PTR_PCF struct {
	HL7     HL7Name           `hl7:",name=PTR_PCF,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR              `hl7:"3,display=Error"`
	QAK     *QAK              `hl7:"4,display=Query Acknowledgment"`
	QRD     *QRD              `hl7:"5,required,display=Original-Style Query Definition"`
	Patient []PTR_PCF_Patient `hl7:",required,display=Patient"`
}

// Query by parameter
//
// The QBP_Q11 structure supports a Segment Pattern Response and contains the MSH, QPD, RCP, and DSC segments.  Its default
// trigger event is Q11.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value
// in its Conformance Statement.  If a unique trigger event value is chosen for a site-defined query, that value must begin
// with Z.
type QBP_Q11 struct {
	HL7 HL7Name `hl7:",name=QBP_Q11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query by parameter/tabular response
//
// The QBP_Q13 structure supports a Tabular Response and contains the MSH, RDF, RCP, and DSC segments.  Its default trigger
// event is Q13.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value in its
// Conformance Statement.  If a unique trigger event value is chosen for a site-defined query, that value must begin with Z.
type QBP_Q13 struct {
	HL7 HL7Name `hl7:",name=QBP_Q13,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RDF *RDF    `hl7:"3,display=Table Row Definition"`
	RCP *RCP    `hl7:"4,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"5,display=Continuation Pointer"`
}

// Query by parameter/display response
//
// The QBP_Q15 structure supports a Display Response and contains the MSH, QPD, RCP, and DSC segments.  Its default trigger
// event is Q15.  A standard or site-defined query may use this trigger event or may specify a unique trigger event value in its
// Conformance Statement.  If a unique trigger event value is chosen for a site-defined query, that value must begin with Z.
type QBP_Q15 struct {
	HL7 HL7Name `hl7:",name=QBP_Q15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RDF *RDF    `hl7:"3,display=Table Row Definition"`
	RCP *RCP    `hl7:"4,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"5,display=Continuation Pointer"`
}

// Query - Get Person Demographics
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response the demographics for that person.
type QBP_Q21 struct {
	HL7 HL7Name `hl7:",name=QBP_Q21,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query - Find Candidates
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of a set of demographics for a person, and the response is the list of candidates considered by the MPI to match that set.
type QBP_Q22 struct {
	HL7 HL7Name `hl7:",name=QBP_Q22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query - Get Corresponding Identifiers
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response is a list of identifiers for that person from the domains specified.
type QBP_Q23 struct {
	HL7 HL7Name `hl7:",name=QBP_Q23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query - Allocate identifiers
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of domains in which identifiers should be allocated. The response is new identifiers in those domains.
type QBP_Q24 struct {
	HL7 HL7Name `hl7:",name=QBP_Q24,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query - Personnel information
//
// The following trigger event is served by the following Conformance Statement: Another application determines a need
// for Personnel data about a person and sends a query to a system providing this information.
type QBP_Q25 struct {
	HL7 HL7Name `hl7:",name=QBP_Q25,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Deferred query
type QCK_Q02 struct {
	HL7 HL7Name `hl7:",name=QCK_Q02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,display=Query Acknowledgment"`
}

// Cancel query/acknowledge message
type QCN_J01 struct {
	HL7 HL7Name `hl7:",name=QCN_J01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QID *QID    `hl7:"2,required,display=Query Identification"`
}

// Patient query
//
// The following trigger event is served by QRY (a query from another system) and ADR (a response from an Patient Administration
// system.)
type QRY_A19 struct {
	HL7 HL7Name `hl7:",name=QRY_A19,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// Query - Generate bills and accounts receivable statements
//
// For patient accounting systems that support demand billing, the QRY/DSR transaction, as defined in Chapter 5, will provide
// the mechanism with which to request a copy of the bill for printing or viewing by the requesting system
type QRY_P04 struct {
	HL7 HL7Name `hl7:",name=QRY_P04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Patient care problem query
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PC4 struct {
	HL7 HL7Name `hl7:",name=QRY_PC4,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// Patient goal query
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PC9 struct {
	HL7 HL7Name `hl7:",name=QRY_PC9,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// Patient pathway (problem-oriented) query
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue.
type QRY_PCE struct {
	HL7 HL7Name `hl7:",name=QRY_PCE,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// Patient pathway (goal-oriented) query
//
// The following trigger/message event is served by QRY (a query from another system).  The QRD-8-who filter identifies the
// patient or account number upon which the query is defined and can contain a Format Code of R (record-oriented).  If the query
// is based on the Patient ID and there are data associated with multiple accounts, the problem of which account data should
// be returned becomes an implementation issue
type QRY_PCK struct {
	HL7 HL7Name `hl7:",name=QRY_PCK,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// Query sent for immediate response
type QRY_Q01 struct {
	HL7 HL7Name `hl7:",name=QRY_Q01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query sent for deferred response
type QRY_Q02 struct {
	HL7 HL7Name `hl7:",name=QRY_Q02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy/treatment order query
//
// Query (QRY_Q26) / Response (ROR_ROR)
type QRY_Q26 struct {
	HL7 HL7Name `hl7:",name=QRY_Q26,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy/treatment administration information query
//
// Query (QRY_Q27) / Response (RAR_RAR)
type QRY_Q27 struct {
	HL7 HL7Name `hl7:",name=QRY_Q27,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy/treatment dispense information query
//
// Query (QRY_Q28) / Response (RDR_RDR)
type QRY_Q28 struct {
	HL7 HL7Name `hl7:",name=QRY_Q28,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy/treatment encoded order information query
//
// Query (QRY_Q29) / Response (RER_RER)
type QRY_Q29 struct {
	HL7 HL7Name `hl7:",name=QRY_Q29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy/treatment dose information query
//
// Query (QRY_Q30) / Response (RGR_RGR)
type QRY_Q30 struct {
	HL7 HL7Name `hl7:",name=QRY_Q30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query for results of observation
type QRY_R02 struct {
	HL7 HL7Name `hl7:",name=QRY_R02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,required,display=Original Style Query Filter"`
}

// Document query
type QRY_T12 struct {
	HL7 HL7Name `hl7:",name=QRY_T12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// Create subscription
//
// Returns lab results reports for the patient(s) as constrained in the input parameters.
type QSB_Q16 struct {
	HL7 HL7Name `hl7:",name=QSB_Q16,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Cancel subscription/acknowledge message
type QSX_J02 struct {
	HL7 HL7Name `hl7:",name=QSX_J02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QID *QID    `hl7:"2,required,display=Query Identification"`
}

// Query for previous events
//
// The Query for Previous Events is like a Query by Parameter with a Segment Pattern Response except that the response consists
// of zero to many messages of the type defined in the Conformance Statement rather than a single response message containing
// multiple iterations of the segment pattern.  While the messages sent in response to a QVR will reflect events which occurred
// in the past, the time stamp in the message header will reflect the time the message is actually constructed (current time).
// It is also similar to the previous generation VQQ/RQQ Event Replay.
type QVR_Q17 struct {
	HL7 HL7Name `hl7:",name=QVR_Q17,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QPD *QPD    `hl7:"2,required,display=Query Parameter Definition"`
	RCP *RCP    `hl7:"3,required,display=Response Control Parameter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Definition
type RAR_RAR_Definition struct {
	HL7     HL7Name          `hl7:",name=RAR_RAR_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"5,display=Original Style Query Filter"`
	Patient *RAR_RAR_Patient `hl7:",display=Patient"`
	Order   []RAR_RAR_Order  `hl7:",required,display=Order"`
}

// Patient
type RAR_RAR_Patient struct {
	HL7 HL7Name `hl7:",name=RAR_RAR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// Order
type RAR_RAR_Order struct {
	HL7      HL7Name           `hl7:",name=RAR_RAR_Order,type=tg"`
	ORC      *ORC              `hl7:"8,required,display=Common Order"`
	Encoding *RAR_RAR_Encoding `hl7:",display=Encoding"`
	RXA      []RXA             `hl7:"12,required,display=Pharmacy/Treatment Administration"`
	RXR      *RXR              `hl7:"13,required,display=Pharmacy/Treatment Route"`
}

// Encoding
type RAR_RAR_Encoding struct {
	HL7 HL7Name `hl7:",name=RAR_RAR_Encoding,type=tg"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/treatment administration information response
//
// This query/response pair is retained for backward compatibility only.  Please refer to Chapter 5 for detailed coverage
// of query/response methodology to be employed in Versions 2.4 and later.
type RAR_RAR struct {
	HL7        HL7Name              `hl7:",name=RAR_RAR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []RAR_RAR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"14,display=Continuation Pointer"`
}

// Patient
type RAS_O17_Patient struct {
	HL7          HL7Name               `hl7:",name=RAS_O17_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	AL1          []AL1                 `hl7:"6,display=Patient allergy information"`
	PatientVisit *RAS_O17_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type RAS_O17_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RAS_O17_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
}

// Order
type RAS_O17_Order struct {
	HL7         HL7Name               `hl7:",name=RAS_O17_Order,type=tg"`
	ORC         *ORC                  `hl7:"9,required,display=Common Order"`
	OrderDetail *RAS_O17_OrderDetail  `hl7:",display=Order Detail"`
	Encoding    *RAS_O17_Encoding     `hl7:",display=Encoding"`
	RXA         []RXA                 `hl7:"18,required,display=Pharmacy/Treatment Administration"`
	RXR         *RXR                  `hl7:"19,required,display=Pharmacy/Treatment Route"`
	Observation []RAS_O17_Observation `hl7:",display=Observation"`
	CTI         []CTI                 `hl7:"22,display=Clinical Trial Identification"`
}

// OrderDetail
type RAS_O17_OrderDetail struct {
	HL7                   HL7Name                        `hl7:",name=RAS_O17_OrderDetail,type=tg"`
	RXO                   *RXO                           `hl7:"10,required,display=Pharmacy/Treatment Order"`
	OrderDetailSupplement *RAS_O17_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RAS_O17_OrderDetailSupplement struct {
	HL7        HL7Name             `hl7:",name=RAS_O17_OrderDetailSupplement,type=tg"`
	NTE        []NTE               `hl7:"11,required,display=Notes and Comments"`
	RXR        []RXR               `hl7:"12,required,display=Pharmacy/Treatment Route"`
	Components *RAS_O17_Components `hl7:",display=Components"`
}

// Components
type RAS_O17_Components struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Components,type=tg"`
	RXC []RXC   `hl7:"13,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Encoding
type RAS_O17_Encoding struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Encoding,type=tg"`
	RXE *RXE    `hl7:"15,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"16,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"17,display=Pharmacy/Treatment Component Order"`
}

// Observation
type RAS_O17_Observation struct {
	HL7 HL7Name `hl7:",name=RAS_O17_Observation,type=tg"`
	OBX *OBX    `hl7:"20,required,display=Observation/Result"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// Pharmacy/treatment administration
//
// The RAS message may be created by the administering application (e.g., nursing application) for each instance of administration
// for an existing order.  If the administering application wants to report several administrations of medication/treatment
// for a given order with a single RAS message, each instance is reported by a separate (repeating) RXA segment.  In addition,
// the administration records for a group of orders may be sent in a single message by creating repeating groups of segments
// at the ORC level.
type RAS_O17 struct {
	HL7     HL7Name          `hl7:",name=RAS_O17,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *RAS_O17_Patient `hl7:",display=Patient"`
	Order   []RAS_O17_Order  `hl7:",required,display=Order"`
}

// Provider
type RCI_I05_Provider struct {
	HL7 HL7Name `hl7:",name=RCI_I05_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Observation
type RCI_I05_Observation struct {
	HL7     HL7Name           `hl7:",name=RCI_I05_Observation,type=tg"`
	OBR     *OBR              `hl7:"11,required,display=Observation Request"`
	NTE     []NTE             `hl7:"12,display=Notes and Comments"`
	Results []RCI_I05_Results `hl7:",display=Results"`
}

// Results
type RCI_I05_Results struct {
	HL7 HL7Name `hl7:",name=RCI_I05_Results,type=tg"`
	OBX *OBX    `hl7:"13,required,display=Observation/Result"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Request for patient clinical information acknowledgement
//
// This event is used to request clinical information for a specific patient.  Generally, this transaction occurs between
// one provider and another (typically a laboratory or radiology, etc.).  However, it may also be very useful for a payor-to-provider
// request for clinical observation information to be used in considering a request for treatment authorization.
type RCI_I05 struct {
	HL7         HL7Name               `hl7:",name=RCI_I05,type=t"`
	MSH         *MSH                  `hl7:"1,required,display=Message Header"`
	MSA         *MSA                  `hl7:"2,required,display=Message Acknowledgment"`
	QRD         *QRD                  `hl7:"3,required,display=Original-Style Query Definition"`
	QRF         *QRF                  `hl7:"4,display=Original Style Query Filter"`
	Provider    []RCI_I05_Provider    `hl7:",required,display=Provider"`
	PID         *PID                  `hl7:"7,required,display=Patient identification"`
	DG1         []DG1                 `hl7:"8,display=Diagnosis"`
	DRG         []DRG                 `hl7:"9,display=Diagnosis Related Group"`
	AL1         []AL1                 `hl7:"10,display=Patient allergy information"`
	Observation []RCI_I05_Observation `hl7:",display=Observation"`
	NTE         []NTE                 `hl7:"15,display=Notes and Comments"`
}

// Provider
type RCL_I06_Provider struct {
	HL7 HL7Name `hl7:",name=RCL_I06_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Request/receipt of clinical data listing acknowledgement
//
// This event code is sent from one healthcare provider to another  (typically a laboratory or radiology, etc.) to request
// a list of available clinical observation information.  When the provider is dealing with a community model in which remote
// requests make transmission of large amounts of data impractical, this event code will provide for interactive lists of
// transactions from which more specific selections can be made.
type RCL_I06 struct {
	HL7      HL7Name            `hl7:",name=RCL_I06,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	QRD      *QRD               `hl7:"3,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"4,display=Original Style Query Filter"`
	Provider []RCL_I06_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"7,required,display=Patient identification"`
	DG1      []DG1              `hl7:"8,display=Diagnosis"`
	DRG      []DRG              `hl7:"9,display=Diagnosis Related Group"`
	AL1      []AL1              `hl7:"10,display=Patient allergy information"`
	NTE      []NTE              `hl7:"11,display=Notes and Comments"`
	DSP      []DSP              `hl7:"12,display=Display Data"`
	DSC      *DSC               `hl7:"13,display=Continuation Pointer"`
}

// Patient
type RDE_O11_Patient struct {
	HL7          HL7Name               `hl7:",name=RDE_O11_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	PatientVisit *RDE_O11_PatientVisit `hl7:",display=Patient Visit"`
	Insurance    []RDE_O11_Insurance   `hl7:",display=Insurance"`
	GT1          *GT1                  `hl7:"11,display=Guarantor"`
	AL1          []AL1                 `hl7:"12,display=Patient allergy information"`
}

// PatientVisit
type RDE_O11_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RDE_O11_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Insurance
type RDE_O11_Insurance struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type RDE_O11_Order struct {
	HL7         HL7Name               `hl7:",name=RDE_O11_Order,type=tg"`
	ORC         *ORC                  `hl7:"13,required,display=Common Order"`
	OrderDetail *RDE_O11_OrderDetail  `hl7:",display=Order Detail"`
	RXE         *RXE                  `hl7:"19,required,display=Pharmacy/Treatment Encoded Order"`
	RXR         []RXR                 `hl7:"20,required,display=Pharmacy/Treatment Route"`
	RXC         []RXC                 `hl7:"21,display=Pharmacy/Treatment Component Order"`
	Observation []RDE_O11_Observation `hl7:",display=Observation"`
	CTI         []CTI                 `hl7:"24,display=Clinical Trial Identification"`
}

// OrderDetail
type RDE_O11_OrderDetail struct {
	HL7       HL7Name            `hl7:",name=RDE_O11_OrderDetail,type=tg"`
	RXO       *RXO               `hl7:"14,required,display=Pharmacy/Treatment Order"`
	NTE       []NTE              `hl7:"15,display=Notes and Comments"`
	RXR       []RXR              `hl7:"16,required,display=Pharmacy/Treatment Route"`
	Component *RDE_O11_Component `hl7:",display=Component"`
}

// Component
type RDE_O11_Component struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Component,type=tg"`
	RXC []RXC   `hl7:"17,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Observation
type RDE_O11_Observation struct {
	HL7 HL7Name `hl7:",name=RDE_O11_Observation,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Pharmacy/treatment encoded order
//
// This message communicates the pharmacy or treatment application’s encoding of the pharmacy/treatment order (ORM message
// with RXO segment, see above).  It may be sent as an unsolicited message to report on either a single order or multiple pharmacy/treatment
// orders for a patient.
//
// The RDE/RRE is also used to communicate a refill authorization request originating with the pharmacy
type RDE_O11 struct {
	HL7     HL7Name          `hl7:",name=RDE_O11,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *RDE_O11_Patient `hl7:",display=Patient"`
	Order   []RDE_O11_Order  `hl7:",required,display=Order"`
}

// Definition
type RDR_RDR_Definition struct {
	HL7     HL7Name          `hl7:",name=RDR_RDR_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"5,display=Original Style Query Filter"`
	Patient *RDR_RDR_Patient `hl7:",display=Patient"`
	Order   []RDR_RDR_Order  `hl7:",required,display=Order"`
}

// Patient
type RDR_RDR_Patient struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// Order
type RDR_RDR_Order struct {
	HL7      HL7Name            `hl7:",name=RDR_RDR_Order,type=tg"`
	ORC      *ORC               `hl7:"8,required,display=Common Order"`
	Encoding *RDR_RDR_Encoding  `hl7:",display=Encoding"`
	Dispense []RDR_RDR_Dispense `hl7:",required,display=Dispense"`
}

// Encoding
type RDR_RDR_Encoding struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Encoding,type=tg"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy/Treatment Component Order"`
}

// Dispense
type RDR_RDR_Dispense struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Dispense,type=tg"`
	RXD *RXD    `hl7:"12,required,display=Pharmacy/Treatment Dispense"`
	RXR []RXR   `hl7:"13,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"14,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/treatment dispense information response
//
// This query/response pair is retained for backward compatibility only.  Please refer to Chapter 5 for detailed coverage
// of query/response methodology to be employed in Versions 2.4 and later.
type RDR_RDR struct {
	HL7        HL7Name              `hl7:",name=RDR_RDR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []RDR_RDR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"15,display=Continuation Pointer"`
}

// Patient
type RDS_O13_Patient struct {
	HL7          HL7Name               `hl7:",name=RDS_O13_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"4,display=Patient Additional Demographic"`
	NTE          []NTE                 `hl7:"5,display=Notes and Comments"`
	AL1          []AL1                 `hl7:"6,display=Patient allergy information"`
	PatientVisit *RDS_O13_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type RDS_O13_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RDS_O13_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"7,required,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
}

// Order
type RDS_O13_Order struct {
	HL7         HL7Name               `hl7:",name=RDS_O13_Order,type=tg"`
	ORC         *ORC                  `hl7:"9,required,display=Common Order"`
	OrderDetail *RDS_O13_OrderDetail  `hl7:",display=Order Detail"`
	Encoding    *RDS_O13_Encoding     `hl7:",display=Encoding"`
	RXD         *RXD                  `hl7:"18,required,display=Pharmacy/Treatment Dispense"`
	RXR         []RXR                 `hl7:"19,required,display=Pharmacy/Treatment Route"`
	RXC         []RXC                 `hl7:"20,display=Pharmacy/Treatment Component Order"`
	Observation []RDS_O13_Observation `hl7:",display=Observation"`
	FT1         []FT1                 `hl7:"23,display=Financial Transaction"`
}

// OrderDetail
type RDS_O13_OrderDetail struct {
	HL7                   HL7Name                        `hl7:",name=RDS_O13_OrderDetail,type=tg"`
	RXO                   *RXO                           `hl7:"10,required,display=Pharmacy/Treatment Order"`
	OrderDetailSupplement *RDS_O13_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RDS_O13_OrderDetailSupplement struct {
	HL7       HL7Name            `hl7:",name=RDS_O13_OrderDetailSupplement,type=tg"`
	NTE       []NTE              `hl7:"11,required,display=Notes and Comments"`
	RXR       []RXR              `hl7:"12,required,display=Pharmacy/Treatment Route"`
	Component *RDS_O13_Component `hl7:",display=Component"`
}

// Component
type RDS_O13_Component struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Component,type=tg"`
	RXC []RXC   `hl7:"13,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// Encoding
type RDS_O13_Encoding struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Encoding,type=tg"`
	RXE *RXE    `hl7:"15,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"16,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"17,display=Pharmacy/Treatment Component Order"`
}

// Observation
type RDS_O13_Observation struct {
	HL7 HL7Name `hl7:",name=RDS_O13_Observation,type=tg"`
	OBX *OBX    `hl7:"21,required,display=Observation/Result"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Pharmacy/treatment dispense
//
// The RDS message may be created by the pharmacy/treatment application for each instance of dispensing a drug or treatment
// to fill an existing order or orders.  In the most common case, the RDS messages would be routed to a Nursing application or
// to some clinical application, which needs the data about drugs dispensed or treatments given.  As a site-specific variant,
// the original order segments (RXO, RXE and their associated RXR/RXCs) may be sent optionally (for comparison).
type RDS_O13 struct {
	HL7     HL7Name          `hl7:",name=RDS_O13,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *RDS_O13_Patient `hl7:",display=Patient"`
	Order   []RDS_O13_Order  `hl7:",required,display=Order"`
}

// Display based response
//
// The RDY_K15 supports a Display Response to the QBP and contains the MSH, MSA, ERR, QAK, DSP, and the DSC.  Its default trigger
// event is K15.  A standard or site-defined response may use this trigger event or may specify a unique trigger event value
// in its Conformance Statement.  If a unique trigger event value is chosen for a site-defined response, that value must begin
// with Z.
type RDY_K15 struct {
	HL7 HL7Name `hl7:",name=RDY_K15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	DSP []DSP   `hl7:"6,display=Display Data"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// AuthorizationContact
type REF_I12_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I12_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// ProviderContact
type REF_I12_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I12_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Insurance
type REF_I12_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I12_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I12_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I12_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"17,required,display=Procedures"`
	AuthorizationContact *REF_I12_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I12_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I12_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type REF_I12_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I12_Observation,type=tg"`
	OBR          *OBR                   `hl7:"20,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"21,display=Notes and Comments"`
	ResultsNotes []REF_I12_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I12_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I12_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// PatientVisit
type REF_I12_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I12_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Patient referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding a specific patient.  The referral
// message may contain patient demographic information, specific medical procedures to be performed (accompanied by previously
// obtained authorizations) and relevant clinical information pertinent to the patient’s case.
type REF_I12 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I12,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	RF1                  *RF1                          `hl7:"2,display=Referral Information"`
	AuthorizationContact *REF_I12_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I12_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"7,required,display=Patient identification"`
	NK1                  []NK1                         `hl7:"8,display=Next of kin / associated parties"`
	GT1                  []GT1                         `hl7:"9,display=Guarantor"`
	Insurance            []REF_I12_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"13,display=Accident"`
	DG1                  []DG1                         `hl7:"14,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"15,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"16,display=Patient allergy information"`
	Procedure            []REF_I12_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I12_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I12_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"26,display=Notes and Comments"`
}

// AuthorizationContact
type REF_I13_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I13_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// ProviderContact
type REF_I13_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I13_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Insurance
type REF_I13_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I13_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I13_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I13_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"17,required,display=Procedures"`
	AuthorizationContact *REF_I13_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I13_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I13_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type REF_I13_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I13_Observation,type=tg"`
	OBR          *OBR                   `hl7:"20,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"21,display=Notes and Comments"`
	ResultsNotes []REF_I13_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I13_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I13_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// PatientVisit
type REF_I13_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I13_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Modify patient referral
//
// This event triggers a message to be sent from one healthcare provider to another regarding changes to an existing referral.
// Changes in a referral may include additional instructions from the referring provider, additional clinical information,
// and even additional information on patient demographics.
type REF_I13 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I13,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	RF1                  *RF1                          `hl7:"2,display=Referral Information"`
	AuthorizationContact *REF_I13_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I13_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"7,required,display=Patient identification"`
	NK1                  []NK1                         `hl7:"8,display=Next of kin / associated parties"`
	GT1                  []GT1                         `hl7:"9,display=Guarantor"`
	Insurance            []REF_I13_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"13,display=Accident"`
	DG1                  []DG1                         `hl7:"14,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"15,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"16,display=Patient allergy information"`
	Procedure            []REF_I13_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I13_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I13_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"26,display=Notes and Comments"`
}

// AuthorizationContact
type REF_I14_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I14_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// ProviderContact
type REF_I14_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I14_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Insurance
type REF_I14_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I14_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I14_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I14_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"17,required,display=Procedures"`
	AuthorizationContact *REF_I14_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I14_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I14_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type REF_I14_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I14_Observation,type=tg"`
	OBR          *OBR                   `hl7:"20,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"21,display=Notes and Comments"`
	ResultsNotes []REF_I14_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I14_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I14_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// PatientVisit
type REF_I14_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I14_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Cancel patient referral
//
// This event triggers a message to be sent from one healthcare provider to another canceling a referral.  A previous referral
// may have been made in error, or perhaps the cancellation has come from the patient.
type REF_I14 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I14,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	RF1                  *RF1                          `hl7:"2,display=Referral Information"`
	AuthorizationContact *REF_I14_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I14_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"7,required,display=Patient identification"`
	NK1                  []NK1                         `hl7:"8,display=Next of kin / associated parties"`
	GT1                  []GT1                         `hl7:"9,display=Guarantor"`
	Insurance            []REF_I14_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"13,display=Accident"`
	DG1                  []DG1                         `hl7:"14,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"15,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"16,display=Patient allergy information"`
	Procedure            []REF_I14_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I14_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I14_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"26,display=Notes and Comments"`
}

// AuthorizationContact
type REF_I15_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=REF_I15_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// ProviderContact
type REF_I15_ProviderContact struct {
	HL7 HL7Name `hl7:",name=REF_I15_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// Insurance
type REF_I15_Insurance struct {
	HL7 HL7Name `hl7:",name=REF_I15_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type REF_I15_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=REF_I15_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"17,required,display=Procedures"`
	AuthorizationContact *REF_I15_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type REF_I15_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=REF_I15_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type REF_I15_Observation struct {
	HL7          HL7Name                `hl7:",name=REF_I15_Observation,type=tg"`
	OBR          *OBR                   `hl7:"20,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"21,display=Notes and Comments"`
	ResultsNotes []REF_I15_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type REF_I15_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=REF_I15_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// PatientVisit
type REF_I15_PatientVisit struct {
	HL7 HL7Name `hl7:",name=REF_I15_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Request patient referral status
//
// This event triggers a message to be sent between healthcare providers regarding the status of a patient referral request.
// A previous referral has been made and acknowledged; however, no response has been received to indicate results and/or
// procedures performed.
type REF_I15 struct {
	HL7                  HL7Name                       `hl7:",name=REF_I15,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	RF1                  *RF1                          `hl7:"2,display=Referral Information"`
	AuthorizationContact *REF_I15_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []REF_I15_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"7,required,display=Patient identification"`
	NK1                  []NK1                         `hl7:"8,display=Next of kin / associated parties"`
	GT1                  []GT1                         `hl7:"9,display=Guarantor"`
	Insurance            []REF_I15_Insurance           `hl7:",display=Insurance"`
	ACC                  *ACC                          `hl7:"13,display=Accident"`
	DG1                  []DG1                         `hl7:"14,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"15,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"16,display=Patient allergy information"`
	Procedure            []REF_I15_Procedure           `hl7:",display=Procedure"`
	Observation          []REF_I15_Observation         `hl7:",display=Observation"`
	PatientVisit         *REF_I15_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"26,display=Notes and Comments"`
}

// Definition
type RER_RER_Definition struct {
	HL7     HL7Name          `hl7:",name=RER_RER_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"5,display=Original Style Query Filter"`
	Patient *RER_RER_Patient `hl7:",display=Patient"`
	Order   []RER_RER_Order  `hl7:",required,display=Order"`
}

// Patient
type RER_RER_Patient struct {
	HL7 HL7Name `hl7:",name=RER_RER_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// Order
type RER_RER_Order struct {
	HL7 HL7Name `hl7:",name=RER_RER_Order,type=tg"`
	ORC *ORC    `hl7:"8,required,display=Common Order"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/treatment encoded order information response
//
// This query/response pair is retained for backward compatibility only.  Please refer to Chapter 5 for detailed coverage
// of query/response methodology to be employed in Versions 2.4 and later.
type RER_RER struct {
	HL7        HL7Name              `hl7:",name=RER_RER,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []RER_RER_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"12,display=Continuation Pointer"`
}

// Defintion
type RGR_RGR_Defintion struct {
	HL7     HL7Name          `hl7:",name=RGR_RGR_Defintion,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"5,display=Original Style Query Filter"`
	Patient *RGR_RGR_Patient `hl7:",display=Patient"`
	Order   []RGR_RGR_Order  `hl7:",required,display=Order"`
}

// Patient
type RGR_RGR_Patient struct {
	HL7 HL7Name `hl7:",name=RGR_RGR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// Order
type RGR_RGR_Order struct {
	HL7      HL7Name           `hl7:",name=RGR_RGR_Order,type=tg"`
	ORC      *ORC              `hl7:"8,required,display=Common Order"`
	Encoding *RGR_RGR_Encoding `hl7:",display=Encoding"`
	RXG      []RXG             `hl7:"12,required,display=Pharmacy/Treatment Give"`
	RXR      []RXR             `hl7:"13,required,display=Pharmacy/Treatment Route"`
	RXC      []RXC             `hl7:"14,display=Pharmacy/Treatment Component Order"`
}

// Encoding
type RGR_RGR_Encoding struct {
	HL7 HL7Name `hl7:",name=RGR_RGR_Encoding,type=tg"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/treatment dose information response
//
// This query/response pair is retained for backward compatibility only.  Please refer to Chapter 5 for detailed coverage
// of query/response methodology to be employed in Versions 2.4 and later.
type RGR_RGR struct {
	HL7       HL7Name             `hl7:",name=RGR_RGR,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	MSA       *MSA                `hl7:"2,required,display=Message Acknowledgment"`
	ERR       *ERR                `hl7:"3,display=Error"`
	Defintion []RGR_RGR_Defintion `hl7:",required,display=Defintion"`
	DSC       *DSC                `hl7:"15,display=Continuation Pointer"`
}

// Patient
type RGV_O15_Patient struct {
	HL7          HL7Name               `hl7:",name=RGV_O15_Patient,type=tg"`
	PID          *PID                  `hl7:"3,required,display=Patient identification"`
	NTE          []NTE                 `hl7:"4,display=Notes and Comments"`
	AL1          []AL1                 `hl7:"5,display=Patient allergy information"`
	PatientVisit *RGV_O15_PatientVisit `hl7:",display=Patient Visit"`
}

// PatientVisit
type RGV_O15_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RGV_O15_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"6,required,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
}

// Order
type RGV_O15_Order struct {
	HL7         HL7Name              `hl7:",name=RGV_O15_Order,type=tg"`
	ORC         *ORC                 `hl7:"8,required,display=Common Order"`
	OrderDetail *RGV_O15_OrderDetail `hl7:",display=Order Detail"`
	Encoding    *RGV_O15_Encoding    `hl7:",display=Encoding"`
	Give        []RGV_O15_Give       `hl7:",required,display=Give"`
}

// OrderDetail
type RGV_O15_OrderDetail struct {
	HL7                   HL7Name                        `hl7:",name=RGV_O15_OrderDetail,type=tg"`
	RXO                   *RXO                           `hl7:"9,required,display=Pharmacy/Treatment Order"`
	OrderDetailSupplement *RGV_O15_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RGV_O15_OrderDetailSupplement struct {
	HL7        HL7Name             `hl7:",name=RGV_O15_OrderDetailSupplement,type=tg"`
	NTE        []NTE               `hl7:"10,required,display=Notes and Comments"`
	RXR        []RXR               `hl7:"11,required,display=Pharmacy/Treatment Route"`
	Components *RGV_O15_Components `hl7:",display=Components"`
}

// Components
type RGV_O15_Components struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Components,type=tg"`
	RXC []RXC   `hl7:"12,required,display=Pharmacy/Treatment Component Order"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// Encoding
type RGV_O15_Encoding struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Encoding,type=tg"`
	RXE *RXE    `hl7:"14,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"15,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"16,display=Pharmacy/Treatment Component Order"`
}

// Give
type RGV_O15_Give struct {
	HL7         HL7Name               `hl7:",name=RGV_O15_Give,type=tg"`
	RXG         *RXG                  `hl7:"17,required,display=Pharmacy/Treatment Give"`
	RXR         []RXR                 `hl7:"18,required,display=Pharmacy/Treatment Route"`
	RXC         []RXC                 `hl7:"19,display=Pharmacy/Treatment Component Order"`
	Observation []RGV_O15_Observation `hl7:",required,display=Observation"`
}

// Observation
type RGV_O15_Observation struct {
	HL7 HL7Name `hl7:",name=RGV_O15_Observation,type=tg"`
	OBX *OBX    `hl7:"20,display=Observation/Result"`
	NTE []NTE   `hl7:"21,display=Notes and Comments"`
}

// Pharmacy/treatment give
//
// The RGV message uses the RXG segment to record drug or treatment administration instructions.  It may carry information
// about a single scheduled administration on a drug or treatment, or it may carry information about multiple administrations.
type RGV_O15 struct {
	HL7     HL7Name          `hl7:",name=RGV_O15,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes and Comments"`
	Patient *RGV_O15_Patient `hl7:",display=Patient"`
	Order   []RGV_O15_Order  `hl7:",required,display=Order"`
}

// Definition
type ROR_ROR_Definition struct {
	HL7     HL7Name          `hl7:",name=ROR_ROR_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"5,display=Original Style Query Filter"`
	Patient *ROR_ROR_Patient `hl7:",display=Patient"`
	Order   []ROR_ROR_Order  `hl7:",required,display=Order"`
}

// Patient
type ROR_ROR_Patient struct {
	HL7 HL7Name `hl7:",name=ROR_ROR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	NTE []NTE   `hl7:"7,display=Notes and Comments"`
}

// Order
type ROR_ROR_Order struct {
	HL7 HL7Name `hl7:",name=ROR_ROR_Order,type=tg"`
	ORC *ORC    `hl7:"8,required,display=Common Order"`
	RXO *RXO    `hl7:"9,required,display=Pharmacy/Treatment Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy prescription order query response
//
// This query/response pair is retained for backward compatibility only.  Please refer to Chapter 5 for detailed coverage
// of query/response methodology to be employed in Versions 2.4 and later.
type ROR_ROR struct {
	HL7        HL7Name              `hl7:",name=ROR_ROR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []ROR_ROR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"12,display=Continuation Pointer"`
}

// Authorization
type RPA_I08_Authorization struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Authorization,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// Provider
type RPA_I08_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Insurance
type RPA_I08_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I08_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RPA_I08_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"18,required,display=Procedures"`
	Authorization *RPA_I08_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RPA_I08_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Authorization2,type=tg"`
	AUT *AUT    `hl7:"19,required,display=Authorization Information"`
	CTD *CTD    `hl7:"20,display=Contact Data"`
}

// Observation
type RPA_I08_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I08_Observation,type=tg"`
	OBR     *OBR              `hl7:"21,required,display=Observation Request"`
	NTE     []NTE             `hl7:"22,display=Notes and Comments"`
	Results []RPA_I08_Results `hl7:",display=Results"`
}

// Results
type RPA_I08_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Results,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Visit
type RPA_I08_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I08_Visit,type=tg"`
	PV1 *PV1    `hl7:"25,required,display=Patient visit"`
	PV2 *PV2    `hl7:"26,display=Patient visit - additional information"`
}

// Request for treatment authorization information acknowledgement
//
// This event triggers a message to be sent from a healthcare provider to a payor requesting authorization to perform specific
// medical procedures or tests on a given patient.  The specific medical procedures must be filled out in the PR1 segments.
// Each repeating PR1 segment may be paired with an AUT segment so that authorization information can be given regarding dollar
// amounts, number of treatments, and perhaps the estimated length of stay for treatment.  The OBR and OBX segments should
// be used to include any relevant clinical information that may be required to support or process the authorization.
type RPA_I08 struct {
	HL7           HL7Name                `hl7:",name=RPA_I08,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	RF1           *RF1                   `hl7:"3,display=Referral Information"`
	Authorization *RPA_I08_Authorization `hl7:",display=Authorization"`
	Provider      []RPA_I08_Provider     `hl7:",required,display=Provider"`
	PID           *PID                   `hl7:"8,required,display=Patient identification"`
	NK1           []NK1                  `hl7:"9,display=Next of kin / associated parties"`
	GT1           []GT1                  `hl7:"10,display=Guarantor"`
	Insurance     []RPA_I08_Insurance    `hl7:",display=Insurance"`
	ACC           *ACC                   `hl7:"14,display=Accident"`
	DG1           []DG1                  `hl7:"15,display=Diagnosis"`
	DRG           []DRG                  `hl7:"16,display=Diagnosis Related Group"`
	AL1           []AL1                  `hl7:"17,display=Patient allergy information"`
	Procedure     []RPA_I08_Procedure    `hl7:",required,display=Procedure"`
	Observation   []RPA_I08_Observation  `hl7:",display=Observation"`
	Visit         *RPA_I08_Visit         `hl7:",display=Visit"`
	NTE           []NTE                  `hl7:"27,display=Notes and Comments"`
}

// Authorization
type RPA_I09_Authorization struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Authorization,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// Provider
type RPA_I09_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Insurance
type RPA_I09_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I09_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RPA_I09_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"18,required,display=Procedures"`
	Authorization *RPA_I09_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RPA_I09_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Authorization2,type=tg"`
	AUT *AUT    `hl7:"19,required,display=Authorization Information"`
	CTD *CTD    `hl7:"20,display=Contact Data"`
}

// Observation
type RPA_I09_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I09_Observation,type=tg"`
	OBR     *OBR              `hl7:"21,required,display=Observation Request"`
	NTE     []NTE             `hl7:"22,display=Notes and Comments"`
	Results []RPA_I09_Results `hl7:",display=Results"`
}

// Results
type RPA_I09_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Results,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Visit
type RPA_I09_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I09_Visit,type=tg"`
	PV1 *PV1    `hl7:"25,required,display=Patient visit"`
	PV2 *PV2    `hl7:"26,display=Patient visit - additional information"`
}

// Request for modification to an authorization acknowledgement
//
// This event triggers a message sent from a healthcare provider to a payor requesting changes to a previously referenced
// authorization.  For example, a provider may determine that a substitute testing or surgical procedure should be performed
// on a specified patient.
type RPA_I09 struct {
	HL7           HL7Name                `hl7:",name=RPA_I09,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	RF1           *RF1                   `hl7:"3,display=Referral Information"`
	Authorization *RPA_I09_Authorization `hl7:",display=Authorization"`
	Provider      []RPA_I09_Provider     `hl7:",required,display=Provider"`
	PID           *PID                   `hl7:"8,required,display=Patient identification"`
	NK1           []NK1                  `hl7:"9,display=Next of kin / associated parties"`
	GT1           []GT1                  `hl7:"10,display=Guarantor"`
	Insurance     []RPA_I09_Insurance    `hl7:",display=Insurance"`
	ACC           *ACC                   `hl7:"14,display=Accident"`
	DG1           []DG1                  `hl7:"15,display=Diagnosis"`
	DRG           []DRG                  `hl7:"16,display=Diagnosis Related Group"`
	AL1           []AL1                  `hl7:"17,display=Patient allergy information"`
	Procedure     []RPA_I09_Procedure    `hl7:",required,display=Procedure"`
	Observation   []RPA_I09_Observation  `hl7:",display=Observation"`
	Visit         *RPA_I09_Visit         `hl7:",display=Visit"`
	NTE           []NTE                  `hl7:"27,display=Notes and Comments"`
}

// Authorization
type RPA_I10_Authorization struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Authorization,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// Provider
type RPA_I10_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Insurance
type RPA_I10_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I10_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RPA_I10_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"18,required,display=Procedures"`
	Authorization *RPA_I10_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RPA_I10_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Authorization2,type=tg"`
	AUT *AUT    `hl7:"19,required,display=Authorization Information"`
	CTD *CTD    `hl7:"20,display=Contact Data"`
}

// Observation
type RPA_I10_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I10_Observation,type=tg"`
	OBR     *OBR              `hl7:"21,required,display=Observation Request"`
	NTE     []NTE             `hl7:"22,display=Notes and Comments"`
	Results []RPA_I10_Results `hl7:",display=Results"`
}

// Results
type RPA_I10_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Results,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Visit
type RPA_I10_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I10_Visit,type=tg"`
	PV1 *PV1    `hl7:"25,required,display=Patient visit"`
	PV2 *PV2    `hl7:"26,display=Patient visit - additional information"`
}

// Request for resubmission of an authorization acknowledgement
//
// If a previously submitted request for treatment authorization is rejected or canceled, this event could trigger a resubmission
// message for a referenced authorization.  For example, the payor may have rejected a request until additional clinical
// information is sent to support the authorization request.
type RPA_I10 struct {
	HL7           HL7Name                `hl7:",name=RPA_I10,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	RF1           *RF1                   `hl7:"3,display=Referral Information"`
	Authorization *RPA_I10_Authorization `hl7:",display=Authorization"`
	Provider      []RPA_I10_Provider     `hl7:",required,display=Provider"`
	PID           *PID                   `hl7:"8,required,display=Patient identification"`
	NK1           []NK1                  `hl7:"9,display=Next of kin / associated parties"`
	GT1           []GT1                  `hl7:"10,display=Guarantor"`
	Insurance     []RPA_I10_Insurance    `hl7:",display=Insurance"`
	ACC           *ACC                   `hl7:"14,display=Accident"`
	DG1           []DG1                  `hl7:"15,display=Diagnosis"`
	DRG           []DRG                  `hl7:"16,display=Diagnosis Related Group"`
	AL1           []AL1                  `hl7:"17,display=Patient allergy information"`
	Procedure     []RPA_I10_Procedure    `hl7:",required,display=Procedure"`
	Observation   []RPA_I10_Observation  `hl7:",display=Observation"`
	Visit         *RPA_I10_Visit         `hl7:",display=Visit"`
	NTE           []NTE                  `hl7:"27,display=Notes and Comments"`
}

// Authorization
type RPA_I11_Authorization struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Authorization,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// Provider
type RPA_I11_Provider struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Provider,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Insurance
type RPA_I11_Insurance struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Procedure
type RPA_I11_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RPA_I11_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"18,required,display=Procedures"`
	Authorization *RPA_I11_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RPA_I11_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Authorization2,type=tg"`
	AUT *AUT    `hl7:"19,required,display=Authorization Information"`
	CTD *CTD    `hl7:"20,display=Contact Data"`
}

// Observation
type RPA_I11_Observation struct {
	HL7     HL7Name           `hl7:",name=RPA_I11_Observation,type=tg"`
	OBR     *OBR              `hl7:"21,required,display=Observation Request"`
	NTE     []NTE             `hl7:"22,display=Notes and Comments"`
	Results []RPA_I11_Results `hl7:",display=Results"`
}

// Results
type RPA_I11_Results struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Results,type=tg"`
	OBX *OBX    `hl7:"23,required,display=Observation/Result"`
	NTE []NTE   `hl7:"24,display=Notes and Comments"`
}

// Visit
type RPA_I11_Visit struct {
	HL7 HL7Name `hl7:",name=RPA_I11_Visit,type=tg"`
	PV1 *PV1    `hl7:"25,required,display=Patient visit"`
	PV2 *PV2    `hl7:"26,display=Patient visit - additional information"`
}

// Request for cancellation of an authorization acknowledgement
//
// This event may trigger the cancellation of an authorization.  It may be used by the provider to indicate that an authorized
// service was not performed, or perhaps that the patient changed to another provider.  A payor may use this request to reject
// a submitted authorization request from a provider.
type RPA_I11 struct {
	HL7           HL7Name                `hl7:",name=RPA_I11,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	RF1           *RF1                   `hl7:"3,display=Referral Information"`
	Authorization *RPA_I11_Authorization `hl7:",display=Authorization"`
	Provider      []RPA_I11_Provider     `hl7:",required,display=Provider"`
	PID           *PID                   `hl7:"8,required,display=Patient identification"`
	NK1           []NK1                  `hl7:"9,display=Next of kin / associated parties"`
	GT1           []GT1                  `hl7:"10,display=Guarantor"`
	Insurance     []RPA_I11_Insurance    `hl7:",display=Insurance"`
	ACC           *ACC                   `hl7:"14,display=Accident"`
	DG1           []DG1                  `hl7:"15,display=Diagnosis"`
	DRG           []DRG                  `hl7:"16,display=Diagnosis Related Group"`
	AL1           []AL1                  `hl7:"17,display=Patient allergy information"`
	Procedure     []RPA_I11_Procedure    `hl7:",required,display=Procedure"`
	Observation   []RPA_I11_Observation  `hl7:",display=Observation"`
	Visit         *RPA_I11_Visit         `hl7:",display=Visit"`
	NTE           []NTE                  `hl7:"27,display=Notes and Comments"`
}

// Provider
type RPI_I01_Provider struct {
	HL7 HL7Name `hl7:",name=RPI_I01_Provider,type=tg"`
	PRD *PRD    `hl7:"3,required,display=Provider Data"`
	CTD []CTD   `hl7:"4,display=Contact Data"`
}

// GuarantorInsurance
type RPI_I01_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RPI_I01_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"7,display=Guarantor"`
	Insurance []RPI_I01_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RPI_I01_Insurance struct {
	HL7 HL7Name `hl7:",name=RPI_I01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Request for insurance information acknowledgement
//
// This event triggers a message to be sent from one healthcare provider to another to request insurance information for a
// specified patient.
type RPI_I01 struct {
	HL7                HL7Name                     `hl7:",name=RPI_I01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	MSA                *MSA                        `hl7:"2,required,display=Message Acknowledgment"`
	Provider           []RPI_I01_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"5,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"6,display=Next of kin / associated parties"`
	GuarantorInsurance *RPI_I01_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"11,display=Notes and Comments"`
}

// Provider
type RPI_I04_Provider struct {
	HL7 HL7Name `hl7:",name=RPI_I04_Provider,type=tg"`
	PRD *PRD    `hl7:"3,required,display=Provider Data"`
	CTD []CTD   `hl7:"4,display=Contact Data"`
}

// GuarantorInsurance
type RPI_I04_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RPI_I04_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"7,display=Guarantor"`
	Insurance []RPI_I04_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RPI_I04_Insurance struct {
	HL7 HL7Name `hl7:",name=RPI_I04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Request for patient demographic data acknowledgement
//
// This event triggers a request from one healthcare provider to another for patient demographic information, including
// insurance and billing information.  Typically, this transaction would occur between one provider to another, but it could
// also be directed to a payor.
type RPI_I04 struct {
	HL7                HL7Name                     `hl7:",name=RPI_I04,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	MSA                *MSA                        `hl7:"2,required,display=Message Acknowledgment"`
	Provider           []RPI_I04_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"5,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"6,display=Next of kin / associated parties"`
	GuarantorInsurance *RPI_I04_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"11,display=Notes and Comments"`
}

// Provider
type RPL_I02_Provider struct {
	HL7 HL7Name `hl7:",name=RPL_I02_Provider,type=tg"`
	PRD *PRD    `hl7:"3,required,display=Provider Data"`
	CTD []CTD   `hl7:"4,display=Contact Data"`
}

// Request/receipt of patient selection display list acknowledgement
//
// This trigger event occurs when the inquirer specifies a request for a name lookup listing.  Generally, this request is used
// by the responder when insufficient data is on hand for a positive match.  In this case, the requester may ask for a list of possible
// candidates from which to make a selection.  This event code is also used by the responder to signify that the return information
// contains a list of information rather than information specific to a single patient.
type RPL_I02 struct {
	HL7      HL7Name            `hl7:",name=RPL_I02,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	Provider []RPL_I02_Provider `hl7:",required,display=Provider"`
	NTE      []NTE              `hl7:"5,display=Notes and Comments"`
	DSP      []DSP              `hl7:"6,display=Display Data"`
	DSC      *DSC               `hl7:"7,display=Continuation Pointer"`
}

// Provider
type RPR_I03_Provider struct {
	HL7 HL7Name `hl7:",name=RPR_I03_Provider,type=tg"`
	PRD *PRD    `hl7:"3,required,display=Provider Data"`
	CTD []CTD   `hl7:"4,display=Contact Data"`
}

// Request/receipt of patient selection list acknowledgement
//
// This trigger event occurs when the inquirer specifies a request for a listing of patient names.  This event differs from
// event I02 (request/receipts of patient selection display list) in that it returns the patient list in repeating PID segments
// instead of repeating DSP segments.
type RPR_I03 struct {
	HL7      HL7Name            `hl7:",name=RPR_I03,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	Provider []RPR_I03_Provider `hl7:",required,display=Provider"`
	PID      []PID              `hl7:"5,display=Patient identification"`
	NTE      []NTE              `hl7:"6,display=Notes and Comments"`
}

// Authorization
type RQA_I08_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Authorization,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// Provider
type RQA_I08_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I08_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I08_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RQA_I08_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I08_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I08_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I08_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"17,required,display=Procedures"`
	Authorization *RQA_I08_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I08_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Authorization2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type RQA_I08_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I08_Observation,type=tg"`
	OBR     *OBR              `hl7:"20,required,display=Observation Request"`
	NTE     []NTE             `hl7:"21,display=Notes and Comments"`
	Results []RQA_I08_Results `hl7:",display=Results"`
}

// Results
type RQA_I08_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Results,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Visit
type RQA_I08_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I08_Visit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Request for treatment authorization information
//
// This event triggers a message to be sent from a healthcare provider to a payor requesting authorization to perform specific
// medical procedures or tests on a given patient.  The specific medical procedures must be filled out in the PR1 segments.
// Each repeating PR1 segment may be paired with an AUT segment so that authorization information can be given regarding dollar
// amounts, number of treatments, and perhaps the estimated length of stay for treatment.  The OBR and OBX segments should
// be used to include any relevant clinical information that may be required to support or process the authorization.
type RQA_I08 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I08,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	RF1                *RF1                        `hl7:"2,display=Referral Information"`
	Authorization      *RQA_I08_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I08_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"8,display=Next of kin / associated parties"`
	GuarantorInsurance *RQA_I08_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"13,display=Accident"`
	DG1                []DG1                       `hl7:"14,display=Diagnosis"`
	DRG                []DRG                       `hl7:"15,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"16,display=Patient allergy information"`
	Procedure          []RQA_I08_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I08_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I08_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"26,display=Notes and Comments"`
}

// Authorization
type RQA_I09_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Authorization,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// Provider
type RQA_I09_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I09_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I09_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RQA_I09_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I09_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I09_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I09_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"17,required,display=Procedures"`
	Authorization *RQA_I09_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I09_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Authorization2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type RQA_I09_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I09_Observation,type=tg"`
	OBR     *OBR              `hl7:"20,required,display=Observation Request"`
	NTE     []NTE             `hl7:"21,display=Notes and Comments"`
	Results []RQA_I09_Results `hl7:",display=Results"`
}

// Results
type RQA_I09_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Results,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Visit
type RQA_I09_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I09_Visit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Request for modification to an authorization
//
// This event triggers a message sent from a healthcare provider to a payor requesting changes to a previously referenced
// authorization.  For example, a provider may determine that a substitute testing or surgical procedure should be performed
// on a specified patient.
type RQA_I09 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I09,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	RF1                *RF1                        `hl7:"2,display=Referral Information"`
	Authorization      *RQA_I09_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I09_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"8,display=Next of kin / associated parties"`
	GuarantorInsurance *RQA_I09_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"13,display=Accident"`
	DG1                []DG1                       `hl7:"14,display=Diagnosis"`
	DRG                []DRG                       `hl7:"15,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"16,display=Patient allergy information"`
	Procedure          []RQA_I09_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I09_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I09_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"26,display=Notes and Comments"`
}

// Authorization
type RQA_I10_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Authorization,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// Provider
type RQA_I10_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I10_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I10_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RQA_I10_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I10_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I10_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I10_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"17,required,display=Procedures"`
	Authorization *RQA_I10_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I10_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Authorization2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type RQA_I10_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I10_Observation,type=tg"`
	OBR     *OBR              `hl7:"20,required,display=Observation Request"`
	NTE     []NTE             `hl7:"21,display=Notes and Comments"`
	Results []RQA_I10_Results `hl7:",display=Results"`
}

// Results
type RQA_I10_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Results,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Visit
type RQA_I10_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I10_Visit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Request for resubmission of an authorization
//
// If a previously submitted request for treatment authorization is rejected or canceled, this event could trigger a resubmission
// message for a referenced authorization.  For example, the payor may have rejected a request until additional clinical
// information is sent to support the authorization request.
type RQA_I10 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I10,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	RF1                *RF1                        `hl7:"2,display=Referral Information"`
	Authorization      *RQA_I10_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I10_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"8,display=Next of kin / associated parties"`
	GuarantorInsurance *RQA_I10_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"13,display=Accident"`
	DG1                []DG1                       `hl7:"14,display=Diagnosis"`
	DRG                []DRG                       `hl7:"15,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"16,display=Patient allergy information"`
	Procedure          []RQA_I10_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I10_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I10_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"26,display=Notes and Comments"`
}

// Authorization
type RQA_I11_Authorization struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Authorization,type=tg"`
	AUT *AUT    `hl7:"3,required,display=Authorization Information"`
	CTD *CTD    `hl7:"4,display=Contact Data"`
}

// Provider
type RQA_I11_Provider struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Provider,type=tg"`
	PRD *PRD    `hl7:"5,required,display=Provider Data"`
	CTD []CTD   `hl7:"6,display=Contact Data"`
}

// GuarantorInsurance
type RQA_I11_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQA_I11_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"9,display=Guarantor"`
	Insurance []RQA_I11_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQA_I11_Insurance struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Insurance,type=tg"`
	IN1 *IN1    `hl7:"10,required,display=Insurance"`
	IN2 *IN2    `hl7:"11,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"12,display=Insurance Additional Information- Certification"`
}

// Procedure
type RQA_I11_Procedure struct {
	HL7           HL7Name                 `hl7:",name=RQA_I11_Procedure,type=tg"`
	PR1           *PR1                    `hl7:"17,required,display=Procedures"`
	Authorization *RQA_I11_Authorization2 `hl7:",display=Authorization"`
}

// Authorization
type RQA_I11_Authorization2 struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Authorization2,type=tg"`
	AUT *AUT    `hl7:"18,required,display=Authorization Information"`
	CTD *CTD    `hl7:"19,display=Contact Data"`
}

// Observation
type RQA_I11_Observation struct {
	HL7     HL7Name           `hl7:",name=RQA_I11_Observation,type=tg"`
	OBR     *OBR              `hl7:"20,required,display=Observation Request"`
	NTE     []NTE             `hl7:"21,display=Notes and Comments"`
	Results []RQA_I11_Results `hl7:",display=Results"`
}

// Results
type RQA_I11_Results struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Results,type=tg"`
	OBX *OBX    `hl7:"22,required,display=Observation/Result"`
	NTE []NTE   `hl7:"23,display=Notes and Comments"`
}

// Visit
type RQA_I11_Visit struct {
	HL7 HL7Name `hl7:",name=RQA_I11_Visit,type=tg"`
	PV1 *PV1    `hl7:"24,required,display=Patient visit"`
	PV2 *PV2    `hl7:"25,display=Patient visit - additional information"`
}

// Request for cancellation of an authorization
//
// This event may trigger the cancellation of an authorization.  It may be used by the provider to indicate that an authorized
// service was not performed, or perhaps that the patient changed to another provider.  A payor may use this request to reject
// a submitted authorization request from a provider.
type RQA_I11 struct {
	HL7                HL7Name                     `hl7:",name=RQA_I11,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	RF1                *RF1                        `hl7:"2,display=Referral Information"`
	Authorization      *RQA_I11_Authorization      `hl7:",display=Authorization"`
	Provider           []RQA_I11_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"7,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"8,display=Next of kin / associated parties"`
	GuarantorInsurance *RQA_I11_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	ACC                *ACC                        `hl7:"13,display=Accident"`
	DG1                []DG1                       `hl7:"14,display=Diagnosis"`
	DRG                []DRG                       `hl7:"15,display=Diagnosis Related Group"`
	AL1                []AL1                       `hl7:"16,display=Patient allergy information"`
	Procedure          []RQA_I11_Procedure         `hl7:",display=Procedure"`
	Observation        []RQA_I11_Observation       `hl7:",display=Observation"`
	Visit              *RQA_I11_Visit              `hl7:",display=Visit"`
	NTE                []NTE                       `hl7:"26,display=Notes and Comments"`
}

// Provider
type RQC_I05_Provider struct {
	HL7 HL7Name `hl7:",name=RQC_I05_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Request for patient clinical information
//
// This event is used to request clinical information for a specific patient.  Generally, this transaction occurs between
// one provider and another (typically a laboratory or radiology, etc.).  However, it may also be very useful for a payor-to-provider
// request for clinical observation information to be used in considering a request for treatment authorization.
type RQC_I05 struct {
	HL7      HL7Name            `hl7:",name=RQC_I05,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	QRD      *QRD               `hl7:"2,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"3,display=Original Style Query Filter"`
	Provider []RQC_I05_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"6,required,display=Patient identification"`
	NK1      []NK1              `hl7:"7,display=Next of kin / associated parties"`
	GT1      []GT1              `hl7:"8,display=Guarantor"`
	NTE      []NTE              `hl7:"9,display=Notes and Comments"`
}

// Provider
type RQC_I06_Provider struct {
	HL7 HL7Name `hl7:",name=RQC_I06_Provider,type=tg"`
	PRD *PRD    `hl7:"4,required,display=Provider Data"`
	CTD []CTD   `hl7:"5,display=Contact Data"`
}

// Request/receipt of clinical data listing
//
// This event code is sent from one healthcare provider to another  (typically a laboratory or radiology, etc.) to request
// a list of available clinical observation information.  When the provider is dealing with a community model in which remote
// requests make transmission of large amounts of data impractical, this event code will provide for interactive lists of
// transactions from which more specific selections can be made.
type RQC_I06 struct {
	HL7      HL7Name            `hl7:",name=RQC_I06,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	QRD      *QRD               `hl7:"2,required,display=Original-Style Query Definition"`
	QRF      *QRF               `hl7:"3,display=Original Style Query Filter"`
	Provider []RQC_I06_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"6,required,display=Patient identification"`
	NK1      []NK1              `hl7:"7,display=Next of kin / associated parties"`
	GT1      []GT1              `hl7:"8,display=Guarantor"`
	NTE      []NTE              `hl7:"9,display=Notes and Comments"`
}

// Provider
type RQI_I01_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I01_Provider,type=tg"`
	PRD *PRD    `hl7:"2,required,display=Provider Data"`
	CTD []CTD   `hl7:"3,display=Contact Data"`
}

// GuarantorInsurance
type RQI_I01_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I01_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"6,display=Guarantor"`
	Insurance []RQI_I01_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I01_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"7,required,display=Insurance"`
	IN2 *IN2    `hl7:"8,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"9,display=Insurance Additional Information- Certification"`
}

// Request for insurance information
//
// This event triggers a message to be sent from one healthcare provider to another to request insurance information for a
// specified patient.
type RQI_I01 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I01,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	Provider           []RQI_I01_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"4,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"5,display=Next of kin / associated parties"`
	GuarantorInsurance *RQI_I01_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"10,display=Notes and Comments"`
}

// Provider
type RQI_I02_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I02_Provider,type=tg"`
	PRD *PRD    `hl7:"2,required,display=Provider Data"`
	CTD []CTD   `hl7:"3,display=Contact Data"`
}

// GuarantorInsurance
type RQI_I02_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I02_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"6,display=Guarantor"`
	Insurance []RQI_I02_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I02_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I02_Insurance,type=tg"`
	IN1 *IN1    `hl7:"7,required,display=Insurance"`
	IN2 *IN2    `hl7:"8,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"9,display=Insurance Additional Information- Certification"`
}

// Request/receipt of patient selection display list
//
// This trigger event occurs when the inquirer specifies a request for a name lookup listing.  Generally, this request is used
// by the responder when insufficient data is on hand for a positive match.  In this case, the requester may ask for a list of possible
// candidates from which to make a selection.  This event code is also used by the responder to signify that the return information
// contains a list of information rather than information specific to a single patient.
type RQI_I02 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I02,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	Provider           []RQI_I02_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"4,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"5,display=Next of kin / associated parties"`
	GuarantorInsurance *RQI_I02_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"10,display=Notes and Comments"`
}

// Provider
type RQI_I03_Provider struct {
	HL7 HL7Name `hl7:",name=RQI_I03_Provider,type=tg"`
	PRD *PRD    `hl7:"2,required,display=Provider Data"`
	CTD []CTD   `hl7:"3,display=Contact Data"`
}

// GuarantorInsurance
type RQI_I03_GuarantorInsurance struct {
	HL7       HL7Name             `hl7:",name=RQI_I03_GuarantorInsurance,type=tg"`
	GT1       []GT1               `hl7:"6,display=Guarantor"`
	Insurance []RQI_I03_Insurance `hl7:",required,display=Insurance"`
}

// Insurance
type RQI_I03_Insurance struct {
	HL7 HL7Name `hl7:",name=RQI_I03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"7,required,display=Insurance"`
	IN2 *IN2    `hl7:"8,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"9,display=Insurance Additional Information- Certification"`
}

// Request/receipt of patient selection list
//
// This trigger event occurs when the inquirer specifies a request for a listing of patient names.  This event differs from
// event I02 (request/receipts of patient selection display list) in that it returns the patient list in repeating PID segments
// instead of repeating DSP segments.
type RQI_I03 struct {
	HL7                HL7Name                     `hl7:",name=RQI_I03,type=t"`
	MSH                *MSH                        `hl7:"1,required,display=Message Header"`
	Provider           []RQI_I03_Provider          `hl7:",required,display=Provider"`
	PID                *PID                        `hl7:"4,required,display=Patient identification"`
	NK1                []NK1                       `hl7:"5,display=Next of kin / associated parties"`
	GuarantorInsurance *RQI_I03_GuarantorInsurance `hl7:",display=Guarantor Insurance"`
	NTE                []NTE                       `hl7:"10,display=Notes and Comments"`
}

// Provider
type RQP_I04_Provider struct {
	HL7 HL7Name `hl7:",name=RQP_I04_Provider,type=tg"`
	PRD *PRD    `hl7:"2,required,display=Provider Data"`
	CTD []CTD   `hl7:"3,display=Contact Data"`
}

// Request for patient demographic data
//
// This event triggers a request from one healthcare provider to another for patient demographic information, including
// insurance and billing information.  Typically, this transaction would occur between one provider to another, but it could
// also be directed to a payor.
type RQP_I04 struct {
	HL7      HL7Name            `hl7:",name=RQP_I04,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	Provider []RQP_I04_Provider `hl7:",required,display=Provider"`
	PID      *PID               `hl7:"4,required,display=Patient identification"`
	NK1      []NK1              `hl7:"5,display=Next of kin / associated parties"`
	GT1      []GT1              `hl7:"6,display=Guarantor"`
	NTE      []NTE              `hl7:"7,display=Notes and Comments"`
}

// Event replay query
//
// The Event Replay Query under version 2.3 provides a way for the querying system to request data formatted very similar to
// the format that would have been used were this data to be sent as an update in response to a trigger event.
// The RQQ is used to request data formatted as an event replay response
type RQQ_Q09 struct {
	HL7 HL7Name `hl7:",name=RQQ_Q09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	ERQ *ERQ    `hl7:"2,required,display=Event Replay Query"`
	DSC *DSC    `hl7:"3,display=Continuation Pointer"`
}

// Response
type RRA_O18_Response struct {
	HL7     HL7Name          `hl7:",name=RRA_O18_Response,type=tg"`
	Patient *RRA_O18_Patient `hl7:",display=Patient"`
	Order   []RRA_O18_Order  `hl7:",required,display=Order"`
}

// Patient
type RRA_O18_Patient struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type RRA_O18_Order struct {
	HL7            HL7Name                 `hl7:",name=RRA_O18_Order,type=tg"`
	ORC            *ORC                    `hl7:"7,required,display=Common Order"`
	Administration *RRA_O18_Administration `hl7:",display=Administration"`
}

// Administration
type RRA_O18_Administration struct {
	HL7 HL7Name `hl7:",name=RRA_O18_Administration,type=tg"`
	RXA []RXA   `hl7:"8,required,display=Pharmacy/Treatment Administration"`
	RXR *RXR    `hl7:"9,required,display=Pharmacy/Treatment Route"`
}

// Pharmacy/treatment administration acknowledgement
//
// The RAS message may be created by the administering application (e.g., nursing application) for each instance of administration
// for an existing order.  If the administering application wants to report several administrations of medication/treatment
// for a given order with a single RAS message, each instance is reported by a separate (repeating) RXA segment.  In addition,
// the administration records for a group of orders may be sent in a single message by creating repeating groups of segments
// at the ORC level.
type RRA_O18 struct {
	HL7      HL7Name           `hl7:",name=RRA_O18,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *RRA_O18_Response `hl7:",display=Response"`
}

// Response
type RRD_O14_Response struct {
	HL7     HL7Name          `hl7:",name=RRD_O14_Response,type=tg"`
	Patient *RRD_O14_Patient `hl7:",display=Patient"`
	Order   []RRD_O14_Order  `hl7:",required,display=Order"`
}

// Patient
type RRD_O14_Patient struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type RRD_O14_Order struct {
	HL7      HL7Name           `hl7:",name=RRD_O14_Order,type=tg"`
	ORC      *ORC              `hl7:"7,required,display=Common Order"`
	Dispense *RRD_O14_Dispense `hl7:",display=Dispense"`
}

// Dispense
type RRD_O14_Dispense struct {
	HL7 HL7Name `hl7:",name=RRD_O14_Dispense,type=tg"`
	RXD *RXD    `hl7:"8,required,display=Pharmacy/Treatment Dispense"`
	RXR []RXR   `hl7:"9,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"10,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/treatment dispense acknowledgement
//
// The RDS message may be created by the pharmacy/treatment application for each instance of dispensing a drug or treatment
// to fill an existing order or orders.  In the most common case, the RDS messages would be routed to a Nursing application or
// to some clinical application, which needs the data about drugs dispensed or treatments given.  As a site-specific variant,
// the original order segments (RXO, RXE and their associated RXR/RXCs) may be sent optionally (for comparison).
type RRD_O14 struct {
	HL7      HL7Name           `hl7:",name=RRD_O14,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *RRD_O14_Response `hl7:",display=Response"`
}

// Response
type RRE_O12_Response struct {
	HL7     HL7Name          `hl7:",name=RRE_O12_Response,type=tg"`
	Patient *RRE_O12_Patient `hl7:",display=Patient"`
	Order   []RRE_O12_Order  `hl7:",required,display=Order"`
}

// Patient
type RRE_O12_Patient struct {
	HL7 HL7Name `hl7:",name=RRE_O12_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type RRE_O12_Order struct {
	HL7      HL7Name           `hl7:",name=RRE_O12_Order,type=tg"`
	ORC      *ORC              `hl7:"7,required,display=Common Order"`
	Encoding *RRE_O12_Encoding `hl7:",display=Encoding"`
}

// Encoding
type RRE_O12_Encoding struct {
	HL7 HL7Name `hl7:",name=RRE_O12_Encoding,type=tg"`
	RXE *RXE    `hl7:"8,required,display=Pharmacy/Treatment Encoded Order"`
	RXR []RXR   `hl7:"9,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"10,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/treatment encoded order acknowledgement
//
// This message communicates the pharmacy or treatment application’s encoding of the pharmacy/treatment order (ORM message
// with RXO segment, see above).  It may be sent as an unsolicited message to report on either a single order or multiple pharmacy/treatment
// orders for a patient.
//
// The RDE/RRE is also used to communicate a refill authorization request originating with the pharmacy
type RRE_O12 struct {
	HL7      HL7Name           `hl7:",name=RRE_O12,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *RRE_O12_Response `hl7:",display=Response"`
}

// Response
type RRG_O16_Response struct {
	HL7     HL7Name          `hl7:",name=RRG_O16_Response,type=tg"`
	Patient *RRG_O16_Patient `hl7:",display=Patient"`
	Order   []RRG_O16_Order  `hl7:",required,display=Order"`
}

// Patient
type RRG_O16_Patient struct {
	HL7 HL7Name `hl7:",name=RRG_O16_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NTE []NTE   `hl7:"6,display=Notes and Comments"`
}

// Order
type RRG_O16_Order struct {
	HL7  HL7Name       `hl7:",name=RRG_O16_Order,type=tg"`
	ORC  *ORC          `hl7:"7,required,display=Common Order"`
	Give *RRG_O16_Give `hl7:",display=Give"`
}

// Give
type RRG_O16_Give struct {
	HL7 HL7Name `hl7:",name=RRG_O16_Give,type=tg"`
	RXG *RXG    `hl7:"8,required,display=Pharmacy/Treatment Give"`
	RXR []RXR   `hl7:"9,required,display=Pharmacy/Treatment Route"`
	RXC []RXC   `hl7:"10,display=Pharmacy/Treatment Component Order"`
}

// Pharmacy/treatment give acknowledgement
//
// The RGV message uses the RXG segment to record drug or treatment administration instructions.  It may carry information
// about a single scheduled administration on a drug or treatment, or it may carry information about multiple administrations.
type RRG_O16 struct {
	HL7      HL7Name           `hl7:",name=RRG_O16,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes and Comments"`
	Response *RRG_O16_Response `hl7:",display=Response"`
}

// AuthorizationContact
type RRI_I12_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I12_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// ProviderContact
type RRI_I12_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I12_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Procedure
type RRI_I12_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I12_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"13,required,display=Procedures"`
	AuthorizationContact *RRI_I12_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I12_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I12_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"14,required,display=Authorization Information"`
	CTD *CTD    `hl7:"15,display=Contact Data"`
}

// Observation
type RRI_I12_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I12_Observation,type=tg"`
	OBR          *OBR                   `hl7:"16,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"17,display=Notes and Comments"`
	ResultsNotes []RRI_I12_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I12_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I12_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PatientVisit
type RRI_I12_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I12_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"20,required,display=Patient visit"`
	PV2 *PV2    `hl7:"21,display=Patient visit - additional information"`
}

// Patient referral acknowledgement
//
// This event triggers a message to be sent from one healthcare provider to another regarding a specific patient.  The referral
// message may contain patient demographic information, specific medical procedures to be performed (accompanied by previously
// obtained authorizations) and relevant clinical information pertinent to the patient’s case.
type RRI_I12 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I12,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	MSA                  *MSA                          `hl7:"2,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"3,display=Referral Information"`
	AuthorizationContact *RRI_I12_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I12_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"8,required,display=Patient identification"`
	ACC                  *ACC                          `hl7:"9,display=Accident"`
	DG1                  []DG1                         `hl7:"10,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"11,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"12,display=Patient allergy information"`
	Procedure            []RRI_I12_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I12_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I12_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"22,display=Notes and Comments"`
}

// AuthorizationContact
type RRI_I13_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I13_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// ProviderContact
type RRI_I13_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I13_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Procedure
type RRI_I13_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I13_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"13,required,display=Procedures"`
	AuthorizationContact *RRI_I13_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I13_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I13_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"14,required,display=Authorization Information"`
	CTD *CTD    `hl7:"15,display=Contact Data"`
}

// Observation
type RRI_I13_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I13_Observation,type=tg"`
	OBR          *OBR                   `hl7:"16,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"17,display=Notes and Comments"`
	ResultsNotes []RRI_I13_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I13_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I13_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PatientVisit
type RRI_I13_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I13_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"20,required,display=Patient visit"`
	PV2 *PV2    `hl7:"21,display=Patient visit - additional information"`
}

// Modify patient referral acknowledgement
//
// This event triggers a message to be sent from one healthcare provider to another regarding changes to an existing referral.
// Changes in a referral may include additional instructions from the referring provider, additional clinical information,
// and even additional information on patient demographics.
type RRI_I13 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I13,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	MSA                  *MSA                          `hl7:"2,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"3,display=Referral Information"`
	AuthorizationContact *RRI_I13_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I13_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"8,required,display=Patient identification"`
	ACC                  *ACC                          `hl7:"9,display=Accident"`
	DG1                  []DG1                         `hl7:"10,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"11,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"12,display=Patient allergy information"`
	Procedure            []RRI_I13_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I13_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I13_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"22,display=Notes and Comments"`
}

// AuthorizationContact
type RRI_I14_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I14_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// ProviderContact
type RRI_I14_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I14_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Procedure
type RRI_I14_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I14_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"13,required,display=Procedures"`
	AuthorizationContact *RRI_I14_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I14_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I14_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"14,required,display=Authorization Information"`
	CTD *CTD    `hl7:"15,display=Contact Data"`
}

// Observation
type RRI_I14_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I14_Observation,type=tg"`
	OBR          *OBR                   `hl7:"16,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"17,display=Notes and Comments"`
	ResultsNotes []RRI_I14_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I14_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I14_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PatientVisit
type RRI_I14_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I14_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"20,required,display=Patient visit"`
	PV2 *PV2    `hl7:"21,display=Patient visit - additional information"`
}

// Cancel patient referral acknowledgement
//
// This event triggers a message to be sent from one healthcare provider to another canceling a referral.  A previous referral
// may have been made in error, or perhaps the cancellation has come from the patient.
type RRI_I14 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I14,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	MSA                  *MSA                          `hl7:"2,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"3,display=Referral Information"`
	AuthorizationContact *RRI_I14_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I14_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"8,required,display=Patient identification"`
	ACC                  *ACC                          `hl7:"9,display=Accident"`
	DG1                  []DG1                         `hl7:"10,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"11,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"12,display=Patient allergy information"`
	Procedure            []RRI_I14_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I14_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I14_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"22,display=Notes and Comments"`
}

// AuthorizationContact
type RRI_I15_AuthorizationContact struct {
	HL7 HL7Name `hl7:",name=RRI_I15_AuthorizationContact,type=tg"`
	AUT *AUT    `hl7:"4,required,display=Authorization Information"`
	CTD *CTD    `hl7:"5,display=Contact Data"`
}

// ProviderContact
type RRI_I15_ProviderContact struct {
	HL7 HL7Name `hl7:",name=RRI_I15_ProviderContact,type=tg"`
	PRD *PRD    `hl7:"6,required,display=Provider Data"`
	CTD []CTD   `hl7:"7,display=Contact Data"`
}

// Procedure
type RRI_I15_Procedure struct {
	HL7                  HL7Name                        `hl7:",name=RRI_I15_Procedure,type=tg"`
	PR1                  *PR1                           `hl7:"13,required,display=Procedures"`
	AuthorizationContact *RRI_I15_AuthorizationContact2 `hl7:",display=Authorization Contact"`
}

// AuthorizationContact
type RRI_I15_AuthorizationContact2 struct {
	HL7 HL7Name `hl7:",name=RRI_I15_AuthorizationContact2,type=tg"`
	AUT *AUT    `hl7:"14,required,display=Authorization Information"`
	CTD *CTD    `hl7:"15,display=Contact Data"`
}

// Observation
type RRI_I15_Observation struct {
	HL7          HL7Name                `hl7:",name=RRI_I15_Observation,type=tg"`
	OBR          *OBR                   `hl7:"16,required,display=Observation Request"`
	NTE          []NTE                  `hl7:"17,display=Notes and Comments"`
	ResultsNotes []RRI_I15_ResultsNotes `hl7:",display=Results Notes"`
}

// ResultsNotes
type RRI_I15_ResultsNotes struct {
	HL7 HL7Name `hl7:",name=RRI_I15_ResultsNotes,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation/Result"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PatientVisit
type RRI_I15_PatientVisit struct {
	HL7 HL7Name `hl7:",name=RRI_I15_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"20,required,display=Patient visit"`
	PV2 *PV2    `hl7:"21,display=Patient visit - additional information"`
}

// Request patient referral status acknowledgement
//
// This event triggers a message to be sent between healthcare providers regarding the status of a patient referral request.
// A previous referral has been made and acknowledged; however, no response has been received to indicate results and/or
// procedures performed.
type RRI_I15 struct {
	HL7                  HL7Name                       `hl7:",name=RRI_I15,type=t"`
	MSH                  *MSH                          `hl7:"1,required,display=Message Header"`
	MSA                  *MSA                          `hl7:"2,display=Message Acknowledgment"`
	RF1                  *RF1                          `hl7:"3,display=Referral Information"`
	AuthorizationContact *RRI_I15_AuthorizationContact `hl7:",display=Authorization Contact"`
	ProviderContact      []RRI_I15_ProviderContact     `hl7:",required,display=Provider Contact"`
	PID                  *PID                          `hl7:"8,required,display=Patient identification"`
	ACC                  *ACC                          `hl7:"9,display=Accident"`
	DG1                  []DG1                         `hl7:"10,display=Diagnosis"`
	DRG                  []DRG                         `hl7:"11,display=Diagnosis Related Group"`
	AL1                  []AL1                         `hl7:"12,display=Patient allergy information"`
	Procedure            []RRI_I15_Procedure           `hl7:",display=Procedure"`
	Observation          []RRI_I15_Observation         `hl7:",display=Observation"`
	PatientVisit         *RRI_I15_PatientVisit         `hl7:",display=Patient Visit"`
	NTE                  []NTE                         `hl7:"22,display=Notes and Comments"`
}

// Segment pattern response
//
// The RSP_K11 supports a Segment Pattern Response to the QBP and contains the MSH, MSA, ERR, QAK, QPD, variable content segments,
// and the DSC.  Its default trigger event is K11.  A standard or sitedefined response may use this trigger event or may specify
// a unique trigger event value in its Conformance Statement.  If a unique trigger event value is chosen for a site-defined
// response, that value must begin with Z.
type RSP_K11 struct {
	HL7 HL7Name `hl7:",name=RSP_K11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// RowDefinition
type RSP_K13_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RSP_K13_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"6,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"7,display=Table Row Data"`
}

// Segment pattern response
type RSP_K13 struct {
	HL7           HL7Name                `hl7:",name=RSP_K13,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"3,display=Error"`
	QAK           *QAK                   `hl7:"4,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"5,required,display=Query Parameter Definition"`
	RowDefinition *RSP_K13_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"8,display=Continuation Pointer"`
}

// Segment pattern response
type RSP_K15 struct {
	HL7 HL7Name `hl7:",name=RSP_K15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	DSP []DSP   `hl7:"6,display=Display Data"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// QueryResponse
type RSP_K21_QueryResponse struct {
	HL7 HL7Name `hl7:",name=RSP_K21_QueryResponse,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PD1 *PD1    `hl7:"7,display=Patient Additional Demographic"`
}

// Response - Person demographics
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response the demographics for that person.
type RSP_K21 struct {
	HL7           HL7Name                `hl7:",name=RSP_K21,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"3,display=Error"`
	QAK           *QAK                   `hl7:"4,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"5,required,display=Query Parameter Definition"`
	QueryResponse *RSP_K21_QueryResponse `hl7:",display=Query Response"`
	DSC           *DSC                   `hl7:"8,display=Continuation Pointer"`
}

// QueryResponse
type RSP_K22_QueryResponse struct {
	HL7 HL7Name `hl7:",name=RSP_K22_QueryResponse,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PD1 *PD1    `hl7:"7,display=Patient Additional Demographic"`
	QRI *QRI    `hl7:"8,display=Query Response Instance"`
}

// Response - Find candidates
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of a set of demographics for a person, and the response is the list of candidates considered by the MPI to match that set.
type RSP_K22 struct {
	HL7           HL7Name                 `hl7:",name=RSP_K22,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	MSA           *MSA                    `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"3,display=Error"`
	QAK           *QAK                    `hl7:"4,required,display=Query Acknowledgment"`
	QPD           *QPD                    `hl7:"5,required,display=Query Parameter Definition"`
	QueryResponse []RSP_K22_QueryResponse `hl7:",display=Query Response"`
	DSC           *DSC                    `hl7:"9,display=Continuation Pointer"`
}

// Response - Get corresponding identifiers
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of an identifier for a person, and the response is a list of identifiers for that person from the domains specified.
type RSP_K23 struct {
	HL7 HL7Name `hl7:",name=RSP_K23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	PID *PID    `hl7:"6,display=Patient identification"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Response - Allocate identifiers
//
// This query/response is designed for interaction between a client system and an MPI (Master Person Index). The query consists
// of domains in which identifiers should be allocated. The response is new identifiers in those domains.
type RSP_K24 struct {
	HL7 HL7Name `hl7:",name=RSP_K24,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	QPD *QPD    `hl7:"5,required,display=Query Parameter Definition"`
	PID *PID    `hl7:"6,display=Patient identification"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Staff
type RSP_K25_Staff struct {
	HL7 HL7Name `hl7:",name=RSP_K25_Staff,type=tg"`
	STF *STF    `hl7:"7,required,display=Staff Identification"`
	PRA *PRA    `hl7:"8,display=Practitioner Detail"`
	ORG []ORG   `hl7:"9,display=Practitioner Organization Unit"`
	AFF []AFF   `hl7:"10,display=Professional Affiliation"`
	LAN []LAN   `hl7:"11,display=Language Detail"`
	EDU []EDU   `hl7:"12,display=Educational Detail"`
}

// Response - Personnel information
//
// The following trigger event is served by the following Conformance Statement: Another application determines a need
// for Personnel data about a person and sends a query to a system providing this information.
type RSP_K25 struct {
	HL7   HL7Name         `hl7:",name=RSP_K25,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	MSA   *MSA            `hl7:"2,required,display=Message Acknowledgment"`
	ERR   *ERR            `hl7:"3,display=Error"`
	QAK   *QAK            `hl7:"4,required,display=Query Acknowledgment"`
	QPD   *QPD            `hl7:"5,required,display=Query Parameter Definition"`
	RCP   *RCP            `hl7:"6,required,display=Response Control Parameter"`
	Staff []RSP_K25_Staff `hl7:",required,display=Staff"`
	DSC   *DSC            `hl7:"13,display=Continuation Pointer"`
}

// RowDefinition
type RTB_K13_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_K13_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"6,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"7,display=Table Row Data"`
}

// Table Based Response
//
// The RTB_K13 supports a Tabular Response to the QBP and contains the MSH, MSA, ERR, QAK, QPD, RDF, RDT and the DSC.  Its default
// trigger event is K13.  A standard or site-defined response may use this trigger event or may specify a unique trigger event
// value in its Conformance Statement.  If a unique trigger event value is chosen for a site-defined response, that value must
// begin with Z.
type RTB_K13 struct {
	HL7           HL7Name                `hl7:",name=RTB_K13,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"3,display=Error"`
	QAK           *QAK                   `hl7:"4,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"5,required,display=Query Parameter Definition"`
	RowDefinition *RTB_K13_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"8,display=Continuation Pointer"`
}

// RowDefinition
type RTB_Q13_RowDefinition struct {
	HL7 HL7Name `hl7:",name=RTB_Q13_RowDefinition,type=tg"`
	RDF *RDF    `hl7:"6,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"7,display=Table Row Data"`
}

// Tabular response
type RTB_Q13 struct {
	HL7           HL7Name                `hl7:",name=RTB_Q13,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	MSA           *MSA                   `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                   `hl7:"3,display=Error"`
	QAK           *QAK                   `hl7:"4,required,display=Query Acknowledgment"`
	QPD           *QPD                   `hl7:"5,required,display=Query Parameter Definition"`
	RowDefinition *RTB_Q13_RowDefinition `hl7:",display=Row Definition"`
	DSC           *DSC                   `hl7:"8,display=Continuation Pointer"`
}

// Patient
type SIU_S12_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S12_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S12_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S12_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S12_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S12_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S12_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S12_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S12_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S12_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S12_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S12_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S12_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of new appointment booking
//
// This message is sent from a filler application to notify other applications that a new appointment has been booked.  The
// information provided in the SCH segment and the other detail segments as appropriate describe the appointment that has
// been booked by the filler application.
type SIU_S12 struct {
	HL7       HL7Name             `hl7:",name=SIU_S12,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S12_Patient   `hl7:",display=Patient"`
	Resources []SIU_S12_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S13_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S13_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S13_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S13_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S13_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S13_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S13_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S13_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S13_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S13_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S13_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S13_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S13_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Appointment Rescheduling
//
// This message is sent from a filler application to notify other applications that an existing appointment has been rescheduled.
// The information in the SCH segment and the other detail segments as appropriate describe the new date(s) and time(s) to
// which the previously booked appointment has been moved.  Additionally, it describes the unchanged information in the
// previously booked appointment.
type SIU_S13 struct {
	HL7       HL7Name             `hl7:",name=SIU_S13,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S13_Patient   `hl7:",display=Patient"`
	Resources []SIU_S13_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S14_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S14_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S14_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S14_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S14_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S14_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S14_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S14_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S14_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S14_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S14_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S14_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S14_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Appointment Modification
//
// This message notifies other applications that an existing appointment has been modified on the filler application.  This
// trigger event should only be used for appointments that have not been completed, or for parent appointments whose children
// have not been completed.
type SIU_S14 struct {
	HL7       HL7Name             `hl7:",name=SIU_S14,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S14_Patient   `hl7:",display=Patient"`
	Resources []SIU_S14_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S15_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S15_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S15_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S15_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S15_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S15_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S15_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S15_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S15_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S15_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S15_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S15_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S15_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Appointment Cancellation
//
// A notification of appointment cancellation is sent by the filler application to other applications when an existing appointment
// has been canceled.  A cancel event is used to stop a valid appointment from taking place.  For example, if a patient scheduled
// for an exam cancels his/her appointment, then the appointment is canceled on the filler application.
type SIU_S15 struct {
	HL7       HL7Name             `hl7:",name=SIU_S15,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S15_Patient   `hl7:",display=Patient"`
	Resources []SIU_S15_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S16_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S16_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S16_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S16_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S16_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S16_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S16_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S16_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S16_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S16_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S16_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S16_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S16_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Appointment Discontinuation
//
// A notification of appointment discontinuation is sent by the filler application to notify other applications that an
// appointment in progress has been stopped, or that the remaining occurrences of a parent appointment will not occur.  If
// none of the child appointments of a parent appointment have taken place, then a cancel trigger event should be sent instead.
type SIU_S16 struct {
	HL7       HL7Name             `hl7:",name=SIU_S16,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S16_Patient   `hl7:",display=Patient"`
	Resources []SIU_S16_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S17_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S17_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S17_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S17_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S17_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S17_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S17_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S17_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S17_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S17_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S17_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S17_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S17_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Appointment Deletion
//
// A notification of appointment deletion is sent by the filler application to other applications when an appointment that
// had been entered in error has been removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously scheduled.  It must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring. This trigger event should not be used for any appointment that has already begun,
// or that has already been completed.  Likewise, it should not be used for any parent appointment if any child appointments
// have either begun or been completed.
type SIU_S17 struct {
	HL7       HL7Name             `hl7:",name=SIU_S17,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S17_Patient   `hl7:",display=Patient"`
	Resources []SIU_S17_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S18_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S18_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S18_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S18_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S18_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S18_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S18_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S18_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S18_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S18_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S18_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S18_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S18_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Addition of Service/Resource on Appointment
//
// The notification of addition of service/resource is triggered on the filler application when a new service or resource
// has been added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments
// on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been
// completed, or for parent appointments whose children have not been completed.
type SIU_S18 struct {
	HL7       HL7Name             `hl7:",name=SIU_S18,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S18_Patient   `hl7:",display=Patient"`
	Resources []SIU_S18_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S19_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S19_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S19_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S19_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S19_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S19_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S19_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S19_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S19_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S19_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S19_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S19_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S19_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Modification of Service/Resource on Appointment
//
// The notification of modification of service/resource is triggered on the filler application when the information pertaining
// to an existing service or resource has been changed for an existing appointment.  Services and resources are represented
// by the AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used
// for appointments that have not been completed, or for parent appointments whose children have not been completed.
type SIU_S19 struct {
	HL7       HL7Name             `hl7:",name=SIU_S19,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S19_Patient   `hl7:",display=Patient"`
	Resources []SIU_S19_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S20_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S20_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S20_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S20_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S20_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S20_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S20_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S20_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S20_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S20_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S20_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S20_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S20_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Cancellation of Service/Resource on Appointment
//
// This trigger event notifies other applications that a service or resource has been removed from an existing scheduled
// appointment that has not yet begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.
// For example, if a portable X-ray machine scheduled for an exam is no longer needed, then the resource is canceled on the filler
// application.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.
type SIU_S20 struct {
	HL7       HL7Name             `hl7:",name=SIU_S20,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S20_Patient   `hl7:",display=Patient"`
	Resources []SIU_S20_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S21_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S21_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S21_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S21_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S21_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S21_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S21_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S21_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S21_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S21_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S21_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S21_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S21_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Discontinuation of Service/Resource on Appointment
//
// A notification of discontinuation of service/resource is sent by the filler application to other applications when the
// remaining children of a parent appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to discontinue the performance of a service or resource in a parent appointment that has already begun.  If
// the first appointment in a set of recurring appointments has not yet taken place, then a cancel trigger event should be sent
// instead.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed.
type SIU_S21 struct {
	HL7       HL7Name             `hl7:",name=SIU_S21,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S21_Patient   `hl7:",display=Patient"`
	Resources []SIU_S21_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S22_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S22_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S22_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S22_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S22_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S22_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S22_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S22_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S22_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S22_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S22_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S22_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S22_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Deletion of Service/Resource on Appointment
//
// A notification of deletion of service/resource is sent by the filler application to other applications when a scheduled
// appointment requiring a service or resource entered in error has been removed from the system. A delete trigger event should
// only be used in those circumstances when a service or resource has been erroneously attached to an appointment, and must
// be removed from the schedule so that it does not affect any statistical processing.  A delete trigger event differs from
// a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts to prevent a valid request from taking
// place.
type SIU_S22 struct {
	HL7       HL7Name             `hl7:",name=SIU_S22,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S22_Patient   `hl7:",display=Patient"`
	Resources []SIU_S22_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S23_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S23_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S23_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S23_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S23_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S23_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S23_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S23_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S23_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S23_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S23_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S23_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S23_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Blocked Schedule Time Slot(S)
//
// A notification of blocked schedule time slots is sent by the filler application to other applications when a schedule has
// had one or more time slots blocked and made unavailable for reasons other than the scheduling of an appointment.  For example,
// if an exam room is unavailable for several hours because of maintenance needs or contamination, a user may block off those
// several hours on the exam room’s schedule. Similarly, if a physician is unavailable because he or she has taken vacation
// time, his or her schedule may be blocked off for the duration of the vacation.  When these types of conditions exist, the filler
// application may use this transaction to notify other applications that the resources controlled by schedules are unavailable.
type SIU_S23 struct {
	HL7       HL7Name             `hl7:",name=SIU_S23,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S23_Patient   `hl7:",display=Patient"`
	Resources []SIU_S23_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S24_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S24_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S24_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S24_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S24_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S24_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S24_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S24_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S24_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S24_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S24_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S24_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S24_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification of Opened (un-blocked) Schedule Time Slot(s)
//
// A notification of blocked schedule time slots is sent by the filler application to other applications when a schedule has
// one or more time slots open up (“un-blocked”) and become available for use.  Typically, the blocked period of time on a schedule
// is simply allowed to expire, because the blocked amount of time is generally used for non-appointment activities. This
// transaction can be used either to discontinue the blocked status on the schedule, or to reverse a previous block made in
// error.  For the purposes of this transaction, discontinuing a block currently in progress (the blocked period has started,
// but not yet completed) and canceling a blocked period in the future are not significantly different.  Therefore, a separate
// discontinue block transaction is not necessary.  If this transaction is received prior to the inception of a blocked period,
// then the entire block period is simply canceled according to the data provided in the transaction.  If the transaction is
// received after the blocked period has begun, but prior to the end of the blocked period, then the blocked period is discontinued
// according to the data provided in the transactions.  Applications may decide how to handle transactions that attempt to
// open a blocked period that has both started and ended in the past; however, these transactions can generally be ignored.
type SIU_S24 struct {
	HL7       HL7Name             `hl7:",name=SIU_S24,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S24_Patient   `hl7:",display=Patient"`
	Resources []SIU_S24_Resources `hl7:",required,display=Resources"`
}

// Patient
type SIU_S26_Patient struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Patient,type=tg"`
	PID *PID    `hl7:"4,required,display=Patient identification"`
	PD1 *PD1    `hl7:"5,display=Patient Additional Demographic"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SIU_S26_Resources struct {
	HL7               HL7Name                     `hl7:",name=SIU_S26_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SIU_S26_Service           `hl7:",display=Service"`
	GeneralResource   []SIU_S26_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SIU_S26_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SIU_S26_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SIU_S26_Service struct {
	HL7 HL7Name `hl7:",name=SIU_S26_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SIU_S26_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SIU_S26_LocationResource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SIU_S26_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SIU_S26_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Notification That Patient Did Not Show Up for Scheduled Appointment
//
// A notification that a patient did not show up for an appointment.  For example, if a patient was scheduled for a clinic visit,
// and never arrived for that appointment, this trigger event can be used to set a status on the appointment record for statistical
// purposes, as well as to free resources assigned to the appointment (or any other application level actions that must be
// taken in the event a patient does not appear for an appointment).
type SIU_S26 struct {
	HL7       HL7Name             `hl7:",name=SIU_S26,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	SCH       *SCH                `hl7:"2,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"3,display=Notes and Comments"`
	Patient   []SIU_S26_Patient   `hl7:",display=Patient"`
	Resources []SIU_S26_Resources `hl7:",required,display=Resources"`
}

// Stored procedure request
//
// The Stored Procedure Query provides a mechanism for the querying system to invoke a stored procedure on the responding
// system. The request includes a stored procedure name and a list of parameters passed to it.
//
// The SPQ enables an application on one system to execute a stored procedure on another system, which is coded to extract specific
// data.
//
// Since the SPR segment includes a response format code, the response could be tabular, display or segment pattern.
type SPQ_Q08 struct {
	HL7 HL7Name `hl7:",name=SPQ_Q08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	SPR *SPR    `hl7:"2,required,display=Stored Procedure Request Definition"`
	RDF *RDF    `hl7:"3,display=Table Row Definition"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Request
type SQM_S25_Request struct {
	HL7       HL7Name             `hl7:",name=SQM_S25_Request,type=tg"`
	ARQ       *ARQ                `hl7:"4,required,display=Appointment Request"`
	APR       *APR                `hl7:"5,display=Appointment Preferences"`
	PID       *PID                `hl7:"6,display=Patient identification"`
	Resources []SQM_S25_Resources `hl7:",required,display=Resources"`
}

// Resources
type SQM_S25_Resources struct {
	HL7               HL7Name                     `hl7:",name=SQM_S25_Resources,type=tg"`
	RGS               *RGS                        `hl7:"7,required,display=Resource Group"`
	Service           []SQM_S25_Service           `hl7:",display=Service"`
	GeneralResource   []SQM_S25_GeneralResource   `hl7:",display=General Resource"`
	PersonnelResource []SQM_S25_PersonnelResource `hl7:",display=Personnel Resource"`
	LocationResource  []SQM_S25_LocationResource  `hl7:",display=Location Resource"`
}

// Service
type SQM_S25_Service struct {
	HL7 HL7Name `hl7:",name=SQM_S25_Service,type=tg"`
	AIS *AIS    `hl7:"8,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"9,display=Appointment Preferences"`
}

// GeneralResource
type SQM_S25_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SQM_S25_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"10,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"11,display=Appointment Preferences"`
}

// PersonnelResource
type SQM_S25_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SQM_S25_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"12,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"13,display=Appointment Preferences"`
}

// LocationResource
type SQM_S25_LocationResource struct {
	HL7 HL7Name `hl7:",name=SQM_S25_LocationResource,type=tg"`
	AIL *AIL    `hl7:"14,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
}

// Schedule query message and response
//
// Original Mode record-oriented query transactions are initiated from the querying application using the Schedule Query
// (SQM) to request information about a filler application’s schedule(s).  The filler application responds to these requests,
// using the Schedule Query Response (SQR) message to either return the requested information, or to signal that an interfacing
// error of some kind has occurred.
type SQM_S25 struct {
	HL7     HL7Name          `hl7:",name=SQM_S25,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	QRD     *QRD             `hl7:"2,required,display=Original-Style Query Definition"`
	QRF     *QRF             `hl7:"3,display=Original Style Query Filter"`
	Request *SQM_S25_Request `hl7:",display=Request"`
	DSC     *DSC             `hl7:"16,display=Continuation Pointer"`
}

// Schedule
type SQR_S25_Schedule struct {
	HL7       HL7Name             `hl7:",name=SQR_S25_Schedule,type=tg"`
	SCH       *SCH                `hl7:"5,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"6,display=Notes and Comments"`
	Patient   *SQR_S25_Patient    `hl7:",display=Patient"`
	Resources []SQR_S25_Resources `hl7:",required,display=Resources"`
}

// Patient
type SQR_S25_Patient struct {
	HL7 HL7Name `hl7:",name=SQR_S25_Patient,type=tg"`
	PID *PID    `hl7:"7,required,display=Patient identification"`
	PV1 *PV1    `hl7:"8,display=Patient visit"`
	PV2 *PV2    `hl7:"9,display=Patient visit - additional information"`
	DG1 *DG1    `hl7:"10,display=Diagnosis"`
}

// Resources
type SQR_S25_Resources struct {
	HL7               HL7Name                     `hl7:",name=SQR_S25_Resources,type=tg"`
	RGS               *RGS                        `hl7:"11,required,display=Resource Group"`
	Service           []SQR_S25_Service           `hl7:",display=Service"`
	GeneralResource   []SQR_S25_GeneralResource   `hl7:",display=General Resource"`
	PersonnelResource []SQR_S25_PersonnelResource `hl7:",display=Personnel Resource"`
	LocationResource  []SQR_S25_LocationResource  `hl7:",display=Location Resource"`
}

// Service
type SQR_S25_Service struct {
	HL7 HL7Name `hl7:",name=SQR_S25_Service,type=tg"`
	AIS *AIS    `hl7:"12,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SQR_S25_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SQR_S25_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// PersonnelResource
type SQR_S25_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SQR_S25_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"16,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"17,display=Notes and Comments"`
}

// LocationResource
type SQR_S25_LocationResource struct {
	HL7 HL7Name `hl7:",name=SQR_S25_LocationResource,type=tg"`
	AIL *AIL    `hl7:"18,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// Schedule query message and response
//
// Original Mode record-oriented query transactions are initiated from the querying application using the Schedule Query
// (SQM) to request information about a filler application’s schedule(s).  The filler application responds to these requests,
// using the Schedule Query Response (SQR) message to either return the requested information, or to signal that an interfacing
// error of some kind has occurred.
type SQR_S25 struct {
	HL7      HL7Name            `hl7:",name=SQR_S25,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR               `hl7:"3,display=Error"`
	QAK      *QAK               `hl7:"4,required,display=Query Acknowledgment"`
	Schedule []SQR_S25_Schedule `hl7:",display=Schedule"`
	DSC      *DSC               `hl7:"20,display=Continuation Pointer"`
}

// Patient
type SRM_S01_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S01_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S01_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S01_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S01_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S01_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S01_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S01_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S01_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S01_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S01_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S01_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S01_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - New appointment booking
//
// A placer application sends a transaction with this trigger event to a filler application to request that a new appointment
// be booked.  If it is successful, the filler application returns an application acknowledgment (if requested under the
// enhanced acknowledgment mode, or if the original acknowledgment mode is in use). The acknowledgment may optionally contain
// an SCH segment and related detail segments describing the actual appointment that was booked.
type SRM_S01 struct {
	HL7       HL7Name             `hl7:",name=SRM_S01,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S01_Patient   `hl7:",display=Patient"`
	Resources []SRM_S01_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S02_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S02_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S02_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S02_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S02_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S02_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S02_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S02_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S02_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S02_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S02_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S02_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S02_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Appointment rescheduling
//
// A placer application uses this trigger event to request that an existing appointment be rescheduled.  The new Requested
// Start Date and Time, Appointment Duration, Repeating Interval, Repeating Interval Duration, and/or Priority are provided
// in the ARQ segment, along with the existing placer and filler identification numbers.  If it is successful, an application
// acknowledgment is returned, optionally containing an SCH segment and related detail segments describing the new information
// for the rescheduled appointment.
type SRM_S02 struct {
	HL7       HL7Name             `hl7:",name=SRM_S02,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S02_Patient   `hl7:",display=Patient"`
	Resources []SRM_S02_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S03_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S03_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S03_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S03_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S03_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S03_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S03_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S03_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S03_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S03_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S03_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S03_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S03_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Appointment modification
//
// This message transmits a request for modification of an existing appointment to a filler application.  This trigger event
// is used to request the modification of information on an existing appointment, outside of the need to reschedule, cancel,
// discontinue or delete the appointment, or to add, modify, cancel, discontinue, or delete services and/or resources on
// the appointment.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed. If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the new information for the modified appointment.
type SRM_S03 struct {
	HL7       HL7Name             `hl7:",name=SRM_S03,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S03_Patient   `hl7:",display=Patient"`
	Resources []SRM_S03_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S04_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S04_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S04_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S04_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S04_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S04_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S04_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S04_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S04_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S04_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S04_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S04_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S04_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Appointment cancellation
//
// The request appointment cancellation trigger event is sent by the placer application to the filler application to request
// that an existing appointment be canceled.  A cancel event is used to stop a valid appointment from occurring.  For example,
// if a patient scheduled for an exam cancels his/her appointment, then a request to cancel the appointment is sent.  If it is
// successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail segments
// describing the canceled appointment.
type SRM_S04 struct {
	HL7       HL7Name             `hl7:",name=SRM_S04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S04_Patient   `hl7:",display=Patient"`
	Resources []SRM_S04_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S05_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S05_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S05_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S05_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S05_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S05_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S05_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S05_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S05_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S05_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S05_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S05_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S05_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Appointment discontinuation
//
// The request appointment discontinuation is sent by the placer application to the filler application to request that an
// appointment in progress be stopped, or that the remaining occurrences of a parent appointment not occur as scheduled.
// If none of the child appointments of a parent appointment have occurred, then a cancel trigger event should be sent instead.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the discontinued appointment.
type SRM_S05 struct {
	HL7       HL7Name             `hl7:",name=SRM_S05,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S05_Patient   `hl7:",display=Patient"`
	Resources []SRM_S05_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S06_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S06_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S06_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S06_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S06_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S06_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S06_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S06_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S06_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S06_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S06_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S06_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S06_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Appointment deletion
//
// A request appointment deletion is sent by the placer application to the filler application to request that an appointment
// that had been entered in error be removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously requested, and must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or has already been completed.  Likewise, it should not be used on any parent appointment if any child appointments have
// either begun or been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the deleted appointment.
type SRM_S06 struct {
	HL7       HL7Name             `hl7:",name=SRM_S06,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S06_Patient   `hl7:",display=Patient"`
	Resources []SRM_S06_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S07_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S07_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S07_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S07_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S07_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S07_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S07_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S07_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S07_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S07_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S07_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S07_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S07_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Addition of service/resource on appointment
//
// The request addition of service/resource is triggered by the placer application to request that a new service or resource
// be added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments on an
// HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S07 struct {
	HL7       HL7Name             `hl7:",name=SRM_S07,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S07_Patient   `hl7:",display=Patient"`
	Resources []SRM_S07_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S08_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S08_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S08_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S08_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S08_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S08_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S08_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S08_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S08_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S08_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S08_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S08_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S08_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Modification of service/resource on appointment
//
// The request modification of service/resource is triggered on the placer application to request that information pertaining
// to an existing service or resource be changed for an existing appointment.  Services and resources are represented by the
// AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments
// that have not been completed, or for parent appointments whose children have not been completed.  If it is successful, an
// application acknowledgment is returned, optionally containing an SCH segment and related detail segments describing
// the modified appointment.
type SRM_S08 struct {
	HL7       HL7Name             `hl7:",name=SRM_S08,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S08_Patient   `hl7:",display=Patient"`
	Resources []SRM_S08_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S09_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S09_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S09_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S09_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S09_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S09_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S09_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S09_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S09_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S09_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S09_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S09_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S09_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Cancellation of service/resource on appointment
//
// This trigger event requests that a service or resource be removed from an existing scheduled appointment that has not yet
// begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.  For example, if
// a portable X-ray machine scheduled for an exam is no longer needed, then the placer application requests that the resource
// be canceled on the filler application.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment
type SRM_S09 struct {
	HL7       HL7Name             `hl7:",name=SRM_S09,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S09_Patient   `hl7:",display=Patient"`
	Resources []SRM_S09_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S10_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S10_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S10_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S10_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S10_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S10_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S10_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S10_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S10_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S10_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S10_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S10_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S10_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Discontinuation of service/resource on appointment
//
// A request discontinuation of service/resource is sent by the placer application to the filler application when the remaining
// occurrences of a recurring appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to request that the performance of a service or resource in a recurring appointment that has already begun
// be stopped.  If the first appointment in a set of recurring appointments has not yet occurred, then a cancel trigger event
// should be sent instead.  This trigger event should only be used on appointments that have not been completed, or on parent
// appointments whose children have not been completed.  If it is successful, an application acknowledgment is returned,
// optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRM_S10 struct {
	HL7       HL7Name             `hl7:",name=SRM_S10,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S10_Patient   `hl7:",display=Patient"`
	Resources []SRM_S10_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRM_S11_Patient struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	PV1 *PV1    `hl7:"6,display=Patient visit"`
	PV2 *PV2    `hl7:"7,display=Patient visit - additional information"`
	OBX []OBX   `hl7:"8,display=Observation/Result"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRM_S11_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRM_S11_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRM_S11_Service           `hl7:",display=Service"`
	GeneralResource   []SRM_S11_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRM_S11_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRM_S11_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRM_S11_Service struct {
	HL7 HL7Name `hl7:",name=SRM_S11_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	APR *APR    `hl7:"12,display=Appointment Preferences"`
	NTE []NTE   `hl7:"13,display=Notes and Comments"`
}

// GeneralResource
type SRM_S11_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"14,required,display=Appointment Information - General Resource"`
	APR *APR    `hl7:"15,display=Appointment Preferences"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// LocationResource
type SRM_S11_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_LocationResource,type=tg"`
	AIL *AIL    `hl7:"17,required,display=Appointment Information - Location Resource"`
	APR *APR    `hl7:"18,display=Appointment Preferences"`
	NTE []NTE   `hl7:"19,display=Notes and Comments"`
}

// PersonnelResource
type SRM_S11_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRM_S11_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"20,required,display=Appointment Information - Personnel Resource"`
	APR *APR    `hl7:"21,display=Appointment Preferences"`
	NTE []NTE   `hl7:"22,display=Notes and Comments"`
}

// Schedule request - Deletion of service/resource on appointment
//
// A request deletion of service/resource is sent by the placer application to the filler application to request that a scheduled
// appointment requiring a service or resource entered in error be removed from the system. A delete trigger event should
// only be used when a service or resource has been erroneously attached to an appointment, and must be removed from the schedule
// so that it does not affect any statistical processing.  A delete trigger event differs from a cancel trigger event in that
// a delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring.  This trigger event should
// only be used on appointments that have not been completed, or on parent appointments whose children have not been completed.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the modified appointment.
type SRM_S11 struct {
	HL7       HL7Name             `hl7:",name=SRM_S11,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	ARQ       *ARQ                `hl7:"2,required,display=Appointment Request"`
	APR       *APR                `hl7:"3,display=Appointment Preferences"`
	NTE       []NTE               `hl7:"4,display=Notes and Comments"`
	Patient   []SRM_S11_Patient   `hl7:",display=Patient"`
	Resources []SRM_S11_Resources `hl7:",required,display=Resources"`
}

// Schedule
type SRR_S01_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S01_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S01_Patient   `hl7:",display=Patient"`
	Resources []SRR_S01_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S01_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S01_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S01_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S01_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S01_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S01_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S01_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S01_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S01_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S01_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S01_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S01_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S01_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S01_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - New appointment booking
//
// A placer application sends a transaction with this trigger event to a filler application to request that a new appointment
// be booked.  If it is successful, the filler application returns an application acknowledgment (if requested under the
// enhanced acknowledgment mode, or if the original acknowledgment mode is in use). The acknowledgment may optionally contain
// an SCH segment and related detail segments describing the actual appointment that was booked.
type SRR_S01 struct {
	HL7      HL7Name           `hl7:",name=SRR_S01,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S01_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S02_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S02_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S02_Patient   `hl7:",display=Patient"`
	Resources []SRR_S02_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S02_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S02_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S02_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S02_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S02_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S02_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S02_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S02_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S02_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S02_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S02_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S02_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S02_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S02_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Appointment rescheduling
//
// A placer application sends a transaction with this trigger event to a filler application to request that a new appointment
// be booked.  If it is successful, the filler application returns an application acknowledgment (if requested under the
// enhanced acknowledgment mode, or if the original acknowledgment mode is in use). The acknowledgment may optionally contain
// an SCH segment and related detail segments describing the actual appointment that was booked.
type SRR_S02 struct {
	HL7      HL7Name           `hl7:",name=SRR_S02,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S02_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S03_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S03_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S03_Patient   `hl7:",display=Patient"`
	Resources []SRR_S03_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S03_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S03_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S03_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S03_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S03_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S03_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S03_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S03_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S03_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S03_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S03_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S03_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S03_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S03_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Appointment modification
//
// This message transmits a request for modification of an existing appointment to a filler application.  This trigger event
// is used to request the modification of information on an existing appointment, outside of the need to reschedule, cancel,
// discontinue or delete the appointment, or to add, modify, cancel, discontinue, or delete services and/or resources on
// the appointment.  This trigger event should only be used for appointments that have not been completed, or for parent appointments
// whose children have not been completed. If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the new information for the modified appointment.
type SRR_S03 struct {
	HL7      HL7Name           `hl7:",name=SRR_S03,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S03_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S04_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S04_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S04_Patient   `hl7:",display=Patient"`
	Resources []SRR_S04_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S04_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S04_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S04_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S04_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S04_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S04_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S04_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S04_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S04_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S04_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S04_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S04_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S04_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S04_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Appointment cancellation
//
// The request appointment cancellation trigger event is sent by the placer application to the filler application to request
// that an existing appointment be canceled.  A cancel event is used to stop a valid appointment from occurring.  For example,
// if a patient scheduled for an exam cancels his/her appointment, then a request to cancel the appointment is sent.  If it is
// successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail segments
// describing the canceled appointment.
type SRR_S04 struct {
	HL7      HL7Name           `hl7:",name=SRR_S04,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S04_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S05_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S05_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S05_Patient   `hl7:",display=Patient"`
	Resources []SRR_S05_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S05_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S05_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S05_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S05_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S05_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S05_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S05_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S05_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S05_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S05_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S05_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S05_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S05_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S05_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Appointment discontinuation
//
// The request appointment discontinuation is sent by the placer application to the filler application to request that an
// appointment in progress be stopped, or that the remaining occurrences of a parent appointment not occur as scheduled.
// If none of the child appointments of a parent appointment have occurred, then a cancel trigger event should be sent instead.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the discontinued appointment.
type SRR_S05 struct {
	HL7      HL7Name           `hl7:",name=SRR_S05,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S05_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S06_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S06_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S06_Patient   `hl7:",display=Patient"`
	Resources []SRR_S06_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S06_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S06_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S06_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S06_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S06_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S06_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S06_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S06_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S06_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S06_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S06_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S06_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S06_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S06_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Appointment deletion
//
// A request appointment deletion is sent by the placer application to the filler application to request that an appointment
// that had been entered in error be removed from the system.  A delete trigger event should only be used when an appointment
// has been erroneously requested, and must be removed from the schedule so that it does not affect any statistical processing.
// A delete trigger event differs from a cancel trigger event in that a delete acts to remove an error, whereas a cancel acts
// to prevent a valid request from occurring.  This trigger event should not be used for any appointment that has already begun,
// or has already been completed.  Likewise, it should not be used on any parent appointment if any child appointments have
// either begun or been completed.  If it is successful, an application acknowledgment is returned, optionally containing
// an SCH segment and related detail segments describing the deleted appointment.
type SRR_S06 struct {
	HL7      HL7Name           `hl7:",name=SRR_S06,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S06_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S07_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S07_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S07_Patient   `hl7:",display=Patient"`
	Resources []SRR_S07_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S07_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S07_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S07_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S07_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S07_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S07_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S07_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S07_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S07_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S07_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S07_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S07_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S07_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S07_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Addition of service/resource on appointment
//
// The request addition of service/resource is triggered by the placer application to request that a new service or resource
// be added to an existing appointment.  Services and resources are represented by the AIS, AIG, AIL, and AIP segments on an
// HL7 scheduling interface transaction.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRR_S07 struct {
	HL7      HL7Name           `hl7:",name=SRR_S07,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S07_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S08_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S08_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S08_Patient   `hl7:",display=Patient"`
	Resources []SRR_S08_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S08_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S08_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S08_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S08_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S08_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S08_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S08_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S08_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S08_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S08_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S08_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S08_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S08_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S08_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Modification of service/resource on appointment
//
// The request modification of service/resource is triggered on the placer application to request that information pertaining
// to an existing service or resource be changed for an existing appointment.  Services and resources are represented by the
// AIS, AIG, AIL, and AIP segments on an HL7 scheduling interface transaction.  This trigger event should only be used for appointments
// that have not been completed, or for parent appointments whose children have not been completed.  If it is successful, an
// application acknowledgment is returned, optionally containing an SCH segment and related detail segments describing
// the modified appointment.
type SRR_S08 struct {
	HL7      HL7Name           `hl7:",name=SRR_S08,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S08_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S09_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S09_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S09_Patient   `hl7:",display=Patient"`
	Resources []SRR_S09_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S09_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S09_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S09_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S09_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S09_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S09_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S09_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S09_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S09_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S09_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S09_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S09_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S09_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S09_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Cancellation of service/resource on appointment
//
// This trigger event requests that a service or resource be removed from an existing scheduled appointment that has not yet
// begun.  A cancel event is used to stop a valid service or resource from participating in the appointment.  For example, if
// a portable X-ray machine scheduled for an exam is no longer needed, then the placer application requests that the resource
// be canceled on the filler application.  This trigger event should only be used for appointments that have not been completed,
// or for parent appointments whose children have not been completed.  If it is successful, an application acknowledgment
// is returned, optionally containing an SCH segment and related detail segments describing the modified appointment
type SRR_S09 struct {
	HL7      HL7Name           `hl7:",name=SRR_S09,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S09_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S10_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S10_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S10_Patient   `hl7:",display=Patient"`
	Resources []SRR_S10_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S10_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S10_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S10_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S10_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S10_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S10_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S10_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S10_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S10_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S10_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S10_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S10_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S10_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S10_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Discontinuation of service/resource on appointment
//
// A request discontinuation of service/resource is sent by the placer application to the filler application when the remaining
// occurrences of a recurring appointment no longer require a particular service or resource.  In other words, this trigger
// event is sent to request that the performance of a service or resource in a recurring appointment that has already begun
// be stopped.  If the first appointment in a set of recurring appointments has not yet occurred, then a cancel trigger event
// should be sent instead.  This trigger event should only be used on appointments that have not been completed, or on parent
// appointments whose children have not been completed.  If it is successful, an application acknowledgment is returned,
// optionally containing an SCH segment and related detail segments describing the modified appointment.
type SRR_S10 struct {
	HL7      HL7Name           `hl7:",name=SRR_S10,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S10_Schedule `hl7:",display=Schedule"`
}

// Schedule
type SRR_S11_Schedule struct {
	HL7       HL7Name             `hl7:",name=SRR_S11_Schedule,type=tg"`
	SCH       *SCH                `hl7:"4,required,display=Scheduling Activity Information"`
	NTE       []NTE               `hl7:"5,display=Notes and Comments"`
	Patient   []SRR_S11_Patient   `hl7:",display=Patient"`
	Resources []SRR_S11_Resources `hl7:",required,display=Resources"`
}

// Patient
type SRR_S11_Patient struct {
	HL7 HL7Name `hl7:",name=SRR_S11_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient identification"`
	PV1 *PV1    `hl7:"7,display=Patient visit"`
	PV2 *PV2    `hl7:"8,display=Patient visit - additional information"`
	DG1 []DG1   `hl7:"9,display=Diagnosis"`
}

// Resources
type SRR_S11_Resources struct {
	HL7               HL7Name                     `hl7:",name=SRR_S11_Resources,type=tg"`
	RGS               *RGS                        `hl7:"10,required,display=Resource Group"`
	Service           []SRR_S11_Service           `hl7:",display=Service"`
	GeneralResource   []SRR_S11_GeneralResource   `hl7:",display=General Resource"`
	LocationResource  []SRR_S11_LocationResource  `hl7:",display=Location Resource"`
	PersonnelResource []SRR_S11_PersonnelResource `hl7:",display=Personnel Resource"`
}

// Service
type SRR_S11_Service struct {
	HL7 HL7Name `hl7:",name=SRR_S11_Service,type=tg"`
	AIS *AIS    `hl7:"11,required,display=Appointment Information - Service"`
	NTE []NTE   `hl7:"12,display=Notes and Comments"`
}

// GeneralResource
type SRR_S11_GeneralResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_GeneralResource,type=tg"`
	AIG *AIG    `hl7:"13,required,display=Appointment Information - General Resource"`
	NTE []NTE   `hl7:"14,display=Notes and Comments"`
}

// LocationResource
type SRR_S11_LocationResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_LocationResource,type=tg"`
	AIL *AIL    `hl7:"15,required,display=Appointment Information - Location Resource"`
	NTE []NTE   `hl7:"16,display=Notes and Comments"`
}

// PersonnelResource
type SRR_S11_PersonnelResource struct {
	HL7 HL7Name `hl7:",name=SRR_S11_PersonnelResource,type=tg"`
	AIP *AIP    `hl7:"17,required,display=Appointment Information - Personnel Resource"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Scheduled request response - Deletion of service/resource on appointment
//
// A request deletion of service/resource is sent by the placer application to the filler application to request that a scheduled
// appointment requiring a service or resource entered in error be removed from the system. A delete trigger event should
// only be used when a service or resource has been erroneously attached to an appointment, and must be removed from the schedule
// so that it does not affect any statistical processing.  A delete trigger event differs from a cancel trigger event in that
// a delete acts to remove an error, whereas a cancel acts to prevent a valid request from occurring.  This trigger event should
// only be used on appointments that have not been completed, or on parent appointments whose children have not been completed.
// If it is successful, an application acknowledgment is returned, optionally containing an SCH segment and related detail
// segments describing the modified appointment.
type SRR_S11 struct {
	HL7      HL7Name           `hl7:",name=SRR_S11,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	Schedule *SRR_S11_Schedule `hl7:",display=Schedule"`
}

// Specimen status request
//
// This message is used to request information concerning the location and status of specimens from one application to another
// (e.g., Laboratory Automation System to automated equipment). The request can be addressed for a specific container,
// a specific carrier, a specific tray or a specific location, depending on the arguments set in the SAC segment. The equipment
// specified in the EQU segment should respond with the “Specimen Status Update.”
type SSR_U04 struct {
	HL7 HL7Name `hl7:",name=SSR_U04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	SAC []SAC   `hl7:"3,required,display=Specimen and container detail"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// SpecimenContainer
type SSU_U03_SpecimenContainer struct {
	HL7 HL7Name `hl7:",name=SSU_U03_SpecimenContainer,type=tg"`
	SAC *SAC    `hl7:"3,required,display=Specimen and container detail"`
	OBX *OBX    `hl7:"4,display=Observation/Result"`
}

// Specimen status update
//
// This message is used to send information concerning the location and status of specimens from one application to another
// (e.g., automated equipment to a Laboratory Automation System).
type SSU_U03 struct {
	HL7               HL7Name                     `hl7:",name=SSU_U03,type=t"`
	MSH               *MSH                        `hl7:"1,required,display=Message Header"`
	EQU               *EQU                        `hl7:"2,required,display=Equipment Detail"`
	SpecimenContainer []SSU_U03_SpecimenContainer `hl7:",required,display=Specimen Container"`
	ROL               *ROL                        `hl7:"5,display=Role"`
}

// Facility
type SUR_P09_Facility struct {
	HL7            HL7Name                  `hl7:",name=SUR_P09_Facility,type=tg"`
	FAC            *FAC                     `hl7:"2,required,display=Facility"`
	Product        []SUR_P09_Product        `hl7:",required,display=Product"`
	PSH            *PSH                     `hl7:"5,required,display=Product Summary Header"`
	FacilityDetail []SUR_P09_FacilityDetail `hl7:",required,display=Facility Detail"`
}

// Product
type SUR_P09_Product struct {
	HL7 HL7Name `hl7:",name=SUR_P09_Product,type=tg"`
	PSH *PSH    `hl7:"3,required,display=Product Summary Header"`
	PDC *PDC    `hl7:"4,required,display=Product Detail Country"`
}

// FacilityDetail
type SUR_P09_FacilityDetail struct {
	HL7 HL7Name `hl7:",name=SUR_P09_FacilityDetail,type=tg"`
	FAC *FAC    `hl7:"6,required,display=Facility"`
	PDC *PDC    `hl7:"7,required,display=Product Detail Country"`
	NTE *NTE    `hl7:"8,required,display=Notes and Comments"`
}

// Summary product experience report
//
// Sending summary reports related to products constitutes a P09 event
type SUR_P09 struct {
	HL7      HL7Name            `hl7:",name=SUR_P09,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	Facility []SUR_P09_Facility `hl7:",required,display=Facility"`
}

// Tabular data response
type TBR_R08 struct {
	HL7 HL7Name `hl7:",name=TBR_R08,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
	QAK *QAK    `hl7:"4,required,display=Query Acknowledgment"`
	RDF *RDF    `hl7:"5,required,display=Table Row Definition"`
	RDT []RDT   `hl7:"6,required,display=Table Row Data"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Automated equipment test code settings request
//
// This message is used to request information concerning test codes from one application to another (e.g., Laboratory Automation
// System to automated equipment).
type TCR_U11 struct {
	HL7 HL7Name `hl7:",name=TCR_U11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	TCC []TCC   `hl7:"3,required,display=Test Code Configuration"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// Automated equipment test code settings update
//
// This message is used to send information concerning test codes and parameters from one application to another (e.g., automated
// equipment to a Laboratory Automation System). This message transfers the current snapshot of the test parameters of the
// sending system. The sent parameter sets are supposed to replace the parameter sets existing at the receiver of this message
// before the trigger (there is no selective “Add” or “Delete”).
type TCU_U10 struct {
	HL7 HL7Name `hl7:",name=TCU_U10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EQU *EQU    `hl7:"2,required,display=Equipment Detail"`
	TCC []TCC   `hl7:"3,required,display=Test Code Configuration"`
	ROL *ROL    `hl7:"4,display=Role"`
}

// Unsolicited display update message
//
// There is a simple HL7 message that allows for unsolicited display update messages to be sent in HL7 format from one system
// to another.
type UDM_Q05 struct {
	HL7 HL7Name `hl7:",name=UDM_Q05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	URD *URD    `hl7:"2,required,display=Results/update Definition"`
	URS *URS    `hl7:"3,display=Unsolicited Selection"`
	DSP []DSP   `hl7:"4,required,display=Display Data"`
	DSC *DSC    `hl7:"5,display=Continuation Pointer"`
}

// Virtual table query
//
// The VTQ provides a way to query for data to be expressed as tables without having to specify SQL or a stored procedure. The
// reader is advised to consider using the new recommended queries described in section 5.3.3.4.
//
// The VQQ supports queries against server database table (virtual or actual) based on specific selection criteria delineated
// in the VTQ segment.
type VQQ_Q07 struct {
	HL7 HL7Name `hl7:",name=VQQ_Q07,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	VTQ *VTQ    `hl7:"2,required,display=Virtual Table Query Request"`
	RDF *RDF    `hl7:"3,display=Table Row Definition"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query for vaccination record
//
// When an immunization registry does not already have the complete patient vaccination record, it will send a query (with
// a V01 event) for the definitive (last updated) record.  Within the definitions for QRD and QRF, certain components are defined
// according to position in the field, as detailed in Section 4.17.2, “Queries for immunization records (QRF Segments).”
// The three-letter code in the leftmost column indicates the segment that is included; the column on the right specifies
// the chapter in which that segment is fully defined.
type VXQ_V01 struct {
	HL7 HL7Name `hl7:",name=VXQ_V01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Original-Style Query Definition"`
	QRF *QRF    `hl7:"3,display=Original Style Query Filter"`
}

// PatientVisit
type VXR_V03_PatientVisit struct {
	HL7 HL7Name `hl7:",name=VXR_V03_PatientVisit,type=tg"`
	PV1 *PV1    `hl7:"8,required,display=Patient visit"`
	PV2 *PV2    `hl7:"9,display=Patient visit - additional information"`
}

// Insurance
type VXR_V03_Insurance struct {
	HL7 HL7Name `hl7:",name=VXR_V03_Insurance,type=tg"`
	IN1 *IN1    `hl7:"11,required,display=Insurance"`
	IN2 *IN2    `hl7:"12,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"13,display=Insurance Additional Information- Certification"`
}

// Order
type VXR_V03_Order struct {
	HL7         HL7Name               `hl7:",name=VXR_V03_Order,type=tg"`
	ORC         *ORC                  `hl7:"14,display=Common Order"`
	RXA         *RXA                  `hl7:"15,required,display=Pharmacy/Treatment Administration"`
	RXR         *RXR                  `hl7:"16,display=Pharmacy/Treatment Route"`
	Observation []VXR_V03_Observation `hl7:",display=Observation"`
}

// Observation
type VXR_V03_Observation struct {
	HL7 HL7Name `hl7:",name=VXR_V03_Observation,type=tg"`
	OBX *OBX    `hl7:"17,required,display=Observation/Result"`
	NTE []NTE   `hl7:"18,display=Notes and Comments"`
}

// Vaccination record response
//
// When the patient has been uniquely identified (there is only one “match” to the query), the response to the query (with a
// V03 event) will follow this format.  Within the definitions for QRD and QRF, certain components are defined according to
// position in the field, as detailed in Section 4.17.2, “Queries for immunization records (QRF Segments).”  The three-letter
// code in the leftmost column indicates the segment that is included; the column on the right specifies the chapter in which
// that segment is fully defined.
type VXR_V03 struct {
	HL7          HL7Name               `hl7:",name=VXR_V03,type=t"`
	MSH          *MSH                  `hl7:"1,required,display=Message Header"`
	MSA          *MSA                  `hl7:"2,required,display=Message Acknowledgment"`
	QRD          *QRD                  `hl7:"3,required,display=Original-Style Query Definition"`
	QRF          *QRF                  `hl7:"4,display=Original Style Query Filter"`
	PID          *PID                  `hl7:"5,required,display=Patient identification"`
	PD1          *PD1                  `hl7:"6,display=Patient Additional Demographic"`
	NK1          []NK1                 `hl7:"7,display=Next of kin / associated parties"`
	PatientVisit *VXR_V03_PatientVisit `hl7:",display=Patient Visit"`
	GT1          []GT1                 `hl7:"10,display=Guarantor"`
	Insurance    []VXR_V03_Insurance   `hl7:",display=Insurance"`
	Order        []VXR_V03_Order       `hl7:",display=Order"`
}

// Patient
type VXU_V04_Patient struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Patient,type=tg"`
	PV1 *PV1    `hl7:"5,required,display=Patient visit"`
	PV2 *PV2    `hl7:"6,display=Patient visit - additional information"`
}

// Insurance
type VXU_V04_Insurance struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"8,required,display=Insurance"`
	IN2 *IN2    `hl7:"9,display=Insurance Additional Information"`
	IN3 *IN3    `hl7:"10,display=Insurance Additional Information- Certification"`
}

// Order
type VXU_V04_Order struct {
	HL7         HL7Name               `hl7:",name=VXU_V04_Order,type=tg"`
	ORC         *ORC                  `hl7:"11,display=Common Order"`
	RXA         *RXA                  `hl7:"12,required,display=Pharmacy/Treatment Administration"`
	RXR         *RXR                  `hl7:"13,display=Pharmacy/Treatment Route"`
	Observation []VXU_V04_Observation `hl7:",display=Observation"`
}

// Observation
type VXU_V04_Observation struct {
	HL7 HL7Name `hl7:",name=VXU_V04_Observation,type=tg"`
	OBX *OBX    `hl7:"14,required,display=Observation/Result"`
	NTE []NTE   `hl7:"15,display=Notes and Comments"`
}

// Unsolicited vaccination record update
//
// When a provider wishes to update the patient’s vaccination record being held in a registry, he will transmit an unsolicited
// update of the record (a V04 trigger event).
type VXU_V04 struct {
	HL7       HL7Name             `hl7:",name=VXU_V04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	PID       *PID                `hl7:"2,required,display=Patient identification"`
	PD1       *PD1                `hl7:"3,display=Patient Additional Demographic"`
	NK1       []NK1               `hl7:"4,display=Next of kin / associated parties"`
	Patient   *VXU_V04_Patient    `hl7:",display=Patient"`
	GT1       []GT1               `hl7:"7,display=Guarantor"`
	Insurance []VXU_V04_Insurance `hl7:",display=Insurance"`
	Order     []VXU_V04_Order     `hl7:",display=Order"`
}

// Patient
type VXX_V02_Patient struct {
	HL7 HL7Name `hl7:",name=VXX_V02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient identification"`
	NK1 []NK1   `hl7:"6,display=Next of kin / associated parties"`
}

// Response to vaccination query returning multiple PID matches
//
// In response to a query for the definitive patient vaccination record, the registry holding the record will return it to
// the registry originating the query.
//
// If the query results in multiple “matches,” i.e., more than one patient record matches the identifiers in the query so that
// there is no unique identification, the response to the query (with a V02 event) will follow this format.  Within the definitions
// for QRD and QRF, certain components are defined according to position in the field, as detailed in Section 4.17.2, “Queries
// for immunization records (QRF Segments).”  The threeletter code in the leftmost column indicates the segment that is included;
// the column on the right specifies the chapter in which that segment is fully defined.
type VXX_V02 struct {
	HL7     HL7Name           `hl7:",name=VXX_V02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MSA     *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	QRD     *QRD              `hl7:"3,required,display=Original-Style Query Definition"`
	QRF     *QRF              `hl7:"4,display=Original Style Query Filter"`
	Patient []VXX_V02_Patient `hl7:",required,display=Patient"`
}
