// Code generated by "hl7fetch -pkgdir h220 -root ./genjson -version 2.2"; DO NOT EDIT.

// Package h220 contains the data structures for HL7 v2.2.
package h220

// Registry implements the required interface for unmarshalling data.
var Registry = registry{}

type registry struct{}

func (registry) Version() string {
	return Version
}
func (registry) ControlSegment() map[string]any {
	return ControlSegmentRegistry
}
func (registry) Segment() map[string]any {
	return SegmentRegistry
}
func (registry) Trigger() map[string]any {
	return TriggerRegistry
}
func (registry) DataType() map[string]any {
	return DataTypeRegistry
}

// Version of this HL7 package.
var Version = `2.2`

// Segments specific to file and batch control.
var ControlSegmentRegistry = map[string]any{
	"BHS": BHS{},
	"BTS": BTS{},
	"FHS": FHS{},
	"FTS": FTS{},
	"DSC": DSC{},
	"ADD": ADD{},
}

// Segment lookup by ID.
var SegmentRegistry = map[string]any{
	"ACC": ACC{},
	"ADD": ADD{},
	"AL1": AL1{},
	"BHS": BHS{},
	"BLG": BLG{},
	"BTS": BTS{},
	"DG1": DG1{},
	"DSC": DSC{},
	"DSP": DSP{},
	"ERR": ERR{},
	"EVN": EVN{},
	"FHS": FHS{},
	"FT1": FT1{},
	"FTS": FTS{},
	"GT1": GT1{},
	"IN1": IN1{},
	"IN2": IN2{},
	"IN3": IN3{},
	"MFA": MFA{},
	"MFE": MFE{},
	"MFI": MFI{},
	"MRG": MRG{},
	"MSA": MSA{},
	"MSH": MSH{},
	"NCK": NCK{},
	"NK1": NK1{},
	"NPU": NPU{},
	"NSC": NSC{},
	"NST": NST{},
	"NTE": NTE{},
	"OBR": OBR{},
	"OBX": OBX{},
	"ODS": ODS{},
	"ODT": ODT{},
	"ORC": ORC{},
	"PID": PID{},
	"PR1": PR1{},
	"PV1": PV1{},
	"PV2": PV2{},
	"QRD": QRD{},
	"QRF": QRF{},
	"RQ1": RQ1{},
	"RQD": RQD{},
	"RXA": RXA{},
	"RXC": RXC{},
	"RXD": RXD{},
	"RXE": RXE{},
	"RXG": RXG{},
	"RXO": RXO{},
	"RXR": RXR{},
	"UB1": UB1{},
	"UB2": UB2{},
	"URD": URD{},
	"URS": URS{},
	"Zxx": Zxx{},
}

// Trigger lookup by ID.
var TriggerRegistry = map[string]any{
	"ACK":     ACK{},
	"ADR_A19": ADR_A19{},
	"ADT_A01": ADT_A01{},
	"ADT_A02": ADT_A02{},
	"ADT_A03": ADT_A03{},
	"ADT_A04": ADT_A04{},
	"ADT_A05": ADT_A05{},
	"ADT_A06": ADT_A06{},
	"ADT_A07": ADT_A07{},
	"ADT_A08": ADT_A08{},
	"ADT_A09": ADT_A09{},
	"ADT_A10": ADT_A10{},
	"ADT_A11": ADT_A11{},
	"ADT_A12": ADT_A12{},
	"ADT_A13": ADT_A13{},
	"ADT_A14": ADT_A14{},
	"ADT_A15": ADT_A15{},
	"ADT_A16": ADT_A16{},
	"ADT_A17": ADT_A17{},
	"ADT_A18": ADT_A18{},
	"ADT_A20": ADT_A20{},
	"ADT_A21": ADT_A21{},
	"ADT_A22": ADT_A22{},
	"ADT_A23": ADT_A23{},
	"ADT_A24": ADT_A24{},
	"ADT_A25": ADT_A25{},
	"ADT_A26": ADT_A26{},
	"ADT_A27": ADT_A27{},
	"ADT_A28": ADT_A28{},
	"ADT_A29": ADT_A29{},
	"ADT_A30": ADT_A30{},
	"ADT_A31": ADT_A31{},
	"ADT_A32": ADT_A32{},
	"ADT_A33": ADT_A33{},
	"ADT_A34": ADT_A34{},
	"ADT_A35": ADT_A35{},
	"ADT_A36": ADT_A36{},
	"ADT_A37": ADT_A37{},
	"BAR_P01": BAR_P01{},
	"BAR_P02": BAR_P02{},
	"DFT_P03": DFT_P03{},
	"DSR_Q01": DSR_Q01{},
	"DSR_Q03": DSR_Q03{},
	"DSR_R03": DSR_R03{},
	"MCF":     MCF{},
	"MFD_M01": MFD_M01{},
	"MFD_M02": MFD_M02{},
	"MFD_M03": MFD_M03{},
	"MFN_M01": MFN_M01{},
	"MFN_M02": MFN_M02{},
	"MFN_M03": MFN_M03{},
	"MFQ_M01": MFQ_M01{},
	"MFQ_M02": MFQ_M02{},
	"MFQ_M03": MFQ_M03{},
	"NMD_N01": NMD_N01{},
	"NMQ_N02": NMQ_N02{},
	"NMR_N02": NMR_N02{},
	"ORF_R04": ORF_R04{},
	"ORM_O01": ORM_O01{},
	"ORR_O02": ORR_O02{},
	"ORU_R01": ORU_R01{},
	"QRY_A19": QRY_A19{},
	"QRY_P04": QRY_P04{},
	"QRY_Q01": QRY_Q01{},
	"QRY_Q02": QRY_Q02{},
	"QRY_Q26": QRY_Q26{},
	"QRY_Q27": QRY_Q27{},
	"QRY_Q28": QRY_Q28{},
	"QRY_Q29": QRY_Q29{},
	"QRY_Q30": QRY_Q30{},
	"QRY_R02": QRY_R02{},
	"RAR_RAR": RAR_RAR{},
	"RAS_O02": RAS_O02{},
	"RDE_O01": RDE_O01{},
	"RDR_RDR": RDR_RDR{},
	"RDS_O01": RDS_O01{},
	"RER_RER": RER_RER{},
	"RGR_RGR": RGR_RGR{},
	"RGV_O01": RGV_O01{},
	"ROR_ROR": ROR_ROR{},
	"RRA_O02": RRA_O02{},
	"RRD_O02": RRD_O02{},
	"RRE_O02": RRE_O02{},
	"RRG_O02": RRG_O02{},
	"UDM_Q05": UDM_Q05{},
}

// Data Type lookup by ID.
var DataTypeRegistry = map[string]any{
	"AD":                   *(new(AD)),
	"CE":                   *(new(CE)),
	"CK":                   *(new(CK)),
	"CM_AUI":               *(new(CM_AUI)),
	"CM_BATCH_TOTAL":       *(new(CM_BATCH_TOTAL)),
	"CM_CCD":               *(new(CM_CCD)),
	"CM_DDI":               *(new(CM_DDI)),
	"CM_DLD":               *(new(CM_DLD)),
	"CM_DTN":               *(new(CM_DTN)),
	"CM_EIP":               *(new(CM_EIP)),
	"CM_ELD":               *(new(CM_ELD)),
	"CM_FILLER":            *(new(CM_FILLER)),
	"CM_FINANCE":           *(new(CM_FINANCE)),
	"CM_GROUP_ID":          *(new(CM_GROUP_ID)),
	"CM_INTERNAL_LOCATION": *(new(CM_INTERNAL_LOCATION)),
	"CM_JOB_CODE":          *(new(CM_JOB_CODE)),
	"CM_LA1":               *(new(CM_LA1)),
	"CM_LICENSE_NO":        *(new(CM_LICENSE_NO)),
	"CM_MOC":               *(new(CM_MOC)),
	"CM_MSG":               *(new(CM_MSG)),
	"CM_NDL":               *(new(CM_NDL)),
	"CM_OCD":               *(new(CM_OCD)),
	"CM_OSD":               *(new(CM_OSD)),
	"CM_OSP":               *(new(CM_OSP)),
	"CM_PAT_ID":            *(new(CM_PAT_ID)),
	"CM_PAT_ID_0192":       *(new(CM_PAT_ID_0192)),
	"CM_PCF":               *(new(CM_PCF)),
	"CM_PEN":               *(new(CM_PEN)),
	"CM_PLACER":            *(new(CM_PLACER)),
	"CM_PRACTITIONER":      *(new(CM_PRACTITIONER)),
	"CM_PRL":               *(new(CM_PRL)),
	"CM_PTA":               *(new(CM_PTA)),
	"CM_RI":                *(new(CM_RI)),
	"CM_RMC":               *(new(CM_RMC)),
	"CM_SPS":               *(new(CM_SPS)),
	"CM_UVC":               *(new(CM_UVC)),
	"CM_VR":                *(new(CM_VR)),
	"CN_PERSON":            *(new(CN_PERSON)),
	"CN_PHYSICIAN":         *(new(CN_PHYSICIAN)),
	"COMP_ID_DIGIT":        *(new(COMP_ID_DIGIT)),
	"CQ":                   *(new(CQ)),
	"DT":                   *(new(DT)),
	"FT":                   *(new(FT)),
	"HD":                   *(new(HD)),
	"ID":                   *(new(ID)),
	"IS":                   *(new(IS)),
	"NM":                   *(new(NM)),
	"PL":                   *(new(PL)),
	"PN":                   *(new(PN)),
	"SI":                   *(new(SI)),
	"ST":                   *(new(ST)),
	"TN":                   *(new(TN)),
	"TQ":                   *(new(TQ)),
	"TS":                   *(new(TS)),
	"TX":                   *(new(TX)),
	"VARIES":               *(new(VARIES)),
}
