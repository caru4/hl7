// Code generated by "hl7fetch -pkgdir h220 -root ./genjson -version 2.2"; DO NOT EDIT.

package h220

import (
	"fmt"
	"reflect"
)

// Accident
//
// The ACC segment contains patient information relative to an accidentin which the patient has been involved.
type ACC struct {
	HL7              HL7Name `hl7:",name=ACC,type=s"`
	AccidentDateTime TS      `hl7:"1,len=26,format=YMDHMS,display=Accident Date / Time"`
	AccidentCode     ID      `hl7:"2,len=2,table=0050,display=Accident Code"`
	AccidentLocation ST      `hl7:"3,len=25,display=Accident Location"`
}

// Addendum
//
// The ADD segment is used to define the continuation of the prior segment in a continuation message
type ADD struct {
	HL7                         HL7Name `hl7:",name=ADD,type=s"`
	AddendumContinuationPointer ST      `hl7:"1,len=65536,display=Addendum Continuation Pointer"`
}

// Patient Allergy Information
//
// The AL1 segment contains patient allergy information of various types.  Most of this information will be derived from user-defined
// tables.  Each AL1 segment describes a single patient allergy
type AL1 struct {
	HL7                            HL7Name `hl7:",name=AL1,type=s"`
	SetIDAllergy                   SI      `hl7:"1,required,len=4,display=Set Id - Allergy"`
	AllergyType                    ID      `hl7:"2,len=2,table=0127,display=Allergy Type"`
	AllergyCodeMnemonicDescription CE      `hl7:"3,required,len=60,display=Allergy Code / Mnemonic / Description"`
	AllergySeverity                ID      `hl7:"4,len=2,table=0128,display=Allergy Severity"`
	AllergyReaction                ST      `hl7:"5,len=15,display=Allergy Reaction"`
	IdentificationDate             DT      `hl7:"6,len=8,format=YMD,display=Identification Date"`
}

// Batch Header
//
// The BHS segment defines the start of a batch
type BHS struct {
	HL7                       HL7Name `hl7:",name=BHS,type=s"`
	BatchFieldSeparator       ST      `hl7:"1,required,len=1,display=Batch Field Separator"`
	BatchEncodingCharacters   ST      `hl7:"2,required,len=4,display=Batch Encoding Characters"`
	BatchSendingApplication   ST      `hl7:"3,len=15,display=Batch Sending Application"`
	BatchSendingFacility      ST      `hl7:"4,len=20,display=Batch Sending Facility"`
	BatchReceivingApplication ST      `hl7:"5,len=30,display=Batch Receiving Application"`
	BatchReceivingFacility    ST      `hl7:"6,len=30,display=Batch Receiving Facility"`
	BatchCreationDateTime     TS      `hl7:"7,len=26,format=YMDHMS,display=Batch Creation Date / Time"`
	BatchSecurity             ST      `hl7:"8,len=40,display=Batch Security"`
	BatchNameIDType           ST      `hl7:"9,len=20,display=Batch Name / Id / Type"`
	BatchComment              ST      `hl7:"10,len=80,display=Batch Comment"`
	BatchControlID            ST      `hl7:"11,len=20,display=Batch Control Id"`
	ReferenceBatchControlID   ST      `hl7:"12,len=20,display=Reference Batch Control Id"`
}

// Billing
//
// The BLG segment is used to provide billing information, on the ordered service, to the filling application
type BLG struct {
	HL7          HL7Name `hl7:",name=BLG,type=s"`
	WhenToCharge *CM_CCD `hl7:"1,len=15,display=When To Charge"`
	ChargeType   ID      `hl7:"2,len=50,table=0122,display=Charge Type"`
	AccountID    *CK     `hl7:"3,len=100,display=Account Id"`
}

// Batch Trailer
//
// The BTS segment defines the end of a batch.
type BTS struct {
	HL7               HL7Name          `hl7:",name=BTS,type=s"`
	BatchMessageCount ST               `hl7:"1,len=10,display=Batch Message Count"`
	BatchComment      ST               `hl7:"2,len=80,display=Batch Comment"`
	BatchTotals       []CM_BATCH_TOTAL `hl7:"3,len=100,display=Batch Totals"`
}

// Diagnosis
//
// The DG1 segment contains patient diagnosis information of various types.  For example: Admitting, Current, Primary,
// Final, etc.  Coding methodologies are also defined
type DG1 struct {
	HL7                     HL7Name    `hl7:",name=DG1,type=s"`
	SetIDDiagnosis          SI         `hl7:"1,required,len=4,display=Set Id - Diagnosis"`
	DiagnosisCodingMethod   ID         `hl7:"2,required,len=2,table=0053,display=Diagnosis Coding Method"`
	DiagnosisCode           ID         `hl7:"3,len=8,table=0051,display=Diagnosis Code"`
	DiagnosisDescription    ST         `hl7:"4,len=40,display=Diagnosis Description"`
	DiagnosisDateTime       TS         `hl7:"5,len=26,format=YMDHMS,display=Diagnosis Date / Time"`
	DiagnosisDrgType        ID         `hl7:"6,required,len=2,table=0052,display=Diagnosis / Drg Type"`
	MajorDiagnosticCategory *CE        `hl7:"7,len=60,table=0118,display=Major Diagnostic Category"`
	DiagnosticRelatedGroup  ID         `hl7:"8,len=4,table=0055,display=Diagnostic Related Group"`
	DrgApprovalIndicator    ID         `hl7:"9,len=2,table=0136,display=Drg Approval Indicator"`
	DrgGrouperReviewCode    ID         `hl7:"10,len=2,table=0056,display=Drg Grouper Review Code"`
	OutlierType             ID         `hl7:"11,len=60,table=0083,display=Outlier Type"`
	OutlierDays             NM         `hl7:"12,len=3,display=Outlier Days"`
	OutlierCost             NM         `hl7:"13,len=12,display=Outlier Cost"`
	GrouperVersionAndType   ST         `hl7:"14,len=4,display=Grouper Version And Type"`
	DiagnosisDrgPriority    NM         `hl7:"15,len=2,display=Diagnosis / Drg Priority"`
	DiagnosingClinician     *CN_PERSON `hl7:"16,len=60,display=Diagnosing Clinician"`
}

// Continuation Pointer
//
// The DSC segment is used in the continuation protocol.
type DSC struct {
	HL7                 HL7Name `hl7:",name=DSC,type=s"`
	ContinuationPointer ST      `hl7:"1,len=180,display=Continuation Pointer"`
}

// Display Data
//
// The DSP segment is used to contain data that has been preformatted by the sender for display.  The semantic content of the
// data is lost; the data is simply treated as lines of text.
type DSP struct {
	HL7               HL7Name `hl7:",name=DSP,type=s"`
	SetIDDisplayData  SI      `hl7:"1,len=4,display=Set Id - Display Data"`
	DisplayLevel      SI      `hl7:"2,len=4,display=Display Level"`
	DataLine          TX      `hl7:"3,required,len=300,display=Data Line"`
	LogicalBreakPoint ST      `hl7:"4,len=2,display=Logical Break Point"`
	ResultID          TX      `hl7:"5,len=20,display=Result Id"`
}

// Error
//
// The ERR segment is used to add error comments to acknowledgement messages
type ERR struct {
	HL7                  HL7Name  `hl7:",name=ERR,type=s"`
	ErrorCodeAndLocation []CM_ELD `hl7:"1,required,len=80,display=Error Code And Location"`
}

// Event Type
//
// The EVN segment is used to communicate necessary trigger event information to receiving applications.  Valid event types
// for all chapters are contained in table 0003 - event type code
type EVN struct {
	HL7                  HL7Name `hl7:",name=EVN,type=s"`
	EventTypeCode        ID      `hl7:"1,required,len=3,table=0003,display=Event Type Code"`
	DateTimeOfEvent      TS      `hl7:"2,required,len=26,format=YMDHMS,display=Date / Time Of Event"`
	DateTimePlannedEvent TS      `hl7:"3,len=26,format=YMDHMS,display=Date / Time Planned Event"`
	EventReasonCode      ID      `hl7:"4,len=3,table=0062,display=Event Reason Code"`
	OperatorID           ID      `hl7:"5,len=5,table=0188,display=Operator Id"`
}

// File Header
//
// The FHS segment is used to head a file (group of batches) as defined in Section 2.9.3.
type FHS struct {
	HL7                      HL7Name `hl7:",name=FHS,type=s"`
	FileFieldSeparator       ST      `hl7:"1,required,len=1,display=File Field Separator"`
	FileEncodingCharacters   ST      `hl7:"2,required,len=4,display=File Encoding Characters"`
	FileSendingApplication   ST      `hl7:"3,len=15,display=File Sending Application"`
	FileSendingFacility      ST      `hl7:"4,len=20,display=File Sending Facility"`
	FileReceivingApplication ST      `hl7:"5,len=30,display=File Receiving Application"`
	FileReceivingFacility    ST      `hl7:"6,len=30,display=File Receiving Facility"`
	FileCreationDateTime     TS      `hl7:"7,len=26,format=YMDHMS,display=File Creation Date / Time"`
	FileSecurity             ST      `hl7:"8,len=40,display=File Security"`
	FileNameID               ST      `hl7:"9,len=20,display=File Name / Id"`
	FileHeaderComment        ST      `hl7:"10,len=80,display=File Header Comment"`
	FileControlID            ST      `hl7:"11,len=20,display=File Control Id"`
	ReferenceFileControlID   ST      `hl7:"12,len=20,display=Reference File Control Id"`
}

// Financial Transaction
//
// The FT1 segment contains detail data necessary to post charges, payments, adjustments, etc. to patient accounting records.
type FT1 struct {
	HL7                             HL7Name               `hl7:",name=FT1,type=s"`
	SetIDFinancialTransaction       SI                    `hl7:"1,len=4,display=Set Id - Financial Transaction"`
	TransactionID                   ST                    `hl7:"2,len=12,display=Transaction Id"`
	TransactionBatchID              ST                    `hl7:"3,len=10,display=Transaction Batch Id"`
	TransactionDate                 DT                    `hl7:"4,required,len=8,format=YMD,display=Transaction Date"`
	TransactionPostingDate          DT                    `hl7:"5,len=8,format=YMD,display=Transaction Posting Date"`
	TransactionType                 ID                    `hl7:"6,required,len=8,table=0017,display=Transaction Type"`
	TransactionCode                 CE                    `hl7:"7,required,len=20,table=0132,display=Transaction Code"`
	TransactionDescription          ST                    `hl7:"8,len=40,display=Transaction Description"`
	TransactionDescriptionAlternate ST                    `hl7:"9,len=40,display=Transaction Description - Alternate"`
	TransactionQuantity             NM                    `hl7:"10,len=4,display=Transaction Quantity"`
	TransactionAmountExtended       NM                    `hl7:"11,len=12,display=Transaction Amount - Extended"`
	TransactionAmountUnit           NM                    `hl7:"12,len=12,display=Transaction Amount - Unit"`
	DepartmentCode                  *CE                   `hl7:"13,len=60,table=0049,display=Department Code"`
	InsurancePlanID                 ID                    `hl7:"14,len=8,table=0072,display=Insurance Plan Id"`
	InsuranceAmount                 NM                    `hl7:"15,len=12,display=Insurance Amount"`
	AssignedPatientLocation         *CM_INTERNAL_LOCATION `hl7:"16,len=12,table=0079,display=Assigned Patient Location"`
	FeeSchedule                     ID                    `hl7:"17,len=1,table=0024,display=Fee Schedule"`
	PatientType                     ID                    `hl7:"18,len=2,table=0018,display=Patient Type"`
	DiagnosisCode                   []CE                  `hl7:"19,len=8,table=0051,display=Diagnosis Code"`
	PerformedByCode                 *CN_PERSON            `hl7:"20,len=60,table=0084,display=Performed By Code"`
	OrderedByCode                   *CN_PERSON            `hl7:"21,len=60,display=Ordered By Code"`
	UnitCost                        NM                    `hl7:"22,len=12,display=Unit Cost"`
	FillerOrderNumber               *CM_FILLER            `hl7:"23,conditional,len=75,display=Filler Order Number"`
}

// File Trailer
//
// The FTS segment defines the end of a file
type FTS struct {
	HL7                HL7Name `hl7:",name=FTS,type=s"`
	FileBatchCount     NM      `hl7:"1,len=10,display=File Batch Count"`
	FileTrailerComment ST      `hl7:"2,len=80,display=File Trailer Comment"`
}

// Guarantor
//
// The GT1 segment contains guarantor (e.g., person with financial responsibility for payment of a patient account) data
// for patient and insurance billing applications
type GT1 struct {
	HL7                           HL7Name       `hl7:",name=GT1,type=s"`
	SetIDGuarantor                SI            `hl7:"1,required,len=4,display=Set Id - Guarantor"`
	GuarantorNumber               COMP_ID_DIGIT `hl7:"2,len=20,display=Guarantor Number"`
	GuarantorName                 PN            `hl7:"3,required,len=48,display=Guarantor Name"`
	GuarantorSpouseName           *PN           `hl7:"4,len=48,display=Guarantor Spouse Name"`
	GuarantorAddress              *AD           `hl7:"5,len=106,display=Guarantor Address"`
	GuarantorPhoneNumberHome      []TN          `hl7:"6,max=3,len=40,display=Guarantor Phone Number - Home"`
	GuarantorPhoneNumberBusiness  []TN          `hl7:"7,max=3,len=40,display=Guarantor Phone Number - Business"`
	GuarantorDateOfBirth          DT            `hl7:"8,len=8,format=YMD,display=Guarantor Date Of Birth"`
	GuarantorSex                  ID            `hl7:"9,len=1,table=0001,display=Guarantor Sex"`
	GuarantorType                 ID            `hl7:"10,len=2,table=0068,display=Guarantor Type"`
	GuarantorRelationship         ID            `hl7:"11,len=2,table=0063,display=Guarantor Relationship"`
	GuarantorSocialSecurityNumber ST            `hl7:"12,len=11,display=Guarantor Social Security Number"`
	GuarantorDateBegin            DT            `hl7:"13,len=8,format=YMD,display=Guarantor Date - Begin"`
	GuarantorDateEnd              DT            `hl7:"14,len=8,format=YMD,display=Guarantor Date - End"`
	GuarantorPriority             NM            `hl7:"15,len=2,display=Guarantor Priority"`
	GuarantorEmployerName         ST            `hl7:"16,len=45,display=Guarantor Employer Name"`
	GuarantorEmployerAddress      *AD           `hl7:"17,len=106,display=Guarantor Employer Address"`
	GuarantorEmployPhoneNumber    []TN          `hl7:"18,max=3,len=40,display=Guarantor Employ Phone Number"`
	GuarantorEmployeeIDNumber     ST            `hl7:"19,len=20,display=Guarantor Employee Id Number"`
	GuarantorEmploymentStatus     ID            `hl7:"20,len=2,table=0066,display=Guarantor Employment Status"`
	GuarantorOrganization         ST            `hl7:"21,len=60,display=Guarantor Organization"`
}

// Insurance
//
// The IN1 segment contains insurance policy coverage information necessary to produce properly pro-rated and patient
// and insurance bills.
type IN1 struct {
	HL7                            HL7Name    `hl7:",name=IN1,type=s"`
	SetIDInsurance                 SI         `hl7:"1,required,len=4,display=Set Id - Insurance"`
	InsurancePlanID                ID         `hl7:"2,required,len=8,table=0072,display=Insurance Plan Id"`
	InsuranceCompanyID             ST         `hl7:"3,required,len=9,display=Insurance Company Id"`
	InsuranceCompanyName           ST         `hl7:"4,len=45,display=Insurance Company Name"`
	InsuranceCompanyAddress        *AD        `hl7:"5,len=106,display=Insurance Company Address"`
	InsuranceCompanyContactPers    *PN        `hl7:"6,len=48,display=Insurance Company Contact Pers"`
	InsuranceCompanyPhoneNumber    []TN       `hl7:"7,max=3,len=40,display=Insurance Company Phone Number"`
	GroupNumber                    ST         `hl7:"8,len=12,display=Group Number"`
	GroupName                      ST         `hl7:"9,len=35,display=Group Name"`
	InsuredsGroupEmployerID        ST         `hl7:"10,len=12,display=Insured's Group Employer Id"`
	InsuredsGroupEmployerName      ST         `hl7:"11,len=45,display=Insured's Group Employer Name"`
	PlanEffectiveDate              DT         `hl7:"12,len=8,format=YMD,display=Plan Effective Date"`
	PlanExpirationDate             DT         `hl7:"13,len=8,format=YMD,display=Plan Expiration Date"`
	AuthorizationInformation       *CM_AUI    `hl7:"14,len=55,display=Authorization Information"`
	PlanType                       ID         `hl7:"15,len=5,table=0086,display=Plan Type"`
	NameOfInsured                  *PN        `hl7:"16,len=48,display=Name Of Insured"`
	InsuredsRelationshipToPatient  ID         `hl7:"17,len=2,table=0063,display=Insured's Relationship To Patient"`
	InsuredsDateOfBirth            DT         `hl7:"18,len=8,format=YMD,display=Insured's Date Of Birth"`
	InsuredsAddress                *AD        `hl7:"19,len=106,display=Insured's Address"`
	AssignmentOfBenefits           ID         `hl7:"20,len=2,table=0135,display=Assignment Of Benefits"`
	CoordinationOfBenefits         ID         `hl7:"21,len=2,table=0173,display=Coordination Of Benefits"`
	CoordinationOfBenefitsPriority ST         `hl7:"22,len=2,display=Coordination Of Benefits - Priority"`
	NoticeOfAdmissionCode          ID         `hl7:"23,len=2,table=0136,display=Notice Of Admission Code"`
	NoticeOfAdmissionDate          DT         `hl7:"24,len=8,format=YMD,display=Notice Of Admission Date"`
	ReportOfEligibilityCode        ID         `hl7:"25,len=4,table=0136,display=Report Of Eligibility Code"`
	ReportOfEligibilityDate        DT         `hl7:"26,len=8,format=YMD,display=Report Of Eligibility Date"`
	ReleaseInformationCode         ID         `hl7:"27,len=2,table=0093,display=Release Information Code"`
	PreAdmitCertificationPac       ST         `hl7:"28,len=15,display=Pre-admit Certification (pac)"`
	VerificationDateTime           TS         `hl7:"29,len=26,format=YMDHMS,display=Verification Date / Time"`
	VerificationBy                 *CN_PERSON `hl7:"30,len=60,display=Verification By"`
	TypeOfAgreementCode            ID         `hl7:"31,len=2,table=0098,display=Type Of Agreement Code"`
	BillingStatus                  ID         `hl7:"32,len=2,table=0022,display=Billing Status"`
	LifetimeReserveDays            NM         `hl7:"33,len=4,display=Lifetime Reserve Days"`
	DelayBeforeLifetimeReserveDays NM         `hl7:"34,len=4,display=Delay Before Lifetime Reserve Days"`
	CompanyPlanCode                ID         `hl7:"35,len=8,table=0042,display=Company Plan Code"`
	PolicyNumber                   ST         `hl7:"36,len=15,display=Policy Number"`
	PolicyDeductible               NM         `hl7:"37,len=12,display=Policy Deductible"`
	PolicyLimitAmount              NM         `hl7:"38,len=12,display=Policy Limit - Amount"`
	PolicyLimitDays                NM         `hl7:"39,len=4,display=Policy Limit - Days"`
	RoomRateSemiPrivate            NM         `hl7:"40,len=12,display=Room Rate - Semi-private"`
	RoomRatePrivate                NM         `hl7:"41,len=12,display=Room Rate - Private"`
	InsuredsEmploymentStatus       *CE        `hl7:"42,len=60,table=0066,display=Insured's Employment Status"`
	InsuredsSex                    ID         `hl7:"43,len=1,table=0001,display=Insured's Sex"`
	InsuredsEmployerAddress        *AD        `hl7:"44,len=106,display=Insured's Employer Address"`
	VerificationStatus             ST         `hl7:"45,len=2,display=Verification Status"`
	PriorInsurancePlanID           ID         `hl7:"46,len=8,table=0072,display=Prior Insurance Plan Id"`
}

// Insurance Additional Info
//
// The IN2 segment contains additional insurance policy coverage and benefit information necessary for proper billing
// and reimbursement.  Fields used by this segment are defined by HICFA or other regulatory agencies.
type IN2 struct {
	HL7                                       HL7Name    `hl7:",name=IN2,type=s"`
	InsuredsEmployeeID                        ST         `hl7:"1,len=15,display=Insured's Employee Id"`
	InsuredsSocialSecurityNumber              NM         `hl7:"2,len=9,display=Insured's Social Security Number"`
	InsuredsEmployerName                      *CN_PERSON `hl7:"3,len=60,display=Insured's Employer Name"`
	EmployerInformationData                   ID         `hl7:"4,len=1,table=0139,display=Employer Information Data"`
	MailClaimParty                            ID         `hl7:"5,len=1,table=0137,display=Mail Claim Party"`
	MedicareHealthInsuranceCardNumber         NM         `hl7:"6,len=15,display=Medicare Health Insurance Card Number"`
	MedicaidCaseName                          *PN        `hl7:"7,len=48,display=Medicaid Case Name"`
	MedicaidCaseNumber                        NM         `hl7:"8,len=15,display=Medicaid Case Number"`
	ChampusSponsorName                        *PN        `hl7:"9,len=48,display=Champus Sponsor Name"`
	ChampusIDNumber                           NM         `hl7:"10,len=20,display=Champus Id Number"`
	DependentOfChampusRecipient               ID         `hl7:"11,len=1,display=Dependent Of Champus Recipient"`
	ChampusOrganization                       ST         `hl7:"12,len=25,display=Champus Organization"`
	ChampusStation                            ST         `hl7:"13,len=25,display=Champus Station"`
	ChampusService                            ID         `hl7:"14,len=14,table=0140,display=Champus Service"`
	ChampusRankGrade                          ID         `hl7:"15,len=2,table=0141,display=Champus Rank / Grade"`
	ChampusStatus                             ID         `hl7:"16,len=3,table=0142,display=Champus Status"`
	ChampusRetireDate                         DT         `hl7:"17,len=8,format=YMD,display=Champus Retire Date"`
	ChampusNonAvailabilityCertificationOnFile ID         `hl7:"18,len=1,table=0136,display=Champus Non-availability Certification On File"`
	BabyCoverage                              ID         `hl7:"19,len=1,table=0136,display=Baby Coverage"`
	CombineBabyBill                           ID         `hl7:"20,len=1,table=0136,display=Combine Baby Bill"`
	BloodDeductible                           NM         `hl7:"21,len=1,display=Blood Deductible"`
	SpecialCoverageApprovalName               *PN        `hl7:"22,len=48,display=Special Coverage Approval Name"`
	SpecialCoverageApprovalTitle              ST         `hl7:"23,len=30,display=Special Coverage Approval Title"`
	NonCoveredInsuranceCode                   []ID       `hl7:"24,len=8,table=0143,display=Non-covered Insurance Code"`
	PayorID                                   ST         `hl7:"25,len=6,display=Payor Id"`
	PayorSubscriberID                         ST         `hl7:"26,len=6,display=Payor Subscriber Id"`
	EligibilitySource                         ID         `hl7:"27,len=1,table=0144,display=Eligibility Source"`
	RoomCoverageTypeAmount                    []CM_RMC   `hl7:"28,len=25,display=Room Coverage Type / Amount"`
	PolicyTypeAmount                          []CM_PTA   `hl7:"29,len=25,display=Policy Type / Amount"`
	DailyDeductible                           *CM_DDI    `hl7:"30,len=25,display=Daily Deductible"`
}

// Insurance Additional Info-certification
//
// The IN3 segment contains additional insurance information for certifying the need for patient care.  Fields used by this
// segment are defined by HICFA or other regulatory agencies
type IN3 struct {
	HL7                                HL7Name    `hl7:",name=IN3,type=s"`
	SetIDInsuranceCertification        SI         `hl7:"1,required,len=4,display=Set Id - Insurance Certification"`
	CertificationNumber                ST         `hl7:"2,len=25,display=Certification Number"`
	CertifiedBy                        *CN_PERSON `hl7:"3,len=60,display=Certified By"`
	CertificationRequired              ID         `hl7:"4,len=1,table=0136,display=Certification Required"`
	Penalty                            *CM_PEN    `hl7:"5,len=10,display=Penalty"`
	CertificationDateTime              TS         `hl7:"6,len=26,format=YMDHMS,display=Certification Date / Time"`
	CertificationModifyDateTime        TS         `hl7:"7,len=26,format=YMDHMS,display=Certification Modify Date / Time"`
	Operator                           *CN_PERSON `hl7:"8,len=60,display=Operator"`
	CertificationBeginDate             DT         `hl7:"9,len=8,format=YMD,display=Certification Begin Date"`
	CertificationEndDate               DT         `hl7:"10,len=8,format=YMD,display=Certification End Date"`
	Days                               *CM_DTN    `hl7:"11,len=3,display=Days"`
	NonConcurCodeDescription           *CE        `hl7:"12,len=60,display=Non-concur Code / Description"`
	NonConcurEffectiveDateTime         TS         `hl7:"13,len=26,format=YMDHMS,display=Non-concur Effective Date / Time"`
	PhysicianReviewer                  *CN_PERSON `hl7:"14,len=60,display=Physician Reviewer"`
	CertificationContact               ST         `hl7:"15,len=48,display=Certification Contact"`
	CertificationContactPhoneNumber    []TN       `hl7:"16,max=3,len=40,display=Certification Contact Phone Number"`
	AppealReason                       *CE        `hl7:"17,len=60,display=Appeal Reason"`
	CertificationAgency                *CE        `hl7:"18,len=60,display=Certification Agency"`
	CertificationAgencyPhoneNumber     []TN       `hl7:"19,max=3,len=40,display=Certification Agency Phone Number"`
	PreCertificationRequiredWindow     []CM_PCF   `hl7:"20,len=40,display=Pre-certification Required / Window"`
	CaseManager                        ST         `hl7:"21,len=48,display=Case Manager"`
	SecondOpinionDate                  DT         `hl7:"22,len=8,format=YMD,display=Second Opinion Date"`
	SecondOpinionStatus                ID         `hl7:"23,len=1,table=0151,display=Second Opinion Status"`
	SecondOpinionDocumentationReceived ID         `hl7:"24,len=1,table=0152,display=Second Opinion Documentation Received"`
	SecondOpinionPractitioner          *CN_PERSON `hl7:"25,len=60,display=Second Opinion Practitioner"`
}

// Master File Acknowledgement
type MFA struct {
	HL7                      HL7Name `hl7:",name=MFA,type=s"`
	RecordLevelEventCode     ID      `hl7:"1,required,len=3,table=0180,display=Record-level Event Code"`
	MfnControlID             ST      `hl7:"2,conditional,len=20,display=Mfn Control Id"`
	EventCompletionDateTime  TS      `hl7:"3,conditional,len=26,format=YMDHMS,display=Event Completion Date / Time"`
	ErrorReturnCodeAndOrText CE      `hl7:"4,required,len=60,table=0181,display=Error Return Code And/Or Text"`
	PrimaryKeyValue          []CE    `hl7:"5,required,len=60,display=Primary Key Value"`
}

// Master File Entry
type MFE struct {
	HL7                  HL7Name `hl7:",name=MFE,type=s"`
	RecordLevelEventCode ID      `hl7:"1,required,len=3,table=0180,display=Record-level Event Code"`
	MfnControlID         ST      `hl7:"2,conditional,len=20,display=Mfn Control Id"`
	EffectiveDateTime    TS      `hl7:"3,len=26,format=YMDHMS,display=Effective Date / Time"`
	PrimaryKeyValue      []CE    `hl7:"4,required,len=60,display=Primary Key Value"`
}

// Master File Identification
type MFI struct {
	HL7                             HL7Name `hl7:",name=MFI,type=s"`
	MasterFileIdentifier            CE      `hl7:"1,required,len=60,table=0175,display=Master File Identifier"`
	MasterFileApplicationIdentifier ID      `hl7:"2,len=6,table=0176,display=Master File Application Identifier"`
	FileLevelEventCode              ID      `hl7:"3,required,len=3,table=0178,display=File-level Event Code"`
	EnteredDateTime                 TS      `hl7:"4,len=26,format=YMDHMS,display=Entered Date / Time"`
	EffectiveDateTime               TS      `hl7:"5,len=26,format=YMDHMS,display=Effective Date / Time"`
	ResponseLevelCode               ID      `hl7:"6,required,len=2,table=0179,display=Response Level Code"`
}

// Merge Patient Information
//
// The MRG segment provides receiving applications with information necessary to initiate the merging of patient data as
// well as groups of records.  It is intended that this segment be used throughout the standard to allow the merging of registration,
// accounting, and clinical records within specific applications
type MRG struct {
	HL7                       HL7Name    `hl7:",name=MRG,type=s"`
	PriorPatientIDInternal    CM_PAT_ID  `hl7:"1,required,len=20,display=Prior Patient Id - Internal"`
	PriorAlternatePatientID   *CM_PAT_ID `hl7:"2,len=16,display=Prior Alternate Patient Id"`
	PriorPatientAccountNumber *CK        `hl7:"3,len=20,display=Prior Patient Account Number"`
	PriorPatientIDExternal    *CK        `hl7:"4,len=16,display=Prior Patient Id - External"`
}

// Message Acknowledgment
//
// The MSA segment contains information sent while acknowledging another message
type MSA struct {
	HL7                        HL7Name `hl7:",name=MSA,type=s"`
	AcknowledgementCode        ID      `hl7:"1,required,len=2,table=0008,display=Acknowledgement Code"`
	MessageControlID           ST      `hl7:"2,required,len=20,display=Message Control Id"`
	TextMessage                ST      `hl7:"3,len=80,display=Text Message"`
	ExpectedSequenceNumber     NM      `hl7:"4,len=15,display=Expected Sequence Number"`
	DelayedAcknowledgementType ID      `hl7:"5,len=1,table=0102,display=Delayed Acknowledgement Type"`
	ErrorCondition             *CE     `hl7:"6,len=100,display=Error Condition"`
}

// Message Header
//
// The MSH segment defines the intent, source, destination, and some specifics of the syntax of a message.
//
// Note: If MSH-15 and MSH-16 are omitted (or are both null), the original Acknowledgement Mode rules are used.
type MSH struct {
	HL7                            HL7Name `hl7:",name=MSH,type=s"`
	FieldSeparator                 ST      `hl7:"1,noescape,fieldsep,omit,required,len=1,display=Field Separator"`
	EncodingCharacters             ST      `hl7:"2,noescape,fieldchars,required,len=4,display=Encoding Characters"`
	SendingApplication             ST      `hl7:"3,len=15,display=Sending Application"`
	SendingFacility                ST      `hl7:"4,len=20,display=Sending Facility"`
	ReceivingApplication           ST      `hl7:"5,len=30,display=Receiving Application"`
	ReceivingFacility              ST      `hl7:"6,len=30,display=Receiving Facility"`
	DateTimeOfMessage              TS      `hl7:"7,len=26,format=YMDHMS,display=Date / Time Of Message"`
	Security                       ST      `hl7:"8,len=40,display=Security"`
	MessageType                    CM_MSG  `hl7:"9,required,len=7,display=Message Type"`
	MessageControlID               ST      `hl7:"10,required,len=20,display=Message Control Id"`
	ProcessingID                   ID      `hl7:"11,required,len=1,table=0103,display=Processing Id"`
	VersionID                      ID      `hl7:"12,required,len=8,table=0104,display=Version Id"`
	SequenceNumber                 NM      `hl7:"13,len=15,display=Sequence Number"`
	ContinuationPointer            ST      `hl7:"14,len=180,display=Continuation Pointer"`
	AcceptAcknowledgementType      ID      `hl7:"15,len=2,table=0155,display=Accept Acknowledgement Type"`
	ApplicationAcknowledgementType ID      `hl7:"16,len=2,table=0155,display=Application Acknowledgement Type"`
	CountryCode                    ID      `hl7:"17,len=2,table=ISO3166,display=Country Code"`
}

// MessageStructureID returns the code for the message structure.
// Implements the interface for decoders.
func (s MSH) MessageStructureID() string {
	return s.MessageType.MessageStructureID()
}

// System Clock
//
// the NCK segment is used to allow the various systems on the network to synchronize their system clocks (system date and time).
type NCK struct {
	HL7            HL7Name `hl7:",name=NCK,type=s"`
	SystemDateTime TS      `hl7:"1,required,len=26,format=YMDHMS,display=System Date/Time"`
}

// Next Of Kin
//
// The NK1 segment contains information about the patient's other related parties. Any associated parties may be identified.
// Utilizing NK1-1-set ID, multiple NK1 segments can be sent to patient accounts
type NK1 struct {
	HL7                     HL7Name      `hl7:",name=NK1,type=s"`
	SetIDNextOfKin          SI           `hl7:"1,required,len=4,display=Set Id - Next Of Kin"`
	Name                    *PN          `hl7:"2,len=48,display=Name"`
	Relationship            *CE          `hl7:"3,len=60,table=0063,display=Relationship"`
	Address                 *AD          `hl7:"4,len=106,display=Address"`
	PhoneNumber             []TN         `hl7:"5,max=3,len=40,display=Phone Number"`
	BusinessPhoneNumber     TN           `hl7:"6,len=40,display=Business Phone Number"`
	ContactRole             *CE          `hl7:"7,len=60,table=0131,display=Contact Role"`
	StartDate               DT           `hl7:"8,len=8,format=YMD,display=Start Date"`
	EndDate                 DT           `hl7:"9,len=8,format=YMD,display=End Date"`
	NextOfKin               ST           `hl7:"10,len=60,display=Next Of Kin"`
	NextOfKinJobCodeClass   *CM_JOB_CODE `hl7:"11,len=60,display=Next Of Kin Job Code / Class"`
	NextOfKinEmployeeNumber ST           `hl7:"12,len=20,display=Next Of Kin Employee Number"`
	OrganizationName        ST           `hl7:"13,len=60,display=Organization Name"`
}

// Bed Status Update
//
// The NPU segment allows the updating of census (bed status) data without sending patient specific data. For example: changing
// the status of a bed from housekeeping to unoccupied.
type NPU struct {
	HL7         HL7Name              `hl7:",name=NPU,type=s"`
	BedLocation CM_INTERNAL_LOCATION `hl7:"1,required,len=12,table=0079,display=Bed Location"`
	BedStatus   ID                   `hl7:"2,len=1,table=0116,display=Bed Status"`
}

// Status Change
//
// The NSC segment can be used to request the start-up, shut-down, and/or migration (to a different cpu or file-server/file-system)
// of a particular application. It can also be used in an unsolicited update from one system to another to announce the start-up,
// shut-down, or migration of an application
type NSC struct {
	HL7                HL7Name `hl7:",name=NSC,type=s"`
	NetworkChangeType  ID      `hl7:"1,required,len=4,table=NSC1,display=Network Change Type"`
	CurrentCPU         ST      `hl7:"2,len=30,display=Current Cpu"`
	CurrentFileserver  ST      `hl7:"3,len=30,display=Current Fileserver"`
	CurrentApplication ST      `hl7:"4,len=30,display=Current Application"`
	CurrentFacility    ST      `hl7:"5,len=30,display=Current Facility"`
	NewCPU             ST      `hl7:"6,len=30,display=New Cpu"`
	NewFileserver      ST      `hl7:"7,len=30,display=New Fileserver"`
	NewApplication     ST      `hl7:"8,len=30,display=New Application"`
	NewFacility        ST      `hl7:"9,len=30,display=New Facility"`
}

// Statistics
//
// The NST segment allows network statistical information to be passed between the various systems on the network. Some fields
// in this segment refer to portions of lower level protocols; they contain information that can be used by network management
// applications monitoring the state of various network links.
type NST struct {
	HL7                    HL7Name `hl7:",name=NST,type=s"`
	StatisticsAvailable    ID      `hl7:"1,required,len=1,table=0136,display=Statistics Available"`
	SourceIdentifier       ST      `hl7:"2,len=30,display=Source Identifier"`
	SourceType             ID      `hl7:"3,len=3,table=NST3,display=Source Type"`
	StatisticsStart        TS      `hl7:"4,len=26,format=YMDHMS,display=Statistics Start"`
	StatisticsEnd          TS      `hl7:"5,len=26,format=YMDHMS,display=Statistics End"`
	ReceiveCharacterCount  NM      `hl7:"6,len=10,display=Receive Character Count"`
	SendCharacterCount     NM      `hl7:"7,len=10,display=Send Character Count"`
	MessageReceived        NM      `hl7:"8,len=10,display=Message Received"`
	MessageSent            NM      `hl7:"9,len=10,display=Message Sent"`
	ChecksumErrorsReceived NM      `hl7:"10,len=10,display=Checksum Errors Received"`
	LengthErrorsReceived   NM      `hl7:"11,len=10,display=Length Errors Received"`
	OtherErrorsReceived    NM      `hl7:"12,len=10,display=Other Errors Received"`
	ConnectTimeouts        NM      `hl7:"13,len=10,display=Connect Timeouts"`
	ReceiveTimeouts        NM      `hl7:"14,len=10,display=Receive Timeouts"`
	NetworkErrors          NM      `hl7:"15,len=10,display=Network Errors"`
}

// Notes And Comments
//
// The NTE segment is defined here for inclusion in messages defined in other chapters.  It is a common format for sending notes
// and comments
type NTE struct {
	HL7                   HL7Name `hl7:",name=NTE,type=s"`
	SetIDNotesAndComments SI      `hl7:"1,len=4,display=Set Id - Notes And Comments"`
	SourceOfComment       ID      `hl7:"2,len=8,table=0105,display=Source Of Comment"`
	Comment               []FT    `hl7:"3,len=65536,display=Comment"`
}

// Observation Request
//
// The Observation Request (OBR) segment is used to transmit information specific to an order for a diagnostic study or observation,
// physical exam, or assessment.
//
// The daggered (+) items in this segment are not created by the placer.  They are created by the filler and valued as needed when
// the OBR segment is returned as part of a report.  Hence on a new order sent to the filler, they are not valued.  There is an exception
// when the filler initiates the order.  In that case, the filler order number is valued and the placer order number may be blank.
//
// The starred (*) fields are only relevant when an observation is associated with a specimen.  These are completed by the placer
// when the placer obtains the specimen.  They are completed by the filler when the filler obtains the specimen.
//
// OBR-7-observation date/time and OBR-8-observation end date/time are the physiologically relevant times.  In the case
// of an observation on a specimen, they represent the start and end of the specimen collector.  In the case of an observation
// obtained directly from a subject (eg., BP, Chest Xray), they represent the start and end time of the observation
type OBR struct {
	HL7                               HL7Name     `hl7:",name=OBR,type=s"`
	SetIDObservationRequest           SI          `hl7:"1,conditional,len=4,display=Set Id - Observation Request"`
	PlacerOrderNumber                 *CM_PLACER  `hl7:"2,conditional,len=75,display=Placer Order Number"`
	FillerOrderNumber                 CM_FILLER   `hl7:"3,required,len=75,display=Filler Order Number +"`
	UniversalServiceID                *CE         `hl7:"4,len=200,display=Universal Service Id"`
	Priority                          ST          `hl7:"5,len=2,display=Priority"`
	RequestedDateTime                 TS          `hl7:"6,len=26,format=YMDHMS,display=Requested Date / Time"`
	ObservationDateTime               TS          `hl7:"7,conditional,len=26,format=YMDHMS,display=Observation Date / Time"`
	ObservationEndDateTime            TS          `hl7:"8,conditional,len=26,format=YMDHMS,display=Observation End Date / Time"`
	CollectionVolume                  *CQ         `hl7:"9,len=20,display=Collection Volume *"`
	CollectorIdentifier               []CN_PERSON `hl7:"10,len=60,display=Collector Identifier *"`
	SpecimenActionCode                ID          `hl7:"11,len=1,table=0065,display=Specimen Action Code *"`
	DangerCode                        *CE         `hl7:"12,len=60,display=Danger Code"`
	RelevantClinicalInformation       ST          `hl7:"13,conditional,len=300,display=Relevant Clinical Information"`
	SpecimenReceivedDateTime          TS          `hl7:"14,len=26,format=YMDHMS,display=Specimen Received Date / Time *"`
	SpecimenSource                    *CM_SPS     `hl7:"15,len=300,display=Specimen Source *"`
	OrderingProvider                  []CN_PERSON `hl7:"16,len=80,display=Ordering Provider"`
	OrderCallbackPhoneNumber          []TN        `hl7:"17,max=2,len=40,display=Order Callback Phone Number"`
	PlacerField1                      ST          `hl7:"18,len=60,display=Placer Field 1"`
	PlacerField2                      ST          `hl7:"19,len=60,display=Placer Field 2"`
	FillerField1                      ST          `hl7:"20,len=60,display=Filler Field 1 +"`
	FillerField2                      ST          `hl7:"21,conditional,len=60,display=Filler Field 2 +"`
	ResultsReportStatusChangeDateTime TS          `hl7:"22,len=26,format=YMDHMS,display=Results Report / Status Change - Date / Time +"`
	ChargeToPractice                  *CM_MOC     `hl7:"23,len=40,display=Charge To Practice +"`
	DiagnosticServiceSectionID        ID          `hl7:"24,conditional,len=10,table=0074,display=Diagnostic Service Section Id"`
	ResultStatus                      ID          `hl7:"25,len=1,table=0123,display=Result Status +"`
	ParentResult                      *CM_PRL     `hl7:"26,len=200,display=Parent Result +"`
	QuantityTiming                    []TQ        `hl7:"27,len=200,display=Quantity / Timing"`
	ResultCopiesTo                    []CN_PERSON `hl7:"28,max=5,len=150,display=Result Copies To"`
	ParentNumber                      *CM_EIP     `hl7:"29,len=150,display=Parent Number +"`
	TransportationMode                ID          `hl7:"30,len=20,table=0124,display=Transportation Mode"`
	ReasonForStudy                    []CE        `hl7:"31,len=300,display=Reason For Study"`
	PrincipalResultInterpreter        *CM_NDL     `hl7:"32,len=60,display=Principal Result Interpreter +"`
	AssistantResultInterpreter        []CM_NDL    `hl7:"33,len=60,display=Assistant Result Interpreter +"`
	Technician                        []CM_NDL    `hl7:"34,len=60,display=Technician +"`
	Transcriptionist                  []CM_NDL    `hl7:"35,len=60,display=Transcriptionist +"`
	ScheduledDateTime                 TS          `hl7:"36,len=26,format=YMDHMS,display=Scheduled Date / Time +"`
}

// Observation Result
type OBX struct {
	HL7                                      HL7Name       `hl7:",name=OBX,type=s"`
	SetIDObservationalSimple                 SI            `hl7:"1,len=4,display=Set Id - Observational Simple"`
	ValueType                                ID            `hl7:"2,required,len=2,table=0125,display=Value Type"`
	ObservationIdentifier                    CE            `hl7:"3,required,len=80,display=Observation Identifier"`
	ObservationSubID                         ST            `hl7:"4,conditional,len=20,display=Observation Sub-id"`
	ObservationValue                         *VARIES       `hl7:"5,conditional,len=65536,display=Observation Value"`
	Units                                    *CE           `hl7:"6,len=60,display=Units"`
	ReferencesRange                          ST            `hl7:"7,len=60,display=References Range"`
	AbnormalFlags                            []ID          `hl7:"8,max=5,len=10,table=0078,display=Abnormal Flags"`
	Probability                              NM            `hl7:"9,len=5,display=Probability"`
	NatureOfAbnormalTest                     ID            `hl7:"10,len=5,table=0080,display=Nature Of Abnormal Test"`
	ObservationResultStatus                  ID            `hl7:"11,required,len=2,table=0085,display=Observation Result Status"`
	EffectiveDateLastObservationNormalValues TS            `hl7:"12,len=26,format=YMDHMS,display=Effective Date Last Observation Normal Values"`
	UserDefinedAccessChecks                  ST            `hl7:"13,len=20,display=User Defined Access Checks"`
	DateTimeOfTheObservation                 TS            `hl7:"14,len=26,format=YMDHMS,display=Date / Time Of The Observation"`
	ProducersID                              *CE           `hl7:"15,len=60,display=Producer's Id"`
	ResponsibleObserver                      *CN_PHYSICIAN `hl7:"16,len=60,display=Responsible Observer"`
}

func (v OBX) ChildVaries(dtReg map[string]any) (reflect.Value, error) {
	vt, ok := dtReg[v.ValueType]
	if !ok {
		return reflect.Value{}, fmt.Errorf("unknown OBX data type %q", v.ValueType)
	}

	rt := reflect.TypeOf(vt)
	rv := reflect.New(rt)
	return rv.Elem(), nil
}

// Dietary Orders, Supplements, And Preferences
//
// The ORC sequence items of interest to ODS are ORC-1-order control,ORC-2-placer order number, ORC-3-filler order number,
// ORC-7-quantity/timing, ORC-9-date/time of transaction, ORC-10-entered by, and ORC-11verified by.  For ORC-1-order
// control, the values may be New (NW), Cancel (CA), Discontinue Order Request (DC), Change (XO), Hold Order Request (HD),
// and Release Previous Hold (RL).  The HD and RL codes could stop service for a specified length of time.  ORC-4-quantity/timing
// should be used to specify whether an order is continuous or for one service period only.  It is also useful for supplements
// which are part of a diet but only delivered, say, every day at night
type ODS struct {
	HL7                            HL7Name `hl7:",name=ODS,type=s"`
	Type                           ID      `hl7:"1,required,len=1,table=0159,display=Type"`
	ServicePeriod                  []CE    `hl7:"2,max=10,len=60,display=Service Period"`
	DietSupplementOrPreferenceCode []CE    `hl7:"3,required,max=20,len=60,display=Diet- Supplement- Or Preference Code"`
	TextInstruction                []ST    `hl7:"4,max=2,len=80,display=Text Instruction"`
}

// Diet Tray Instruction
//
// This segment addresses tray instructions.  These are independent of diet codes, supplements, and preferences and therefore
// get separate order numbers
type ODT struct {
	HL7             HL7Name `hl7:",name=ODT,type=s"`
	TrayType        CE      `hl7:"1,required,len=60,table=0160,display=Tray Type"`
	ServicePeriod   []CE    `hl7:"2,max=10,len=60,display=Service Period"`
	TextInstruction []ST    `hl7:"3,max=2,len=80,display=Text Instruction"`
}

// Commom Order
//
// The Common Order segment (ORC) is used to transmit data elements that are common to all orders (all types of services that
// are requested).  The ORC segment is required in both the Order (ORM) and Order Acknowledgement (ORR) messages.
type ORC struct {
	HL7                    HL7Name      `hl7:",name=ORC,type=s"`
	OrderControl           ID           `hl7:"1,required,len=2,table=0119,display=Order Control"`
	PlacerOrderNumber      *CM_PLACER   `hl7:"2,conditional,len=75,display=Placer Order Number"`
	FillerOrderNumber      *CM_FILLER   `hl7:"3,conditional,len=75,display=Filler Order Number"`
	PlacerGroupNumber      *CM_GROUP_ID `hl7:"4,len=75,display=Placer Group Number"`
	OrderStatus            ID           `hl7:"5,len=2,table=0038,display=Order Status"`
	ResponseFlag           ID           `hl7:"6,len=1,table=0121,display=Response Flag"`
	QuantityTiming         []TQ         `hl7:"7,len=200,display=Quantity / Timing"`
	Parent                 *CM_EIP      `hl7:"8,len=200,display=Parent"`
	DateTimeOfTransaction  TS           `hl7:"9,len=26,format=YMDHMS,display=Date / Time Of Transaction"`
	EnteredBy              *CN_PERSON   `hl7:"10,len=80,display=Entered By"`
	VerifiedBy             *CN_PERSON   `hl7:"11,len=80,display=Verified By"`
	OrderingProvider       *CN_PERSON   `hl7:"12,len=80,display=Ordering Provider"`
	EnterersLocation       *PL          `hl7:"13,len=80,display=Enterer's Location"`
	CallBackPhoneNumber    []TN         `hl7:"14,max=2,len=40,display=Call Back Phone Number"`
	OrderEffectiveDateTime TS           `hl7:"15,len=26,format=YMDHMS,display=Order Effective Date / Time"`
	OrderControlCodeReason *CE          `hl7:"16,len=200,table=0119,display=Order Control Code Reason"`
	EnteringOrganization   *CE          `hl7:"17,len=60,display=Entering Organization"`
	EnteringDevice         *CE          `hl7:"18,len=60,display=Entering Device"`
	ActionBy               *CN_PERSON   `hl7:"19,len=80,display=Action By"`
}

// Patient Identification
//
// The PID segment is used by all applications as the primary means of communicating patient identification information.
// This segment contains permanent patient identifying, and demographic information that, for the most part, is not likely
// to change frequently
type PID struct {
	HL7                         HL7Name        `hl7:",name=PID,type=s"`
	SetIDPatientID              SI             `hl7:"1,len=4,display=Set Id - Patient Id"`
	PatientIDExternalID         *CK            `hl7:"2,len=16,display=Patient Id (external Id)"`
	PatientIDInternalID         []CM_PAT_ID    `hl7:"3,required,len=20,display=Patient Id (internal Id)"`
	AlternatePatientID          ST             `hl7:"4,len=12,display=Alternate Patient Id"`
	PatientName                 PN             `hl7:"5,required,len=48,display=Patient Name"`
	MothersMaidenName           ST             `hl7:"6,len=30,display=Mother's Maiden Name"`
	DateOfBirth                 TS             `hl7:"7,len=26,format=YMDHMS,display=Date Of Birth"`
	Sex                         ID             `hl7:"8,len=1,table=0001,display=Sex"`
	PatientAlias                []PN           `hl7:"9,len=48,display=Patient Alias"`
	Race                        ID             `hl7:"10,len=1,table=0005,display=Race"`
	PatientAddress              []AD           `hl7:"11,max=3,len=106,display=Patient Address"`
	CountyCode                  ST             `hl7:"12,len=4,display=County Code"`
	PhoneNumberHome             []TN           `hl7:"13,max=3,len=40,display=Phone Number - Home"`
	PhoneNumberBusiness         []TN           `hl7:"14,max=3,len=40,display=Phone Number - Business"`
	LanguagePatient             ST             `hl7:"15,len=25,display=Language - Patient"`
	MaritalStatus               ID             `hl7:"16,len=1,table=0002,display=Marital Status"`
	Religion                    ID             `hl7:"17,len=3,table=0006,display=Religion"`
	PatientAccountNumber        *CK            `hl7:"18,len=20,display=Patient Account Number"`
	SocialSecurityNumberPatient ST             `hl7:"19,len=16,display=Social Security Number - Patient"`
	DriversLicenseNumberPatient *CM_LICENSE_NO `hl7:"20,len=25,display=Driver's License Number - Patient"`
	MothersIdentifier           *CK            `hl7:"21,len=20,display=Mother's Identifier"`
	EthnicGroup                 ID             `hl7:"22,len=1,table=0189,display=Ethnic Group"`
	BirthPlace                  ST             `hl7:"23,len=25,display=Birth Place"`
	MultipleBirthIndicator      ID             `hl7:"24,len=2,table=0136,display=Multiple Birth Indicator"`
	BirthOrder                  NM             `hl7:"25,len=2,display=Birth Order"`
	Citizenship                 []ID           `hl7:"26,len=3,table=0171,display=Citizenship"`
	VeteransMilitaryStatus      *CE            `hl7:"27,len=60,table=0172,display=Veterans Military Status"`
}

// Procedures
//
// The PR1 segment contains information relative to various types of procedures that can be performed on a patient.  For example:
// Surgical, Nuclear Medicine, X-Ray with contrast, etc
type PR1 struct {
	HL7                   HL7Name           `hl7:",name=PR1,type=s"`
	SetIDProcedure        SI                `hl7:"1,required,len=4,display=Set Id - Procedure"`
	ProcedureCodingMethod []ID              `hl7:"2,required,len=2,table=0089,display=Procedure Coding Method"`
	ProcedureCode         []ID              `hl7:"3,required,len=10,table=0088,display=Procedure Code"`
	ProcedureDescription  []ST              `hl7:"4,len=40,display=Procedure Description"`
	ProcedureDateTime     TS                `hl7:"5,required,len=26,format=YMDHMS,display=Procedure Date / Time"`
	ProcedureType         ID                `hl7:"6,required,len=2,table=0090,display=Procedure Type"`
	ProcedureMinutes      NM                `hl7:"7,len=4,display=Procedure Minutes"`
	Anesthesiologist      CN_PERSON         `hl7:"8,len=60,table=0010,display=Anesthesiologist"`
	AnesthesiaCode        ID                `hl7:"9,len=2,table=0019,display=Anesthesia Code"`
	AnesthesiaMinutes     NM                `hl7:"10,len=4,display=Anesthesia Minutes"`
	Surgeon               CN_PERSON         `hl7:"11,len=60,table=0010,display=Surgeon"`
	ProcedurePractitioner []CM_PRACTITIONER `hl7:"12,len=60,table=0010,display=Procedure Practitioner"`
	ConsentCode           ID                `hl7:"13,len=2,table=0059,display=Consent Code"`
	ProcedurePriority     NM                `hl7:"14,len=2,display=Procedure Priority"`
}

// Patient Visit
//
// The PV1 segment is used by Registration/ADT applications to communicate information on a visit specific basis.  This segment
// can be used to send multiple visit statistic records to the same patient account, or single visit records to more than one
// account.  Individual sites must determine this segment's use
type PV1 struct {
	HL7                     HL7Name               `hl7:",name=PV1,type=s"`
	SetIDPatientVisit       SI                    `hl7:"1,len=4,display=Set Id - Patient Visit"`
	PatientClass            ID                    `hl7:"2,required,len=1,table=0004,display=Patient Class"`
	AssignedPatientLocation *CM_INTERNAL_LOCATION `hl7:"3,len=12,table=0079,display=Assigned Patient Location"`
	AdmissionType           ID                    `hl7:"4,len=2,table=0007,display=Admission Type"`
	PreadmitNumber          ST                    `hl7:"5,len=20,display=Preadmit Number"`
	PriorPatientLocation    *CM_INTERNAL_LOCATION `hl7:"6,len=12,display=Prior Patient Location"`
	AttendingDoctor         *CN_PHYSICIAN         `hl7:"7,len=60,table=0010,display=Attending Doctor"`
	ReferringDoctor         *CN_PHYSICIAN         `hl7:"8,len=60,table=0010,display=Referring Doctor"`
	ConsultingDoctor        []CN_PHYSICIAN        `hl7:"9,len=60,table=0010,display=Consulting Doctor"`
	HospitalService         ID                    `hl7:"10,len=3,table=0069,display=Hospital Service"`
	TemporaryLocation       *CM_INTERNAL_LOCATION `hl7:"11,len=12,table=0079,display=Temporary Location"`
	PreadmitTestIndicator   ID                    `hl7:"12,len=2,table=0087,display=Preadmit Test Indicator"`
	ReadmissionIndicator    ID                    `hl7:"13,len=2,table=0092,display=Readmission Indicator"`
	AdmitSource             ID                    `hl7:"14,len=3,table=0023,display=Admit Source"`
	AmbulatoryStatus        []ID                  `hl7:"15,len=2,table=0009,display=Ambulatory Status"`
	VipIndicator            ID                    `hl7:"16,len=2,table=0099,display=Vip Indicator"`
	AdmittingDoctor         *CN_PHYSICIAN         `hl7:"17,len=60,table=0010,display=Admitting Doctor"`
	PatientType             ID                    `hl7:"18,len=2,table=0018,display=Patient Type"`
	VisitNumber             *CM_PAT_ID            `hl7:"19,len=15,display=Visit Number"`
	FinancialClass          []CM_FINANCE          `hl7:"20,max=4,len=50,display=Financial Class"`
	ChargePriceIndicator    ID                    `hl7:"21,len=2,table=0032,display=Charge Price Indicator"`
	CourtesyCode            ID                    `hl7:"22,len=2,table=0045,display=Courtesy Code"`
	CreditRating            ID                    `hl7:"23,len=2,table=0046,display=Credit Rating"`
	ContractCode            []ID                  `hl7:"24,len=2,table=0044,display=Contract Code"`
	ContractEffectiveDate   []DT                  `hl7:"25,len=8,format=YMD,display=Contract Effective Date"`
	ContractAmount          []NM                  `hl7:"26,len=12,display=Contract Amount"`
	ContractPeriod          []NM                  `hl7:"27,len=3,display=Contract Period"`
	InterestCode            ID                    `hl7:"28,len=2,table=0073,display=Interest Code"`
	TransferToBadDebtCode   ID                    `hl7:"29,len=1,table=0110,display=Transfer To Bad Debt - Code"`
	TransferToBadDebtDate   DT                    `hl7:"30,len=8,format=YMD,display=Transfer To Bad Debt - Date"`
	BadDebtAgencyCode       ID                    `hl7:"31,len=10,table=0021,display=Bad Debt Agency Code"`
	BadDebtTransferAmount   NM                    `hl7:"32,len=12,display=Bad Debt Transfer Amount"`
	BadDebtRecoveryAmount   NM                    `hl7:"33,len=12,display=Bad Debt Recovery Amount"`
	DeleteAccountIndicator  ID                    `hl7:"34,len=1,table=0111,display=Delete Account Indicator"`
	DeleteAccountDate       DT                    `hl7:"35,len=8,format=YMD,display=Delete Account Date"`
	DischargeDisposition    ID                    `hl7:"36,len=3,table=0112,display=Discharge Disposition"`
	DischargedToLocation    *CM_DLD               `hl7:"37,len=25,display=Discharged To Location"`
	DietType                ID                    `hl7:"38,len=2,table=0114,display=Diet Type"`
	ServicingFacility       ID                    `hl7:"39,len=4,table=0115,display=Servicing Facility"`
	BedStatus               ID                    `hl7:"40,len=1,table=0116,display=Bed Status"`
	AccountStatus           ID                    `hl7:"41,len=2,table=0117,display=Account Status"`
	PendingLocation         *CM_INTERNAL_LOCATION `hl7:"42,len=12,display=Pending Location"`
	PriorTemporaryLocation  *CM_INTERNAL_LOCATION `hl7:"43,len=12,display=Prior Temporary Location"`
	AdmitDateTime           TS                    `hl7:"44,len=26,format=YMDHMS,display=Admit Date / Time"`
	DischargeDateTime       TS                    `hl7:"45,len=26,format=YMDHMS,display=Discharge Date / Time"`
	CurrentPatientBalance   NM                    `hl7:"46,len=12,display=Current Patient Balance"`
	TotalCharges            NM                    `hl7:"47,len=12,display=Total Charges"`
	TotalAdjustments        NM                    `hl7:"48,len=12,display=Total Adjustments"`
	TotalPayments           NM                    `hl7:"49,len=12,display=Total Payments"`
	AlternateVisitID        *CM_PAT_ID_0192       `hl7:"50,len=20,display=Alternate Visit Id"`
}

// Patient Visit - Additional Information
//
// The PV2 segment is a continuation of visit specific information contained on the PV1 segment.
type PV2 struct {
	HL7                      HL7Name               `hl7:",name=PV2,type=s"`
	PriorPendingLocation     *CM_INTERNAL_LOCATION `hl7:"1,len=12,display=Prior Pending Location"`
	AccommodationCode        *CE                   `hl7:"2,len=60,table=0129,display=Accommodation Code"`
	AdmitReason              *CE                   `hl7:"3,len=60,display=Admit Reason"`
	TransferReason           *CE                   `hl7:"4,len=60,display=Transfer Reason"`
	PatientValuables         []ST                  `hl7:"5,len=25,display=Patient Valuables"`
	PatientValuablesLocation ST                    `hl7:"6,len=25,display=Patient Valuables Location"`
	VisitUserCode            ID                    `hl7:"7,len=2,table=0130,display=Visit User Code"`
	ExpectedAdmitDate        DT                    `hl7:"8,len=8,format=YMD,display=Expected Admit Date"`
	ExpectedDischargeDate    DT                    `hl7:"9,len=8,format=YMD,display=Expected Discharge Date"`
}

// Query Definition
type QRD struct {
	HL7                        HL7Name `hl7:",name=QRD,type=s"`
	QueryDateTime              TS      `hl7:"1,required,len=26,format=YMDHMS,display=Query Date / Time"`
	QueryFormatCode            ID      `hl7:"2,required,len=1,table=0106,display=Query Format Code"`
	QueryPriority              ID      `hl7:"3,required,len=1,table=0091,display=Query Priority"`
	QueryID                    ST      `hl7:"4,required,len=10,display=Query Id"`
	DeferredResponseType       ID      `hl7:"5,len=1,table=0107,display=Deferred Response Type"`
	DeferredResponseDateTime   TS      `hl7:"6,len=26,format=YMDHMS,display=Deferred Response Date / Time"`
	QuantityLimitedRequest     CQ      `hl7:"7,required,len=10,display=Quantity Limited Request"`
	WhoSubjectFilter           []ST    `hl7:"8,required,len=20,display=Who Subject Filter"`
	WhatSubjectFilter          []ID    `hl7:"9,required,len=3,table=0048,display=What Subject Filter"`
	WhatDepartmentDataCode     []ST    `hl7:"10,required,len=20,display=What Department Data Code"`
	WhatDataCodeValueQualifier []CM_VR `hl7:"11,len=20,display=What Data Code Value Qualifier"`
	QueryResultsLevel          ID      `hl7:"12,len=1,table=0108,display=Query Results Level"`
}

// Query Filter
//
// The QRF segment is used with the QRD segment to refine the content of a query further
type QRF struct {
	HL7                          HL7Name `hl7:",name=QRF,type=s"`
	WhereSubjectFilter           []ST    `hl7:"1,required,len=20,display=Where Subject Filter"`
	WhenDataStartDateTime        TS      `hl7:"2,len=26,format=YMDHMS,display=When Data Start Date / Time"`
	WhenDataEndDateTime          TS      `hl7:"3,len=26,format=YMDHMS,display=When Data End Date / Time"`
	WhatUserQualifier            []ST    `hl7:"4,len=20,display=What User Qualifier"`
	OtherQrySubjectFilter        []ST    `hl7:"5,len=20,display=Other Qry Subject Filter"`
	WhichDateTimeQualifier       []ID    `hl7:"6,len=12,table=0156,display=Which Date / Time Qualifier"`
	WhichDateTimeStatusQualifier []ID    `hl7:"7,len=12,table=0157,display=Which Date / Time Status Qualifier"`
	DateTimeSelectionQualifier   []ID    `hl7:"8,len=12,table=0158,display=Date / Time Selection Qualifier"`
}

// Requisition Detail 1
//
// RQ1 contains additional detail for each nonstock requisitioned item. This segment definition is paired with a preceeding
// RQD segment.
type RQ1 struct {
	HL7                  HL7Name `hl7:",name=RQ1,type=s"`
	AnticipatedPrice     SI      `hl7:"1,len=10,display=Anticipated Price"`
	ManufacturerID       *CE     `hl7:"2,len=60,display=Manufacturer Id"`
	ManufacturersCatalog ST      `hl7:"3,len=16,display=Manufacturer's Catalog"`
	VendorID             *CE     `hl7:"4,len=60,display=Vendor Id"`
	VendorCatalog        ST      `hl7:"5,len=16,display=Vendor Catalog"`
	Taxable              ID      `hl7:"6,len=1,table=0136,display=Taxable"`
	SubstituteAllowed    ID      `hl7:"7,len=1,table=0136,display=Substitute Allowed"`
}

// Requisition Detail
//
// RQD contains the detail for each requisitioned item.
type RQD struct {
	HL7                      HL7Name `hl7:",name=RQD,type=s"`
	RequisitionLineNumber    SI      `hl7:"1,len=4,display=Requisition Line Number"`
	ItemCodeInternal         *CE     `hl7:"2,len=60,display=Item Code - Internal"`
	ItemCodeExternal         *CE     `hl7:"3,len=60,display=Item Code - External"`
	HospitalItemCode         *CE     `hl7:"4,len=60,display=Hospital Item Code"`
	RequisitionQuantity      NM      `hl7:"5,len=6,display=Requisition Quantity"`
	RequisitionUnitOfMeasure *CE     `hl7:"6,len=60,display=Requisition Unit Of Measure"`
	DepartmentCostCenter     ID      `hl7:"7,len=30,display=Department Cost Center"`
	ItemNaturalAccountCode   ID      `hl7:"8,len=30,display=Item Natural Account Code"`
	DeliverToID              *CE     `hl7:"9,len=60,display=Deliver-to Id"`
	DateNeeded               DT      `hl7:"10,len=8,format=YMD,display=Date Needed"`
}

// Pharmacy Aadministration
//
// The ORC must have the filler order number and the order control code RE.  As a site-specific variant, the RXO and associated
// RXCs and/or the RXE (and associated RXCs) may be present if the receiving application needs any of their data.  The RXA carries
// the administration data.
type RXA struct {
	HL7                           HL7Name    `hl7:",name=RXA,type=s"`
	GiveSubIDCounter              NM         `hl7:"1,required,len=4,display=Give Sub-id Counter"`
	AdministrationSubIDCounter    NM         `hl7:"2,required,len=4,display=Administration Sub-id Counter"`
	DateTimeStartOfAdministration TS         `hl7:"3,required,len=26,format=YMDHMS,display=Date / Time Start Of Administration"`
	DateTimeEndOfAdministration   TS         `hl7:"4,required,len=26,format=YMDHMS,display=Date / Time End Of Administration"`
	AdministeredCode              CE         `hl7:"5,required,len=100,display=Administered Code"`
	AdministeredAmount            NM         `hl7:"6,required,len=20,display=Administered Amount"`
	AdministeredUnits             *CE        `hl7:"7,conditional,len=60,display=Administered Units"`
	AdministeredDosageForm        *CE        `hl7:"8,len=60,display=Administered Dosage Form"`
	AdministrationNotes           []ST       `hl7:"9,conditional,len=200,display=Administration Notes"`
	AdministeringProvider         *CN_PERSON `hl7:"10,len=200,display=Administering Provider"`
	AdministeredAtLocation        *CM_LA1    `hl7:"11,conditional,len=12,display=Administered-at Location"`
	AdministeredPerTimeUnit       ST         `hl7:"12,conditional,len=20,display=Administered Per (time Unit)"`
}

// Pharmacy Component Order
//
// If the drug ordered with the RXO segment is a compound drug OR an IV solution, AND there is not a coded value for the Universal
// Service ID which specifies the components (base and all additives), then the components (the base and additives) are specified
// by two or more RXC segments.  The policy of the Pharmacy application on substitutions at the RXC level is identical to that
// for the RXO level.
type RXC struct {
	HL7             HL7Name `hl7:",name=RXC,type=s"`
	RxComponentType ID      `hl7:"1,required,len=1,table=0166,display=Rx Component Type"`
	ComponentCode   CE      `hl7:"2,required,len=100,display=Component Code"`
	ComponentAmount NM      `hl7:"3,required,len=20,display=Component Amount"`
	ComponentUnits  CE      `hl7:"4,required,len=20,display=Component Units"`
}

// Pharmacy Dispense
type RXD struct {
	HL7                                   HL7Name    `hl7:",name=RXD,type=s"`
	DispenseSubIDCounter                  NM         `hl7:"1,required,len=4,display=Dispense Sub-id Counter"`
	DispenseGiveCode                      CE         `hl7:"2,required,len=100,display=Dispense / Give Code"`
	DateTimeDispensed                     TS         `hl7:"3,required,len=26,format=YMDHMS,display=Date / Time Dispensed"`
	ActualDispenseAmount                  NM         `hl7:"4,required,len=20,display=Actual Dispense Amount"`
	ActualDispenseUnits                   *CE        `hl7:"5,conditional,len=60,display=Actual Dispense Units"`
	ActualDosageForm                      *CE        `hl7:"6,len=60,display=Actual Dosage Form"`
	PrescriptionNumber                    NM         `hl7:"7,conditional,len=20,display=Prescription Number"`
	NumberOfRefillsRemaining              NM         `hl7:"8,conditional,len=20,display=Number Of Refills Remaining"`
	DispenseNotes                         []ST       `hl7:"9,conditional,len=200,display=Dispense Notes"`
	DispensingProvider                    *CN_PERSON `hl7:"10,len=200,display=Dispensing Provider"`
	SubstitutionStatus                    ID         `hl7:"11,len=1,table=0167,display=Substitution Status"`
	TotalDailyDose                        NM         `hl7:"12,len=10,display=Total Daily Dose"`
	DispenseToLocation                    *CM_LA1    `hl7:"13,conditional,len=12,display=Dispense-to location"`
	NeedsHumanReview                      ID         `hl7:"14,len=1,table=0136,display=Needs Human Review"`
	PharmacySpecialDispensingInstructions []CE       `hl7:"15,len=200,display=Pharmacy Special Dispensing Instructions"`
}

// Pharmacy Encoded Order
//
// The RXE segment details the pharmacy application's encoding of the order.  It also contains several pharmacyspecific
// order status fields, such as RXE-16-number of refills remaining, RXE-17-number of refills/doses dispensed, RXE-18-date/time
// of most recent refill/dose, and RXE-19-total daily dose.
type RXE struct {
	HL7                                       HL7Name    `hl7:",name=RXE,type=s"`
	QuantityTiming                            TQ         `hl7:"1,required,len=200,display=Quantity / Timing"`
	GiveCode                                  CE         `hl7:"2,required,len=100,display=Give Code"`
	GiveAmountMinimum                         NM         `hl7:"3,required,len=20,display=Give Amount - Minimum"`
	GiveAmountMaximum                         NM         `hl7:"4,len=20,display=Give Amount - Maximum"`
	GiveUnits                                 CE         `hl7:"5,required,len=60,display=Give Units"`
	GiveDosageForm                            *CE        `hl7:"6,len=60,display=Give Dosage Form"`
	ProvidersAdministrationInstructions       []CE       `hl7:"7,len=200,display=Provider's Administration Instructions"`
	DeliverToLocation                         *CM_LA1    `hl7:"8,conditional,len=12,display=Deliver-to Location"`
	SubstitutionStatus                        ID         `hl7:"9,len=1,table=0167,display=Substitution Status"`
	DispenseAmount                            NM         `hl7:"10,conditional,len=20,display=Dispense Amount"`
	DispenseUnits                             *CE        `hl7:"11,conditional,len=60,display=Dispense Units"`
	NumberOfRefills                           NM         `hl7:"12,len=3,display=Number Of Refills"`
	OrderingProvidersDeaNumber                *CN_PERSON `hl7:"13,conditional,len=60,display=Ordering Provider's Dea Number"`
	PharmacistVerifierID                      *CN_PERSON `hl7:"14,conditional,len=60,display=Pharmacist Verifier Id"`
	PrescriptionNumber                        ST         `hl7:"15,required,len=20,display=Prescription Number"`
	NumberOfRefillsRemaining                  NM         `hl7:"16,conditional,len=20,display=Number Of Refills Remaining"`
	NumberOfRefillsDosesDispensed             NM         `hl7:"17,conditional,len=20,display=Number Of Refills / Doses Dispensed"`
	DateTimeOfMostRecentRefillOrDoseDispensed TS         `hl7:"18,conditional,len=26,format=YMDHMS,display=Date / Time Of Most Recent Refill Or Dose Dispensed"`
	TotalDailyDose                            *CQ        `hl7:"19,len=10,display=Total Daily Dose"`
	NeedsHumanReview                          ID         `hl7:"20,len=1,table=0136,display=Needs Human Review"`
	PharmacySpecialDispensingInstructions     []CE       `hl7:"21,len=200,display=Pharmacy Special Dispensing Instructions"`
	GivePerTimeUnit                           ST         `hl7:"22,conditional,len=20,display=Give Per (time Unit)"`
	GiveRateAmount                            *CE        `hl7:"23,len=6,display=Give Rate Amount"`
	GiveRateUnits                             *CE        `hl7:"24,len=60,display=Give Rate Units"`
}

// Pharmacy Give
type RXG struct {
	HL7                                       HL7Name `hl7:",name=RXG,type=s"`
	GiveSubIDCounter                          NM      `hl7:"1,required,len=4,display=Give Sub-id Counter"`
	DispenseSubIDCounter                      NM      `hl7:"2,len=4,display=Dispense Sub-id Counter"`
	QuantityTiming                            TQ      `hl7:"3,required,len=200,display=Quantity / Timing"`
	GiveCode                                  CE      `hl7:"4,required,len=100,display=Give Code"`
	GiveAmountMinimum                         NM      `hl7:"5,required,len=20,display=Give Amount - Minimum"`
	GiveAmountMaximum                         NM      `hl7:"6,len=20,display=Give Amount - Maximum"`
	GiveUnits                                 CE      `hl7:"7,required,len=60,display=Give Units"`
	GiveDosageForm                            *CE     `hl7:"8,len=60,display=Give Dosage Form"`
	AdministrationNotes                       []ST    `hl7:"9,conditional,len=200,display=Administration Notes"`
	SubstitutionStatus                        ID      `hl7:"10,len=1,table=0167,display=Substitution Status"`
	DispenseToLocation                        *CM_LA1 `hl7:"11,conditional,len=12,display=Dispense-to location"`
	NeedsHumanReview                          ID      `hl7:"12,len=1,table=0136,display=Needs Human Review"`
	PharmacySpecialAdministrationInstructions []CE    `hl7:"13,len=200,display=Pharmacy Special Administration Instructions"`
	GivePerTimeUnit                           ST      `hl7:"14,conditional,len=20,display=Give Per (time Unit)"`
	GiveRateAmount                            *CE     `hl7:"15,len=6,display=Give Rate Amount"`
	GiveRateUnits                             *CE     `hl7:"16,len=60,display=Give Rate Units"`
}

// Pharmacy Prescription Order
//
// This is the "master" pharmacy order segment.  It contains order data not specific to components or additives.  Unlike the
// OBR, it does not contain status fields or other data that are results-only.
//
// It can be used for any type of pharmacy order, including inpatient (unit dose and compound unit dose), outpatient, IVs,
// and hyperalimentation IVs (nutritional IVs).
//
// In addition to the pharmaceutical information, this segment contains additional data such as provider and text comments.
type RXO struct {
	HL7                                 HL7Name    `hl7:",name=RXO,type=s"`
	RequestedGiveCode                   CE         `hl7:"1,required,len=100,display=Requested Give Code"`
	RequestedGiveAmountMinimum          NM         `hl7:"2,required,len=20,display=Requested Give Amount - Minimum"`
	RequestedGiveAmountMaximum          NM         `hl7:"3,len=20,display=Requested Give Amount - Maximum"`
	RequestedGiveUnits                  CE         `hl7:"4,required,len=60,display=Requested Give Units"`
	RequestedDosageForm                 *CE        `hl7:"5,len=60,display=Requested Dosage Form"`
	ProvidersPharmacyInstructions       []CE       `hl7:"6,len=200,display=Provider's Pharmacy Instructions"`
	ProvidersAdministrationInstructions []CE       `hl7:"7,len=200,display=Provider's Administration Instructions"`
	DeliverToLocation                   *CM_LA1    `hl7:"8,conditional,len=12,display=Deliver-to Location"`
	AllowSubstitutions                  ID         `hl7:"9,len=1,table=0161,display=Allow Substitutions"`
	RequestedDispenseCode               *CE        `hl7:"10,conditional,len=100,display=Requested Dispense Code"`
	RequestedDispenseAmount             NM         `hl7:"11,conditional,len=20,display=Requested Dispense Amount"`
	RequestedDispenseUnits              *CE        `hl7:"12,conditional,len=60,display=Requested Dispense Units"`
	NumberOfRefills                     NM         `hl7:"13,len=3,display=Number Of Refills"`
	OrderingProvidersDeaNumber          *CN_PERSON `hl7:"14,conditional,len=60,display=Ordering Provider's Dea Number"`
	PharmacistVerifierID                *CN_PERSON `hl7:"15,conditional,len=60,display=Pharmacist Verifier Id"`
	NeedsHumanReview                    ID         `hl7:"16,len=1,table=0136,display=Needs Human Review"`
	RequestedGivePerTimeUnit            ST         `hl7:"17,conditional,len=20,display=Requested Give Per (time Unit)"`
}

// Pharmacy Route
//
// The Pharmacy Route segment contains the alternative combination of route, site, administration device, and administration
// method that are prescribed.  The pharmacy and/or nursing staff has a choice between the routes based on either their professional
// judgment or administration instructions provided by the physician
type RXR struct {
	HL7                  HL7Name `hl7:",name=RXR,type=s"`
	Route                CE      `hl7:"1,required,len=60,table=0162,display=Route"`
	Site                 *CE     `hl7:"2,len=60,table=0163,display=Site"`
	AdministrationDevice *CE     `hl7:"3,len=60,table=0164,display=Administration Device"`
	AdministrationMethod *CE     `hl7:"4,len=60,table=0165,display=Administration Method"`
}

// Ub82 Data
//
// The UB1 segment contains data necessary to complete UB82 bills.  Only UB82 data elements that do not exist in other HL7 defined
// segments will appear in this segment.  Patient name and Date of Birth are required for UB82 billing, however, they are included
// in the PID segment and therefore do not appear here
type UB1 struct {
	HL7                       HL7Name  `hl7:",name=UB1,type=s"`
	SetIDUb82                 SI       `hl7:"1,len=4,display=Set Id - Ub82"`
	BloodDeductible43         NM       `hl7:"2,len=1,display=Blood Deductible (43)"`
	BloodFurnishedPintsOf40   NM       `hl7:"3,len=2,display=Blood Furnished Pints Of (40)"`
	BloodReplacedPints41      NM       `hl7:"4,len=2,display=Blood Replaced Pints (41)"`
	BloodNotReplacedPints42   NM       `hl7:"5,len=2,display=Blood Not Replaced Pints (42)"`
	CoInsuranceDays25         NM       `hl7:"6,len=2,display=Co-insurance Days (25)"`
	ConditionCode3539         []ID     `hl7:"7,max=5,len=2,table=0043,display=Condition Code (35-39)"`
	CoveredDays23             NM       `hl7:"8,len=3,display=Covered Days (23)"`
	NonCoveredDays24          NM       `hl7:"9,len=3,display=Non-covered Days (24)"`
	ValueAmountAndCode4649    []CM_UVC `hl7:"10,max=8,len=12,display=Value Amount And Code (46-49)"`
	NumberOfGraceDays90       NM       `hl7:"11,len=2,display=Number Of Grace Days (90)"`
	SpecialProgramIndicator44 ID       `hl7:"12,len=2,display=Special Program Indicator (44)"`
	PsroUrApprovalIndicator87 ID       `hl7:"13,len=1,display=Psro / Ur Approval Indicator (87)"`
	PsroUrApprovedStayFrom88  DT       `hl7:"14,len=8,format=YMD,display=Psro / Ur Approved Stay - From (88)"`
	PsroUrApprovedStayTo89    DT       `hl7:"15,len=8,format=YMD,display=Psro / Ur Approved Stay - To (89)"`
	Occurrence2832            []CM_OCD `hl7:"16,max=5,len=20,display=Occurrence (28-32)"`
	OccurrenceSpan33          ID       `hl7:"17,len=2,display=Occurrence Span (33)"`
	OccurrenceSpanStartDate33 DT       `hl7:"18,len=8,format=YMD,display=Occurrence Span Start Date (33)"`
	OccurrenceSpanEndDate33   DT       `hl7:"19,len=8,format=YMD,display=Occurrence Span End Date (33)"`
	Ub82Locator2              ST       `hl7:"20,len=30,display=Ub-82 Locator 2"`
	Ub82Locator9              ST       `hl7:"21,len=7,display=Ub-82 Locator 9"`
	Ub82Locator27             ST       `hl7:"22,len=8,display=Ub-82 Locator 27"`
	Ub82Locator45             ST       `hl7:"23,len=17,display=Ub-82 Locator 45"`
}

// Ub92 Data
//
// The UB2 segment contains data necessary to complete UB92 bills.  Only UB92 data elements that do not exist in other HL7 defined
// segments will appear in this segment.  Just as with the UB82 billing, Patient Name and Date of Birth are required, they are
// included in the PID segment and therefore do not appear here.  Where the field locators are different on the UB92, when compared
// to the UB82, the element is listed with its new location in parentheses ().
type UB2 struct {
	HL7                       HL7Name  `hl7:",name=UB2,type=s"`
	SetIDUb92                 SI       `hl7:"1,len=4,display=Set Id - Ub92"`
	CoInsuranceDays9          ST       `hl7:"2,len=3,display=Co-insurance Days (9)"`
	ConditionCode2430         []ID     `hl7:"3,max=7,len=2,table=0043,display=Condition Code (24-30)"`
	CoveredDays7              ST       `hl7:"4,len=3,display=Covered Days (7)"`
	NonCoveredDays8           ST       `hl7:"5,len=4,display=Non-covered Days (8)"`
	ValueAmountAndCode3941    []CM_UVC `hl7:"6,max=12,len=11,display=Value Amount And Code (39-41)"`
	OccurrenceCodeAndDate3235 []CM_OCD `hl7:"7,max=8,len=11,display=Occurrence Code And Date (32-35)"`
	OccurrenceSpanCodeDates36 []CM_OSP `hl7:"8,max=2,len=28,display=Occurrence Span Code / Dates (36)"`
	Ub92Locator2State         []ST     `hl7:"9,max=2,len=29,display=Ub92 Locator 2 (state)"`
	Ub92Locator11State        []ST     `hl7:"10,max=2,len=12,display=Ub92 Locator 11 (state)"`
	Ub92Locator31National     ST       `hl7:"11,len=5,display=Ub92 Locator 31 (national)"`
	DocumentControlNumber37   []ST     `hl7:"12,max=3,len=23,display=Document Control Number (37)"`
	Ub92Locator49National     []ST     `hl7:"13,max=23,len=4,display=Ub92 Locator 49 (national)"`
	Ub92Locator56State        []ST     `hl7:"14,max=5,len=14,display=Ub92 Locator 56 (state)"`
	Ub92Locator57National     ST       `hl7:"15,len=27,display=Ub92 Locator 57 (national)"`
	Ub92Locator78State        []ST     `hl7:"16,max=2,len=2,display=Ub92 Locator 78 (state)"`
}

// Results/update Definition
//
// The URD segment is used in sending unsolicited updates about orders and results.  It's purpose is similar to that of the QRD
// segment, but from the results/unsolicited update point of view. Some of the fields have parallels in the QRD segment
type URD struct {
	HL7                     HL7Name `hl7:",name=URD,type=s"`
	RUDateTime              TS      `hl7:"1,len=26,format=YMDHMS,display=R/U Date / Time"`
	ReportPriority          ID      `hl7:"2,len=1,table=0109,display=Report Priority"`
	RUWhoSubjectDefinition  []ST    `hl7:"3,required,len=20,display=R/U Who Subject Definition"`
	RUWhatSubjectDefinition []ID    `hl7:"4,len=3,table=0048,display=R/U What Subject Definition"`
	RUWhatDepartmentCode    []ST    `hl7:"5,len=20,display=R/U What Department Code"`
	RUDisplayPrintLocations []ST    `hl7:"6,len=20,display=R/U Display / Print Locations"`
	RUResultsLevel          ID      `hl7:"7,len=1,table=0108,display=R/U Results Level"`
}

// Unsolicited Selection
//
// The URS segment is identical with the QRF segment, except that, if the name of any field contains Query (of QRY), this word
// has been changed to Results (See URS-5-R/U other results subject definition).
type URS struct {
	HL7                             HL7Name `hl7:",name=URS,type=s"`
	RUWhereSubjectDefinition        []ST    `hl7:"1,required,len=20,display=R/U Where Subject Definition"`
	RUWhenDataStartDateTime         TS      `hl7:"2,len=26,format=YMDHMS,display=R/U When Data Start Date / Time"`
	RUWhenDataEndDateTime           TS      `hl7:"3,len=26,format=YMDHMS,display=R/U When Data End Date / Time"`
	RUWhatUserQualifier             []ST    `hl7:"4,len=20,display=R/U What User Qualifier"`
	RUOtherResultsSubjectDefinition []ST    `hl7:"5,len=20,display=R/U Other Results Subject Definition"`
	RUWhichDateTimeQualifier        []ID    `hl7:"6,len=12,table=0156,display=R/U Which Date / Time Qualifier"`
	RUWhichDateTimeStatusQualifier  []ID    `hl7:"7,len=12,table=0157,display=R/U Which Date / Time Status Qualifier"`
	RUDateTimeSelectionQualifier    []ID    `hl7:"8,len=12,table=0158,display=R/U Date / Time Selection Qualifier"`
}

// Any Z Segment
type Zxx struct {
	HL7   HL7Name `hl7:",name=Zxx,type=s"`
	Value ST      `hl7:"1,display=Zxx.1"`
}
