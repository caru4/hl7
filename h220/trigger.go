// Code generated by "hl7fetch -pkgdir h220 -root ./genjson -version 2.2"; DO NOT EDIT.

package h220

// General acknowledgement
//
// The simple general acknowledgement (ACK) can be used where the application does not define a special application level
// acknowledgement message or where there has been an error that precludes application processing.  It is also used for accept
// level acknowlegements.
type ACK struct {
	HL7 HL7Name `hl7:",name=ACK,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,required,display=Message Acknowledgment"`
	ERR *ERR    `hl7:"3,display=Error"`
}

// QueryResponse
type ADR_A19_QueryResponse struct {
	HL7       HL7Name             `hl7:",name=ADR_A19_QueryResponse,type=tg"`
	EVN       *EVN                `hl7:"5,display=Event Type"`
	PID       *PID                `hl7:"6,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"7,display=Next Of Kin"`
	PV1       *PV1                `hl7:"8,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"9,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"10,display=Observation Result"`
	AL1       []AL1               `hl7:"11,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"12,display=Diagnosis"`
	PR1       []PR1               `hl7:"13,display=Procedures"`
	GT1       []GT1               `hl7:"14,display=Guarantor"`
	Insurance []ADR_A19_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"18,display=Accident"`
	UB1       *UB1                `hl7:"19,display=Ub82 Data"`
	UB2       *UB2                `hl7:"20,display=Ub92 Data"`
}

// Insurance
type ADR_A19_Insurance struct {
	HL7 HL7Name `hl7:",name=ADR_A19_Insurance,type=tg"`
	IN1 *IN1    `hl7:"15,required,display=Insurance"`
	IN2 *IN2    `hl7:"16,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"17,display=Insurance Additional Info-certification"`
}

// Patient query
//
// The following trigger event is served by QRY (a query from another system) and ADR (a response from an Patient Administration
// system.)
//
// Another application determines a need for Patient Administration data about a patient and sends a query to the Patient
// Administration system.  The Who Filter in the QRD can identify the patient or account number upon which the query is defined
// and can contain a format code of “R” (record-oriented).  If the query is based on the Patient ID and there are data associated
// with multiple accounts, the problem of which account data should be returned becomes an implementation issue.  The ADT
// event-type segment, if included in the response, describes the last event for which the Patient Administration system
// initiated an unsolicited update
type ADR_A19 struct {
	HL7           HL7Name                 `hl7:",name=ADR_A19,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	MSA           *MSA                    `hl7:"2,required,display=Message Acknowledgment"`
	ERR           *ERR                    `hl7:"3,display=Error"`
	QRD           *QRD                    `hl7:"4,required,display=Query Definition"`
	QueryResponse []ADR_A19_QueryResponse `hl7:",required,display=Query Response"`
	DSC           *DSC                    `hl7:"21,display=Continuation Pointer"`
}

// Insurance
type ADT_A01_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Admit a Patient
//
// Normally entered in the primary ADT system and broadcast to the nursing units and ancillary systems.  Includes short-stay
// and John Doe admissions
type ADT_A01 struct {
	HL7       HL7Name             `hl7:",name=ADT_A01,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Transfer a patient
//
// A patient moves from one location to another
type ADT_A02 struct {
	HL7 HL7Name `hl7:",name=ADT_A02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Discharge a patient
//
// Refers to changing a patient's status from, for example, inpatient to discharged
type ADT_A03 struct {
	HL7 HL7Name `hl7:",name=ADT_A03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Insurance
type ADT_A04_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A04_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Register a Patient
//
// Includes emergency room patients and outpatients
type ADT_A04 struct {
	HL7       HL7Name             `hl7:",name=ADT_A04,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A04_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Insurance
type ADT_A05_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A05_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Pre-admit a Patient
//
// A patient may be pre-admitted for a variety of reasons; e.g., prior to surgery so that they will be able to receive tests administered
// in the lab.  The data may be entered into the surgery scheduling system and passed to the ADT system
type ADT_A05 struct {
	HL7       HL7Name             `hl7:",name=ADT_A05,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A05_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Insurance
type ADT_A06_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A06_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Info-certification"`
}

// Transfer an Outpatient to Inpatient
type ADT_A06 struct {
	HL7       HL7Name             `hl7:",name=ADT_A06,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	MRG       *MRG                `hl7:"4,display=Merge Patient Information"`
	NK1       []NK1               `hl7:"5,display=Next Of Kin"`
	PV1       *PV1                `hl7:"6,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"7,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"8,display=Observation Result"`
	AL1       []AL1               `hl7:"9,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"10,display=Diagnosis"`
	PR1       []PR1               `hl7:"11,display=Procedures"`
	GT1       []GT1               `hl7:"12,display=Guarantor"`
	Insurance []ADT_A06_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"16,display=Accident"`
	UB1       *UB1                `hl7:"17,display=Ub82 Data"`
	UB2       *UB2                `hl7:"18,display=Ub92 Data"`
}

// Insurance
type ADT_A07_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A07_Insurance,type=tg"`
	IN1 *IN1    `hl7:"13,required,display=Insurance"`
	IN2 *IN2    `hl7:"14,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"15,display=Insurance Additional Info-certification"`
}

// Transfer an Inpatient to Outpatient
type ADT_A07 struct {
	HL7       HL7Name             `hl7:",name=ADT_A07,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	MRG       *MRG                `hl7:"4,display=Merge Patient Information"`
	NK1       []NK1               `hl7:"5,display=Next Of Kin"`
	PV1       *PV1                `hl7:"6,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"7,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"8,display=Observation Result"`
	AL1       []AL1               `hl7:"9,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"10,display=Diagnosis"`
	PR1       []PR1               `hl7:"11,display=Procedures"`
	GT1       []GT1               `hl7:"12,display=Guarantor"`
	Insurance []ADT_A07_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"16,display=Accident"`
	UB1       *UB1                `hl7:"17,display=Ub82 Data"`
	UB2       *UB2                `hl7:"18,display=Ub92 Data"`
}

// Insurance
type ADT_A08_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A08_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Update Patient Information
//
// This trigger event is used when any patient information has changed, but no other trigger event has occurred
type ADT_A08 struct {
	HL7       HL7Name             `hl7:",name=ADT_A08,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A08_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Patient Departing
//
// A patient is being moved from his assigned location to a new location.  For example, this can be used when the nursing system
// is not the same as the ADT system or to indicate a patient leaving an outpatient bed.  The DG1 segment remains in this message
// for backwards compatibility only.
type ADT_A09 struct {
	HL7 HL7Name `hl7:",name=ADT_A09,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
	DG1 []DG1   `hl7:"7,display=Diagnosis"`
}

// Patient Arriving
//
// The patient arrives at his new assigned location
type ADT_A10 struct {
	HL7 HL7Name `hl7:",name=ADT_A10,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
	DG1 []DG1   `hl7:"7,display=Diagnosis"`
}

// Cancel Admit
type ADT_A11 struct {
	HL7 HL7Name `hl7:",name=ADT_A11,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
	DG1 []DG1   `hl7:"7,display=Diagnosis"`
}

// Cancel Transfer
//
// New location must show the location of the patient prior to the transfer
type ADT_A12 struct {
	HL7 HL7Name `hl7:",name=ADT_A12,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
	DG1 []DG1   `hl7:"7,display=Diagnosis"`
}

// Insurance
type ADT_A13_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A13_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Cancel Discharge
//
// New location must show the location of the patient prior to the discharge
type ADT_A13 struct {
	HL7       HL7Name             `hl7:",name=ADT_A13,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A13_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Insurance
type ADT_A14_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A14_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Pending Admit
//
// Reservation or when patient admission is to occur imminently.  Similar to a pre-admit
type ADT_A14 struct {
	HL7       HL7Name             `hl7:",name=ADT_A14,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A14_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Pending Transfer
type ADT_A15 struct {
	HL7 HL7Name `hl7:",name=ADT_A15,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
	DG1 []DG1   `hl7:"7,display=Diagnosis"`
}

// Pending Discharge
type ADT_A16 struct {
	HL7 HL7Name `hl7:",name=ADT_A16,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
	DG1 []DG1   `hl7:"7,display=Diagnosis"`
}

// Swap Patients
//
// Used when it is decided that two patients will exchange beds.  The patient ID and visit data are repeated for the two patients
// being swapped.  See Section 3.5.1 for a discussion of issues related to implementing this trigger event.
type ADT_A17 struct {
	HL7  HL7Name `hl7:",name=ADT_A17,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient Identification"`
	PV1  *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2  *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX  []OBX   `hl7:"6,display=Observation Result"`
	PID2 *PID    `hl7:"7,required,display=Patient Identification"`
	PV12 *PV1    `hl7:"8,required,display=Patient Visit"`
	PV22 *PV2    `hl7:"9,display=Patient Visit - Additional Information"`
	OBX2 []OBX   `hl7:"10,display=Observation Result"`
}

// Merge Patient Information
//
// Used to merge current and previous patient identification numbers:  patient ID - internal, patient ID - external, alternate
// patient ID and patient account number.  This is required, for example, when a patient has previously been registered under
// a new patient identification number because of an error or because there was insufficient time to determine the actual
// patient identification number.  The merge event occurs when the decision is made to combine the information under either
// the new or old identifier(s).  It is recommended that events A34, A35 and A36 be utilized in place of the A18 event whenever
// possible.  [Event A18 is being kept for backwards compatibility.]
//
// The PID segment contains the surviving patient ID information.  The MRG segment contains the non-surviving information.
//
type ADT_A18 struct {
	HL7 HL7Name `hl7:",name=ADT_A18,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	MRG *MRG    `hl7:"4,display=Merge Patient Information"`
	PV1 *PV1    `hl7:"5,required,display=Patient Visit"`
}

// Bed Status Update
//
// Certain nursing/census applications need to be able to update the ADT system's bed status.  The following is the associated
// record layout
type ADT_A20 struct {
	HL7 HL7Name `hl7:",name=ADT_A20,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	NPU *NPU    `hl7:"3,required,display=Bed Status Update"`
}

// A Patient Goes On A "Leave Of Absence"
type ADT_A21 struct {
	HL7 HL7Name `hl7:",name=ADT_A21,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// A Patient Returns From A "Leave Of Absence"
type ADT_A22 struct {
	HL7 HL7Name `hl7:",name=ADT_A22,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Delete a Patient Record
//
// Delete visit specific information
type ADT_A23 struct {
	HL7 HL7Name `hl7:",name=ADT_A23,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Link Patient Information
//
// Where the first PID segment needs to be linked to the second PID segment.  See Section 3.5.3 for a discussion of issues related
// to implementing patient link messages
type ADT_A24 struct {
	HL7  HL7Name `hl7:",name=ADT_A24,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient Identification"`
	PV1  *PV1    `hl7:"4,display=Patient Visit"`
	PID2 *PID    `hl7:"5,required,display=Patient Identification"`
	PV12 *PV1    `hl7:"6,display=Patient Visit"`
}

// Cancel Pending Discharge
type ADT_A25 struct {
	HL7 HL7Name `hl7:",name=ADT_A25,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Cancel Pending Transfer
type ADT_A26 struct {
	HL7 HL7Name `hl7:",name=ADT_A26,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Cancel Pending Admit
type ADT_A27 struct {
	HL7 HL7Name `hl7:",name=ADT_A27,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Insurance
type ADT_A28_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A28_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Add person information
//
// The purpose of this message and the three following messages is to allow sites with multiple systems and respective master
// data bases to communicate activity related to a person between systems.  Each system has an interest in the data base activity
// of the others in order to maintain data integrity across an institution.  While defined within the ADT message set, these
// messages differ in that they are not patient specific.
type ADT_A28 struct {
	HL7       HL7Name             `hl7:",name=ADT_A28,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A28_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Delete person information
//
// Delete all demographic information related to this person
type ADT_A29 struct {
	HL7 HL7Name `hl7:",name=ADT_A29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Merge Patient information
type ADT_A30 struct {
	HL7 HL7Name `hl7:",name=ADT_A30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	MRG *MRG    `hl7:"4,required,display=Merge Patient Information"`
}

// Insurance
type ADT_A31_Insurance struct {
	HL7 HL7Name `hl7:",name=ADT_A31_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Update person information
type ADT_A31 struct {
	HL7       HL7Name             `hl7:",name=ADT_A31,type=t"`
	MSH       *MSH                `hl7:"1,required,display=Message Header"`
	EVN       *EVN                `hl7:"2,required,display=Event Type"`
	PID       *PID                `hl7:"3,required,display=Patient Identification"`
	NK1       []NK1               `hl7:"4,display=Next Of Kin"`
	PV1       *PV1                `hl7:"5,required,display=Patient Visit"`
	PV2       *PV2                `hl7:"6,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"7,display=Observation Result"`
	AL1       []AL1               `hl7:"8,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"9,display=Diagnosis"`
	PR1       []PR1               `hl7:"10,display=Procedures"`
	GT1       []GT1               `hl7:"11,display=Guarantor"`
	Insurance []ADT_A31_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Cancel patient arriving
type ADT_A32 struct {
	HL7 HL7Name `hl7:",name=ADT_A32,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// Cancel patient departing
type ADT_A33 struct {
	HL7 HL7Name `hl7:",name=ADT_A33,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,required,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
}

// patient ID only
//
// Only Patient Identification - Internal has changed as a result of the merge.  See Section 3.5.2 for a discussion of issues
// related to implementing merge messages
type ADT_A34 struct {
	HL7 HL7Name `hl7:",name=ADT_A34,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	MRG *MRG    `hl7:"4,required,display=Merge Patient Information"`
}

// account number only
//
// Only Patient Account Number has changed as a result of the merge.  See Section 3.5.2 for a discussion of issues related to
// implementing merge messages
type ADT_A35 struct {
	HL7 HL7Name `hl7:",name=ADT_A35,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	MRG *MRG    `hl7:"4,required,display=Merge Patient Information"`
}

// pat ID and account number
//
// Both Patient Identification - Internal and Patient Account Number have changed as a result of the merge.  See Section 3.5.2
// for a discussion of issues related to implementing merge messages
type ADT_A36 struct {
	HL7 HL7Name `hl7:",name=ADT_A36,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	MRG *MRG    `hl7:"4,required,display=Merge Patient Information"`
}

// unlink patient information
//
// Unlinks two PID segments previously linked via an A24.
type ADT_A37 struct {
	HL7  HL7Name `hl7:",name=ADT_A37,type=t"`
	MSH  *MSH    `hl7:"1,required,display=Message Header"`
	EVN  *EVN    `hl7:"2,required,display=Event Type"`
	PID  *PID    `hl7:"3,required,display=Patient Identification"`
	PV1  *PV1    `hl7:"4,display=Patient Visit"`
	PID2 *PID    `hl7:"5,required,display=Patient Identification"`
	PV12 *PV1    `hl7:"6,display=Patient Visit"`
}

// Visit
type BAR_P01_Visit struct {
	HL7       HL7Name             `hl7:",name=BAR_P01_Visit,type=tg"`
	PV1       *PV1                `hl7:"4,display=Patient Visit"`
	PV2       *PV2                `hl7:"5,display=Patient Visit - Additional Information"`
	OBX       []OBX               `hl7:"6,display=Observation Result"`
	AL1       []AL1               `hl7:"7,display=Patient Allergy Information"`
	DG1       []DG1               `hl7:"8,display=Diagnosis"`
	PR1       []PR1               `hl7:"9,display=Procedures"`
	GT1       []GT1               `hl7:"10,display=Guarantor"`
	NK1       []NK1               `hl7:"11,display=Next Of Kin"`
	Insurance []BAR_P01_Insurance `hl7:",display=Insurance"`
	ACC       *ACC                `hl7:"15,display=Accident"`
	UB1       *UB1                `hl7:"16,display=Ub82 Data"`
	UB2       *UB2                `hl7:"17,display=Ub92 Data"`
}

// Insurance
type BAR_P01_Insurance struct {
	HL7 HL7Name `hl7:",name=BAR_P01_Insurance,type=tg"`
	IN1 *IN1    `hl7:"12,required,display=Insurance"`
	IN2 *IN2    `hl7:"13,display=Insurance Additional Info"`
	IN3 *IN3    `hl7:"14,display=Insurance Additional Info-certification"`
}

// Add and Update Patient Accounts
//
// Data is sent from some application (usually a Registration or an ADT system) to the patient accounting system to establish
// an account for a patient's billing/accounts receivable record.  Many of the segments associated with this event are optional.
// This optionality allows those systems needing these fields to set up transactions which fulfill their requirements yet
// satisfy the HL7 requirements.  Sample event codes are in table 0003 - event type code.
type BAR_P01 struct {
	HL7   HL7Name         `hl7:",name=BAR_P01,type=t"`
	MSH   *MSH            `hl7:"1,required,display=Message Header"`
	EVN   *EVN            `hl7:"2,required,display=Event Type"`
	PID   *PID            `hl7:"3,required,display=Patient Identification"`
	Visit []BAR_P01_Visit `hl7:",required,display=Visit"`
}

// Patient
type BAR_P02_Patient struct {
	HL7 HL7Name `hl7:",name=BAR_P02_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,display=Patient Visit"`
}

// Purge Patient Accounts
//
// Generally, the elimination of all billing/accounts receivable records will be an internal function controlled by the
// financial system.  However, on occasion, there is a need to correct an account, or series of accounts, which may require
// a notice of account deletion to be sent from another sub-system and processed by the financial system.  Although a series
// of accounts may be purged within this one event, it is recommended that only one PID segment per event be sent
type BAR_P02 struct {
	HL7     HL7Name           `hl7:",name=BAR_P02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	EVN     *EVN              `hl7:"2,required,display=Event Type"`
	Patient []BAR_P02_Patient `hl7:",required,display=Patient"`
}

// Post Detail Financial Transactions
//
// The Detail Financial Transaction is used to describe a financial transaction transmitted between systems, ie., to HIS
// for ancillary charges, ADT to HIS for patient deposits, etc.
type DFT_P03 struct {
	HL7 HL7Name `hl7:",name=DFT_P03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	EVN *EVN    `hl7:"2,required,display=Event Type"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	PV1 *PV1    `hl7:"4,display=Patient Visit"`
	PV2 *PV2    `hl7:"5,display=Patient Visit - Additional Information"`
	OBX []OBX   `hl7:"6,display=Observation Result"`
	FT1 []FT1   `hl7:"7,required,display=Financial Transaction"`
}

// Display Response Message
//
// When display data is involved, these trigger events are served by the Query (QRY) and Display Response (DSR) and General
// Acknowledgement (ACK) messages.  When the query is for record-oriented data, the QRY message is used, but the response
// message is specific to a functional area.  Record-oriented queries are described in other chapters.  Display-oriented
// queries are described here.
type DSR_Q01 struct {
	HL7 HL7Name `hl7:",name=DSR_Q01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MFA *MFA    `hl7:"2,required,display=Master File Acknowledgement"`
	ERR *ERR    `hl7:"3,display=Error"`
	QRD *QRD    `hl7:"4,required,display=Query Definition"`
	QRF *QRF    `hl7:"5,display=Query Filter"`
	DSP []DSP   `hl7:"6,required,display=Display Data"`
	DSC *DSC    `hl7:"7,display=Continuation Pointer"`
}

// Deferred Response to A Query
//
// For clarity, A is the system initiating the query and B is the system sending the responses.  Multiple queries and responses
// are permitted within single messages.  The responses to a given query may be broken into several separate DSR messages.
// A single DSR message may contain responses to more than one QRY
type DSR_Q03 struct {
	HL7 HL7Name `hl7:",name=DSR_Q03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,display=Message Acknowledgment"`
	QRD *QRD    `hl7:"3,required,display=Query Definition"`
	QRF *QRF    `hl7:"4,display=Query Filter"`
	DSP []DSP   `hl7:"5,required,display=Display Data"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// oriented results, query/unsol. update
type DSR_R03 struct {
	HL7 HL7Name `hl7:",name=DSR_R03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MSA *MSA    `hl7:"2,display=Message Acknowledgment"`
	QRD *QRD    `hl7:"3,required,display=Query Definition"`
	QRF *QRF    `hl7:"4,display=Query Filter"`
	DSP []DSP   `hl7:"5,required,display=Display Data"`
	DSC *DSC    `hl7:"6,display=Continuation Pointer"`
}

// Delayed acknowledgement
//
// This message remains in the specification only for reasons of backwards compatibility.  It is used as part of the protocol
// which creates a generic form of an asynchronous application level acknowledgement, the MCF message.
type MCF struct {
	HL7 HL7Name `hl7:",name=MCF,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MFA *MFA    `hl7:"2,required,display=Master File Acknowledgement"`
	ERR *ERR    `hl7:"3,display=Error"`
}

// Master files change not otherwise specified (for backwards comp.)
type MFD_M01 struct {
	HL7 HL7Name `hl7:",name=MFD_M01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MFI *MFI    `hl7:"2,required,display=Master File Identification"`
	MFA []MFA   `hl7:"3,display=Master File Acknowledgement"`
}

// Staff Practitioneer
type MFD_M02 struct {
	HL7 HL7Name `hl7:",name=MFD_M02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MFI *MFI    `hl7:"2,required,display=Master File Identification"`
	MFA []MFA   `hl7:"3,display=Master File Acknowledgement"`
}

// Test/Observation
type MFD_M03 struct {
	HL7 HL7Name `hl7:",name=MFD_M03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	MFI *MFI    `hl7:"2,required,display=Master File Identification"`
	MFA []MFA   `hl7:"3,display=Master File Acknowledgement"`
}

// Mf
type MFN_M01_Mf struct {
	HL7 HL7Name `hl7:",name=MFN_M01_Mf,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	Zxx *Zxx    `hl7:"4,display=Any Z Segment"`
}

// Master files change not otherwise specified (for backwards comp.)
type MFN_M01 struct {
	HL7 HL7Name      `hl7:",name=MFN_M01,type=t"`
	MSH *MSH         `hl7:"1,required,display=Message Header"`
	MFI *MFI         `hl7:"2,required,display=Master File Identification"`
	Mf  []MFN_M01_Mf `hl7:",required,display=Mf"`
}

// Mfstaff
type MFN_M02_Mfstaff struct {
	HL7 HL7Name `hl7:",name=MFN_M02_Mfstaff,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	Zxx *Zxx    `hl7:"4,display=Any Z Segment"`
}

// Staff Practitioneer
type MFN_M02 struct {
	HL7     HL7Name           `hl7:",name=MFN_M02,type=t"`
	MSH     *MSH              `hl7:"1,required,display=Message Header"`
	MFI     *MFI              `hl7:"2,required,display=Master File Identification"`
	Mfstaff []MFN_M02_Mfstaff `hl7:",required,display=Mf_staff"`
}

// Mftest
type MFN_M03_Mftest struct {
	HL7 HL7Name `hl7:",name=MFN_M03_Mftest,type=tg"`
	MFE *MFE    `hl7:"3,required,display=Master File Entry"`
	Zxx *Zxx    `hl7:"4,display=Any Z Segment"`
}

// Test/Observation
type MFN_M03 struct {
	HL7    HL7Name          `hl7:",name=MFN_M03,type=t"`
	MSH    *MSH             `hl7:"1,required,display=Message Header"`
	MFI    *MFI             `hl7:"2,required,display=Master File Identification"`
	Mftest []MFN_M03_Mftest `hl7:",required,display=Mf_test"`
}

// Master files change not otherwise specified (for backwards comp.)
type MFQ_M01 struct {
	HL7 HL7Name `hl7:",name=MFQ_M01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Staff Practitioneer
type MFQ_M02 struct {
	HL7 HL7Name `hl7:",name=MFQ_M02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Test/Observation
type MFQ_M03 struct {
	HL7 HL7Name `hl7:",name=MFQ_M03,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Clockandstatswithnotes
type NMD_N01_Clockandstatswithnotes struct {
	HL7   HL7Name        `hl7:",name=NMD_N01_Clockandstatswithnotes,type=tg"`
	Clock *NMD_N01_Clock `hl7:",display=Clock"`
}

// Clock
type NMD_N01_Clock struct {
	HL7      HL7Name           `hl7:",name=NMD_N01_Clock,type=tg"`
	NCK      *NCK              `hl7:"2,required,display=System Clock"`
	NTE      []NTE             `hl7:"3,display=Notes And Comments"`
	Appstats *NMD_N01_Appstats `hl7:",display=App_stats"`
}

// Appstats
type NMD_N01_Appstats struct {
	HL7       HL7Name            `hl7:",name=NMD_N01_Appstats,type=tg"`
	NST       *NST               `hl7:"4,required,display=Statistics"`
	NTE       []NTE              `hl7:"5,display=Notes And Comments"`
	Appstatus *NMD_N01_Appstatus `hl7:",display=App_status"`
}

// Appstatus
type NMD_N01_Appstatus struct {
	HL7 HL7Name `hl7:",name=NMD_N01_Appstatus,type=tg"`
	NSC *NSC    `hl7:"6,required,display=Status Change"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Network Management Data
//
// One system creates an unsolicited update (UU) Network Management Data message (NMD) to transmit network management information
// to another system. In this case, the initiating system sends an NMD message as an unsolicited update (UU) containing network
// management information to a receiving system, which responds with a generic acknowledgement message (ACK).
type NMD_N01 struct {
	HL7                    HL7Name                          `hl7:",name=NMD_N01,type=t"`
	MSH                    *MSH                             `hl7:"1,required,display=Message Header"`
	Clockandstatswithnotes []NMD_N01_Clockandstatswithnotes `hl7:",required,display=Clock_and_stats_with_notes"`
}

// Qrywithdetail
type NMQ_N02_Qrywithdetail struct {
	HL7                HL7Name                      `hl7:",name=NMQ_N02_Qrywithdetail,type=tg"`
	QRD                *QRD                         `hl7:"2,required,display=Query Definition"`
	QRF                *QRF                         `hl7:"3,display=Query Filter"`
	Clockandstatistics []NMQ_N02_Clockandstatistics `hl7:",required,display=Clock_and_statistics"`
}

// Clockandstatistics
type NMQ_N02_Clockandstatistics struct {
	HL7 HL7Name `hl7:",name=NMQ_N02_Clockandstatistics,type=tg"`
	NCK *NCK    `hl7:"4,display=System Clock"`
	NST *NST    `hl7:"5,display=Statistics"`
	NSC *NSC    `hl7:"6,display=Status Change"`
}

// Network Management Query
//
// The NMQ (Network Management Query) message is used by one system to make system-level requests for information or action
// to another system. It has three segments, the NCK segment (network clock), the NST segment (network statistics), and the
// NSC segment (network status change). An example of the last type, NSC (network status change) would be an application or
// system startup/shut down request. At least one of these three segments must be present in the NMQ message. If a segment is
// present in the NMQ message, the corresponding segment needs to be present in the NMR message to return the requested data
// or status.
type NMQ_N02 struct {
	HL7           HL7Name                `hl7:",name=NMQ_N02,type=t"`
	MSH           *MSH                   `hl7:"1,required,display=Message Header"`
	Qrywithdetail *NMQ_N02_Qrywithdetail `hl7:",display=Qry_with_detail"`
}

// Response
type NMR_N02_Response struct {
	HL7  HL7Name `hl7:",name=NMR_N02_Response,type=tg"`
	NCK  *NCK    `hl7:"5,display=System Clock"`
	NTE  []NTE   `hl7:"6,display=Notes And Comments"`
	NST  *NST    `hl7:"7,display=Statistics"`
	NTE2 []NTE   `hl7:"8,display=Notes And Comments"`
	NSC  *NSC    `hl7:"9,display=Status Change"`
	NTE3 []NTE   `hl7:"10,display=Notes And Comments"`
}

// Network Management Response
//
// The NMQ/NMR (Network Management Query) message is used by one system to make system-level requests for information or
// action to another system. It has three segments, the NCK segment (network clock), the NST segment (network statistics),
// and the NSC segment (network status change). An example of the last type, NSC (network status change) would be an application
// or system startup/shut down request. At least one of these three segments must be present in the NMQ message. If a segment
// is present in the NMQ message, the corresponding segment needs to be present in the NMR message to return the requested data
// or status.
type NMR_N02 struct {
	HL7      HL7Name            `hl7:",name=NMR_N02,type=t"`
	MSH      *MSH               `hl7:"1,required,display=Message Header"`
	MSA      *MSA               `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR               `hl7:"3,display=Error"`
	QRD      *QRD               `hl7:"4,display=Query Definition"`
	Response []NMR_N02_Response `hl7:",required,display=Response"`
}

// Queryresponse
type ORF_R04_Queryresponse struct {
	HL7   HL7Name         `hl7:",name=ORF_R04_Queryresponse,type=tg"`
	QRD   *QRD            `hl7:"3,required,display=Query Definition"`
	QRF   *QRF            `hl7:"4,display=Query Filter"`
	PID   *PID            `hl7:"5,display=Patient Identification"`
	NTE   []NTE           `hl7:"6,display=Notes And Comments"`
	Order []ORF_R04_Order `hl7:",required,display=Order"`
}

// Order
type ORF_R04_Order struct {
	HL7         HL7Name               `hl7:",name=ORF_R04_Order,type=tg"`
	ORC         *ORC                  `hl7:"7,display=Commom Order"`
	OBR         *OBR                  `hl7:"8,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"9,display=Notes And Comments"`
	Observation []ORF_R04_Observation `hl7:",required,display=Observation"`
}

// Observation
type ORF_R04_Observation struct {
	HL7 HL7Name `hl7:",name=ORF_R04_Observation,type=tg"`
	OBX *OBX    `hl7:"10,display=Observation Result"`
	NTE []NTE   `hl7:"11,display=Notes And Comments"`
}

// Response to query; transmission of requested observation
type ORF_R04 struct {
	HL7           HL7Name                 `hl7:",name=ORF_R04,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	MSA           *MSA                    `hl7:"2,required,display=Message Acknowledgment"`
	Queryresponse []ORF_R04_Queryresponse `hl7:",required,display=Query_response"`
	DSC           *DSC                    `hl7:"12,display=Continuation Pointer"`
}

// Patient
type ORM_O01_Patient struct {
	HL7 HL7Name `hl7:",name=ORM_O01_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	NTE []NTE   `hl7:"4,display=Notes And Comments"`
	AL1 []AL1   `hl7:"5,display=Patient Allergy Information"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
}

// Order
type ORM_O01_Order struct {
	HL7         HL7Name              `hl7:",name=ORM_O01_Order,type=tg"`
	ORC         *ORC                 `hl7:"7,required,display=Commom Order"`
	Orderdetail *ORM_O01_Orderdetail `hl7:",display=Order_detail"`
	BLG         *BLG                 `hl7:"17,display=Billing"`
}

// Orderdetail
type ORM_O01_Orderdetail struct {
	HL7                HL7Name                     `hl7:",name=ORM_O01_Orderdetail,type=tg"`
	OrderDetailSegment *ORM_O01_OrderDetailSegment `hl7:",required,display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"14,display=Notes And Comments"`
	Observation        []ORM_O01_Observation       `hl7:",display=Observation"`
}

// OrderDetailSegment
type ORM_O01_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=ORM_O01_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"8,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"9,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"10,conditional,display=Requisition Detail 1"`
	RXO *RXO    `hl7:"11,conditional,display=Pharmacy Prescription Order"`
	ODS *ODS    `hl7:"12,conditional,display=Dietary Orders- Supplements- And Preferences"`
	ODT *ODT    `hl7:"13,conditional,display=Diet Tray Instruction"`
}

// Observation
type ORM_O01_Observation struct {
	HL7 HL7Name `hl7:",name=ORM_O01_Observation,type=tg"`
	OBX *OBX    `hl7:"15,required,display=Observation Result"`
	NTE []NTE   `hl7:"16,display=Notes And Comments"`
}

// Order Message
//
// The function of this message is to initiate the transmission of information about an order.  This includes placing new orders,
// cancellation of existing orders, discontinuation, holding, etc.  ORM messages can originate also with a placer, filler,
// or an interested third party.
type ORM_O01 struct {
	HL7     HL7Name          `hl7:",name=ORM_O01,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes And Comments"`
	Patient *ORM_O01_Patient `hl7:",display=Patient"`
	Order   []ORM_O01_Order  `hl7:",required,display=Order"`
}

// Patient
type ORR_O02_Patient struct {
	HL7   HL7Name         `hl7:",name=ORR_O02_Patient,type=tg"`
	PID   *PID            `hl7:"5,display=Patient Identification"`
	NTE   []NTE           `hl7:"6,display=Notes And Comments"`
	Order []ORR_O02_Order `hl7:",required,display=Order"`
}

// Order
type ORR_O02_Order struct {
	HL7         HL7Name              `hl7:",name=ORR_O02_Order,type=tg"`
	ORC         *ORC                 `hl7:"7,required,display=Commom Order"`
	Orderdetail *ORR_O02_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type ORR_O02_Orderdetail struct {
	HL7                HL7Name                     `hl7:",name=ORR_O02_Orderdetail,type=tg"`
	OrderDetailSegment *ORR_O02_OrderDetailSegment `hl7:",display=Order Detail Segment"`
	NTE                []NTE                       `hl7:"14,display=Notes And Comments"`
}

// OrderDetailSegment
type ORR_O02_OrderDetailSegment struct {
	HL7 HL7Name `hl7:",name=ORR_O02_OrderDetailSegment,type=tg"`
	OBR *OBR    `hl7:"8,conditional,display=Observation Request"`
	RQD *RQD    `hl7:"9,conditional,display=Requisition Detail"`
	RQ1 *RQ1    `hl7:"10,conditional,display=Requisition Detail 1"`
	RXO *RXO    `hl7:"11,conditional,display=Pharmacy Prescription Order"`
	ODS *ODS    `hl7:"12,conditional,display=Dietary Orders- Supplements- And Preferences"`
	ODT *ODT    `hl7:"13,conditional,display=Diet Tray Instruction"`
}

// Response Message
//
// The function of this message is to respond to an ORM message.  An ORR message is the application acknowledgement to an ORM
// message.  See Chapter 2 for a description of the acknowledgement paradigm.
type ORR_O02 struct {
	HL7     HL7Name          `hl7:",name=ORR_O02,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	MSA     *MSA             `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR             `hl7:"3,display=Error"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *ORR_O02_Patient `hl7:",display=Patient"`
}

// Patientresult
type ORU_R01_Patientresult struct {
	HL7              HL7Name                    `hl7:",name=ORU_R01_Patientresult,type=tg"`
	Patient          *ORU_R01_Patient           `hl7:",display=Patient"`
	Orderobservation []ORU_R01_Orderobservation `hl7:",required,display=Order_observation"`
}

// Patient
type ORU_R01_Patient struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Patient,type=tg"`
	PID *PID    `hl7:"2,required,display=Patient Identification"`
	NTE []NTE   `hl7:"3,display=Notes And Comments"`
	PV1 *PV1    `hl7:"4,display=Patient Visit"`
}

// Orderobservation
type ORU_R01_Orderobservation struct {
	HL7         HL7Name               `hl7:",name=ORU_R01_Orderobservation,type=tg"`
	ORC         *ORC                  `hl7:"5,display=Commom Order"`
	OBR         *OBR                  `hl7:"6,required,display=Observation Request"`
	NTE         []NTE                 `hl7:"7,display=Notes And Comments"`
	Observation []ORU_R01_Observation `hl7:",required,display=Observation"`
}

// Observation
type ORU_R01_Observation struct {
	HL7 HL7Name `hl7:",name=ORU_R01_Observation,type=tg"`
	OBX *OBX    `hl7:"8,display=Observation Result"`
	NTE []NTE   `hl7:"9,display=Notes And Comments"`
}

// Unsolicited Transmission Of Requested Information
//
// With the type (OBX) defined in this chapter, and the OBR defined in Chapter 4, one can construct almost any clinical report
// as a three-level hierarchy, with the PID segment defined in Chapter 3 at the upper level, an order record (OBR) at the next
// level and one or more observation records (OBX) at the "bottom."
type ORU_R01 struct {
	HL7           HL7Name                 `hl7:",name=ORU_R01,type=t"`
	MSH           *MSH                    `hl7:"1,required,display=Message Header"`
	Patientresult []ORU_R01_Patientresult `hl7:",required,display=Patient_result"`
	DSC           *DSC                    `hl7:"10,display=Continuation Pointer"`
}

// Patient Query
//
// The following triggering event is served by QRY (a query from another system) and ADR (a response from an ADT system.)
//
// Another application determines a need for ADT data about a patient and sends a query to the ADT system.  The Who Filter in the
// QRD can identify the patient or account number upon which the query is defined and can contain a Format Code of R (record oriented).
// If the query is based on Patient ID and there are data associated with multiple accounts, it is an implementation issue as
// to which account data should be returned.  The ADT Event Type Segment, if included in the response, describes the last event
// for which the ADT system initiated an unsolicited update
type QRY_A19 struct {
	HL7 HL7Name `hl7:",name=QRY_A19,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
}

// Generate bills and A/R statements
//
// For patient accounting systems that support demand billing, the QRY/DSP transaction defined in Chapter 2 will provide
// the mechanism to request a copy of the bill for printing or viewing by the requesting system.
type QRY_P04 struct {
	HL7 HL7Name `hl7:",name=QRY_P04,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// A Query is made for immediate Display Response
//
// When display data is involved, these trigger events are served by the Query (QRY) and Display Response (DSR) and General
// Acknowledgement (ACK) messages.  When the query is for record-oriented data, the QRY message is used, but the response
// message is specific to a functional area.  Record-oriented queries are described in other chapters.  Display-oriented
// queries are described here.
type QRY_Q01 struct {
	HL7 HL7Name `hl7:",name=QRY_Q01,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// A Query is Sent for Deferred Response
//
// For clarity, A is the system initiating the query and B is the system sending the responses.  Multiple queries and responses
// are permitted within single messages.  The responses to a given query may be broken into several separate DSR messages.
// A single DSR message may contain responses to more than one QRY
type QRY_Q02 struct {
	HL7 HL7Name `hl7:",name=QRY_Q02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy Prescription Order Query
//
// Query (QRY_Q26) / Response (ROR_ROR)
type QRY_Q26 struct {
	HL7 HL7Name `hl7:",name=QRY_Q26,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy Administration Information Query
//
// Query (QRY_Q27) / Response (RAR_RAR)
type QRY_Q27 struct {
	HL7 HL7Name `hl7:",name=QRY_Q27,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy Dispense Information Query
//
// Query (QRY_Q28) / Response (RDR_RDR)
type QRY_Q28 struct {
	HL7 HL7Name `hl7:",name=QRY_Q28,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy Encoded Order Information Query
//
// Query (QRY_Q29) / Response (RER_RER)
type QRY_Q29 struct {
	HL7 HL7Name `hl7:",name=QRY_Q29,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Pharmacy Dose Information Query
//
// Query (QRY_Q30) / Response (RGR_RGR)
type QRY_Q30 struct {
	HL7 HL7Name `hl7:",name=QRY_Q30,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Query for results of observation
type QRY_R02 struct {
	HL7 HL7Name `hl7:",name=QRY_R02,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	QRD *QRD    `hl7:"2,required,display=Query Definition"`
	QRF *QRF    `hl7:"3,required,display=Query Filter"`
	DSC *DSC    `hl7:"4,display=Continuation Pointer"`
}

// Definition
type RAR_RAR_Definition struct {
	HL7     HL7Name          `hl7:",name=RAR_RAR_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Query Definition"`
	QRF     *QRF             `hl7:"5,display=Query Filter"`
	Patient *RAR_RAR_Patient `hl7:",display=Patient"`
	Order   []RAR_RAR_Order  `hl7:",required,display=Order"`
}

// Patient
type RAR_RAR_Patient struct {
	HL7 HL7Name `hl7:",name=RAR_RAR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient Identification"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Order
type RAR_RAR_Order struct {
	HL7      HL7Name           `hl7:",name=RAR_RAR_Order,type=tg"`
	ORC      *ORC              `hl7:"8,required,display=Commom Order"`
	Encoding *RAR_RAR_Encoding `hl7:",display=Encoding"`
	RXA      []RXA             `hl7:"12,required,display=Pharmacy Aadministration"`
}

// Encoding
type RAR_RAR_Encoding struct {
	HL7 HL7Name `hl7:",name=RAR_RAR_Encoding,type=tg"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy Encoded Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy Component Order"`
}

// Pharmacy Administration Information Response
//
// Query (QRY_Q27) / Response (RAR_RAR)
type RAR_RAR struct {
	HL7        HL7Name              `hl7:",name=RAR_RAR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []RAR_RAR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"13,display=Continuation Pointer"`
}

// Patient
type RAS_O02_Patient struct {
	HL7 HL7Name `hl7:",name=RAS_O02_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	NTE []NTE   `hl7:"4,display=Notes And Comments"`
	AL1 []AL1   `hl7:"5,display=Patient Allergy Information"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
}

// Order
type RAS_O02_Order struct {
	HL7         HL7Name               `hl7:",name=RAS_O02_Order,type=tg"`
	ORC         *ORC                  `hl7:"7,required,display=Commom Order"`
	OrderDetail *RAS_O02_OrderDetail  `hl7:",display=Order Detail"`
	Encoding    *RAS_O02_Encoding     `hl7:",display=Encoding"`
	RXA         []RXA                 `hl7:"16,required,display=Pharmacy Aadministration"`
	RXR         *RXR                  `hl7:"17,required,display=Pharmacy Route"`
	Observation []RAS_O02_Observation `hl7:",display=Observation"`
}

// OrderDetail
type RAS_O02_OrderDetail struct {
	HL7                   HL7Name                        `hl7:",name=RAS_O02_OrderDetail,type=tg"`
	RXO                   *RXO                           `hl7:"8,required,display=Pharmacy Prescription Order"`
	OrderDetailSupplement *RAS_O02_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RAS_O02_OrderDetailSupplement struct {
	HL7        HL7Name             `hl7:",name=RAS_O02_OrderDetailSupplement,type=tg"`
	NTE        []NTE               `hl7:"9,required,display=Notes And Comments"`
	RXR        []RXR               `hl7:"10,required,display=Pharmacy Route"`
	Components *RAS_O02_Components `hl7:",display=Components"`
}

// Components
type RAS_O02_Components struct {
	HL7 HL7Name `hl7:",name=RAS_O02_Components,type=tg"`
	RXC []RXC   `hl7:"11,required,display=Pharmacy Component Order"`
	NTE []NTE   `hl7:"12,display=Notes And Comments"`
}

// Encoding
type RAS_O02_Encoding struct {
	HL7 HL7Name `hl7:",name=RAS_O02_Encoding,type=tg"`
	RXE *RXE    `hl7:"13,required,display=Pharmacy Encoded Order"`
	RXR []RXR   `hl7:"14,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"15,display=Pharmacy Component Order"`
}

// Observation
type RAS_O02_Observation struct {
	HL7 HL7Name `hl7:",name=RAS_O02_Observation,type=tg"`
	OBX *OBX    `hl7:"18,required,display=Observation Result"`
	NTE []NTE   `hl7:"19,display=Notes And Comments"`
}

// Pharmacy/treatment administration message
//
// The RAS message may be created by the administering application (e.g., nursing application) for each instance of administration
// for an existing order.  If the administering application wants to report several administrations of medication for a given
// order with a single RAS message, each instance is reported by a separate (repeating) RXA segment.  In addition, the administration
// records for a group of orders may be sent in a single message by creating repeating groups of segments at the ORC level.
type RAS_O02 struct {
	HL7     HL7Name          `hl7:",name=RAS_O02,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes And Comments"`
	Patient *RAS_O02_Patient `hl7:",display=Patient"`
	Order   []RAS_O02_Order  `hl7:",required,display=Order"`
}

// Patient
type RDE_O01_Patient struct {
	HL7 HL7Name `hl7:",name=RDE_O01_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	NTE []NTE   `hl7:"4,display=Notes And Comments"`
	AL1 []AL1   `hl7:"5,display=Patient Allergy Information"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
}

// Order
type RDE_O01_Order struct {
	HL7         HL7Name               `hl7:",name=RDE_O01_Order,type=tg"`
	ORC         *ORC                  `hl7:"7,required,display=Commom Order"`
	Orderdetail *RDE_O01_Orderdetail  `hl7:",display=Order_detail"`
	RXE         *RXE                  `hl7:"13,required,display=Pharmacy Encoded Order"`
	RXR         []RXR                 `hl7:"14,required,display=Pharmacy Route"`
	RXC         []RXC                 `hl7:"15,display=Pharmacy Component Order"`
	Observation []RDE_O01_Observation `hl7:",required,display=Observation"`
}

// Orderdetail
type RDE_O01_Orderdetail struct {
	HL7       HL7Name            `hl7:",name=RDE_O01_Orderdetail,type=tg"`
	RXO       *RXO               `hl7:"8,required,display=Pharmacy Prescription Order"`
	NTE       []NTE              `hl7:"9,display=Notes And Comments"`
	RXR       []RXR              `hl7:"10,required,display=Pharmacy Route"`
	Component *RDE_O01_Component `hl7:",display=Component"`
}

// Component
type RDE_O01_Component struct {
	HL7 HL7Name `hl7:",name=RDE_O01_Component,type=tg"`
	RXC []RXC   `hl7:"11,required,display=Pharmacy Component Order"`
	NTE []NTE   `hl7:"12,display=Notes And Comments"`
}

// Observation
type RDE_O01_Observation struct {
	HL7 HL7Name `hl7:",name=RDE_O01_Observation,type=tg"`
	OBX *OBX    `hl7:"16,display=Observation Result"`
	NTE []NTE   `hl7:"17,display=Notes And Comments"`
}

// Pharmacy/treatment encoded order message
//
// This message communicates the Pharmacy application's encoding of the pharmacy order (ORM message with RXO segment, see
// above).  It may be sent as an unsolicited message to report on either a single order or multiple pharmacy orders for a patient.
type RDE_O01 struct {
	HL7     HL7Name          `hl7:",name=RDE_O01,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes And Comments"`
	Patient *RDE_O01_Patient `hl7:",display=Patient"`
	Order   []RDE_O01_Order  `hl7:",required,display=Order"`
}

// Definition
type RDR_RDR_Definition struct {
	HL7     HL7Name          `hl7:",name=RDR_RDR_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Query Definition"`
	QRF     *QRF             `hl7:"5,display=Query Filter"`
	Patient *RDR_RDR_Patient `hl7:",display=Patient"`
	Order   []RDR_RDR_Order  `hl7:",required,display=Order"`
}

// Patient
type RDR_RDR_Patient struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient Identification"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Order
type RDR_RDR_Order struct {
	HL7      HL7Name            `hl7:",name=RDR_RDR_Order,type=tg"`
	ORC      *ORC               `hl7:"8,required,display=Commom Order"`
	Encoding *RDR_RDR_Encoding  `hl7:",display=Encoding"`
	Dispense []RDR_RDR_Dispense `hl7:",required,display=Dispense"`
}

// Encoding
type RDR_RDR_Encoding struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Encoding,type=tg"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy Encoded Order"`
	RXR *RXR    `hl7:"10,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy Component Order"`
}

// Dispense
type RDR_RDR_Dispense struct {
	HL7 HL7Name `hl7:",name=RDR_RDR_Dispense,type=tg"`
	RXD *RXD    `hl7:"12,required,display=Pharmacy Dispense"`
	RXR []RXR   `hl7:"13,required,display=Pharmacy Route"`
}

// Pharmacy Dispense Information Response
//
// Query (QRY_Q28) / Response (RDR_RDR)
type RDR_RDR struct {
	HL7        HL7Name              `hl7:",name=RDR_RDR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []RDR_RDR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"14,display=Continuation Pointer"`
}

// Patient
type RDS_O01_Patient struct {
	HL7 HL7Name `hl7:",name=RDS_O01_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	NTE []NTE   `hl7:"4,display=Notes And Comments"`
	AL1 []AL1   `hl7:"5,display=Patient Allergy Information"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
}

// Order
type RDS_O01_Order struct {
	HL7         HL7Name               `hl7:",name=RDS_O01_Order,type=tg"`
	ORC         *ORC                  `hl7:"7,required,display=Commom Order"`
	Orderdetail *RDS_O01_Orderdetail  `hl7:",display=Order_detail"`
	Encoding    *RDS_O01_Encoding     `hl7:",display=Encoding"`
	RXD         *RXD                  `hl7:"16,required,display=Pharmacy Dispense"`
	RXR         []RXR                 `hl7:"17,required,display=Pharmacy Route"`
	RXE         []RXE                 `hl7:"18,display=Pharmacy Encoded Order"`
	Observation []RDS_O01_Observation `hl7:",required,display=Observation"`
}

// Orderdetail
type RDS_O01_Orderdetail struct {
	HL7                   HL7Name                        `hl7:",name=RDS_O01_Orderdetail,type=tg"`
	RXO                   *RXO                           `hl7:"8,required,display=Pharmacy Prescription Order"`
	OrderDetailSupplement *RDS_O01_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RDS_O01_OrderDetailSupplement struct {
	HL7       HL7Name            `hl7:",name=RDS_O01_OrderDetailSupplement,type=tg"`
	NTE       []NTE              `hl7:"9,required,display=Notes And Comments"`
	RXR       []RXR              `hl7:"10,required,display=Pharmacy Route"`
	Component *RDS_O01_Component `hl7:",display=Component"`
}

// Component
type RDS_O01_Component struct {
	HL7 HL7Name `hl7:",name=RDS_O01_Component,type=tg"`
	RXC []RXC   `hl7:"11,required,display=Pharmacy Component Order"`
	NTE []NTE   `hl7:"12,display=Notes And Comments"`
}

// Encoding
type RDS_O01_Encoding struct {
	HL7 HL7Name `hl7:",name=RDS_O01_Encoding,type=tg"`
	RXE *RXE    `hl7:"13,required,display=Pharmacy Encoded Order"`
	RXR []RXR   `hl7:"14,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"15,display=Pharmacy Component Order"`
}

// Observation
type RDS_O01_Observation struct {
	HL7 HL7Name `hl7:",name=RDS_O01_Observation,type=tg"`
	OBX *OBX    `hl7:"19,display=Observation Result"`
	NTE []NTE   `hl7:"20,display=Notes And Comments"`
}

// Pharmacy/treatment dispense information
//
// The RDS message may be created by the Pharmacy application for each instance of dispensing drugs to fill an existing order
// or orders.  In the most common case, the RDS messages would be routed to a Nursing application or to some clinical application,
// which needs the data about drugs dispensed.  As a site-specific variant, the original order segments (RXO, RXE and their
// associated RXR/RXCs) may be sent optionally (for comparison).
type RDS_O01 struct {
	HL7     HL7Name          `hl7:",name=RDS_O01,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes And Comments"`
	Patient *RDS_O01_Patient `hl7:",display=Patient"`
	Order   []RDS_O01_Order  `hl7:",required,display=Order"`
}

// Definition
type RER_RER_Definition struct {
	HL7     HL7Name          `hl7:",name=RER_RER_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Query Definition"`
	QRF     *QRF             `hl7:"5,display=Query Filter"`
	Patient *RER_RER_Patient `hl7:",display=Patient"`
	Order   []RER_RER_Order  `hl7:",required,display=Order"`
}

// Patient
type RER_RER_Patient struct {
	HL7 HL7Name `hl7:",name=RER_RER_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient Identification"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Order
type RER_RER_Order struct {
	HL7 HL7Name `hl7:",name=RER_RER_Order,type=tg"`
	ORC *ORC    `hl7:"8,required,display=Commom Order"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy Encoded Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy Component Order"`
}

// Pharmacy Encoded Order Information Response
//
// Query (QRY_Q29) / Response (RER_RER)
type RER_RER struct {
	HL7        HL7Name              `hl7:",name=RER_RER,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []RER_RER_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"12,display=Continuation Pointer"`
}

// Definition
type RGR_RGR_Definition struct {
	HL7     HL7Name          `hl7:",name=RGR_RGR_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Query Definition"`
	QRF     *QRF             `hl7:"5,display=Query Filter"`
	Patient *RGR_RGR_Patient `hl7:",display=Patient"`
	Order   []RGR_RGR_Order  `hl7:",required,display=Order"`
}

// Patient
type RGR_RGR_Patient struct {
	HL7 HL7Name `hl7:",name=RGR_RGR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient Identification"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Order
type RGR_RGR_Order struct {
	HL7      HL7Name           `hl7:",name=RGR_RGR_Order,type=tg"`
	ORC      *ORC              `hl7:"8,required,display=Commom Order"`
	Encoding *RGR_RGR_Encoding `hl7:",display=Encoding"`
	RXG      []RXG             `hl7:"12,required,display=Pharmacy Give"`
	RXR      []RXR             `hl7:"13,required,display=Pharmacy Route"`
}

// Encoding
type RGR_RGR_Encoding struct {
	HL7 HL7Name `hl7:",name=RGR_RGR_Encoding,type=tg"`
	RXE *RXE    `hl7:"9,required,display=Pharmacy Encoded Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy Component Order"`
}

// Pharmacy dose information response
//
// Query (QRY_Q30) / Response (RGR_RGR)
type RGR_RGR struct {
	HL7        HL7Name              `hl7:",name=RGR_RGR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []RGR_RGR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"14,display=Continuation Pointer"`
}

// Patient
type RGV_O01_Patient struct {
	HL7 HL7Name `hl7:",name=RGV_O01_Patient,type=tg"`
	PID *PID    `hl7:"3,required,display=Patient Identification"`
	NTE []NTE   `hl7:"4,display=Notes And Comments"`
	AL1 []AL1   `hl7:"5,display=Patient Allergy Information"`
	PV1 *PV1    `hl7:"6,display=Patient Visit"`
}

// Order
type RGV_O01_Order struct {
	HL7         HL7Name              `hl7:",name=RGV_O01_Order,type=tg"`
	ORC         *ORC                 `hl7:"7,required,display=Commom Order"`
	Orderdetail *RGV_O01_Orderdetail `hl7:",display=Order_detail"`
	Encoding    *RGV_O01_Encoding    `hl7:",display=Encoding"`
	Give        *RGV_O01_Give        `hl7:",required,display=Give"`
}

// Orderdetail
type RGV_O01_Orderdetail struct {
	HL7                   HL7Name                        `hl7:",name=RGV_O01_Orderdetail,type=tg"`
	RXO                   *RXO                           `hl7:"8,required,display=Pharmacy Prescription Order"`
	OrderDetailSupplement *RGV_O01_OrderDetailSupplement `hl7:",display=Order Detail Supplement"`
}

// OrderDetailSupplement
type RGV_O01_OrderDetailSupplement struct {
	HL7       HL7Name            `hl7:",name=RGV_O01_OrderDetailSupplement,type=tg"`
	NTE       []NTE              `hl7:"9,required,display=Notes And Comments"`
	RXR       []RXR              `hl7:"10,required,display=Pharmacy Route"`
	Component *RGV_O01_Component `hl7:",display=Component"`
}

// Component
type RGV_O01_Component struct {
	HL7 HL7Name `hl7:",name=RGV_O01_Component,type=tg"`
	RXC []RXC   `hl7:"11,required,display=Pharmacy Component Order"`
	NTE []NTE   `hl7:"12,display=Notes And Comments"`
}

// Encoding
type RGV_O01_Encoding struct {
	HL7 HL7Name `hl7:",name=RGV_O01_Encoding,type=tg"`
	RXE *RXE    `hl7:"13,required,display=Pharmacy Encoded Order"`
	RXR []RXR   `hl7:"14,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"15,display=Pharmacy Component Order"`
}

// Give
type RGV_O01_Give struct {
	HL7         HL7Name              `hl7:",name=RGV_O01_Give,type=tg"`
	RXG         *RXG                 `hl7:"16,required,display=Pharmacy Give"`
	RXR         []RXR                `hl7:"17,required,display=Pharmacy Route"`
	RXC         []RXC                `hl7:"18,display=Pharmacy Component Order"`
	Observation *RGV_O01_Observation `hl7:",required,display=Observation"`
}

// Observation
type RGV_O01_Observation struct {
	HL7 HL7Name `hl7:",name=RGV_O01_Observation,type=tg"`
	OBX *OBX    `hl7:"19,display=Observation Result"`
	NTE []NTE   `hl7:"20,display=Notes And Comments"`
}

// Pharmacy/treatment give message
//
// The RGV message uses the RXG segment to record drug administration instructions.  It may carry information about a single
// scheduled administration on a drug, or it may carry information about multiple administrations of a drug
type RGV_O01 struct {
	HL7     HL7Name          `hl7:",name=RGV_O01,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	NTE     []NTE            `hl7:"2,display=Notes And Comments"`
	Patient *RGV_O01_Patient `hl7:",display=Patient"`
	Order   []RGV_O01_Order  `hl7:",required,display=Order"`
}

// Definition
type ROR_ROR_Definition struct {
	HL7     HL7Name          `hl7:",name=ROR_ROR_Definition,type=tg"`
	QRD     *QRD             `hl7:"4,required,display=Query Definition"`
	QRF     *QRF             `hl7:"5,display=Query Filter"`
	Patient *ROR_ROR_Patient `hl7:",display=Patient"`
	Order   []ROR_ROR_Order  `hl7:",required,display=Order"`
}

// Patient
type ROR_ROR_Patient struct {
	HL7 HL7Name `hl7:",name=ROR_ROR_Patient,type=tg"`
	PID *PID    `hl7:"6,required,display=Patient Identification"`
	NTE []NTE   `hl7:"7,display=Notes And Comments"`
}

// Order
type ROR_ROR_Order struct {
	HL7 HL7Name `hl7:",name=ROR_ROR_Order,type=tg"`
	ORC *ORC    `hl7:"8,required,display=Commom Order"`
	RXO *RXO    `hl7:"9,required,display=Pharmacy Prescription Order"`
	RXR []RXR   `hl7:"10,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"11,display=Pharmacy Component Order"`
}

// Pharmacy Prescription Order Response
//
// Query (QRY_Q26) / Response (ROR_ROR)
type ROR_ROR struct {
	HL7        HL7Name              `hl7:",name=ROR_ROR,type=t"`
	MSH        *MSH                 `hl7:"1,required,display=Message Header"`
	MSA        *MSA                 `hl7:"2,required,display=Message Acknowledgment"`
	ERR        *ERR                 `hl7:"3,display=Error"`
	Definition []ROR_ROR_Definition `hl7:",required,display=Definition"`
	DSC        *DSC                 `hl7:"12,display=Continuation Pointer"`
}

// Response
type RRA_O02_Response struct {
	HL7     HL7Name          `hl7:",name=RRA_O02_Response,type=tg"`
	Patient *RRA_O02_Patient `hl7:",display=Patient"`
	Order   []RRA_O02_Order  `hl7:",required,display=Order"`
}

// Patient
type RRA_O02_Patient struct {
	HL7 HL7Name `hl7:",name=RRA_O02_Patient,type=tg"`
	PID *PID    `hl7:"5,required,display=Patient Identification"`
	NTE []NTE   `hl7:"6,display=Notes And Comments"`
}

// Order
type RRA_O02_Order struct {
	HL7            HL7Name                  `hl7:",name=RRA_O02_Order,type=tg"`
	ORC            *ORC                     `hl7:"7,required,display=Commom Order"`
	Administration []RRA_O02_Administration `hl7:",display=Administration"`
}

// Administration
type RRA_O02_Administration struct {
	HL7 HL7Name `hl7:",name=RRA_O02_Administration,type=tg"`
	RXA []RXA   `hl7:"8,required,display=Pharmacy Aadministration"`
	RXR *RXR    `hl7:"9,required,display=Pharmacy Route"`
}

// Pharmacy/treatment administration acknowledgment message
//
// Response to a RAS_O02
type RRA_O02 struct {
	HL7      HL7Name           `hl7:",name=RRA_O02,type=t"`
	MSH      *MSH              `hl7:"1,required,display=Message Header"`
	MSA      *MSA              `hl7:"2,required,display=Message Acknowledgment"`
	ERR      *ERR              `hl7:"3,display=Error"`
	NTE      []NTE             `hl7:"4,display=Notes And Comments"`
	Response *RRA_O02_Response `hl7:",display=Response"`
}

// Patient
type RRD_O02_Patient struct {
	HL7   HL7Name         `hl7:",name=RRD_O02_Patient,type=tg"`
	PID   *PID            `hl7:"5,display=Patient Identification"`
	NTE   []NTE           `hl7:"6,display=Notes And Comments"`
	Order []RRD_O02_Order `hl7:",required,display=Order"`
}

// Order
type RRD_O02_Order struct {
	HL7         HL7Name              `hl7:",name=RRD_O02_Order,type=tg"`
	ORC         *ORC                 `hl7:"7,required,display=Commom Order"`
	Orderdetail *RRD_O02_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type RRD_O02_Orderdetail struct {
	HL7 HL7Name `hl7:",name=RRD_O02_Orderdetail,type=tg"`
	RXD *RXD    `hl7:"8,required,display=Pharmacy Dispense"`
	RXR []RXR   `hl7:"9,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"10,display=Pharmacy Component Order"`
}

// Pharmacy/treatment dispense acknowledgment message
//
// The RDS message may be created by the Pharmacy application for each instance of dispensing drugs to fill an existing order
// or orders.  In the most common case, the RDS messages would be routed to a Nursing application or to some clinical application,
// which needs the data about drugs dispensed.  As a site-specific variant, the original order segments (RXO, RXE and their
// associated RXR/RXCs) may be sent optionally (for comparison).
type RRD_O02 struct {
	HL7     HL7Name          `hl7:",name=RRD_O02,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	MSA     *MSA             `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR             `hl7:"3,display=Error"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RRD_O02_Patient `hl7:",display=Patient"`
}

// Patient
type RRE_O02_Patient struct {
	HL7   HL7Name         `hl7:",name=RRE_O02_Patient,type=tg"`
	PID   *PID            `hl7:"5,display=Patient Identification"`
	NTE   []NTE           `hl7:"6,display=Notes And Comments"`
	Order []RRE_O02_Order `hl7:",required,display=Order"`
}

// Order
type RRE_O02_Order struct {
	HL7         HL7Name              `hl7:",name=RRE_O02_Order,type=tg"`
	ORC         *ORC                 `hl7:"7,required,display=Commom Order"`
	Orderdetail *RRE_O02_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type RRE_O02_Orderdetail struct {
	HL7 HL7Name `hl7:",name=RRE_O02_Orderdetail,type=tg"`
	RXE *RXE    `hl7:"8,required,display=Pharmacy Encoded Order"`
	RXR []RXR   `hl7:"9,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"10,display=Pharmacy Component Order"`
}

// Pharmacy/treatment encoded order acknowledgment message
//
// This message communicates the Pharmacy application's encoding of the pharmacy order (ORM message with RXO segment, see
// above).  It may be sent as an unsolicited message to report on either a single order or multiple pharmacy orders for a patient.
//
//
type RRE_O02 struct {
	HL7     HL7Name          `hl7:",name=RRE_O02,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	MSA     *MSA             `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR             `hl7:"3,display=Error"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RRE_O02_Patient `hl7:",display=Patient"`
}

// Patient
type RRG_O02_Patient struct {
	HL7   HL7Name         `hl7:",name=RRG_O02_Patient,type=tg"`
	PID   *PID            `hl7:"5,display=Patient Identification"`
	NTE   []NTE           `hl7:"6,display=Notes And Comments"`
	Order []RRG_O02_Order `hl7:",required,display=Order"`
}

// Order
type RRG_O02_Order struct {
	HL7         HL7Name              `hl7:",name=RRG_O02_Order,type=tg"`
	ORC         *ORC                 `hl7:"7,required,display=Commom Order"`
	Orderdetail *RRG_O02_Orderdetail `hl7:",display=Order_detail"`
}

// Orderdetail
type RRG_O02_Orderdetail struct {
	HL7 HL7Name `hl7:",name=RRG_O02_Orderdetail,type=tg"`
	RXG *RXG    `hl7:"8,required,display=Pharmacy Give"`
	RXR []RXR   `hl7:"9,required,display=Pharmacy Route"`
	RXC []RXC   `hl7:"10,display=Pharmacy Component Order"`
}

// Pharmacy/treatment give acknowledgment message
//
// The RGV message uses the RXG segment to record drug administration instructions.  It may carry information about a single
// scheduled administration on a drug, or it may carry information about multiple administrations of a drug.
type RRG_O02 struct {
	HL7     HL7Name          `hl7:",name=RRG_O02,type=t"`
	MSH     *MSH             `hl7:"1,required,display=Message Header"`
	MSA     *MSA             `hl7:"2,required,display=Message Acknowledgment"`
	ERR     *ERR             `hl7:"3,display=Error"`
	NTE     []NTE            `hl7:"4,display=Notes And Comments"`
	Patient *RRG_O02_Patient `hl7:",display=Patient"`
}

// Unsolicited Display Update Message
//
// There is a simple HL7 message that allows for unsolicited display update messages to be sent in HL7 format from one system
// to another.
//
// Trigger events for the unsolicited update are generally the completion of a particular action (concerning a given patient).
type UDM_Q05 struct {
	HL7 HL7Name `hl7:",name=UDM_Q05,type=t"`
	MSH *MSH    `hl7:"1,required,display=Message Header"`
	URD *URD    `hl7:"2,required,display=Results/update Definition"`
	URS *URS    `hl7:"3,display=Unsolicited Selection"`
	DSP []DSP   `hl7:"4,required,display=Display Data"`
	DSC *DSC    `hl7:"5,required,display=Continuation Pointer"`
}
